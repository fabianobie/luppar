Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

RECONHECIMENTO AUTOMÁTICO DE PORTAS SERIAIS DE COMUNICAÇÃO NO WINDOWS
ILTON L. BARBACENA1, FELIPE P. XAVIER2, CLÁUDIO G. O. Q. LIMA, DANILLO F. E. G. MAIA4
Coordenação de Engenharia Elétrica, Grupo de Inovação da Paraíba  GYNPA
Instituto Federal de Educação, Ciência e Tecnologia da Paraíba  IFPB
CEP 58015-430, TEL 3208-3000, João Pessoa  PB, Brasil
E-mails iltonlb@gmail.com1, felipefpx@gmail.com2,
claudiogaleno1@gmail.com3,danilloestrela@hotmail.com4
Abstract  This work implements an alternative routine using Try  Catch block, available in several object-oriented programming languages, in order to recognize the serial communication ports automatically that are added by WINDOWS  operating
system when hardware devices are plugged into computer. Thus, the running application avoids the possible exception errors resulting from identification of the erroneous numbering of the ports since that it is only be established by identification of the
same operating system, after connecting the new hardware to the equipment. Its made using this methodology, with results in an
application where the interface controls a hardware device microcontrolled through the serial communication, using a graphical
interface, with automatic identification routine of the ports of communication built, developed in MATLAB  environment.
Keywords  MATLAB, Serial Port, Recognition of COM Ports, TryCatch, Exception handling.
Resumo  Este trabalho implementa uma rotina alternativa utilizando o bloco TryCatch, disponível em diversas linguagens de
programação orientada a objetos, com objetivo de reconhecer automaticamente as portas seriais de comunicação que são adicionadas pelo sistema operacional WINDOWS quando dispositivos de hardware são conectados ao computador. Desta forma, a
aplicação em execução evita os possíveis erros de exceção decorrentes da identificação da numeração errônea destas portas uma
vez que somente será estabelecida a identificação da mesma pelo sistema operacional, depois de se conectar o novo hardware ao
equipamento. É apresentado o uso desta metodologia, com resultados, em uma aplicação onde a interface controla um dispositivo
de hardware microcontrolado através da comunicação serial, utilizando-se uma interface_gráfica, com a rotina de identificação automática das portas de comunicação embutida, desenvolvida em ambiente MATLAB.
Palavras-chave  .

1

Introdução

Quando um programa de computador necessita de resultados de rotinas que por sua vez dependem de algum dispositivo físico ou do funcionamento direto de componentes de hardware, sempre
pode haver estouro de tempo ou falha do dispositivo.
Isto pode ocorrer na leitura da conversão de um sinal
ADC em uma placa de captura ou até mesmo de um
microfone, na leitura ou escrita de um bloco de dados em um setor do HD, no acesso a dados que chegam pela rede ou por uma porta de comunicação
serial, etc.
Este tipo de erro é conhecido como um erro
de exceção, uma vez que não estão previstos no código fonte, ou seja, não possuem nenhuma alternativa de bloco elseif, por exemplo, que evitem a interrupção da execução do programa. Outro exemplo de
uma exceção é o erro de atribuição impossível a um
objeto e divisão por zero. Se ocorrer um desses erros
e não for implementada uma rotina para fazer o tratamento de exceções, o programa terminará abruptamente ou poderá causar um travamento geral.
Umas das utilidades proporcionadas pela
orientação_a_objetos, presente na maioria das ferramentas de desenvolvimento de softwares (Java,
C++, MATLAB, Python, Delphi, Eiffel,
etc.) é a possibilidade de implementar o mecanismo
responsável pelo tratamento da ocorrência de condi-

ISBN 978-85-8001-069-5

ções que alteram o fluxo normal da execução de programas de computadores, conhecido como tratamento de exceções.
Em automação, em sistemas_de_controle em
rede e em sistemas_embarcados, é muito comum utilizar-se uma máquina ou computador para gerenciar
o processo de controle de um conjunto de dispositivos microcontrolados, estes, com função sensorial e
de atuação em cada ponto da rede.
Quando se conecta algum dispositivo na interface serial do computador, em ambiente Windows, automaticamente é reconhecido o dispositivo (se não, na primeira vez, é solicitado o driver correspondente) e atribuído um endereço correspondente ao dispositivo, que será responsável pela comunicação do computador com o dispositivo adicionado
através da interface serial. Se em rede, será reservado
um socket formado pelo IP da máquina, um protocolo e o número da porta do protocolo.
No código da interface é necessário conhecer exatamente qual é a numeração atribuída para a
porta COM, para fazer a comunicação do dispositivo
de maneira correta. Este trabalho apresenta uma rotina de tratamento de exceções com objetivo de identificar e atribuir a porta escolhida pelo sistema operacional Windows, de forma automática, para ser
utilizada na ferramenta de interface.
A implementação e os resultados foram obtidos durante o desenvolvimento de uma interface de
acionamento de dispositivos através de uma placa
com microcontrolador PIC-18F4550 conectada no

884

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

computador através de comunicação serial utilizando
um software desenvolvido em MATLAB.
2 Erros de Exceção
2.1 Tratamento de erros de exceção
Os erros de exceção estão associados s falhas de execução inesperadas ao programa, ou seja,
que não possuem nenhum tipo de rotina que permita
evitar o congelamento da execução do programa por
causas que podem estar relacionadas a diversas
ações, como por exemplo, uma conexão mal configurada ou um dado incompatível.
O tratamento de erros de exceção está associado  capacidade de fazer em um programa o tratamento de erros operacionais, que ocorrem não devido a falhas de lógica de programação, mas devido
ao próprio uso do programa pelos usuários ou muitas
vezes por operações internas da linguagem que precisam ser devidamente controladas (Manzano, 2011).
Á medida que os programas tornam-se mais
complexos e maiores cresce a necessidade de se preocupar com o tratamento de possíveis erros de exceções que venham ocorrer (Deitel, 2001).
2.2 TryCatch
Existem várias maneiras de fazer tratamento
de exceção, mas a principal que será abordada nesse
trabalho é a estrutura TryCatch que está disponível
em diversas linguagens de programação orientadas a
objetos.
A estrutura TryCatch, mesmo estando disponíveis em diversas linguagens de programação,
apresentam estruturas similares e funções idênticas.
Como exemplo, podemos tirar o uso do
TryCatch na linguagem Java, comentado abaixo por
(Manzano, 2011)
Para o tratamento de exceções na linguagem
Java, por exemplo, ela utiliza como comando de
tratamento a cláusula try (testar) que pode usar um
conjunto subsequente de exceções tratadas pela
cláusula catch (capturar). O trecho do código de
programa que necessita ser testado (para saber se é
valido) é definido após a instrução try e antes da
instrução catch como se fosse uma ação válida. Se
nenhum erro for constatado, o teste foi bem-sucedido
e o programa continua seu processamento normalmente após o final do bloco catch. No entanto, se
algum erro ocorrer na operação, o bloco catch é
então executado dando a possibilidade de fazer o
tratamento da exceção.
2.3 Bloco TryCatch em MATLAB
Em (Chapman, 2006) o bloco trycatch, é
descrito como se segue

ISBN 978-85-8001-069-5

A construção trycatch é uma construção de
ramificação especial para capturar erros. Normalmente, quando um programa MATLAB encontra
um erro durante a execução, o programa aborta. A
construção trycatch modifica esse comportamentopadrão. Se ocorrer um erro em uma declaração no
bloco try desta construção, em vez de abortar o programa executará o código dentro do bloco catch e
continuará a execução. Com isso, o programador
pode manipular erros dentro do programa sem provocar a parada do programa.
De maneira similar ao Java, o
MATLAB também permite o uso do bloco
TryCatch com sintaxe semelhante. Para implementar um bloco TryCatch em MATLAB, é necessário
apenas iniciar o bloco try, e os comandos que fizerem parte deste bloco serão verificados e executados,
caso não aja nenhum erro.
Abaixo do try, temos o bloco catch onde os
códigos que estiverem presentes nesse bloco só serão
executados caso seja encontrado algum erro na execução do bloco try, evitando então um possível erro
de exceção que poderia até mesmo forçar o fim da
execução do programa em questão.
3 Portas seriais (COM) e o Windows
Antes de falar sobre as portas COM, é importante citar o conceito de interrupções, uma descrição deste é apresentada abaixo segundo (Stallings,
2010)
As interrupções são fornecidas primeiramente
como um modo de melhorar a eficiência do processamento. Por exemplo, a maioria dos dispositivos
externos é muito mais lenta do que o processador.
Após cada operação de escrita, o processador deve
parar e permanecer ocioso até que o dispositivo o
alcance. A extensão dessa pausa pode estar na ordem de muitas centenas ou mesmo milhares de ciclos
de instrução que não envolvem memória. Claramente, esse é um grande desperdício de uso do processador.
As Solicitações de Interrupção (Interrupt Request ou "IRQs") são o modo que os dispositivos
utilizam para avisar ao processador que precisam de
atenção. Na época dos micros baseados no Z80
(TK90X, TK 82 e outros) a CPU ficava sempre consultando cada periférico para ver se havia algum dado a ser processado. Isso consumia um tempo precioso do processador e em determinados programas
precisava ser desabilitado pelos programadores com
o uso de instruções especiais para acelerar o processamento.
Dois dispositivos não devem usar a mesma
interrupção, pelo menos não ao mesmo tempo, isso
pode confundir o programa que espera pela interrupção. E um programa "confuso" geralmente trava o

885

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

computador. Quando dois dispositivos estão usando
o mesmo recurso (no caso, uma mesma interrupção),
dizemos que estão em conflito.
Das 16 interrupções disponíveis (que já são
poucas) existem algumas que são sempre utilizadas e
sobre cuja atribuição não tem escolha, conforme tabela 1
Tabela 1. Solicitações de Interrupção.

Interrupção
IRQ 0
IRQ 1
IRQ 2
IRQ 6
IRQ 8
IRQ 9
IRQ 13
IRQ 14

Descrição
Cronômetro do Sistema
Teclado (quando o buffer está cheio)
O próprio controlador de interrupções
Controladora de disco flexível
CMOS do sistemarelógio de tempo
real
Usada pelo sistema
Processador de dados numérico
Controlador primário de disco rígido

Obs Não é possível haver conflito nessas interrupções, porque os
"fios" correspondentes a elas não estão disponíveis no barramento.

3.1 Portas Seriais
Segundo (Vasconcelos, 2002)
As interfaces seriais são muito antigas, existem nos PCs desde o início dos anos 80. Sua principal característica é que podem transmitir ou receber
um bit de cada vez. As interfaces seriais existentes
nos PCs atuais podem operar com taxas de até
115.200 bits por segundo, o que é uma velocidade
bastante lenta. Mesmo sendo lenta, este tipo de interface é adequada para alguns dispositivos que não
necessitam de alta velocidade.
As portas seriais (COM) são um caso especial, pois, normalmente quando um programa procura por um dispositivo ele utiliza seu endereço absoluto, mas quando ele procura por uma porta COM ele
deve consultar antes uma tabela para saber qual é o
endereço atual da porta. No caso, COM é apenas
"apelido" para as posições na tabela onde se encontram os verdadeiros endereços. Os endereços padrões
para as portas COM são apresentados na Tabela 2
Tabela 2. Porta Com e seus endereços

Porta
COM1
COM2
COM3
COM4

End. Interrupção
3F8
2F8
3E8
2E8

No projeto original do computador, havia
duas portas de comunicação COM1 e COM2 e a elas
foram atribuídas as IRQs 4 e 3, respectivamente.
Mais tarde chegou-se  conclusão que mais duas
portas seriam úteis e então foram criadas as portas
COM3 e COM4. Mas não havia interrupções de so-

ISBN 978-85-8001-069-5

bra para atribuir a essas portas, por isso o projeto
prevê que as novas portas devem "dividir" interrupções com as portas originais. Por fim, até hoje são
utilizadas as seguintes divisões
 COM1 e COM3 dividem a IRQ4
 COM2 e COM4 dividem a IRQ3
Em teoria, você pode perfeitamente utilizar
as 4 portas ao mesmo tempo, desde que as 4 portas
não precisem usar as interrupções, ao mesmo tempo.
Como regra geral para evitar problemas, se você utilizar a COM1, não deve utilizar COM3, o mesmo
vale entre a COM2 e a COM4 que não devem ser
utilizadas simultaneamente.
Quando o computador é inicializado, o programa armazenado na BIOS procura em sequência
pela existência de portas nos endereços padrão. A
cada porta encontrada é atribuído um apelido, também em sequência.
Essa atribuição sequencial de apelidos gera
um problema Se você optar, por exemplo, por instalar um dispositivo cujo endereço, tecnicamente, seria
atribuído a COM4, essa placa vai receber um apelido que dependerá das portas já instaladas no sistema. Se não existir uma porta COM2, a BIOS vai atribuir o apelido COM2 ao dispositivo em questão. Os
endereços devem ser utilizados de maneira sequencial.
3.2 Plug-and-Play
Segundo (Shanley, 1995)
Drivers de dispositivos Plug and play devem suportar os seguintes recursos
 No caso de um dispositivo ser adicionado
ou removido durante seu tempo de execução, o driver deve ser capaz de carrega-lo ou descarrega-lo
da memória através do gerenciador de configuração.
 O driver deve ser capaz de trabalhar com
seu dispositivo associado independentemente de qual
sistema bus ele estiver. Em outras palavras, o mesmo
driver deve trabalhar com o dispositivo se ele estiver
no processador, PCI, EISA, MCA, ISA bus ou instalado em um slot PCMCIA . A Microsoft refere-se a
isso como um drive classe, porque trabalha com
uma classe de dispositivos, em vez de uma implementação especifica do mesmo.
 O driver deve ser capaz de trocar mensagens com o SO(Sistema Operacional) e as aplicações
dos programas se seu dispositivo associado está
instalado ou removido enquanto a máquina estiver
em execução(então as aplicações dos programas que
requerem a presença do dispositivo são avisados de
sua presença ou ausência).
A especificação Plug-and-Play (PnP), que
significa "encaixe e use", teve como proposta de
acabar com as dores de cabeça decorrente de conflitos de interrupção no computador. Segundo a especi-

886

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

ficação, o computador pode se comunicar com os
dispositivos, saber dos recursos que necessitam e
configurá-los automaticamente para que não entrem
em conflito uns com os outros.
Isso parece muito bom  primeira vista, mas
não é nada fácil ser implementado. É necessário saber que para ter um sistema verdadeiramente PnP
deve-se cumprir três condições
1. O sistema Operacional precisa ser compatível
2. A BIOS da placa-mãe deve ser compatível
3. Todas os dispositivos que você utiliza no computador precisam ser PnP.
Se as condições 1 e 2 não forem satisfeitas,
não adianta fazer uso de dispositivos PnP que isso
não irá ajudar. O usuário ainda irá precisar escolher
os endereços e interrupções para evitar conflitos de
maneira manual. Talvez ele não precise ficar alterando jumpers nos dispositivos, mas será necessário
utilizar softwares que acompanham estes dispositivos.
4 Reconhecimento de portas serial COM de forma automática utilizando ambiente MATLAB
4.1 Descrição da Rotina
A proposta inicial dessa rotina era resolver
um problema identificado durante o desenvolvimento
de uma aplicação MATLAB para controle de componentes presentes em um kit_didático de microcontroladores utilizando comunicação serial, onde este
ao ser conectado em um computador com Windows recebia um endereço de porta de comunicação serial (Porta COM) automaticamente. Ao iniciar
a aplicação em desenvolvimento, por padrão a porta
utilizada era a COM1, porém, certo dia o kit_didático
foi reconhecido como COM9 (este era utilizado fazendo uso de um adaptador USB-to-Serial) dando
origem então a um erro de execução da aplicação no
MATLAB.
Com isso passou-se a buscar uma forma de
solucionar esse problema. Optou-se, então fazer uso
do bloco trycatch para fazer uma busca a todas as
portas de comunicação serial (Portas COM) existentes no computador na ferramenta de interface, em
tempo de execução.
4.2 Funcionalidades da Rotina
Ao iniciar a aplicação, o usuário se depara
com uma tela que pergunta se ele quer fazer uso da
rotina de localização automática das portas de comunicação serial ou se ele deseja configurar manualmente qual porta COM ele deseja utilizar. Caso o
usuário escolha configurar manualmente, a aplicação
solicita apenas o número k referente ao endereço

ISBN 978-85-8001-069-5

COMk, configurando então a porta_serial a ser utilizada pela aplicação.
Ao selecionar o reconhecimento automático,
a rotina é iniciada, funcionando da seguinte forma
em um bloco for é feito um teste com as portas
COM1  COM10 onde este consiste em configurar os
parâmetros para cada porta tentando abrir a comunicação com a mesma logo em seguida, utilizando a
função fopen do MATLAB. No trecho de código
que se segue é apresentada a rotina.
function trySer()
loadVars  variáveis públicas do sistema
l  1
for k  110
COMTXT  strcat(COM,int2str(k))
try
delete(instrfind)
 limpa objetos COM
SerPIC  serial(COMTXT)
set(SerPIC,BaudRate,serBaudRate)
set(SerPIC,DataBits,8)
set(SerPIC,Parity,none)
set(SerPIC,StopBits,1)
set(SerPIC,FlowControl,none)
fopen(SerPIC)
 tenta abrir a serial
portSer(l)  k  Array que armazena os números
 das portas COM disponíveis
l  l + 1
catch
end
 try
end
 for
l  l - 1
if l  0
fprintf(Não foram localizadas portas COM).n)
else if l  1
serPort  strcat(COM,int2str(portSer(1)))
fprintf(Configurada a porta de comunicação COMi.n,portSer(1))
serInit
valuePortDefault  portSer(1)
serPortDefault  serPort
else
fprintf(Foram localizadas i portas COM. São elasn,l)
for k  1l
fprintf( COMi,portSer(k))
end
portainput(nQual o número da COM que você deseja usarn)
serPort  strcat(COM,int2str(porta))
serInit
valuePortDefault  porta
serPortDefault  serPort
end
 if l  0
end

Caso o programa não apresente erro ao executar os comandos contidos no bloco try, o número k
referente  porta de comunicação em questão é armazenado em uma coluna de uma matriz de uma linha.
Se a rotina encontrar mais de uma porta
COM disponível no computador, ela irá perguntar ao
usuário qual porta COM ele deseja utilizar. Se o programa não detectar nenhuma porta COM disponível,
o usuário receberá a recomendação de verificar se as
portas de comunicação serial (Portas COM) estão
sendo utilizadas por outra aplicação ou se o equipamento possui algum problema na comunicação com
o novo dispositivo em uso.
4.2 Resultados obtidos pela utilização da rotina

887

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

A interface utilizada para testar a rotina de
reconhecimento automático de portas seriais de comunicação faz parte de um projeto de iniciação tecnológica do CNPq, que utiliza uma interface_gráfica
desenvolvida utilizando códigos da linguagem orientada a objetos MATLAB para controlar diversos
componentes de um kit_didático microcontrolado. Na
figura 1 encontra-se ilustrada a tela principal da interface.
O kit_didático faz uso do microcontrolador
PIC 18F4550, que faz uso de um firmware desenvolvido em Linguagem C, para diversos controles, e
que se comunica com o computador através de um
adaptador USB-serial, utilizando uma interface desenvolvida em ambiente MATLAB.

guardando o número referente a cada porta COM
disponível no computador.
Ao final dos testes, se houver apenas uma
porta COM, o programa automaticamente configura
a porta encontrada para a aplicação, se houverem
várias portas encontradas o programa exibe uma
mensagem exibindo todas as portas COM encontradas para o usuário escolher qual ele deseja fazer uso,
conforme o texto a seguir
Inicializando

componentes...

Deseja localizar a porta_serial utilizada automaticamente? (Digite 1 para sim e 0 para não)
1
Localizando Porta Serial...
As seguintes portas de comunicação serial (Portas
COM) foram localizadas
COM1 COM2 COM3
Digite o número da COM que você deseja utilizar

Figura 1. Tela inicial da aplicação em desenvolvimento.

Para realizar os testes da rotina, utilizamos
um adaptador USB-to-Serial, pois, o notebook utilizado não possui portas seriais físicas. A rotina também foi testada também em computadores que possuem portas seriais físicas, e o resultado obtido foi o
mesmo.
Ao conectar o kit_didático de microcontroladores ao computador, o Windows automaticamente
identifica um novo dispositivo conectado a suposta
porta_serial do adaptador USB-to-Serial, atribuindo
então um endereço no formato COMk, onde k representa um número inteiro.
Na aplicação foi implementado a rotina appInit que inicializa o software a qualquer momento
pelo usuário para atualização das portas seriais. No
código da appInit é solicitado ao usuário se o mesmo
deseja a localização e configuração automática de
porta_serial, ou se configuração manual, texto a seguir

Após configurar a porta_serial, se não existir
nenhum impedimento no uso da porta_serial de comunicação selecionada, a tela inicial da aplicação é
exibida e o usuário pode fazer uso normalmente da
mesma. Se existir algum erro ao configurar a porta
serial utilizada, o usuário é notificado para verificar
se a porta COM escolhida está sendo utilizada por
outra aplicação ou se existe algum problema na comunicação.

Figura 2. Tela de configuração da aplicação de controle do kit
didático, que está sendo desenvolvida.

Inicializando componentes...
Deseja localizar a porta_serial utilizada automaticamente? (Digite 1 para sim e 0 para não)
Ao selecionar o uso da rotina de reconhecimento automático de porta_serial, o usuário se depara
então com o aviso Localizando porta_serial..., onde
a rotina inicia os testes desde a COM1 até a COM10

ISBN 978-85-8001-069-5

888

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Figura 3. Tela de configuração da aplicação de controle do kit
didático, que está sendo desenvolvida.

Na aba de opções da interface do aplicativo,
é permitido ao usuário alterar a porta configurada
COM configurada para comunicação com o kit_didático plugado na porta, conforme exibidos nas figuras
2 e 3.
Na hipótese do usuário alterar a porta COM
na aba de opções da interface_gráfica e selecionar
uma porta não existente ou ocupada, a aplicação
apenas reabre a tela de configuração exibindo a porta
serial default que foi configurada na inicialização da
aplicação, com uso da rotina de localização automática ou configuração manual do usuário.
4 Conclusão
Os erros de exceção acontecem com muita
frequência nos sistemas atuais, e quando não tratados
causam instabilidade no sistema.
A implementação desta rotina de reconhecimento automático de portas seriais mostrou-se eficaz e automatizou o processo de comunicação com
equipamentos microcontrolados. O uso dessa rotina
pode se dar em diversas aplicações de várias linguagens de programação que também possuem a estrutura TryCatch ou similares, sendo necessária apenas a
adaptação do programa conforme a sintaxe da ferramenta em uso.

Instituto Federal de Educação, Ciência e Tecnologia
da Paraíba (IFPB) e ao CNPq, pelo apoio financeiro.
Referências Bibliográficas
Manzano, José Augusto N. G. (2011) - Java 7
Programação de computadores guia prático de
introdução, orientação e desenvolvimento 
1.ed. São Paulo Érica, 2011.
Deitel, H. M. Deitel, P. J. (2001) - Java Como
programar. 3.ed. Porto Alegre Bookman, 2001.
Chapman, S. J. (2006)Programação em MATLAB
para engenheiros. São Paulo Thomson, 2006.
Stallings, Willian (2010) - Arquitetura e organização
de computadores, 8. ed. São Paulo Pearson
Pratice Hall, 2010.
Vasconcelos, Laercio (2002)  Hardware Total  1.
ed. São Paulo. Makron Books, 2002.
Shanley,Tom (1995) - PLUG and PLAY SYSTEM
ARCHITECTURE  1. ed. Estados Unidos da
América. MindShare, 1995.

5 Marcas Registradas
Windows é marca registrada de Microsoft Corporation Java é marca registrada de
Sun Microsystems Inc. PIC é marca registrada de Microchip MATLAB é marca registrada
de MathWorks C++ foi desenvolvido originalmente pela Bell Labs Phyton é marca registrada de Python Software Foundation Delphi é
marca registrada de Delphi Automotive LLP Eiffel
é marca registrada de Eiffel Software Z80 é
marca registrada de ZilogTodos os demais nomes,
marcas registradas, propriedades ou direitos de uso
citados neste artigo pertencem aos seus devidos proprietários e foram utilizados neste trabalho apenas
com contexto didático, não existindo relação comercial entre este artigo e seus devidos autores com os
fabricantes e desenvolvedores dos produtos citados
Agradecimentos
Os autores agradecem a todos que contribuíram como desenvolvimento do trabalho. Em particular, os autores deste trabalho agradecem aos membros Grupo de Inovação da Paraíba (GYNPA), pelo
espaço oferecido para a realização dos trabalhos, ao

ISBN 978-85-8001-069-5

889