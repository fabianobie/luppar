Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

LOCALIZACAO DE ROBOS UTILIZANDO INTELIGENCIA DE ENXAME
Alan Oliveira de Sa, Nadia Nedjah, Luiza de Macedo Mourelle, Leandro dos Santos
Coelho


Centro de Eletronica, Comunicacoes e Tecnologia da Informacao
Centro de Instrucao Almirante Wandenkolk, Marinha do Brasil


Departamento de Engenharia Eletronica e Telecomunicacoes


Departamento de Engenharia de Sistemas e Computacao
Faculdade de Engenharia, Universidade do Estado do Rio de Janeiro


Programa de Pos-Graduacao em Engenharia de Producao e Sistemas (PPGEPS), Pontifcia
Universidade Catolica do Parana
Programa de Pos-Graduacao em Engenharia Eletrica (PPGEE), Universidade Federal do Parana
Emails alan.oliveira.sa@gmail.com, nadia@eng.uerj.br, ldmm@eng.uerj.br,
leandro.coelho@pucpr.br
Abstract The localization problem arises from the need of the agents of a Wireless Sensor Network (WSN)
in general, and of a swarm of robots in particular, to determine its position without the use of external references,
such as the Global Positioning System (GPS). In this problem, the localization is computed based on distance
measurements to anchor nodes, which have known positions. In the search for efficient and accurate algorithms
to discover the location, some bio-inspired algorithms have been explored, such as Genetic Algorithm (GA) and
Particle Swarm Optimization Algorithm (PSO). Accordingly, in order to obtain more accurate solutions to the
localization problem, this paper presents and compares the results obtained with the PSO, with the Backtracking
Search Optimization Algorithm (BSA) and with a new algorithm that combines characteristics of both, entitled
Backtracking Cognitive Particle Swarm Optimization Algorithm (BC-PSO). The results show that the BSA is
more robust with regard to changes in the nodes distribution, the PSO demands less processing time and the
BC-PSO, under specific conditions, is the most accurate.
Keywords Particle Swarm Optimization (PSO), Backtracking Search Optimization Algorithm (BSA),
swarm intelligence, swarm_robotics, Wireless Sensor Network (WSN), localization.
Resumo O problema de localizacao surge da necessidade dos agentes de uma rede_de_sensores sem fio
em geral, e de um enxame_de_robos em particular, de determinar as suas posicoes sem o uso de referencias
externas, tal como o Sistema de Posicionamento Global ou GPS (Global Positioning System). Neste problema,
a localizacao e realizada baseando-se em medidas de distancia para nos de referencia, os quais tem suas posicoes
conhecidas. Na busca por algoritmos eficientes e precisos para descobrir a localizacao, alguns algoritmos bioinspirados vem sendo explorados, tais como o Algoritmo Genetico ou GA (Genetic Algorithm) e o algoritmo de
Otimizacao por Enxame de Partculas ou PSO (Particle Swarm Optimization). Nesse sentido, visando solucoes
mais precisas para o problema de localizacao, este artigo apresenta e compara os resultados alcancados com o
PSO, com o Algoritmo de Busca por Retrocesso ou BSA (Backtracking Search Optimization Algorithm) e com
um novo algoritmo que combina caractersticas de ambos, denominado algoritmo de Otimizacao por Enxame
de Partculas com Retroacao Cognitiva ou BC-PSO (Backtracking Cognitive Particle Swarm Optimization). Os
resultados mostram que o BSA e mais robusto no que diz respeito as variacoes na distribuicao dos nos, o PSO
demanda menos tempo de processamento e o BC-PSO, em condicoes especficas, e o mais preciso.
Palavras-chave .

1

Introducao

ractersticas comuns aos dispositivos, sejam eles
robos ou sensores. A solucao mais evidente, que
consiste em equipar cada elemento com um Sistema de Posicionamento Global ou GPS(Global
Positioning System), torna-se muitas vezes inviavel.

Diversas das possveis aplicacoes de um enxame de
robos demandam que cada indivduo seja capaz de
descobrir sua posicao, seja ela absoluta, em funcao
de um sistema de referencia universal, ou relativa,
em relacao a outros indivduos, com base em um
sistema de coordenadas local. Da mesma forma,
as redes_de_sensores sem fio, cujas perspectivas de
aplicacao sao amplas e tem atrado grande atencao
da industria, na maioria dos casos possuem pouca
utilidade quando nao e possvel dispor da posicao
de seus sensores (Sun, 2011).
Em ambos os casos, o tamanho reduzido, a
limitada fonte de energia e o baixo_custo sao ca-

O problema de localizacao consiste em inferir a posicao de um conjunto de robos ou sensores
em situacoes onde nao e possvel utilizar referencias externas, como o GPS. Muitos dos algoritmos de localizacao dependem da capacidade do
no (robo ou sensor) de medir sua distancia para
os nos de referencia, cujas posicoes sao conhecidas.
Algumas das tecnicas mais comuns para a medicao
de distancia baseiam-se na potencia do sinal rece-

9

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

bido, no tempo de propagacao de um sinal, eou
na comparacao do tempo de propagacao de dois
sinais com velocidades_de_propagacao diferentes
(Ekberg, 2009) (Mao et al., 2007) (Lymberopoulos
et al., 2006).
Uma vez que as tecnicas de medicao apresentadas dependem da propagacao de sinais, ha de
se considerar uma distancia limite para tais medicoes. Nos casos mais simples, onde todos os nos de
referencia estao dentro da distancia limite de medicao, as medidas sao diretas e feitas em um unico
salto. Entretanto, nos casos em que um ou mais
nos de referencia estao fora da distancia limite, as
medidas sao obtidas indiretamente em multiplos
saltos, por meio de algoritmos como Sum-dist ou
DV-hop (Langendoen, 2005). Dependendo da topologia da rede, ou enxame, os casos de um e de
multiplos saltos podem coexistir.
Em (Langendoen, 2005), os autores propoem
tres fases para a abordagem do problema com
multiplos saltos

na Secao 8, sao apresentadas as conclusoes, juntamente com algumas possibilidades de trabalhos
futuros.
2

Trabalhos Relacionados

A importancia da informacao de localizacao dos
elementos de uma rede_de_sensores, ou enxame de
robos, e as limitacoes de hardware e energia, tpicas destes dispositivos, tem motivado a busca por
algoritmos de localizacao cada vez mais eficientes
e precisos.
Em (Sun, 2011), os autores reportam o uso de
algoritmos_geneticos para a solucao do problema
de localizacao em uma rede_de_sensores, sem obstaculos e sem rudo.
Uma outra abordagem ao problema de localizacao e relatada em (Huanxiang et al., 2010),
onde os autores propoem o uso de nos de referencia moveis e um algoritmo baseado em algoritmos_geneticos para estabelecer a localizacao de
nos desconhecidos estaticos. Este metodo, entretanto, pode apresentar desvantagens em redes com
grande area de cobertura, devido ao elevado gasto
de energia na movimentacao dos nos de referencia.
Em (Ekberg, 2009), o autor apresenta o algoritmo de localizacao por inteligencia_de_enxame
ou SIL (Swarm-Intelligent Localization), baseado
no PSO, para a solucao do problema de localizacao em uma rede_de_sensores estaticos, de duas ou
tres dimensoes, com medidas de distancia para os
nos de referencia feitas em multiplos saltos. Em
(Ekberg, 2011), e demonstrada a capacidade do
SIL em resolver o problema de localizacao em redes_de_sensores moveis.
Nesse contexto, este trabalho visa contribuir
com a busca por algoritmos mais eficientes e mais
precisos para o problema de localizacao, por meio
da avaliacao e da comparacao do desempenho do
PSO, BSA e de um algoritmo proposto, que combina as caractersticas de ambos.

1. Estimar as distancias de cada no para os nos
de referencia.
2. Calcular a posicao de cada no a partir das
distancias medidas na fase 1.
3. Refinar a posicao de cada no a partir das
informacoes de posicao e distancia dos nos
vizinhos.
A otimizacao por tecnicas bio-inspiradas vem
sendo aplicada ao problema de localizacao, tanto
nos casos de um unico salto, quanto nos casos de
multiplos saltos (Sun, 2011) (Ekberg, 2009). Este
trabalho visa comparar o desempenho e a precisao do algoritmo_de_otimizacao por enxame de
partculas ou PSO (Particle Swarm Optimization)
(Engelbrecht, 2005), do algoritmo_de_busca_por_retrocesso ou BSA (Backtracking Search Optimization Algorithm) (Civicioglu, 2013a) e de um novo
algoritmo que combina caractersticas de ambos,
denominado algoritmo_de_otimizacao por enxame
de partculas com retroacao cognitiva ou BC-PSO
(Backtracking Cognitive Particle Swarm Optimization), na solucao de problemas de localizacao.
Nos tres casos, as distancias medidas sao de um
unico salto.
Para tal, o presente artigo e organizado da
seguinte forma Primeiramente, na Secao 2, sao
apresentados alguns trabalhos relacionados. Posteriormente, na Secao 3, e especificado o problema
de localizacao. Nas Secoes 4 e 5, sao brevemente
descritos os passos do PSO e BSA, respectivamente. Na Secao 6, e proposto o algoritmo BCPSO, que combina as caractersticas do PSO com
o BSA, visando obter maior precisao na solucao do
problema de localizacao. Em seguida, na Secao 7,
sao reportados os resultados obtidos. Finalmente,

3

Especificacao do Problema

A formulacao dada ao problema de localizacao
pode ser aplicada a problemas com duas ou tres
dimensoes. Sendo assim, para simplificar a analise, adotou-se caso de duas dimensoes. Como premissa, o problema e considerado como sendo de
um unico salto, ou seja, todos os nos desconhecidos sao capazes de medir a distancia para os nos
de referencia, de forma direta. Neste cenario nao
foram considerados erros nas medidas de distancia.
Para estabelecer a funcao de aptidao, e preciso
considerar que, para um dado no desconhecido, o
quadrado do erro em distancia para cada no de referencia e definido conforme (1), onde, dr e pr sao
a distancia medida e posicao do no de referencia

10

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

Algoritmo 1 Algoritmo PSO
incio
Inicia o enxame com x e v aleatorias
Avalia o enxame
Armazena mi e mg 
repita
Atualiza velocidades, conforme
(4) e (5)
Atualiza posicoes, conforme (3)
Avalia o enxame
Atualiza mi e mg , caso melhores
posicoes tenham sido
encontradas
ate Condicao de parada
retorna mg 

r, respectivamente, e xi e a posicao estimada para
o no desconhecido i.
g(xi , dr , pr )  (dr  pr  xi )2

(1)

Dessa forma, a funcao de aptidao para a posicao de um no desconhecido e obtida pela soma
do quadrado dos erros de distancia para cada no
de referencia, conforme apresentado em (2), onde
R e o numero de nos de referencia.
f (xi , dr , pr ) 

R
X

g(xi , dr , pr )

(2)

r1

Sendo assim, para encontrar a posicao de um
no e preciso minimizar a funcao definida em (2).
Neste cenario, onde nao ha erros de medida de
distancia, o valor mnimo de f (xi , dr , pr ) e 0.
4

fim
5

Otimizacao por Enxame de Partculas

O BSA e um novo algoritmo evolucionario
(Civicioglu, 2013a), que utiliza informacoes obtidas por geracoes passadas para buscar solucoes de
melhor aptidao. A filosofia bio-inspirada do BSA e
analoga a um grupo social de seres vivos que, em
intervalos aleatorios, retornam as zonas de caca
que foram previamente consideradas boas para a
busca de alimentos. A estrutura geral do BSA e
apresentada no Algoritmo 2.

O PSO tem origem na simulacao de modelos sociais simplificados, como, por exemplo, a movimentacao de cardumes de peixes ou bandos de aves
(Kennedy, 1995) (Shi, 1998), sendo o termo partcula utilizado para generalizar o indivduo. Nesta
analogia, uma partcula representa uma possvel
solucao para um problema. O enxame, por sua
vez, representa um conjunto de possveis solucoes.
A cada ciclo iterativo a posicao de cada partcula e
atualizada conforme (3), onde xi e vi sao a posicao
e a velocidade da partcula i, respectivamente.
xi (t + 1)  xi (t) + vi (t + 1)

Algoritmo 2 BSA
incio
Inicializacao
repita
Selecao-I
Gera nova populacao
Mutacao
Cruzamento
fim
Selecao-II
ate Condicao de parada
fim

(3)

Apos atualizar a posicao das partculas, e feita
a avaliacao das suas aptidoes.
O vetor de velocidade vi de cada partcula e
calculado pela soma de tres componentes uma
componente de inercia do movimento, uma componente cognitiva, baseada na melhor solucao obtida pela partcula, e uma componente social, baseada na melhor solucao global encontrada pelo
enxame. O calculo de vi e feito conforme (4),
onde w e uma constante que representa a inercia
da partcula, 1 e 1 sao constantes que atribuem
pesos as componentes social e cognitiva, respectivamente, r1 e r2 sao numeros aleatorios entre 0,1,
mi e a melhor posicao da partcula i e mg e a melhor posicao do enxame. E estabelecido ainda um
limite de velocidade para cada dimensao j, dado
por (5), onde maxj e minj sao os limites maximo
e mnimo do espaco de busca na dimensao j, e
  0, 1.
vi (t + 1)  wvi (t) + 1 r1 (t)(mi  xi (t))
+2 r2 (t)(mg  xi (t))
0  vij  (maxj  minj )

Algoritmo de Busca por Retrocesso

Na etapa de inicializacao, o algoritmo gera e
avalia a populacao inicial P0 e inicia uma populacao historica Phist . A populacao historica constitui a memoria do BSA.
Durante a Selecao-I, o algoritmo determina
aleatoriamente, utilizando uma distribuicao uniforme, se a populacao atual P sera gravada como
populacao historica Phist e entao embaralha indivduos de Phist .
O operador de mutacao cria Pmod (versao inicial da nova populacao Pnova ), de acordo com (6).
Dessa forma, Pmod e o resultado do movimento
dos indivduos de P nas direcoes estabelecidas por
(Phist  P ). S representa a amplitude do deslocamento, que, neste algoritmo, e dada por (7).

(4)
(5)

A estrutura geral do PSO e definida pelo Algoritmo 1.

Pmod  P + S(Phist  P )

11

(6)

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

S k

Cabe ressaltar que para formar a componente
cognitiva, nao e armazenado o historico completo
das posicoes ja visitadas pelas partculas. A cada
iteracao, o algoritmo determina aleatoriamente,
utilizando uma distribuicao uniforme, se a posicao atual das partculas sera gravada na memoria
para compor a componente cognitiva. Uma vez
determinada a gravacao, tais posicoes sobrescrevem as posicoes gravadas anteriormente na memoria. Dessa forma, a retroacao cognitiva nao
aumenta os requisitos computacionais, em termos
de memoria, quando comparado ao PSO.
No que tange ao calculo da componente de
inercia, o modelo utilizado e inspirado nos conceitos apresentados em (Shi, 1998), no qual e estabelecido que altos valores de coeficiente de inercia
tendem a facilitar a busca global, enquanto baixos
valores de coeficiente de inercia tendem a facilitar
a busca local.
A estrutura do BC-PSO e definida pelo Algoritmo 3, onde xhist e a populacao historica selecionada aleatoriamente.

(7)

O valor de k e ajustado empiricamente via
uma serie de simulacoes, ja   N(0, 1), onde N
e a distribuicao normal padrao. Para criar a versao final de Pnova , o operador de cruzamento combina aleatoriamente, utilizando uma distribuicao
uniforme, elementos de Pmod com elementos de P.
Na etapa Selecao-II, o algoritmo seleciona os
elementos de Pnova (indivduos obtidos apos mutacao e cruzamento) que tenham a aptidao melhor
do que os de P (indivduos antes da mutacao e do
cruzamento) e os substitui em P. Dessa forma, P
so incluira novos indivduos que tenham evoludo.
Apos atendida a condicao de parada, o algoritmo
retorna a melhor solucao encontrada.
6

Algoritmo de Otimizacao por Enxame
de Partculas com Retroacao Cognitiva

O algoritmo BC-PSO, que combina caractersticas do PSO com o BSA, e proposto com base na
estrutura geral do PSO, porem, com modificacoes
no que tange ao calculo da velocidade das partculas. Neste algoritmo, a componente cognitiva de
(4) foi modificada, inspirada no BSA, passando a
ser computada nao em funcao da melhor posicao
da partcula e sim em funcao de uma posicao da
mesma selecionada aleatoriamente no passado. A
componente social foi mantida de forma identica
aquela usada no PSO. Ja a componente de inercia foi mantida apenas para os ciclos iniciais do
algoritmo, a fim de prover uma melhor exploracao
do espaco de busca, sendo anulada quando o coeficiente de variacao da populacao atinge um valor
ajustado empiricamente, com o objetivo de melhorar a busca local no final do processo de otimizacao. Estas modificacoes resultam em (8), onde cv
e o coeficiente de variacao da populacao, xh e uma
posicao historica da partcula, escolhida aleatoriamente utilizando uma distribuicao uniforme, e 
e uma constante que representa o valor do coeficiente de variacao a partir do qual a componente
de inercia e anulada. Foi mantido um limite de
velocidade, conforme definido em (5).

Algoritmo 3 Algoritmo BC-PSO
incio
Inicia xhist aleatoriamente Inicia o
enxame com x e v aleatorias
Avalia o enxame
Armazena mg 
repita
Atualiza velocidades, conforme
(8) e (5)
Atualiza posicoes, conforme (3)
Avalia o enxame
Atualiza mg , caso uma melhor
posicao tenha sido encontrada
Seja xhist  x , aleatoriamente
ate Condicao de parada
retorna mg 
fim
7

As simulacoes foram feitas numa area de 100 
100 unidades de medida. Neste espaco de busca,
foram distribudos aleatoriamente 1000 nos, denominados nos desconhecidos pelo fato deles nao
conhecerem sua posicao real. Ainda neste espaco
de busca, foram alocados aleatoriamente 3, depois
4 e posteriormente 5 nos de referencia, sendo 3 o
numero mnimo para um problema de duas dimensoes (Ekberg, 2009). Para cada quantidade de nos
de referencia, foram gerados 10 cenarios distintos.
O grande numero de nos desconhecidos foi
adotado para dar confiabilidade aos resultados obtidos, tendo em vista o carater estocastico dos algoritmos utilizados, e o fato de que cada no desconhecido representa um problema de localizacao.
Cumpre ressaltar que, apesar de gerados aleatoriamente, os mesmos cenarios foram precisa-


wvi (t)
Se (cv < )




+
r
(t)(x

x
(t))

1
1
h
i


+2 r2 (t)(mg  xi (t))
vi (t+1) 




Se (cv  ).

 1 r1 (t)(xh  xi (t))

+2 r2 (t)(mg  xi (t))
(8)
O coeficiente de variacao da populacao cv e
calculado conforme (9), onde  e  sao o desvio
padrao e a media da populacao, respectivamente.
cv 




Resultados Obtidos

(9)

12

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

mente reproduzidos para ser submetidos aos tres
algoritmos, tornando justa a comparacao de desempenho. Em todas as simulacoes realizadas foram empregadas populacoes de 100 indivduos.
Para efeito de comparacao entre os tres algoritmos, foi calculada, a cada geracao, a media
do erro de posicionamento (MEP) de todos os
nos desconhecidos, para todos os cenarios gerados, conforme descrito em (10), onde g representa
o numero da geracao, c o numero do cenario, i o
identificador do no desconhecido, D e o numero
total de nos desconhecidos, xreal e a posicao real
do no e xcalc e a posicao calculada pelo algoritmo
de otimizacao.
P10 PD
xreal (c, i)  xcalc (c, i)
M EPg  c1 i1
10D
(10)
As simulacoes com o PSO, BSA e BC-PSO foram conduzidas em implementacoes feitas no MATLAB, sendo, no caso do BSA, utilizada a implementacao disponvel em (Civicioglu, 2013b).
Os parametros dos tres algoritmos foram ajustados empiricamente por meio de uma serie de
simulacoes. Com o BSA, o melhor resultado foi
obtido com k  1. Para o PSO e para o BC-PSO,
o melhor resultado foi obtido com os parametros
apresentados na Tabela 1.

otimo em 100 geracoes.
1

Média do Erro de Posicionamento (MEP) (log)

10

0

10

1

10

2

10

BSA
PSO
BCPSO
3

10

0

10

20

30

40

50
Gerações

60

70

80

90

100

Figura 1 Curvas de MEP  geracao, com 3 nos
de referencia
1

Média do Erro de Posicionamento (MEP) (log)

10

Tabela 1 Parameros do PSO e BC-PSO
Parametro
PSO
BC-PSO


0,31
w
0,7298
0,7298
1
2,05
1,05
2
2,05
2,05

0,01
0,01

0

10

1

10

2

10

3

10

BSA
PSO
BCPSO
4

10

0

10

20

30

40

50
Gerações

60

70

80

90

100

Figura 2 Curvas de MEP  geracao, com 4 nos
de referencia

Os resultados da MEP por geracao, obtidos
com os tres algoritmos, sao apresentados nas Figuras 1, 2 e 3. Observando as Figuras 1 e 2, podese constatar que, para 3 e 4 nos de referencia, o
BSA apresenta a menor MEP. Na Figura 1, para
3 nos de referencia, verifica-se que ao final de 100
geracoes o BSA apresenta uma MEP da ordem de
103 enquanto que os outros algoritmos apresentam uma MEP da ordem de 1. Na Figura 2, para
4 nos de referencia, o BSA apresenta uma MEP da
ordem de 104 enquanto que os outros algoritmos
apresentam uma MEP da ordem de 102 .
Entretanto, comparando as Figuras 2 e 3,
pode-se constatar uma melhora significativa no
desempenho dos algoritmos PSO e BC-PSO,
quando sao adotados 5 nos de referencia. Neste
caso o algoritmo BC-PSO apresentou uma MEP
da ordem de 106 , superando a MEP dos demais
algoritmos em duas ordens de grandeza. Cabe
ainda ressaltar que, com o algoritmo BC-PSO,
para 5 nos de referencia, 34,06 dos nos desconhecidos alcancaram o resultado otimo (i.e. erro0)
ao final de 100 geracoes. Com o BSA e PSO, nenhum dos nos desconhecidos alcancou o resultado

1

10

Média do Erro de Posicionamento (MEP) (log)

0

10

1

10

2

10

3

10

4

10

5

BSA
PSO
BCPSO

10

6

10

0

10

20

30

40

50
Gerações

60

70

80

90

100

Figura 3 Curvas de MEP  geracao, com 5 nos
de referencia
A elevada MEP dos algoritmos PSO e BCPSO, para 3 e 4 nos de referencia, ocorre em virtude destes algoritmos terem apresentado maior
dificuldade para solucionar problemas em que os
nos de referencia se aproximam de formar uma
linha reta. No caso extremo, quando os nos de

13

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014
0
100

referencia sao colineares, a funcao de aptidao e simetrica em relacao a reta formada por estes nos e
consequentemente o problema admite matematicamente duas solucoes, sendo apenas uma valida
(Langendoen, 2005). Nos casos onde os nos de
referencia nao sao colineares, mas se aproximam
desta condicao, a funcao de aptidao se aproxima
de tal simetria apresentando dois mnimos (um local e um global) com valores de aptidao proximos.
Nestas condicoes, os algoritmos PSO e BC-PSO
convergem, em alguns casos, para o mnimo local que nao corresponde a posicao real (mnimo
global). O BSA, por sua vez, nao encontra dificuldades para convergir para o mnimo global, em
condicoes identicas. As Figuras 4, 5 e 6 exemplificam a diferenca de resposta dos tres algoritmos
para nos de referencia quase colineares. Nestas figuras, 3 nos de referencia estao posicionados proximos a reta destacada. Nos mapas gerados para
os algoritmos PSO e BC-PSO (Figuras 4 e 5, respectivamente), foram demarcadas regioes onde ha
grande incidencia de nos cujas posicoes calculadas estao incorretamente do lado oposto da reta.
A Figura 6 mostra a solucao correta obtida pelo
BSA para o mesmo problema.
0
100

20

40

60

80

50
40
30
20
10
0

Ha uma melhora significativa nos resultados,
com os tres algoritmos, quando o numero de nos
de referencia aumenta. Cabe ressaltar que a medida que o numero de nos de referencia aumenta,
diminui a probabilidade destes nos se alinharem,
o que tambem contribui para a melhora do desempenho dos algoritmos PSO e BC-PSO.
Observa-se ainda que os algoritmos PSO e
BC-PSO demoram mais a convergir para a solucao do problema quando o no desconhecido esta
proximo ao limite do espaco de busca. O BSA, por
sua vez, converge para a solucao com a mesma velocidade, independente da localizacao do no desconhecido. O comportamento dos tres algoritmos,
sob este aspecto, e demonstrado no vdeo disponibilizado em (Sa, A. O., 2014).
No que diz respeito ao tempo de processamento, o PSO foi o algoritmo que teve o menor
tempo medio, aproximadamente 14 menos do
que o BC-PSO e 28 menos do que o BSA. O
tempo de processamento nao sofreu mudancas significativas com o aumento do numero de nos de referencia entre 2,5 e 4,1 de aumento a cada no
de referencia adicionado. A Figura 7, apresenta
uma comparacao entre o tempo de processamento
requerido pelos tres algoritmos, para 3, 4 e 5 nos
de referencia. Os tempos de processamento foram
normalizados em relacao ao maior tempo de processamento, que ocorre para o BSA com 5 nos de
referencia.

100

40
30
20
10
Posição calculada
Posição real
Nós de referência

Figura 4 Exemplo de erro de simetria com o PSO
80

100

90
80

Tempo de Processamento, normalizado ()

70
60
50
40
30
20
10
0

Posição calculada
Posição real
Nós de referência

Figura 6 Exemplo de resposta sem erro de simetria, com o BSA

50

60

100

60

60

40

80

70

70

20

60

80

80

0
100

40

90

90

0

20

Posição calculada
Posição real
Nós de referência

100

80

82,6
68,3

64,4

85,3
71,4

60

40

20

0

Figura 5 Exemplo de erro de simetria com o BCPSO

78,4

100

96,0

93,5

PSO
BCPSO
BSA
3

4
Nós de referência

5

Figura 7 Comparacao dos tempos de processamento

14

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

8

Conclusoes

networks with mobile nodes, Wireless Communications and Mobile Computing Conference (IWCMC), 7th International, IEEE,
pp. 8388.

Com base nos resultados obtidos, conclui-se que,
para o problema de localizacao, o BSA apresenta
maior robustez que os demais algoritmos testados
no que tange a disposicao dos nos. No que diz
respeito a posicao dos nos desconhecidos, a velocidade de convergencia foi a mesma tanto para os
nos da periferia quanto para os nos posicionados
em outras regioes do espaco de busca. No que diz
respeito a posicao relativa dos nos de referencia,
o BSA manteve a capacidade de convergir para o
mnimo global, mesmo quando os nos de referencia estao quase alinhados. Esta robustez, garantiu
ao BSA menores erros que os demais algoritmos
para 3 e 4 nos de referencia.
O algoritmo que apresentou a menor MEP foi
o BC-PSO, para 5 nos de referencia. Neste caso, o
mesmo superou a MEP do BSA em aproximadamente duas ordens de grandeza, tendo 34,06 dos
nos desconhecidos alcancado o resultado otimo em
menos de 100 geracoes. Cabe ressaltar que este
resultado foi obtido em um tempo de processamento 14 menor do que o consumido pelo BSA.
Em contrapartida, este algoritmo se mostrou inadequado para problemas cujos nos de referencia
sao colineares ou quase colineares.
O PSO foi o algoritmo com menor consumo
de tempo de processamento, o que pode ser vantajoso para problemas em que nao existam nos de
referencia quase colineares.
Para trabalhos futuros, propoe-se a investigacao do desempenho destes algoritmos em problemas com multiplos saltos e em problemas onde
haja rudo nas medidas de distancia.
9

Engelbrecht, A. P. (2005). Fundamentals of Computational Swarm Intelligence, Wiley.
Huanxiang, J. et al. (2010). Localization algorithm for mobile anchor node based on genetic algorithm in wireless sensor network, Intelligent Computing and Integrated Systems
(ICISS), International Conference on, IEEE,
pp. 4044.
Kennedy, J. e Eberhart, R. (1995). Particle swarm
optimization, Proceedings of 1995 IEEE International Conference on Neural Networks,
pp. 19421948.
Langendoen, K. e Reijers, N. (2005). Distributed localization algorithms, In R. Zurawski
(Eds.) Embedded Systems Handbook, CRC
press, pp. 36.136.23.
Lymberopoulos, D. et al. (2006). An empirical characterization of radio signal strength
variability in 3-d ieee_802.15. 4 networks
using monopole antennas, Wireless Sensor
Networks, Springer, pp. 326341.
Mao, G. et al. (2007). Wireless sensor network
localization techniques, Computer networks
51(10) 25292553.
Sa, A. O. (2014). Comportamento dos algoritmos
PSO, BC-PSO e BSA, aplicados ao problema
de localizacao, httpyoutu.bed7xgjlKTXs.

Agradecimentos

Shi, Y. e Eberhart, R. (1998). A modified particle
swarm optimizer, Evolutionary Computation
Proceedings, 1998. IEEE World Congress on
Computational Intelligence., The 1998 IEEE
International Conference on, IEEE, pp. 69
73.

Agradecemos a Fundacao Carlos Chagas Filho de
Amparo a Pesquisa do Estado do Rio de Janeiro
(FAPERJ, httpwww.faperj.br), por financiar
este estudo.

Sun, W. e Su, X. (2011). Wireless sensor network
node localization based on genetic algorithm,
IEEE 3rd. Int. Conf. on Communication
Software and Networks, 2011, pp. 316319.

Referencias
Civicioglu, P. (2013a). Backtracking search optimization algorithm for numerical optimization problems, Applied Mathematics and
Computation 219(15) 81218144.
Civicioglu, P. (2013b). BSA code for MATLAB,
httpwww.pinarcivicioglu.combsa.html.
Ekberg, P. (2009). Swarm-intelligent localization,
Masters thesis, Uppsala Universitet, Uppsala, Sweden.
Ekberg, P. e Ngai, E. (2011).
A distributed swarm-intelligent localization for sensor

15