XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

FUZZY IMPLEMENTADO EM LADDER COM FUNÇÕES DE PERTINÊNCIA DESCONTÍNUAS
DAVI N. OLIVEIRA, ARTHUR P. S. BRAGA, OTACÍLIO M. ALMEIDA
Grupo de Pesquisa em Automação e Robótica, Depto de Engenharia Elétrica, Universidade Federal do Ceará
Caixa Postal 6001, 60.020-181 Fortaleza, CE, BRASIL
E-mails davi,arthurp,otacilio@dee.ufc.br

Abstract
 This paper aims to develop its own code of fuzzy logic control for applications in industrial systems controlled by
programmable logic controllers. The algorithm is designed with flexibility for inclusion or exclusion of linguistic variables and
dynamically changing the parameters of the rules of inference. The algorithm was developed on the Matlab platform and had the
results compared with the Fuzzy Logic Toolbox for validation. Next was made in the implementation language in PLC ladder
with different data types. The results were satisfactory, subject to the limitations regarding the type of data used in each test. Regarding the processing, the PLC had satisfactory performance.
Keywords
 Digital Control, Fuzzy Controller, Industry automation, Programmable Logic Controller.
Resumo
 Este trabalho visa o desenvolvimento de código próprio de um controlador_nebuloso para aplicações em sistemas_industriais controlados por Controladores Lógicos Programáveis. O algoritmo é desenvolvido visando a flexibilidade para inclusão
ou exclusão de variáveis lingísticas e alteração dinâmica dos parâmetros das regras de inferência. O algoritmo foi desenvolvido
sobre a plataforma Matlab e teve os resultados comparados com o Fuzzy Logic ToolBox para validação. Em seguida foi feita a
implementação em linguagem ladder em CLPs com a utilização de diferentes tipos de dados. Os resultados obtidos foram satisfatórios, respeitadas as limitações referentes ao tipo de dado utilizado em cada ensaio. Com relação ao processamento, os CLPs
tiveram desempenho satisfatório.
Palavras-chave
 .

1

Introdução

Os CLPs (Controlador Lógico Programável) são
uma ferramenta básica para automação de processos
de manufatura. Os CLPs possibilitam a automação
tanto de processos discretos como contínuos. Como
são uma ferramenta facilmente encontrada como controladora de processos_industriais e poucos fabricantes oferecem arquitetura integrada para suporte a
algoritmos de controle_avançado, o desenvolvimento
de técnicas para implementação desses algoritmos
nos controladores já existentes pode viabilizar economicamente os estudos de algoritmos de controle
avançado em ambiente fabril. Atualmente, na indústria é possível perceber o uso de CLPs como controladores isolados ou como parte de um complexo sistema_de_manufatura integrada.
O advento dos Controladores Lógicos Programáveis (CLPs) pode ser considerado uma das mais
importantes mudanças ocorridas nos sistemas_de_automação fabril e, atualmente, controladores com módulos baseados em Lógica Nebulosa (Passino e
Yurkovich, 1998) (Carr e Shearer, 2007) vêm se difundindo no mercado como forma de para atuar sobre
sistemas_não-lineares.
O Controle Nebuloso (Passino e Yurkovich,
1998) é baseado em regras capazes de tratar com
incertezas sobre informações da planta. Um típico
controlador_nebuloso (Figura 1) consiste de uma etapa de nebulização, um conjunto de regras e uma base
de conhecimento, inferências nebulosas, e uma etapa
de desnebulização.

Figura 1. Típico controlador_nebuloso.

A lógica_nebulosa pode ser vista como uma extensão da lógica clássica e oferece uma alternativa
eficiente para representação de base de conhecimento
envolvendo incertezas e imprecisão. Representação
do conhecimento é uma das áreas mais básicas e ativamente pesquisadas, do ramo da Inteligência Artificial.
O desenvolvimento da lógica_nebulosa foi motivado em larga escala pela necessidade de uma ferramenta conceitual que pudesse expressar e tratar incertezas e imprecisões.
Lógica nebulosa, como o nome sugere, é um
modo de representação que é mais aproximada do
que exata. A importância dessa lógica vem do fato de
que o conhecimento e o raciocínio humano, principalmente o senso comum, são, por natureza, aproximados ou relativos.
As vantagens de se desenvolver um módulo nebuloso em CLP consistem em se obter uma maior
eficiência na execução do código, agregar valor s
aplicações desenvolvidas e incorporar a habilidade de
controle_de_sistemas_não-lineares.
Este artigo traz uma introdução ao controle_nebuloso na seção 2, na seção 3 é feito um resumo da
implementação das etapas de um controlador em linguagem ladder e na seção 4 são apresentados resultados e dados da implementação.
411

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Na etapa de nebulização o valor absoluto correspondente  leitura dos sensores é convertido em
termos dos rótulos dados aos conjuntos linguísticos
das funções de pertinência. Ou seja, é criada uma
interseção entre os rótulos empregados nas funções
de pertinência e os valores assumidos pela leitura dos
sensores como mostrado na Figura 2.

2 Controle Nebuloso
Na entrada de um controlador_nebuloso tem-se a
etapa de nebulização que transforma os valores das
entradas em graus de pertinência correspondentes aos
conjuntos_nebulosos. Ou seja, é feita a conversão da
leitura do sensor_em termos da variável linguística.
Se a leitura do sensor representa um valor puro então
a etapa de nebulização requer que a leitura do sensor
corresponda a um valor de pertinência da variável
linguística associada. As formas mais comuns de função de pertinência são triangular, trapezoidal ou
exponencial.
Existem duas atividades importantes quando do
desenvolvimento da base de conhecimento do controlador. Primeiro devem ser definidas as variáveis linguísticas que descrevem os valores do processo. Tanto os parâmetros de entrada como os de saída devem
ser linguisticamente definidos usando seus termos
próprios. A dispersão dos valores em variáveis linguísticas constitui um parâmetro importante do projeto. Em seguida uma base de conhecimento deve ser
elaborada utilizando as variáveis linguísticas criadas
para os parâmetros principais. Para isso, Sugeno apresenta 4 sugestões conhecimento especializado e
experiência, modelagem das ações de controle do
operador, modelagem do processo, auto-organização.
A fim de se elaborar uma conclusão ou resultado
a partir de um conjunto de regras nebulosas é necessário um mecanismo que produza uma saída a partir
de um conjunto de regras SE-ENTÃO. Inferir significa concluir por meio de raciocínio ou tirar uma conclusão. Para cada regra de um sistema_nebuloso, deve
ser analisado o grau de pertinência de cada variável
nas condições da regra. Deve ser aplicada lógica OU
em cada regra para compor a saída total do sistema.
A etapa de desnebulização produz uma ação de
controle não-nebulosa que melhor representa o resultado das inferências das funções de pertinência do
controlador. Diversas estratégias de desnebulização
podem ser encontradas na literatura, sendo os mais
aplicados Tsukamoto, Center of área (COA), Mean
of maximum (MOM).
No projeto de um controlador_nebuloso, um ponto importante é a definição dos parâmetros principais
de controle e a granularidade que serão analisados os
termos lingísticos. Por exemplo, um conjunto contendo os valores lingísticos pequeno, médio, grande pode não ser satisfatório em alguns domínios.
Assim pode ser melhorados com o conjunto muito
pequeno, pequeno, médio, grande, muito grande.
Outro ponto importante é o tipo de função de
pertinência utilizada, visto que na literatura estão
dispostas diversas opções. No entanto, os tipos mais
comuns são triangular e trapezoidal.
Após a determinação dos valores dos parâmetros
de controle, uma base de conhecimento deve ser descrita usando as variáveis de controle e criando relações entre os conjuntos lingísticos de entrada_e_saída.

Figura 2  Nebulização de um valor medido do processo.

Com as equações características definidas é possível obter o valor nebulizado das entradas com a
obtenção do valor obtido como resultado da entrada
física sobre a função de pertinência para cada variável linguística. Assim, se o valor de entrada for menor que o ponto P1 da função de pertinência é atribuído pertinência nula. Se o valor de entrada estiver
entre o ponto P1 e P2, o valor, que vai da pertinência
nula até a pertinência total, é obtido pela função linear ascendente definida pelos pontos. Se o valor de
entrada estiver entre os pontos P2 e P3 é atribuída
pertinência total. Se o valor de entrada estiver entre o
ponto P3 e P4, o valor, que vai da pertinência total
até a pertinência nula, é obtido pela função linear
descendente definida pelos pontos. Se o valor de entrada for maior que o ponto P4 é atribuída pertinência nula. Como resultado, são gerados os valores nebulizados das entradas para cada função de pertinência.
Sugeno sugere quatro métodos para criação da
base de conhecimento (Sugeno, 1985). O primeiro é
baseado na experiência e conhecimento sobre o processo, o segundo baseia-se na modelagem das ações
de controle do operador. O terceiro refere-se  modelagem do processo e o quarto trata de técnicas de
auto-organização. O primeiro método sugerido é o
mais utilizado por dispensar o levantamento de um
modelo e a necessidade de grande capacidade computacional.
Para efeito de composição da etapa de desnebulização do sistema, foram implementados os métodos
Tsukamoto, centroide e média dos máximos.
No método de desnebulização Tsukamoto, o valor absoluto da ação de controle pode ser calculado
por

 x
ZT 
 
n

i 1
n

i 1

Onde
ção

i

n

i

(1)

i

é o número de regras com grau de ativa-

maior do que zero. E

indicada pela regra i.

412

i

xi é a ação de controle

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Já no método Center of Area assume-se que a
ação de controle resultante da combinação das funções de pertinência corresponde ao centro de gravidade calculado sobre a distribuição da ação de controle nas funções de pertinência.
q


ZCOA 


j 1

z j c( z j )

c( z j )
j 1

q

Onde q é o número de níveis da saída,

Para cada variável linguística estão associados
quatro pontos como na Figura 3. Essa alternativa
simples permite que sejam utilizadas funções de pertinência triangulares e trapezoidais bastando igualar
os pontos P2 e P3 caso seja desejada uma função
triangular.
É realizado o cálculo dos coeficientes angulares
dos trechos de descrição de cada variável lingística,
já que todos os pontos são conhecidos, uma vez tendo os parâmetros de limite especificados.

(2)

zj é o

1
yx
b  a.x
a

valor correspondente  saída no nível de entrada j e
c( z j ) representa o valor de pertinência.
O método Mean of Maximum gera um valor absoluto de controle através das médias dos valores
suporte máximos das funções de pertinência. Para um
universo discreto, pode ser calculado por
l

zj

j 1

l

ZMOM  

(4)

A equação acima é válida se x for diferente de y.
Caso contrário o algoritmo se encarrega de atribuir o
valor unitário para o coeficiente angular.
O código ladder para identificação dos coeficientes da reta traçada entre os pontos P1 e P2 é exemplificado na Figura 4. Para a obtenção dos coeficientes da reta traçada entre os pontos P3 e P4 pode ser
utilizado o procedimento demonstrado na Equação 4.
O mesmo procedimento de identificação dos coeficientes para composição das curvas que limitam o espaço das variáveis linguísticas de entrada (Figura 4)
foi realizado para os conjuntos de saída.

(3)

Onde l é o número de vezes que o valor de pertinência z atinge seu máximo.
O sistema_nebuloso inicialmente utilizado para
desenvolvimento e depuração do código era composto por duas entradas e uma saída, com três termos
cada. O sistema de inferência composto por duas
regras e a etapa de desnebulização utiliza os métodos
Center of Area e Mean of Maximum.
Para validação do algoritmo, primeiramente foi
implementado em código próprio na plataforma Matlab. Os resultados obtidos foram comparados com a
implementação do controlador equivalente elaborado
utilizando o pacote Fuzzy Logic Toolbox 2.2.9.
3 Fuzzy em ladder
Como citado anteriormente, o algoritmo foi implementado primeiramente na plataforma MatLab
para testes. Cada entrada pode ser descrita conforme
um conjunto de cinco variáveis linguísticas. Porém, o
código desenvolvido visa proporcionar a flexibilidade necessária para a não utilização obrigatória de
todas as variáveis ou a inclusão de novas variáveis de
forma simplificada.
As variáveis linguísticas podem ser configuradas
através de quatro parâmetros que correspondem aos
pontos limites dos valores nebulosos. As funções
foram implementadas prevendo funções de pertinência do tipo trapezoidal. Caso haja a necessidade de
utilização de funções triangulares, estas serão representadas igualando-se os valores dos pontos P2 e P3.
A Figura 3 ilustra a forma construtiva das funções de
pertinência.

Figura 4. Exemplo de nebulização em ladder.

Em seguida tem-se a etapa de ativação, ou seja, a
determinação do grau de pertinência de cada entrada
sobre seus respectivos conjuntos e variáveis linguísticas. No código isso pode ser implementado comparando-se a entrada com os parâmetros de configuração das variáveis linguísticas. Após a identificação
das variáveis ativadas segue-se com a determinação
do grau de pertinência através das equações obtidas a
partir dos coeficientes de cada parte da variável.
Identificados os graus de pertinência, pode-se
partir para a descrição das regras da base de conhecimento. As regras baseiam-se em expressões do tipo
SE-ENTÃO. Na implementação do sistema de inferência em ladder, o algoritmo é convertido em um
conjunto de comparações e seleções para a localização dos valores nebulosos máximos referentes aos

Figura 3. Formação das funções de pertinência.

413

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

termos antecedentes das regras. No Matlab esta ação
é realizada pelo operador MAX. A figura 5 exemplifica a implementação do operador MAX no sistema
de inferência durante a execução dos antecedentes
das regras.

Figura 6. Inferência nebulosa.
Figura 5. Processamento das regras

Após a validação dos dados, o algoritmo foi implementado em linguagem ladder utilizando variáveis
do tipo inteiro e do tipo real. As duas implementações foram realizadas para se tentar minimizar os
erros de aproximação em sistemas que utilizem controladores com menor capacidade de processamento
computacional e avaliar a influência do tipo de dado
sobre o tempo de execução do CLP.
Comercialmente, encontram-se ferramentas de
desenvolvimento de controladores_nebulosos para
CLPs com interface_gráfica para auxiliar os projetistas e integradores de sistemas. A Figura 7 ilustra o
projeto_de_controlador_nebuloso utilizando a ferramenta Logix5000 Fuzzy Designer, onde são definidas
as entradas, variáveis linguísticas e termos de entrada, conjunto de regras, variáveis linguísticas e termos
de saída.

No processo de desnebulização, como o método
do centroide é um método integrativo que pode ser
realizado através de somas sucessivas, foi empregado
um laço no processo de estabelecimento da saída do
controlador. O laço engloba todo o espaço amostral,
desde que possua funções de pertinência associada. A
cada ciclo de execução do CLP, um ponto do espaço
amostral é analisado. Assim, são necessários tantos
ciclos quanto o número de pontos do espaço amostral
relevantes para a composição da saída do controlador.
Como alternativa a esse processo pode ser realizado um laço local, onde a cada ciclo de execução do
CLP obtenha-se uma saída. Com isso o período de
ciclo do CLP se estende por englobar todo o cálculo
de inferência. Dependendo da dimensão do conjunto
suporte adotado e das restrições de projeto, o período
do ciclo de execução do controlador pode vir a ser
um parâmetro crítico.
A base de regras implementada para obtensão
dos resultados é composta de nove regras representadas pela Tabela 1. Os termos para as variáveis linguísticas ERRO e VERRO são POSITIVO (PO),
ZERO (ZO) e NEGATIVO (NE).

Figura 7. Controlador nebuloso aplicado a CLP.

Tabela 1. Base de regras nebulosas.

Atualmente existem recursos que permitem que
códigos desenvolvidos para aplicações específicas
sejam encapsulados em instruções do CLP. Essas
instruções são conhecidas como instruções adicionais
ou Add-On Instructinos. A figura 8 ilustra o encapsulamento do sistema de inferência nebuloso com duas
entradas e saídas centroide e máximo das médias. A
instrução pode ser replicada para se ter diversos sistemas de inferência compondo o projeto.

ERRO

ERRO
NE

NE

ZO

PO

PO

PO

ZO

ZO

ZO

ZO

NE

PO

ZO

NE

NE

A base de regras utilizada pode ser encontrada
com frequência na literatura Coelho et al., 2003. As
regras utilizadas têm a forma SE <CONDIÇÃO1> E
<CONDIÇÃO2> ENTÃO <CONCLUSÃO>.
Um exemplo de resultado do sistema de inferência pode ser visualizado na figura 6 onde há a composição da saída através da execução do operador E
entre os termos antecedentes de cada regra resultando
sobre o termo consequente, e o operador OU entre os
resultados de cada regra.

Figura 8. Instrução nebulosa encapsulada.

414

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

testes sobre todo o universo de discurso, gerando
superfícies de controle bastante semelhantes.
As Figuras 9 e 10 ilustram as superfícies de controle obtidas para o método do centroide e máximo
das médias.

4 Resultados
Os controladores apresentaram resultados satisfatórios, com período de ciclo de execução em torno
de 200milisegundos, o que representa um comportamento dentro dos padrões exigidos para o controle da
maioria dos sistemas_industriais.
A forma construtiva dos laços de desnebulização
podem apresentar características de rendimento diferentes, dependendo da implementação. Quando o
processo de varredura do espaço amostral é executado tomando-se um ponto por ciclo de varredura do
CLP, a taxa de atualização da saída é igual ao período ciclo de execução do código multiplicado pela
quantidade de pontos com função de pertinência associada. Nesse tipo de estrutura o período de execução do código é reduzido, podendo ser alocado processamento para outras atividades. Quando realizado
um laço local para realização do método de desnebulização, a cada ciclo de execução do CLP há a atualização da saída do controlador_nebuloso. Dependendo
da dimensão do espaço amostral, o método do laço
local pode triplicar o período de ciclo de execução do
CLP, podendo interferir no controle de outras lógicas
existentes. Porém, tomando como base o exemplo
apresentado, o período de execução, consequentemente a taxa de atualização da saída do controlador
se manteve em torno de 120ms. Valor considerado
bastante satisfatório na maioria das aplicações industriais.
Todo o código implementado ocupou uma área
de memória pouco superior a 1kByte. O que representa cerca de 116 da capacidade média de memória
dos controladores industriais mais comuns. Vale ressaltar que essa quantidade se deve ao fato de que
todos os parâmetros estão alocados em memória, com
o intuito de uma futura implementação de algoritmos
de ajuste. Assim os valores podem ser alterados dinamicamente sem a necessidade de edição da lógica
de programação do controlador.
Para a implementação do algoritmo utilizando
variáveis do tipo inteiro, foi utilizado um artifício de
multiplicação dos valores por 1000 vezes para que
fosse reduzido o erro por aproximação. Quando da
comparação entre a utilização de base de dados do
tipo inteiro e do tipo real constatou-se a ocorrência
de erros de até 1 nas execuções de base inteira por
conta da falta de precisão nos arredondamentos. Mas
o valor percentual de erro permaneceu dentro dos
padrões aceitáveis e tende a ser compensado pela
ação dinâmica do controlador_nebuloso.
Quando confrontados os resultados obtidos através da utilização do Matlab e uma base de dados real
no CLP, os valores de erro permaneceram por volta
de 0,5.
As implementações foram realizadas em controladores_lógicos_programáveis de fabricantes Rockwell e Siemens. Em ambos, os resultados foram satisfatórios, onde os controladores obtiveram êxito nos

Figura 9. Superfície de controle centroide.

Figura 10. Superfície de controle máximo das médias.

A Tabela 2 exibe os resultados obtidos para inferências em um sistema com nove regras e utilização
do método do centroide de desnebulização.
Tabela 2. Comparativo entre inferências.
ERRO

VERRO

ToolBox

MatLab

CLP
(Float)

10
10
10
35
35
35
50
50
50
65
65
65
80
80
80
90
90
90
100
100
100

5
30
90
20
55
80
10
35
85
15
45
90
0
25
95
10
40
60
35
45
70

80,8
79,8
50
68,6
61,2
37,1
50
50
19,2
50
31,4
21,2
50
50
19,2
50
31,4
21,2
37,1
25,5
20,2

80,8158
79,8395
50,0000
68,648
61,4903
37,5488
50,0000
50,0000
19,7027
50,0000
31,8864
21,7222
50,0000
50,0000
19,7027
50,0000
31,8864
21,7222
37,5488
26,0437
20,6709

80,81579
79,83954
50,00000
68,64804
61,19327
37,09638
50,00000
49,99998
19,18421
49,99997
31,35195
21,21705
50,00000
50,00000
19,18421
50,00000
31,35195
21,21705
37,09638
25,48662
20,16050

Analisando o tempo de ciclo de inferência, o algoritmo elaborado no Matlab executa uma inferência
nebulosa em cerca de 384ms. Um CLP da família
SLC-500 executa uma inferência a cada 112ms utili-

415

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

El Ghaoui, L. e Scorletti, G. (1996). Control of
rational
systems
using
linear-fractional
representations and LMIs, Automatica, 32(9)
12731284.
Gerksic, Samo. Advanced control algorithms
embedded in a programmable logic controller.
Control Engineering Practices, 2006.
Kissel,
Thomas
E.
Industrial
Electronics
Applications for Programmable Controllers,
Instrumentation and Process Control, and
Electrical Machines and Motor Controls. 3. ed.
Prentice-Hall, 2006.
Moraes, Cícero Couto. Engenharia de Automação
Industrial. 2. ed. Editora LTC, 2007.
Natale, Ferdinando. Automação Industrial. 2. ed.
Editora Erica, 2000.
Ogata, K. (1998). Engenharia de Controle Moderno.
3 Ed. Rio de Janeiro Prentice Hall do Brasil.
Oliveira, D. N., Braga, A. P. S., Almeida, O. M.,
(2010). Fuzzy Logic Controller Implementation
on a FPGA using VHDL. Proceedings of the
29th North American Fuzzy Information
Processing
Society
Annual
Conference,
NAFIPS, Toronto, Canada.
Passino, K. M. e Yurkovich, S. (1998). Fuzzy
Control, EUA, Addison-Wesley.
Sugeno, M. (1985). An Introductory Survey of Fuzzy
Control. Information Sciences, No 36, pp. 59-83.
Thiry-cherques, Hermano Roberto. Modelagem de
Projetos. 2. ed. Editora Atlas, 2004.
Webb, John W. Programmable Logic Controllers
Principles and Applications. 5. ed. Prentice-Hall,
2006.
Yen, J., Langari, R. e Zadeh, L. A. (1995) Industrial
Applications of Fuzzy Logic and Intelligent
Systems. IEEE Press, New York.

zando dados do tipo float (real), e cerca de 47ms
utilizando dados do tipo inteiro.
Como parâmetro de referência, também foram
analisados os resultados obtidos com a utilização de
um software comercial de modelagem de lógica_nebulosa aplicado a CLP. Os resultados obtidos foram
semelhantes com a lógica implementada diretamente.
Assim, comprova mais uma vez a eficiência do código desenvolvido.
5 Conclusão
Com os resultados observados é possível concluir que há viabilidade no desenvolvimento de algoritmos de inteligência_computacional como a lógica de
controle_nebuloso em CLPs. Os mesmos podem ter
desempenho bastante satisfatório.
Com os resultados obtidos estima-se a possibilidade de evolução da implementação do algoritmo
nebuloso em controladores_lógicos_programáveis e a
possibilidade de implementação de algoritmos de
auto-ajuste implementados em controladores industriais.
Já estão sendo desenvolvidos algoritmos_genéticos visando a avaliação da performance de controladores_nebulosos e está sendo estudada a possibilidade
de evolução automáticas dos parâmetros por meio de
técnicas de inteligência_computacional. Espera-se
aproximar as teorias evolucionárias das aplicações
industriais onde os controladores_lógicos_programáveis são empregados.

Agradecimentos
Os autores agradecem o suporte financeiro da Coordenação de Aperfeiçoamento de Pessoal de Nível
Superior (CAPES).

Referências Bibliográficas
Cabrera, A., Sánchez-Solano, S., Brox, P., Barriga,
A., Senhadji, R., (2004). Hardwaresoftware
codesign of configurable fuzzy control systems.
Applied Soft Computing, 4, 271285.
Carr, D., Shearer, J., (2007). Nonlinear Control and
Decision Making Using Fuzzy Logic in Logix.
Rockwell Automation.
Coelho, L. S., Almeida, O. M., Coelho, A. A. R.,
(2003). Projeto e estudo de caso da
implementação de controle_nebuloso. SBA
Controle e Automação.
Costa, O. L. V., do Val, J. B. R. e Geromel, J. C.
(1996). Convex programming and the H2-control
of jump linear systems, Proceedings of the 11th
Brazilian Automatic Control Conference, Vol. I,
São Paulo, pp. 067072.

416