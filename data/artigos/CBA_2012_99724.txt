Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

UM ALGORITMO BASEADO EM ESTRATEGIAS EVOLUTIVAS PARA
MINIMIZACAO DO MAKESPAN NO PROBLEMA DE SEQUENCIAMENTO
FLOWSHOP HIBRIDO E FLEXIVEL
Eduardo Camargo de Siqueira, Sergio Ricardo de Souza, Marcone Jamilson Freitas
Souza


Av. Amazonas, 7675, Nova Gameleira
Centro Federal de Educacao Tecnologica de Minas Gerais
Belo Horizonte, Minas Gerais, Brasil


Departamento de Computacao, Campus Universitario
Universidade Federal de Ouro Preto
Ouro Preto, Minas Gerais

Emails eduardosiqueira@dppg.cefetmg.br, sergio@dppg.cefetmg.br, marcone@iceb.ufop.br
Abstract This paper presents an algorithm based on Evolutionary strategies for solving the problem of
scheduling hybrid flexible flowshop. The proposed algorithm uses a construction phase based on Greedy Randomized Adaptive Search Procedure (GRASP) to generate initial solutions. The algorithm have been described,
tested and compared with an another one of the literature. The results show that the proposed algorithm is able
to generate better solutions for a subset of instances of the problem.
Scheduling, Flowshop, evolutionary strategy, GRASP

Keywords

Resumo Este trabalho propoe um algoritmo baseado em Estrategias Evolutivas para resolucao do problema
de sequenciamento flowshop hbrido e flexvel. O algoritmo proposto utiliza a fase de construcao GRASP (Greedy
Randomized Adaptive Search Procedure) para gerar solucoes iniciais. O algoritmo foi descrito, testado e comparado com um algoritmo da literatura. Os resultados mostram que ele e capaz de gerar solucoes melhores para
um subconjunto de instancias do problema.
Palavras-chave



Introducao

Os problemas de sequenciamento sao comuns em
diversas areas do conhecimento, principalmente
na producao industrial. Nesse contexto, o problema consiste em definir uma sequencia de tarefas a serem executadas em um conjunto de maquinas, a fim de atingir um objetivo, que pode ser a
reducao de custos ou aumento na capacidade de
producao ou de estoque, dentre outros.
Existem diversos estudos a respeito dos problemas de sequenciamento, porem sempre existiu uma distancia entre teoria e pratica. Ha, no
entanto, uma tendencia recente em desenvolver
abordagens de solucao para problemas reais (Ruiz
et al., 2008).
Nesse sentido, este trabalho considera o problema real descrito em Ruiz et al. (2008), que
trata uma variacao do problema de flowshop hbrido (HFS, do ingles Hybrid Flowshop), em que
um conjunto de tarefas passa por um conjunto de
estagios e, para cada estagio, existe um conjunto
de maquinas_paralelas nao-relacionadas. A caracterstica de um flowshop e que o fluxo de processamento nas maquinas e o mesmo, ou seja, todas
as tarefas seguem a mesma sequencia de estagios.
No entanto, no problema considerado, os estagios
podem nao ser todos executados. Esta variante,
denominada Flowline Hbrido e Flexvel (HFFL,
do ingles Hybrid Flowshop and Flowline), e, desta

ISBN 978-85-8001-069-5

forma, uma generalizacao do HFS e do Flowline
Flexvel. O criterio de otimizacao considerado e
o de minimizar o maior tempo de conclusao das
maquinas, o chamado makespan.
Tendo em vista o fato de o HFFL ser da classe
NP-difcil (Ruiz et al., 2008), este trabalho propoe
um algoritmo baseado em Estrategias Evolutivas
 ES (Beyer and Schwefel, 2002) para sua solucao.
O uso dessa classe de algoritmos foi motivado pelo
seu uso bem sucedido na solucao de varios problemas de otimizacao, como os relatados em Coelho
et al. (2011) e Costa and Oliveira (2001).
O restante desse trabalho esta organizado da
seguinte forma. Na secao 2, e feito um levantamento bibliografico dos problemas de flowshop.
Na secao 3, o problema e formulado e exemplificado. O algoritmo proposto, inspirado no trabalho de Coelho et al. (2011), e descrito na secao 4.
Na secao 5, sao mostrados os resultados encontrados, enquanto a ultima secao conclui o trabalho e
aponta propostas de trabalhos futuros.
2

Revisao da Literatura

Como comentado anteriormente, o HFFL e uma
generalizacao do flowshop hbrido (HFS). O HFS,
por sua vez, e um problema diferente do Flowshop
Flexvel e do Flowline Flexvel, pois, para esses
dois ultimos problemas, as maquinas disponveis
em cada estagio sao identicas. O HFS nao tem

830

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

essa restricao. Alguns estagios podem ter apenas uma maquina, mas pelo menos um estagio
deve ter um grupo de maquinas em paralelo. Estas maquinas geralmente sao diferentes (Burtseva
et al., 2012).
Segundo Ribas et al. (2010), os trabalhos de
pesquisa sobre agendamento HFS apareceram na
decada de 1970. Um dos primeiros trabalhos sobre
HFS na modelagem do sistema de producao em
uma industria de fibras sinteticas e o de Salvador
(1973). Garey and Johnson (1979) mostraram
que o problema HFS com o objetivo makespan e
NP-completo. Assim, como o HFFL e uma generalizacao do HFS, entao o HFFL tambem o e.
Ruiz and Vazquez-Rodrguez (2010) fazem
uma revisao de algoritmos exatos, heursticas e
meta-heursticas para o HFS. Nishi et al. (2010)
apresentam um metodo de relaxacao lagrangeana
com geracao de cortes para esse problema. Ziaeifar et al. (2011) apresentam uma nova modelagem
matematica para o HFS, bem como um algoritmo
genetico. Yaurima et al. (2009) modelaram um
problema de Flowshop Hbrido em linhas de montagem de placas de circuito e utilizaram um Algoritmo Genetico para resolve-lo.
Naderi et al. (2010) chama a atencao para
duas questoes importantes a respeito de HFFL
a determinacao da sequencia em cada estagio e
a distribuicao das tarefas nas maquinas em cada
estagio. E apresentado um algoritmo baseado na
meta-heurstica Iterated Local Search (ILS), com
o objetivo de minimizar o makespan.
Defersha (2010) apresenta um modelo_matematico para o problema de sequenciamento HFFL
baseado em uma tecnica de divisao de tarefas em
subtarefas.
Defersha and Chen (2011) desenvolvem um processo de solucao baseado em Algoritmo Genetico para o HFFL. O algoritmo foi
implementado em plataformas de computacao sequenciais e paralelas, e os desempenhos avaliados e
comparados. Urlings and Ruiz (2010) e Zandieh
et al. (2010) tambem propoem Algoritmos Geneticos para resolucao desse problema. O objetivo
nesses dois ultimos trabalhos e a minimizacao do
makespan.
Pacciarelli and DAriano (2011) e Venditti
et al. (2010) apresentam problemas reais de sequenciamento em industrias farmaceuticas. A
meta-heurstica Busca Tabu e utilizada para resolver tais problemas.
Urlings et al. (2010) tratam a minimizacao do
makespan em problemas HFFL por meio de uma
nova meta-heurstica, denominada SRS. Esse novo
metodo combina um algoritmo guloso iterativo e
o ILS.
3

Formulacao do problema

em um conjunto de estagios M  1, 2, 3,    , m.
Para cada etapa, ha um conjunto Mi de maquinas_paralelas nao-relacionadas. Algumas tarefas
podem saltar estagios. Seguem abaixo as demais
caractersticas que definem o problema
 Fj  Conjunto de estagios que a tarefa j visita,
sendo 1 < Fj < m
 pilj  Tempo de processamento da tarefa j na
maquina l e estagio i.
 rmil  Tempo de release da maquina l no estagio i, isto e, o tempo a partir do qual os processos podem iniciar na maquina. Nenhuma
tarefa pode iniciar na maquina antes desse
tempo.
 Eij  Conjunto de maquinas elegveis para a
tarefa j no estagio i.
 lagilj  Tempo de atraso entre o fim da tarefa
j, na maquina l do estagio i, e o incio do
proximo estagio da tarefa j.
 Siljk  Tempo de preparacao (setup) da maquina l no estagio i, quando a tarefa k e executada logo apos a tarefa j. Existe um valor
binario associado, Ailjk , que indica se o setup
e antecipativo, ou seja, Ailjk assume o valor
1 se a preparacao pode ser feita antes que a
tarefa seja liberada na fase anterior e o valor
0, caso contrario.
A formulacao matematica do HFFL, apresentada a seguir e extrada de Ruiz et al. (2008), considera, ainda, as seguintes notacoes
 Gi  Conjunto de tarefas que visitam o estagio
i (Gi  N e Gi  j  i  Fj ).
 Gil  Conjunto de tarefas que podem ser processadas na maquina l do estagio i.
 F Sk  Primeiro estagio da tarefa k.
 LSk  Ultimo estagio da tarefa k.
e as seguintes variaveis de decisao

Xiljk


 1 Se a tarefa j precede a tarefa k
na maquina l no estagio i


0 Caso contrario

Cij



Cmax 

Instante de termino da tarefa j no
estagio i
O maior tempo de termino

O modelo de programacao matematica do
HFFL esta apresentado pelas equacoes (1) a (12),
a seguir

No problema HFFL, tem-se um conjunto de tarefas N  1, 2, 3, ..., n, que devem ser executadas

ISBN 978-85-8001-069-5

831

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Tabela 1 Elegibilidade
min Cmax
suj. a

X

X

(1)
Xiljk  1, k  N, i  Fk

jGi 0 lEij Eik
j6k
X
Xiljk  1, k  N, i  Fk
jGi lEij Eik
j6k
X
Xilhj  Xiljk ,
hGil 0
h6k,h6j
X

(2)

3
5
5
5
5

Tabela 2 Tempo de processamento e release
(4)

j  N, k  j + 1,    , n, j 
6 k, i  Fj  Fk
X
Xil0k  1, i  M, l  Mi
kGil

(5)

Ci0  0, i  M
Cik + V.(1  Xiljk )  maxrmil , Cij + Ailjk .Siljk 

(7)

j

(6)

+(1  Ailjk ).Siljk + pilk ,
k  N, i  F Sk , l  Eik , j  Gil  0, j 6 k
(8)
Cik + V.(1  Xiljk )  maxCi1,k +
X
X
(lag
.X
),
i1,l ,k
i1,l ,h,k
hGi1 0 l Ei1,h Ei1,k
h6k
rmil , Cij + Ailjk .Siljk  + (1  Ailjk ).Siljk + pilk ,
(9)
(10)

Xiljk  0, 1, j  N  0, k  N,
j 6 k, i  Fj  Fk , l  Eij  Eik

(11)

Cij  0, j  N, i  Fj

(12)

O conjunto de restricoes (2) assegura que cada
tarefa seja precedida por exatamente uma tarefa
em apenas uma maquina em cada estagio. Para
cada maquina considera-se uma tarefa 0, que precede a primeira tarefa em cada maquina. O conjunto de restricoes (3) garante que cada tarefa tenha, no maximo, um sucessor. As restricoes (4)
asseguram que se uma tarefa e processada em uma
maquina, dado um estagio, entao ela deve ter uma
antecessora na mesma maquina. As restricoes (5)
evitam a ocorrencia de precedencias cruzadas. O
conjunto de restricoes (6) assegura que a tarefa
0 so pode ser antecessora de, no maximo, uma
tarefa em cada maquina. O conjunto de restricoes (7) garante que a tarefa 0 e concluda no instante 0 em todos os estagios. As restricoes (8)
controlam o instante de conclusao das tarefas no
primeiro estagio em que iniciar o processamento,
considerando todas as maquinas elegveis. O valor
V representa um numero suficientemente grande
de modo a tornar as restricoes redundantes se a
variavel de atribuicao for zero. Nota-se que as relacoes de precedencia sao consideradas e, tambem,
que ambos os tipos de tempos de setup (antecipativo ou nao) tambem sao levados em consideracao.
O conjunto de restricoes (9) controla os instantes
de conclusao nos estagios subsequentes. Aqui, os
tempo de atraso sao considerados. O conjunto de
restricoes (10) define o tempo maximo de conclusao das tarefas, enquanto (11) e (12) definem as
variaveis de decisao.
De forma a exemplificar o problema, consideremos uma instancia com 5 tarefas e 3 estagios,
com duas maquinas nos dois primeiros estagios

ISBN 978-85-8001-069-5

2
4
3,4
3
3,4

(3)

j, k  N, j 6 k, i  Fj  Fk , l  Eij  Eik
X
(Xiljk + Xilkj )  1,
lEij Eik

k  N, i  Fk F Sk , l  Eik , j  Gil  0, j 6 k
Cmax  CLS ,j , j  N
j

1
1,2
1,2
2
1,2

i
1
2
3
4
5

j

i
l
rmil
pilj
1
2
3
4
5

1
1
4

2
3

2
3
8

4
16

3
5
23

10
6
0
0
11

15
9
0
10
14

0
11
9
0
6

8
4
0
0
12

6
0
8
6
3

e uma maquina no ultimo estagio. A Tabela 1
mostra quais maquinas sao elegveis para cada tarefa em cada estagio. Nesta Tabela, j indica
uma tarefa, e a linha i representa cada um dos
3 estagios. Por essa tabela, pode-se verificar, por
exemplo, que a tarefa 1 pode ser executada nas
maquinas 1 e 2, no estagio 1, e na maquina 4, no
estagio 2. Pode-se verificar tambem, que as tarefas 1 e 5 visitam todos os estagios, enquanto as
tarefas 2, 3 e 4 pulam os estagios 3, 1 e 2, respectivamente.
A Tabela 2 contem o tempo de release para
cada maquina e o tempo de processamento de cada
tarefa em cada maquina, enquanto a Tabela 3
mostra os tempos de atraso. Nestas duas Tabelas,
j indica uma tarefa, a linha i representa cada
um dos 3 estagios, e a linha l representa cada
uma das 5 maquinas. Na Tabela 2 a linha rmil
indica os tempos de release para cada maquina, e
cada celula pilj os tempos de processamento.
A Tabela 4 mostra os tempos de preparacao (tempos de setup), que sao dependentes da
sequencia, e seus valores binarios associados. Esse
valor binario representa se o setup e antecipativo
(1), ou nao (0). Nesta Tabela, j e k indicam
uma tarefa, a linha i representa cada um dos 3
estagios, e os dados de cada maquina em cada estagio estao separados por vrgula. Por exemplo,
o tempo de setup entre as tarefas 1 e 4 na maquina 2 do primeiro estagio e igual a 8 e o valor
binario igual a 1 (antecipativo), porem o setup na
maquina 1 nao existe pois essa maquina nao e elegvel para a tarefa 4.
A Figura 1 ilustra um possvel sequenciamento para esse exemplo. Note que o makespan
para esse sequenciamento e igual a 63.

Tabela 3 Tempo de atraso
j

i
l
1
2
3
4
5

1
1
10
2
0
0
-5

2
2
-2
0
1
-6

2
3
0
0
3
0
-3

4
-4
0
0
0
8

832

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

4.2

Tabela 4 Tempos de setup e valores Ailjk
1
1
-,4(0),5(0)
-,-,8(0)
6(0),10(0)
2
-,-,5(1)
-,-,-,4(1)
3
4(0)
5(0)
2(0)

i
k
1
2
3
4
5
i
1
2
3
4
5
i
1
2
3
4
5

j

j

j

i

2
3(1),6(1)
-,-,-,-,-

3
-,-,-,-,-,-

4
-,8(1)
-,6(1)
-,-,-,4(0)

5
4(1),2(1)
1(1),4(1)
-,-,2(1)
-,-

-,6(1)
-,8(0),-,-,-

-,6(0),-,-,-,-

-,-,-,-,-,-

-,6(1)
4,2(0)
5(1),-,-,-

-

6(1)
-

3(1)
1(0)
6(0)

9(1)
8(1)
2(1)
-

l
4

1

rm

2

rm

1

14 18
S

1

3

12

29
5

18

28

S

2

4

Tipos de Mutacao

A exploracao do espaco de solucoes do problema
e feita com base em quatro tipos de mutacao (ou
movimentos, quando o uso e voltado para a fase
de refinamento)
 Troca na sequencia consiste em um dado estagio fazer a troca de posicao entre duas tarefas da sequencia
 Realocacao na sequencia consiste em escolher uma tarefa em um dado estagio e mudala para uma nova posicao na sequencia
 Troca de maquina consiste em considerar
duas tarefas de um dado estagio e trocar as
maquinas que as executam
 Realocacao de maquina consiste em realocar
uma tarefa de um dado estagio para uma nova
maquina

lag

8 10

3

21

2

27

4.3

36

S

2

rm

3

lag

16

24

4

32

38
S

1

rm

lag

23

3

28

5

10

lag

15

20

25

lag

34

30

40
S

1

rm

5

50
5

35

48
3

40

55
4

45

50

55

60 63
S 5

60

Figura 1 Diagrama de GANTT. Cmax  63
4

Algoritmo proposto

O algoritmo proposto, denominado EE-NEHVND, e uma Estrategia Evolutiva (ES) em que
a solucao inicial e gerada pela fase de construcao do procedimento Greedy Randomized Adaptive Search Procedure  GRASP (Feo and Resende, 1989). O seu pseudocodigo esta esquematizado no Algoritmo 1.
Algoritmo 1 EE-NEH-VND
Entrada , , , , criterioParada

Descricao do Algoritmo Proposto

1. incio

4.1

Representacao de um indivduo

2.

Um indivduo ind do problema e representado por
uma dupla (s, M ) e por dois vetores de parametros de mutacao (prob e a), em que s e um vetor de estagios, e para cada estagio esta associado
um vetor que contem a sequencia de tarefas para
processamento, e por uma matriz M , usada para
identificar em qual maquina a tarefa e executada
em cada estagio. Os vetores prob e a contem um
numero de posicoes igual a quantidade de tipos
diferentes de mutacao, sendo que em cada posicao
de prob armazena-se a probabilidade de aplicar um
tipo de mutacao, enquanto que em a armazena-se
a intensidade dessa mutacao, isto e, a quantidade
de vezes em que ela e aplicada.
A Figura 2 ilustra a dupla (s, M ) para o indivduo apresentado no exemplo considerado.

Para w  1 ate  faca

3.

sw  construcaoGRASP()

4.

Inicialize o vetor de probabilidade de mutacao aw 

5.

Inicialize o vetor de intensidade de mutacao probw 

6.

Forme indw aplicando os vetores probw e aw a sw 

7.

P opw  indw 

8.

Fim

9.

repita

10.

Para w  1 ate  faca

11.

y  numero inteiro aleatorio entre 1 e 

12.

indw  P opy 

13.

indw  mutacaoParametros(indw , real , binomial )

14.

F ilhow  mutacaoIndividuo(indw )

15.

Fim

16.

Para w  1 ate  faca

17.

y  numero inteiro aleatorio entre 1 e 

18.

F ilhoy  VND(F ilhoy )

19.

Fim

20.
21.

Pop  selecao(Pop, Filhos, )
ate Criterio de parada ser satisfeito

22. fim
23. retorne melhorIndividuoPop()

Matriz M

Sequencia de Tarefas
1

2

3

4

5

1

1

2

0

2

1

1

2

1

5

4

2

2

1

3

5

2

4

3

3

0

4

5

3

5

0

5

5

5

3

1

3

4

Figura 2 Representacao de parte de um indivduo

ISBN 978-85-8001-069-5

O algoritmo EE-NEH-VND e dividido em
duas fases, sendo a primeira representada nas linhas 2 a 8, nas quais e gerada uma populacao
inicial de  indivduos.
A segunda fase (linhas 9 a 21) consiste em gerar uma populacao de  filhos por meio de mutacao. A seguir, e aplicado o metodo Variable Neighborhood Descent  VND (Hansen et al., 2008) para

833

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

uma quantidade  de filhos, com  < . O VND,
descrito pelo Algoritmo 4, nao e aplicado a todos
os indivduos da populacao de filhos por causa de
seu alto custo_computacional. Apos esses procedimentos, sao selecionados, dentre a populacao de
pais e filhos, os indivduos sobreviventes para a
proxima geracao. Esses passos sao repetidos ate
que um criterio_de_parada seja atendido. Cada
um dos procedimentos que compoe o algoritmo
proposto sao, a seguir, detalhados.
A populacao inicial e gerada por um procedimento de construcao GRASP. Inicialmente,
calcula-se o tempo medio de processamento em
cada estagio para cada tarefa, isto e, se uma tarefa j pode passar por duas maquinas no estagio
i e, essas maquinas consomem os tempos pij1 e
pij2 , entao a essa tarefa j sera atribudo o tempo
medio, dado por pij  (pij1 + pij2 )2. A seguir, e calculado, para cada tarefa j, o somatorio desses tempos medios de processamento em
todosPos estagios, isto e, e calculado o tempo
pj  i pij . Com base nessa regra de avaliacao de
uma tarefa, e construda uma lista de candidatos
(LC) ordenada, em ordem decrescente, das tarefas. Apos esse ordenamento, e criada um Lista
Restrita de Candidatos (LRC) contendo as tarefas melhor classificadas segundo essa regra de
avaliacao. Assim, LRC  j  LC  pj 
pmax    (pmax  pmin ), sendo pmin e pmax ,
respectivamente, o menor e maior somatorio do
tempo medio de processamento. O parametro 
foi fixado em 0,8. Na primeira iteracao sao selecionadas, aleatoriamente, duas tarefas j  LRC
e executado o procedimento NEH Adaptado de
Ruiz et al. (2008). Esse procedimento procura o
melhor sequenciamento possvel entre essas duas
tarefas. Nesse sequenciamento a tarefa escolhida
e executada na maquina que possa termina-la o
mais cedo. Na segunda iteracao essas duas tarefas sao retiradas da LC e reconstruda a LRC.
Uma unica tarefa da LRC e, entao, escolhida aleatoriamente, sendo novamente aplicado o procedimento NEH Adaptado, desta vez para verificar a
melhor posicao de insercao da tarefa escolhida. O
processo continua retirando a tarefa escolhida da
LC, reconstruindo a LRC e aplicando o procedimento NEH ate que todas as tarefas tenham sido
sequenciadas. Observa-se que esta estrategia de
geracao de solucao inicial gera uma sequencia que
e a mesma para todos os estagios.
Nas linhas 4 a 6 do Algoritmo 1 e formado
um indivduo ind a partir da aplicacao dos vetores
prob e a a um indivduo (sequencia) s. Para tanto,
o vetor de probabilidade de mutacao prob de cada
indivduo e inicializado com um numero real escolhido aleatoriamente no intervalo 0, 1 para cada
um dos quatro tipos de mutacao, enquanto que
o vetor a de intensidade de mutacao desse indivduo e inicializado com um numero inteiro escolhido aleatoriamente no conjunto 1,    , 8.

ISBN 978-85-8001-069-5

O Algoritmo 2 mostra como os vetores de parametros de mutacao sao modificados (linha 13
do Algoritmo 1). Para o vetor prob de probabilidade aplica-se uma mutacao seguindo uma distribuicao normal com desvio-padrao real e media
zero. Para o vetor a de intensidade aplica-se uma
mutacao seguindo uma distribuicao binomial com
desvio-padrao binomial e media zero.
Algoritmo 2 mutacaoParametros
Entrada indivduo, real , binomial
1. incio
2.

prob  Vetor de probabilidade do indivduo

3.

a  Vetor de intensidade do indivduo

4.

Para l  1 ate 4 faca

5.
6.
7.

probl  probl + N(0, real )
al  al + B(0, binomial )
Fim

8. retorna individuo

O Algoritmo 3 mostra o pseudocodigo da mutacao dos indivduos (linha 14 do Algoritmo 1).
Para cada tipo de mutacao e gerado um numero
real aleatorio entre 0 e 1 (linha 6), e verificado
se esse valor satisfaz a condicao de probabilidade
probl (linha 7). Caso afirmativo, aplica-se al vezes o respectivo tipo de mutacao. A ordem das
mutacoes e escolhida aleatoriamente.
Algoritmo 3 mutacaoIndividuo
Entrada individuo
1. incio
2.

prob  Vetor de probabilidade do indivduo

3.

a  Vetor de intensidade do indivduo

4.

v  Vetor de movimentos em ordem aleatoria

5.

Para l  1 ate 4 faca

6.

z  numero real aleatorio entre 0 e 1

7.

se z < probl entao

8.

Para y  1 ate al faca

9.

individuo  AplicaMutacao(indivduo, vl )

10.
11.
12.

Fim
Fim
Fim

13. retorna individuo

Na linha 18 do Algoritmo 1 e feito o refinamento de  indivduos filhos pelo metodo Variable
Neighborhood Descent  VND. O metodo VND e
um algoritmo_de_busca_local em vizinhanca variavel, e esta detalhado no Algoritmo 4. Ele consiste
em procurar o melhor vizinho variando sistematicamente os tipos de movimento (detalhados na
secao 4.2) usados na exploracao do espaco de solucoes. Se o melhor vizinho com relacao a um
determinado tipo de movimento for melhor que a
solucao corrente, a solucao corrente e atualizada e
o procedimento reiniciado caso contrario, o tipo
de movimento e alterado. Esses passos sao repetidos ate que nao se consiga melhorar a solucao para

834

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Tabela 5 Famlia de Instancias

Famlia de Instancias
15 2 1 1
15 2 3 1
15 3 1 1
15 3 3 1
50 4 2 1
50 4 4 1
50 8 2 1
50 8 4 1

n
15
15
15
15
50
50
50
50

m
2
2
3
3
4
4
8
8

mi
1
3
1
3
2
4
2
4

Tabela 6 Parametros das variantes do algoritmo
Variante
EE-NEH-VND1
EE-NEH-VND2


100
60


600
200


5
5

nenhuma das estruturas de vizinhanca. A ordem
em que os tipos de movimentos sao aplicados e
aleatoria tal como em Souza et al. (2010).
Algoritmo 4 VND
Entrada ind
1. incio
2.

r  Quantidade de movimentos (no caso, r  4)

3.

v  Vetor de movimentos em ordem aleatoria

4.

q  1

5.

enquanto q  r faca

6.

ind  melhor vizinho com movimento q

7.

se ind melhor que ind entao

8.

ind  ind 

9.

q  1

12.
13.

90
80
70

senao

11.

Alvo 1040
100

Probabilidade()

10.

do problema seguindo o procedimento apontado
em Aiex et al. (2007). Em todas elas, o comportamento foi o mesmo. A Figura 3 ilustra uma
dessas analises. Ela foi gerada a partir da aplicacao das variantes do algoritmo a uma instancia
da famlia 15 3 3 1, denominada Ism1533120005075-12550-100-99-990-03. O algoritmo foi executado 100 vezes para cada uma
das variantes consideradas. Sempre que a funcao objetivo atingia o valor 1040, distante de 3
do valor otimo, a execucao era interrompida e o
tempo registrado. Esses tempos foram, entao, ordenados de forma crescente e, para cada tempo ti
foi associada uma probabilidade acumulada, dada
por pi (i - 0,5)100. A seguir, os pontos (ti , pi , )
foram plotados, resultando na Figura 3.
O grafico da Figura 3 mostra que a variante
EE-NEH-VND1 e a primeira a atingir o alvo desejado com uma probabilidade de quase 100,
alcancando-o em cerca de 250000 milisegundos,
enquando a EE-NEH-VND2 somente o alcanca em
aproximadamente 600000 ms.

q  q + 1
Fim
Fim

14. retorna individuo

60
50
40
30
20

Os  indivduos que comporao a proxima geracao (linha 20 do Algoritmo 1) sao aqueles com os
menores valores de makespan, dentre a populacao
de pais e filhos.
Por fim, apos o criterio_de_parada ser atingido,
e retornado o melhor indivduo da populacao final.
5

Resultados

O algoritmo proposto foi implementado em C++,
utilizando-se a IDE Borland C++ Builder 6. Os
testes foram executados em um computador Intel
Core i5-2310, 2.90GHz, com 4 GB de memoria
RAM, sob sistema operacional Windows 7 64 bits.
Para testa-lo foram utilizadas 8 famlias de
instancias, de Ruiz et al. (2008), cujas caractersticas principais estao mostradas na Tabela 5.
Nesta Tabela, n e a quantidade de maquinas, m
e o numero de estagios e mi o numero de maquinas em cada estagio. Como em cada famlia ha 12
instancias, ha um total de 96 instancias.
Foram consideradas duas variantes do algoritmo testado, que se diferem entre si pelos valores
adotados para os parametros. A Tabela 6 mostra
os valores adotados em cada variante.
Em seguida, foram realizadas varias analises
de probabilidade emprica em diversas instancias

ISBN 978-85-8001-069-5

10
EE-NEH-VND1
EE-NEH-VND2
0
0

100000

200000

300000

400000

500000

600000

Tempo (ms)

Figura 3 Analise de Probabilidade Emprica
Em vista desse comportamento, a variante
EE-NEH-VND1 foi escolhida para ser comparada
com um algoritmo da literatura, no caso, o Algoritmo Genetico de Urlings and Ruiz (2010). Foram feitas 10 execucoes da variante do algoritmo
proposto para cada uma das 96 instancias. O criterio_de_parada para esses testes foiP
o tempo de
execucao, calculado como 50  n  m
i1 mi milisegundos, sendo n o numero de tarefas e mi a
quantidade de maquinas por estagio. Esse criterio
e o mesmo adotado em Ruiz et al. (2008).
O algoritmo EE-NEH-VND1 foi comparado
em relacao a tres aspectos 1) Influencia da busca
local VND 2) Capacidade de encontrar as melhores solucoes existentes e 3) Variabilidade das solucoes finais. Para avaliar o primeiro aspecto, foram
eliminadas as chamadas ao metodo VND, isto e,
as linhas 16 a 19 do Algoritmo 1. O algoritmo com
tal restricao foi denotado por EE-NEH. Para avaliar o segundo aspecto, calculou-se o gap das melhores solucoes geradas pelo algoritmo para cada
grupo de instancias em relacao aos valores otimos

835

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Tabela 7 gap medio do algoritmo
Instancia
15 2 1 1
15 2 3 1
15 3 1 1
15 3 3 1
50 4 2 1
50 4 4 1
50 8 2 1
50 8 4 1
Media

gap Melhor
makespan
EE-NEH
3,59
13,94
4,49
12,61
12,73
9,08
6,07
0,77
7,91

gap melhor
makespan
EE-NEH-VND1
1,26
3,94
1,38
4,19
6,02
1,14
-0,35
-7,66
1,24

gap do
makespan medio
EE-NEH-VND1
1,53
5,68
1,80
5,96
7,36
3,03
0,93
-6,31
2,50

(no caso das instancias envolvendo 15 tarefas) ou
melhores valores da literatura (no caso das instancias de 50 tarefas). Para avaliar o terceiro aspecto,
em lugar dos melhores valores, sao calculados os
valores medios encontrados pelo algoritmo.
A Tabela 7 mostra os resultados da comparacao da variante EE-NEH-VND1 do algoritmo
proposto com relacao aos tres aspectos apontados.
Na primeira coluna dessa Tabela sao apresentados os conjuntos de instancias na segunda coluna
e apresentado para cada conjunto de instancias o
gap dos melhores valores para o makespan encontrados nas 10 execucoes do algoritmo sem a aplicacao da fase de busca local na terceira coluna
os valores se referem ao gap dos melhores valores
para o makespan do algoritmo com a aplicacao da
fase de busca local e, finalmente, na ultima coluna,
o gap dos valores medios do makespan. Neste ultimo caso, o gap e em relacao a melhor solucao
conhecida na literatura, encontrada em Urlings
and Ruiz (2010).
Os resultados encontrados mostram claramente a influencia da busca local no algoritmo
proposto. De fato, em todas as instancias houve
reducao no valor do makespan quando o refinamento baseado em VND foi aplicado. Por outro lado, o algoritmo proposto conseguiu melhorar
as solucoes de dois conjuntos de instancias, sendo
bastante significativa a melhora em um desses grupos, inclusive em relacao aos valores das solucoes
medias. Entretanto, em algumas instancias o gap
mostrou-se elevado. Na media, o gap das melhores solucoes foi de 1,24 e o das solucoes medias
foi de 2,50.
Alguns detalhes dos experimentos sao apontados a seguir. Em cerca de 14 das instancias
de 15 tarefas, o algoritmo proposto conseguiu alcancar o valor otimo em todas execucoes, e em
cerca de 23, esse valor foi atingido pelo menos
uma vez. Ja para as instancias de 50 tarefas, em
cerca de 35 delas a estrategia evolutiva encontrou melhores resultados que o da literatura em
todas as execucoes, e em aproximadamente 42,
os resultados da literatura foram superados pelo
menos uma vez. Dos 48 otimos globais conhecidos, o algoritmo desenvolvido foi capaz de encontrar 11 deles e aqueles em que ele nao encontrou
o otimo conhecido, o gap foi de 3,80. Nos 48
outros problemas-teste em que o otimo global nao
era conhecido, o algoritmo EE-NEH-VND1 pro-

ISBN 978-85-8001-069-5

duziu solucoes, em media, 0,21 melhores, tendo
em vista o gap da melhor solucao obtida pelo algoritmo em relacao a melhor solucao conhecida ate
entao.
6

Conclusoes e trabalhos futuros

Este trabalho tratou o problema de sequenciamento flowshop hbrido e flexvel, com o objetivo
de minimizar o makespan. Em vista de sua complexidade, ele foi resolvido por meio de um algoritmo baseado em Estrategias Evolutivas.
No algoritmo proposto, as solucoes iniciais foram geradas pela aplicacao da fase de construcao
GRASP usando a regra de avaliacao NEH. O principal mecanismo de busca no espaco de solucoes
do algoritmo desenvolvido e a mutacao, que e feita
com base em dois vetores, sendo um relativo a
probabilidade de aplicar cada tipo de mutacao,
e outro relativo ao numero de vezes em que cada
mutacao e aplicada. Feita a mutacao, uma parcela
da populacao de filhos e refinada por um procedimento de busca local baseado no metodo Variable
Neighborhood Descent (VND).
Duas variantes do algoritmo proposto, que se
diferem pelo tamanho das populacoes de pais e
filhos, foram testadas. A variante nomeada EENEH-VND1, que fixava as populacoes de pais e filhos em 100 e 600 indivduos, foi a que teve melhor
desempenho nos testes de distribuicao de probabilidade emprica, em que se buscava alcancar um
valor alvo.
Em seguida, os resultados dessa variante foram comparados com os de um algoritmo recente
da literatura, tendo-se por base 96 problemasteste encontrados na literatura. No computo geral, o algoritmo EE-NEH-VND1 teve desempenho
pior. No entanto, os resultados mostraram que o
algoritmo proposto teve um desempenho melhor
nas instancias maiores, tendo conseguido melhorar um numero significativo de resultados da literatura. Nessas instancias, os resultados encontrados foram, em media, 0,21 melhores.
Como trabalhos futuros, propoe-se testar a geracao de solucoes iniciais com outras regras de
avaliacao, desenvolver outros tipos de mutacao,
bem como testar o desempenho do algoritmo em
problemas-teste de maior porte.
7

Agradecimentos

Os autores agradecem ao CEFET-MG e as agencias CAPES, CNPq e FAPEMIG, pelo apoio ao
desenvolvimento deste trabalho.
Referencias
Aiex, R., Resende, M. and Ribeiro, C. (2007). Tttplots a perl program to create time-to-target
plots, Optimization Letters 1 355366.

836

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Beyer, H. G. and Schwefel, H. P. (2002). Evolution strategies - a comprehensive introduction, Natural Computing 1 352.
Burtseva, L., Romero, R., Ramirez, S., Yaurima,
V., Gonzalez-Navarro, F. F. and Perez, P. F.
(2012). Lot processing in Hybrid Flow Shop
scheduling problem, Production Scheduling,
InTech, pp. 6596.
Coelho, V. N., Souza, M. F. J., Coelho, I. M., Guimaraes, F. G. and Coelho, B. N. (2011). Estrategias evolutivas aplicadas a um problema
de programacao inteira mista, Anais do X
Congresso Brasileiro de Inteligeencia Computacional, Fortaleza, novembro de 2011, 8p.
Costa, L. and Oliveira, P. (2001). Evolutionary algorithms approach to the solution of
mixed integer non-linear programming problems, Computers  Chemical Engineering
25(10) 257266.

Ribas, I., Leisten, R. and M.Framinan, J. (2010).
Review and classification of hybrid flowshop
scheduling problems from a production system and a solutions procedure perspective,
Computers  Operations Research 37 1439
1454.
Ruiz, R., Sivrikaya, F. and Urlings, T. (2008). Modeling realistic hybrid flexible flowshop scheduling problems, Computers  Operations
Research 35 11511175.
Ruiz, R. and Vazquez-Rodrguez, J. A. (2010).
The hybrid flow shop scheduling problem,
European Journal of Operational Research
205 118.
Salvador, M. (1973). A solution to a special class
of flowshop scheduling problems, Symposium
on the theory of scheduling and its applications, BerlinSpringer, pp. 8391.

Defersha, F. M. (2010). A comprehensive mathematical model for hybrid flexible flowshop lot
streaming problem, International Journal of
Industrial Engineering Computations 2 283
294.

Souza, M. J. F., Coelho, I. M., Sabir, S., Santos, H. G. and Merschamann, L. H. C.
(2010). A hybrid heuristic algorithm for the
open-pit-mining operational planning problem, European Journal of Operational Research 207 10411051.

Defersha, F. M. and Chen, M. (2011). Mathematical model and parallel genetic algorithm
for hybrid flexible flowshop lot streaming problem, International Journal of Advanced Manufacturing Technology 57 117.

Urlings, T. and Ruiz, R. (2010). Genetic algorithms with different representation schemes for complex hybrid flexible flow line problems, International Journal of Metaheuristics 1 3054.

Feo, T. and Resende, M. (1989). A probabilistic
heuristic for a computationally difficult set
covering problem, Operations Research Letters 8 6771.

Urlings, T., Ruiz, R. and Stutzle, T. (2010). Shifting representation search for hybrid flexible
flowline problems, European Journal of Operational Research 207 10861095.

Garey, M. and Johnson, D. (1979). Computers
and intractability a guide to the theory of
NP-completness, Freeman, San Francisco.

Venditti, L., Pacciarelli, D. and Meloni, C. (2010).
A tabu search algorithm for scheduling pharmaceutical packaging operations, European
Journal of Operational Research 202 538
546.

Hansen, P., Mladenovic, N. and Perez, J.
A. M. (2008). Variable neighborhood search
methods and applications, 4OR Quarterly
journal of the Belgian, French and Italian
operations research societies 6 319360.
Naderi, B., Ruiz, R. and M.Zandieh (2010). Algorithms for a realistic variant of flowshop
scheduling, Computers  OperationsResearch 37 236246.
Nishi, T., Hiranaka, Y. and Inuiguchi, M. (2010).
Lagrangian relaxation with cut generation for
hybrid flowshop scheduling problems to minimize the total weighted tardiness, Computers
 Operations Research 37 189198.
Pacciarelli, D. and DAriano, A. (2011). Increasing the reliability of production schedules
in a pharmaceutical packaging department,
Journal of Medical Systems 35 115.

ISBN 978-85-8001-069-5

Yaurima, V., Burtseva, L. and Tchernykh, A.
(2009). Hybrid flowshop with unrelated machines, sequence-dependent setup time, availability constraints and limited buffers, Computers  Industrial Engineering 56 1452
1463.
Zandieh, M., Mozaffari, E. and Gholami, M.
(2010). A robust genetic algorithm for scheduling realistic hybrid flexible flow line problems, Journal of Intelligent Manufacturing
21 731743.
Ziaeifar, A., Tavakkoli-Moghaddam, R. and Pichka, K. (2011). Solving a new mathematical model for a hybrid flow shop scheduling
problem with a processor assignment by a genetic algorithm, International Journal of Advanced Manufacturing Technology 56 111.

837