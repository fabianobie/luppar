XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

MULT-IO - UM MIDDLEWARE MULTI ENTRADA E SAÍDA PARA ACESSO A DISPOSITIVOS UM ESTUDO DE CASO
APLICADO A DISPOSITIVOS BIOMÉDICOS

JOÃO M. T. LACERDA, JAILTON C. PAIVA, RICARDO A. M. VALENTIM, HELIANA B.SOARES,
GLÁUCIO B. BRANDÃO, ANA M. G. GUERREIRO
Laboratório de Automação e Laboratório de Automação Hospitalar e Bio-Engenharia, Departamento de
Engenharia de Computação e Automação  Universidade Federal do Rio Grande do Norte Caixa Postal 1524 59072-970 - Natal - RN - Brasil
E-mails jonymac@dca.ufrn.br, jailton@dca.ufrn.br, ricardo.valentim@ufrnet.br,
heliana@dca.ufrn.br, glaucio@dca.ufrn.br e anamaria@dca.ufrn.br
BRUNO G. ARAÚJO
Diretoria de Educação e Tecnologia da Informação  Instituto Federal de Educação, Ciência e Tecnologia do
Rio Grande do Norte Av. Sen. Salgado Filho, 1559, Tirol, Natal-RN, CEP 59015-000
E-mails bruno.gomes@ifrn.edu.br
CICÍLIA R. M. LEITE
Departamento de Informática - Universidade do Estado do Rio Grande do Norte (UERN) e Faculdade de
Ciências e Tecnologia Mater Christi - Mossoró-RN-Brasil Caixa Postal 70  59633-010 - Mossoró - RN Brasil
E-mails cicilia@dca.ufrn.br
Abstract The great diversity in the architecture of hardware devices allied to many communication protocols, has been hindering the implementation of systems that need to access these devices. Given these differences, it appears the need of providing
the access of these devices in a transparent way. In this sense, the present work proposes a middleware, mult input and output for
access the devices, as a way of abstracting the writing and reading data mechanisms in hardware devices, contributing this way,
for increasing systems productivity, as the developers are just focused in their functional requirements.
Keywords Middleware, Biomedic Devices, Input and Output, Software Oriented Architecture.
Resumo A grande diversidade na arquitetura de dispositivos de hardware, aliada aos seus diferentes protocolos_de_comunicação, tem dificultado a implementação de sistemas que necessitam realizar o acesso a esses dispositivos. Diante dessas diferenças, surge a necessidade de prover o acesso a esses dispositivos de forma transparente. Neste sentido, o presente trabalho propõe
um middleware multi entrada_e_saída para acesso a dispositivos, como forma de abstrair o mecanismo de escrita e leitura de dados em dispositivos de hardware, contribuindo desta forma, para o aumento na produtividade dos sistemas, uma vez que os desenvolvedores estão focados apenas nos seus requisitos funcionais.
Palavras-chave .

1

monitoramento de pacientes, a aquisição_de_sinais
biomédicos, entre outras.
Neste contexto, têm surgido propostas de arquitetura_orientada_a_serviço (Service Oriented Architecture  SOA) para dispositivos de Hardware (SODA 
Software Oriented Device Architecture), como mecanismo para construção de interfaces abertas na
forma de acesso (IO  Input and output) aos dispositivos de qualquer natureza, Scott, et. al, (2006).
Este trabalho tem como objeto de estudo, a proposta de um modelo de arquitetura_orientada_a_serviço para acessar dispositivos de hardware, aqui intitulado de Mult-IO. O Mut-IO implementa uma visão
baseada em uma interface aberta, a qual permite manipular elementos de entrada_e_saída de um hardware
de forma transparente. Com vista, para validar o
Mult-IO foi realizado um estudo de caso dirigido a
dispositivos biomédicos, uma vez que estes equipamentos utilizam arquitetura e protocolos proprietários
para comunicação.

Introdução

A rápida disseminação de novos dispositivos de
hardware no mercado tem aumentado a complexidade na comunicação entre esses. Segundo Valentim
(2008), muitos dispositivos de hardware disponibilizam suas funcionalidades através de protocolos proprietários, de drivers que são dependentes de uma
plataforma de sistema operacional. Diante desse ambiente fechado e heterogêneo de hardware, uma
questão precisa ser discutida, a interoperabilidade.
Isso porque, quanto mais divergentes forem, mais
difícil e complexo serão os mecanismos de integração. Esse aspecto torna-se ainda mais forte quando se
trata de arquiteturas proprietárias. Essa problemática
está ainda mais presente na área biomédica, na qual
muitos de seus dispositivos são proprietários e, portanto, dificultam o acesso e conseqentemente o desenvolvimento de aplicações, como por exemplo, o

4202

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Nesta perspectiva, o presente trabalho contribui
para que o acesso aos dispositivos de hardware seja
independente de drivers, plataforma de desenvolvimento e sistema operacional. Outra contribuição é o
encapsulamento provido pelo modelo, que abstrai do
cliente o mecanismo de acesso ao dispositivo (IO),
bem como os protocolos de acesso. Neste sentido,
permitindo que o desenvolvimento de aplicações seja
focado nas regras de negócio, possibilitando então
uma maior produtividade. Esse fator é substancial em
se tratando da área médica, pois permitirá, por exemplo, que a equipe de tecnologia da informação de um
hospital, possa desenvolver aplicações de monitoramento de pacientes sem precisar conhecer como funcionam os dispositivos biomédicos relativos a está
função, contribuindo dessa forma, para a redução dos
custos e riscos e para o aumento da produtividade.
O Mult-IO atua como um middleware de aplicações clientes para acesso a dispositivos de hardware,
seja por uma porta USB, serial, paralela, interface de
rede, entre outras. Neste sentido, a principal função
do modelo proposto será a de abstrair (tornar transparente) os mecanismos de escrita e leitura das aplicações clientes no acesso aos dispositivos de hardware,
neste caso, os dispositivos biomédicos.
A proposta de uma arquitetura_orientada_a_serviço como um middleware, aliada ao paradigma de
dispositivos eletrônicos não é nova. Sales (2005) usa
SOA no intuito de monitorar processos_industriais de
forma distribuída e independente de plataforma, abstraindo o mecanismo de acesso dos sistemas de supervisão aos CLPs (CLP  Controlador Lógico Programável). Essa é uma proposta eficiente, pois aumenta a produtividade dos sistemas supervisores no
âmbito industrial. No entanto, por ser específica aos
CLPs, não tem uma abordagem generalista que permita abstrair o acesso aos dispositivos de tipos diversos, tal qual o Mult-IO.
Neste contexto, o conceito de SODA, proposto
por Deugd et. S. (2006) foi concebido como uma
adaptação de SOA para a aplicação em dispositivos.
O principio básico da proposta SODA, portanto, é o
de reunir padrões existentes tanto no domínio de TI
(Tecnologia da Informação) como o usado em dispositivos, cujo objetivo é reduzir a complexidade e os
custos gerados na integração destes.
Como descrito acima, é possível modelar um
dispositivo como se fosse um serviço, para tanto, é
definida uma interface que descreve os seus mecanismos de acesso, que geralmente é executado através de um modelo de requisição e resposta (arquitetura clienteservidor). Todavia, apesar de ser uma boa
proposta, SODA é uma tecnologia muito nova e que
ainda não foi validada. Nesta perspectiva, a proposta
Mult-IO contribui também para demonstrar a viabilidade SODA através de testes experimentais.

2 Mult-IO
Um desenvolvedor, ao implementar uma aplicação que precisa acessar um determinado dispositivo
de hardware, se depara com alguns problemas
 Mecanismos de acesso do dispositivo
 Implementação dos métodos de acesso ao
dispositivo
 Lógica de negócio da aplicação passa a ficar
em segundo plano.
Esses problemas serviram de motivação para o desenvolvimento da proposta Mult-IO, que efetivamente é uma camada de software distribuída que faz a
intermediação entre as requisições e respostas direcionadas aos dispositivos de hardware.
O middleware em questão pode ser contextualizado em um ambiente corporativo, pois geralmente é
bastante heterogêneo. A Figura 1 ilustra o Mult-IO
inserido nesse ambiente, sobretudo ilustrando a heterogeneidade, tanto nas aplicações que acessam os
dispositivos de hardware, quanto nos próprios dispositivos, ou seja, o Mult-IO age como elemento de
acesso entre as aplicações e os dispositivos. Deste
modo, tornando homogêneo o acesso a esses.
Desenvolvedores de aplicações que utilizam linguagens de programação como Java, C ou Python, e
qualquer outra que forneça suporte a SOA, poderão
acessar dispositivos de hardware sem a necessidade
de ter a implementação do acesso a esses dispositivos
dentro de suas aplicações.

Figura 1. O ambiente do Mult-IO

A Figura 1 apresenta requisições sendo realizadas por aplicações clientes de forma remota, através
de uma arquitetura_orientada_a_serviço, que no MultIO é implementada através de Web Services (Stal,
2002). Nessa arquitetura, o conceito de marshalling e
unmarshalling (Hamilton, et. al, 1993) são implementadas através da tecnologia XMLRPC utilizada
pelos Web Services. Basicamente, são requisições
feitas na linguagem de programação nativa da aplicação, que necessita acessar um dispositivo qualquer.
Essas requisições operam sobre o padrão W3C XML
(W3C, 2010). O código XML que chega ao Mult-IO
é processado, e posteriormente, com base no processamento, o Mult-IO realiza o acesso ao dispositivo
de destino que aplicação cliente requisitou.
A comunicação realizada sobre o Mult-IO ocorre através de um repositório de dispositivos, o
qual permite a ele identificar exatamente o dispositi4203

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

vo requisitado, provendo deste modo, acesso transparente s aplicações clientes.

O padrão de projeto Factory Method tem uma
importância fundamental na API Mult-IO, no sentido
de torná-la dinâmica em relação s implementações
das interfaces de comunicação. Para isso, será dada
uma interface para a aplicação cliente, no qual conhecerá apenas a assinatura dos métodos, sem detalhes de implementação. A alternância na implementa

2.1Arquitetura
Conforme ilustrado na Figura 2, há dois componentes_principais na arquitetura do Mult-IO, a implementação das interfaces de comunicação (API
Mult-IO) e a implementação de um serviço baseado
em SOA (Componente SOA).

Figura 2. Principais elementos da arquitetura Mult-IO
Figura 4. Principais elementos da arquitetura Mult-IO

A API Mult-IO (Figura 3) integra as diferentes
implementações de acesso a dispositivos, tais como
USB, Serial, Paralela, IEEE 802. Essa API provê
uma interface remota para a aplicação que servirá de
base para as requisições de IO. As diferentes implementações são definidas de acordo com a interface de
comunicação que o dispositivo implementa. Durante
o processo que estabelece a comunicação, o middleware Mult-IO utiliza o padrão de projeto Factory
Method (GoF, 1998), para criar uma interface adequada ao dispositivo. Para isso é realizada uma consulta ao Repositório de Dispositivos que contém as
informações pertinentes dos dispositivos integrados
ao Mult-IO.
A Figura 4 ilustra o Repositório de Dispositivos
implementado no Mult-IO, como um Sistema de
Gerenciamento de Banco de Dados, nesse caso o
MySQL. O repositório possui duas tabelas
INTERFACE e DISPOSITIVO, de modo que o relacionamento entre elas é, respectivamente, de um para
muitos.

ção das interfaces de comunicação dependerá de uma
demanda da aplicação cliente em relação ao dispositivo. Ou seja, o cliente não saberá se o dispositivo se
comunica via porta USB, paralela ou RS-232, ele
apenas o escolherá para trocar informações. O código
executado estará atrelado ao Repositório de dispositivos (Figura 3).
O componente SOA terá como base o framework SOAP, que é a implementação do protocolo
SOAP (W3C, 2010) direcionada a certa linguagem
de programação, ou seja, ele sofrerá variação de acordo com a linguagem implementada. Por exemplo,
o Apache Axis (Apache, 2010) para a linguagem Java
ou Nusoap (Microsoft, 2010) para a linguagem PHP.
O protocolo SOAP (W3C, 2010) é responsável pelo
transporte das requisições e respostas (mensagens em
XML) pela rede.
O Framework SOAP atua como uma ferramenta
de conversão entre as requisições realizadas pelas
aplicações clientes em XML, para a linguagem nativa
da implementação da interface  qual pertence o dispositivo. Também recebe as respostas dos dispositivos na linguagem nativa e as converte para XML. O
padrão W3C WSDL (W3C, 2010) descreve em serviços os recursos disponibilizados pela implementação da interface de comunicação. A Figura 5 apresenta os elementos do Componente SOA e a Figura 6
exemplifica o WSDL no contexto do Mult-IO.
O trecho do WSDL da Figura 5, é a interface na
qual as aplicações clientes dos dispositivos implementarão para acessá-los de forma transparente. Esse
exemplo mostra duas operações disponibilizadas A

Figura 3. A API do Mult-IO

4204

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

leitura (lerDispositivo) de dados do dispositivo e a
escrita (escreverDispositivo) no dispositivo.

nicação ao qual o dispositivo que se deseja acessar
implementa, ele precisa apenas conhecer interfaces
padrões que descrevem o modo como tal dispositivo
funciona.
3 Testes e Resultados Experimentais
A implementação de um sistema_distribuído gera
alguns desafios, segundo Shimitd (1995). Tais desafios são Concorrência, tratamento de eventos, acesso
e configuração dos serviços e sincronização. Devido
a essa complexidade, para o que o Mult-IO seja validado em um primeiro passo, o ambiente no qual ele
executará foi simplificado (Figura 7).
Nesse ambiente da Figura 7, as requisições aos
dispositivos foram realizadas por aplicações implementadas em duas linguagens de programação distintas Java JEE e C .NET. Para a implementação, execução e armazenamento das informações do Mult-IO
foi utilizado um microcomputador com a seguinte
configuração Processador Pentium Dual Core com
2GB de memória RAM e sistema operacional Windows XP. Toda a implementação do Mult-IO foi
realizada com a linguagem Java.
No microcomputador do middleware, estarão
conectados os dispositivos que as aplicações desejam
acessar (Nas suas diferentes interfaces de IO), tal
como o repositório de dispositivos (Figura 4).

Figura 5. Descrição do Componente SOA

2.2 Qualidades do Mult-IO
Por ser um middleware, o Mult-IO provê qualidades inerentes a este, dentre as mais importantes
estão interoperabilidade, integração e encapsulamento das especificidades de comunicação.
A interoperabilidade provida pelo Mult-IO é justificada pelo fato de qualquer aplicação, independente
de sistema operacional, poder acessar um determinado dispositivo em um repositório de dispositivos
(Como visto na Figura 1) de maneira transparente,
seja qual for o sistema operacional onde estiver executando o dispositivo, ou mesmo se esse estiver em
um ambiente embarcado.

Figura 7  O Ambiente de testes para o Mult-IO

As aplicações cliente Essa aplicação estava localizada em outro micromputador com a seguinte
configuração Processador Athlon 4600+ com 2GB
de memória RAM. O acesso ao middleware foi realizado através do padrão IEEE 802 em uma rede residencial local, por um roteador de 54 Mbps, ligado
através de cabo.
A fim de calcular o impacto causado pela adição de mais uma camada de software (o Mult-IO) no
acesso aos dispositivos biomédicos, foram realizados
testes na presença e na ausência do middleware. A
Tabela 1 apresenta os resultados na ausência do
Mult-IO e a Figura 8 ilustra esse ambiente, com uma
taxa de amostragem de 100 acessos

Figura 6. Trecho do WSDL no contexto do Mult-IO

O encapsulamento provido pelo Mult-IO é explicado por que o desenvolvedor da aplicação não
tem a necessidade de conhecer o protocolo de comu-

4205

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Tabela 1. Acesso ao dispositivo na ausência do Mult-IO

Infusor de insulina
(atuador)
Sensor de glicose (sensor)

Tempo médio de acesso
(Milissegundos)
124
1030

Tempo de resposta (milissegundos)

Dispositivo

A Figura 12 ilustra os resultados para o Sensor
de Glicose. O tempo médio de resposta para a aplicação cliente em C, para 100 requisições, foi de 1079
milisegundos.

O Tempo de acesso pode ser descrito como o tempo
em que o dispositivo é acessado pela aplicação cliente, que no caso da Figura 8, estava localizada no próprio microcomputador que detinha os dispositivos
conectados a ele.

1550
1500
1450
1400
1350
1300
1250
1200
1150
1100
1050

0

10

20

30

40

50

60

70

80

90

100

Requisição

Tempo de Resposta (milissegundos)

Figura 9. Tempo de resposta para o Sensor de glicose (Aplicação
Cliente Java)

Figura 8. Acesso aos dispositivos da maneira habitual

As Figuras 9, 10, 11 e 12 apresentam os resultados na presença do Mult-IO, através das duas aplicações clientes da Figura 7 Java e C. Uma Requisição é o tempo em que um dado é lido ou escrito no
dispositivo, enquanto que o Tempo de Resposta é o
tempo de processamento de uma requisição ao dispositivo com a adição do tempo de comunicação pela
rede, até chegar  aplicação cliente.
A Figura 9 ilustra os resultados para o Infusor
de insulina (atuador). O tempo médio de resposta
para a aplicação cliente em Java, para 100 requisições, foi de 178 milisegundos.

400

350

300

250

200

150

100

0

10

20

30

40

50

60

70

80

90

100

Requisição

Figura 10. Tempo de resposta para o Infusor de insulina (Aplicação Cliente C)

Tempo de resposta (milissegundos)

Os resultados da Tabela 1 (acesso direto aos
dispositivos  Figura7) comparados aos das Figuras
9, 10, 11 e 12 (acesso através do Mult-IO) ilustram
um pequeno acréscimo nos tempos

500

Tempo de resposta (milissegundos)

450

450

400

350

300

250

1300

1250

1200

1150

1100

1050

1000

0

10

20

30

40

50

60

70

80

90

100

Requisição

200

150

0

10

20

30

40

50

60

70

80

90

Figura 11. Tempo de resposta para o Sensor de glicose (Aplicação
Cliente C)

100

Requisição

de resposta, o que pode caracterizar a viabilidade do
Mult-IO no acesso aos dispositivos, visto que todas
as suas vantagens apresentadas anteriormente compensam um pequeno acréscimo no tempo de resposta
a determinado dispositivo.
Outra visão a ser acrescentada em relação aos
resultados obtidos foi a alternância entre as aplicações clientes. Comparando as Figuras 8 e 10 (Infusor
de insulina) e as Figuras 9 e 11 (Sensor de glicose),
foi observada uma pequena variação no Tempo de
resposta para diferentes aplicações clientes. Diante

Figura 9. Tempo de resposta para o Infusor de insulina (Aplicação
Cliente Java)

A Figura 10 ilustra os resultados para o Sensor
de glicose. O tempo médio de resposta para a aplicação cliente em Java, para 100 requisições, foi de
1109 milisegundos.
A Figura 11 ilustra os resultados para o Infusor
de insulina (atuador). O tempo médio de resposta
para a aplicação cliente em C, para 100 requisições,
foi de 162 milisegundos.

4206

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

disso, foi observado que o Mult-IO se comportou de
maneira bastante similar, independente a aplicação
cliente que o acesse.

Agradecimentos
Este trabalho contou com o apoio do Laboratório de Automação Hospitalar e Bioengenharia
(LAHB) do Departamento de Engenharia de Computação e Automação da Universidade Federal do Rio
Grande do Norte.

4 Conclusões
Desenvolver aplicações para acessar dispositivos de hardware não é uma tarefa trivial. Alguns obstáculos aparecem quando está se desenvolvendo, como permissões do SO (Sistema Operacional), requisitos de comunicação entre o SO e a aplicação, ou até
mesmo problemas referentes  localização e reconhecimento das bibliotecas de acesso aos dispositivos.
Esses problemas podem tirar o desenvolvedor do
foco principal Analisar e codificar o acesso aos dispositivos.
Quesitos como interoperabilidade, integração e
encapsulamento das especificidades de comunicação,
fornecidos pelo Mult-IO, contribuem para a aproximação do desenvolvedor com esse foco principal.
Através do uso deste middleware, o custo no
desenvolvimento e manutenção de sistemas corporativos pode ser reduzido, evitando que desenvolvedores trabalhem com diversas APIs voltadas para dispositivos.
Atualmente, o trabalho está teoricamente preparado para receber qualquer tipo de interface de comunicação. A troca entre as interfaces de comunicação foi realizada com sucesso, mesmo para interfaces
de comunicação que ainda não foram implementadas.
As interfaces testadas foram USB e RS 232, porém é preciso testar outras para validar o middleware,
como por exemplo, interfaces de comunicação wirelles, como IEEE 802.11 e Bluetooth.
Além da variação do tipo de interface de comunicação, ainda precisa ser feita a variação do dispositivo numa determinada interface, de forma a tornar a
implementação de acesso genérica, o que acarreta em
um desafio que já está sendo analisado.
Os resultados obtidos mostraram que o uso do
Mult-IO custa muito pouco para quem o acessa, em
termos de desempenho, em média na casa de dezenas
de milissegundos. Os resultados também mostraram a
integridade do Mult-IO em relação  alternância da
aplicação cliente que o acessa. Diferentes linguagens
de programação proporcionaram uma pequena variação no tempo de resposta ao mesmo dispositivo biomédico.
Como trabalho futuro, foi visto a possibilidade
de embarcar o Mult-IO em cada dispositivo, dessa
forma, tornando desnecessária a utilização de um
dispositivo intermediário (como o microcomputador
utilizado nos testes) para prover os serviços de acesso
aos dispositivos.

Referências Bibliográficas
Apache.
Apache
Axis.
Disponível
em
httpws.apache.orgaxis. Acesso em 03 de
março de 2010.
Deugd, Scott et AL. SODA Service-Oriented Device
Architecture, submetido no IEEE ComSoc and
IEEE CS. University of Florida. 2006.
Hamilton, G., Mitchell, J. G., and Powell, M. L. 1993
Subcontract a Flexible Base for Distributed
Programming. Technical Report. UMI Order
Number TR-93-13., Sun Microsystems, Inc.
GoF. GAMMA, Erich, HELM, Richard, JOHNSON,
Ralph, VLISSIDES, John. Design Patterns
Elements of Reusable Software. 18. ed. Reading
Addison Wesley Longman, Inc. 1998
Microsoft. Consuming MapPoint Web Service in
PHP.
Disponível
em
httpmsdn.microsoft.comenuslibraryms980207.aspx. Acesso em 06 de
março de 2010.
Sales, F. L. F. Gerência de Informação de Processos
Industriais Usando Web Service.Trabalho de
conclusão de curso. Centro Federal de Educação
Tecnológica do Rio Grande do Norte. 2005.
Schmidt, D. and Suda, T. "An Object-Oriented
Framework for Dynamically Configuring
Extensible Distributed Systems".Distributed
Systems Engineering Journal, Special Issue on
Configurable Distributed Systems, 1995.
Scott de Deugd, Randy Carroll, Kevin Kelly, Bill
Millett, Jeffrey Ricker, "SODA Service
Oriented Device Architecture," IEEE Pervasive
Computing, vol. 5, no. 3, pp. 94-96, c3, JulySept. 2006, doi10.1109MPRV.2006.59.
Stal, M. 2002. Web services beyond componentbased computing. Commun. ACM 45, 10 (Oct.
2002),
71-76.
DOI
httpdoi.acm.org10.1145570907.570934.
Valentim, R. A. M. et al. Um Modelo para Acesso a
Dispositivos Biomédicos Dirigido a uma
Arquitetura Orientada a Serviços. SHEWC2008
- Safety, Health and Environmental World
Congress. Rio de Janeiro, July 20 to 23, 2008.
W3C. Extensible Markup Language (XML).
Disponível em www.w3.orgXML. Acesso em
07 de março de 2010.

4207

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

W3C. Simple Object Access Protocol (SOAP).
Disponível em httpwww.w3.orgTRsoap.
Acesso em 02 de março de 2010.
W3C. Web Services Description Language (WSDL).
Disponível em httpwww.w3.orgTRwsdl.
Acesso em 10 de março de 2010.

4208