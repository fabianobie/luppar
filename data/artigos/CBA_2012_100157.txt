Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

TAO  UMA PLATAFORMA DE SOFTWARE PARA ROBÔS MÓVEIS AUTÔNOMOS
SILAS FRANCO DOS REIS ALVES, IVAN NUNES DA SILVA
Departamento de Engenharia Elétrica, Escola de Engenharia de São Carlos, Universidade de São Paulo
Avenida Trabalhador São-carlense, 400, 13566-590 - São Carlos - SP.
E-mails silas.alves@gmail.com, insilva@sc.usp.br

JOÃO MAURÍCIO ROSÁRIO
Departamento de Projeto Mecânico, Faculdade de Engenharia Mecânica, Universidade Estadual de Campinas
Caixa Postal 6122, 13083-970 Campinas, São Paulo, Brasil
E-mails rosario@fem.unicamp.br
HUMBERTO FERASOLI FILHO
Departamento de Computação, Faculdade de Ciências, Universidade Estadual Paulista
Caixa Postal 473, 17033-360 Bauru, São Paulo, Brasil
E-mails ferasoli@fc.unesp.br
Abstract To date, different techniques of navigation for mobile robots have been developed. However, the assay of these
techniques is not a trivial task because usually it is not possible to reuse the developed control software due to system incompatibilities. This paper proposes a software platform that provides means for creating reusable software modules through the standardization of software interfaces which represents the various mobile-robots modules.
Keywords Mobile Robot Navigation, Software Platform, Software Engineering
Resumo Diferentes técnicas de navegação para robôs_móveis foram desenvolvidas. Entretanto, experimentar tais técnicas não
é uma tarefa trivial, pois usualmente não é possível reusar o software_de_controle desenvolvido devido a incompatibilidades dos
sistemas. Este artigo propõe uma plataforma_de_software que fornece os meios para criar módulos de software reusáveis através
da padronização de interfaces de software que representam os vários módulos de um robô_móvel.
Palavras-chave 

1

Introdução

A navegação é um aspecto importante da robótica
móvel, pois confere aos robôs_móveis as habilidades
básicas de interação com o ambiente e os obstáculos
e agentes nele situado. Durante as últimas décadas,
os pesquisadores desenvolveram diferentes técnicas
de navegação para robôs_móveis. Entretanto, experimentar estas técnicas não é uma tarefa corriqueira,
pois pode envolver adequações mecânicas, de
hardware ou de software. Adequar a estrutura mecânica ou o hardware de um robô_móvel é uma tarefa
complexa, cara e demorada. Por outro lado, a adequação de software é menos trabalhosa graças s
ferramentas e linguagens de programação, muito
embora não exista uma solução de desenvolvimento
ótima.
Ainda que as arquiteturas de software dos robôs
comerciais ofereçam componentes de software que
abstraem a aquisição_de_dados sensoriais e o controle
de atuadores, há pouco suporte nativo para técnicas
de navegação. Comumente, as técnicas de navegação
são implementadas pelo usuário, pois é ele quem
conhece todos os requisitos da aplicação e as restrições do robô_móvel. Contudo, se por um lado a obrigatoriedade de escrever métodos de navegação e

ISBN 978-85-8001-069-5

colaboração resulte na escolha do método que melhor
se adapte a aplicação do robô_móvel, por outro lado
esta obrigação dificulta o desenvolvimento da aplicação do robô. Neste caso, o usuário deve escrever
tanto os algoritmos referentes  aplicação quanto os
referentes  navegação do robô. Além disso, no que
pauta a pesquisa nesta área, o usuário deve implementar um ou mais métodos tradicionais de navegação a fim de compará-los a novos métodos em desenvolvimento.
O objetivo principal deste trabalho é o desenvolvimento de uma plataforma_de_software que facilite a
criação de aplicativos de controle para robôs_móveis
através da padronização das interfaces de software
para a Navegação entre Robôs Móveis. Com esta
plataforma, é possível portar o software para diferentes robôs com os mesmos componentes de software,
o que reduz o tempo de desenvolvimento do aplicativo ao incentivar o reuso de software. Além disso, as
técnicas de navegação fornecidas pela plataforma
amenizam o esforço em desenvolver o software de
controle para robôs_móveis colaborativos. Isso é
possível pois a plataforma permite que o usuário
concentre seus esforços na solução dos problemas
pertinentes a aplicação do robô, uma vez que as téc-

3822

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

nicas de navegação e colaboração são fornecidas pela
plataforma.
2

Composição dos Robôs Móveis

O processo de desenvolvimento de um robô_móvel é
criativo e desafia o projetista a pular etapas de um
sistema evolutivo para atingir rapidamente a melhor
forma  ao contrário do processo natural, iterativo e
adaptativo dos seres vivos, que toma milhares de
anos para fazê-lo. O sucesso deste projeto depende
da visão clara do ambiente e das restrições impostas
por ele ou pelo propósito de existência do robô.
Por exemplo, um robô deve ter um corpo que o
permita locomover-se pelo ambiente e, ao mesmo
tempo, cumprir seu objetivo. Concomitantemente,
este robô deve ter sensores e atuadores que o permitam navegar de forma segura e eficiente. Por outro
lado, o consumo_de_energia do robô não pode ser alto
 o que reduziria sua autonomia , mas ao mesmo
tempo não pode ser tão baixa que não permita utilizar
os sensores e atuadores necessários. Em outras palavras, o processo de criação de um robô_móvel é complexo e, consequentemente, o sistema robótico móvel
concebido será tão complexo quanto os parâmetros
que conduziram sua concepção.
Uma técnica muito conhecida para o gerenciamento de sistemas_complexos é a modularização do
sistema, ou seja, segregar um sistema complexo em
subsistemas menores e mais simples. No caso dos
sistemas robóticos móveis, estes podem ser decompostos em módulos divididos em duas classes módulos físicos e módulos lógicos. Os módulos físicos são
aqueles que possuem uma manifestação no mundo
real, tais quais as estruturas mecânicas, os sensores,
atuadores e computadores embarcados. Opostamente,
os módulos lógicos não possuem forma no mundo
físico, mas representam aspectos imprescindíveis
para o desenvolvimento de um robô_móvel, como as
arquiteturas de controle, como as técnicas de navegação ou colaboração, por exemplo. Também é importante notar que há uma relação sinérgica entre os
módulos lógicos e físicos, pois ambos devem estar
em sintonia para que o robô seja capaz de funcionar.
A Figura 1 demonstra a composição de um robô
móvel por módulos e seus relacionamentos.

Figura 1. Decompondo um robô_móvel em módulos físicos e
lógicos.

ISBN 978-85-8001-069-5

De forma geral, os módulos lógicos são construídos sobre uma base computacional, seja ela embarcada ou remota, na forma de componentes de software. A organização destes componentes segue a arquitetura_de_controle, a arquitetura de software, e o paradigma da linguagem adotada pelo projetista. Entretanto, os componentes que implementam os módulos
lógicos não são capazes de controlar o robô por si
próprios. Eles necessitam de um meio que os permitam interagir com os vários módulos físicos de um
robô. Para tanto, é requerido um meio de comunicação comum entre a base computacional e os sensores
e atuadores, e a implementação de componentes de
software que representem os módulos físicos dos
robôs.
Comumente, tanto em robôs comerciais quanto
naqueles desenvolvidos em universidades, os componentes que representam os módulos físicos são
distribuídos em uma biblioteca de software que deve
ser compilada junto ao programa do usuário. Desta
forma, o desenvolvimento dos módulos lógicos de
um robô, como os comportamentos de uma arquitetura_de_controle comportamental, é facilitado. De forma semelhante, alguns módulos lógicos, como técnicas de localização e navegação, também são disponibilizados para os usuários. O projeto OpenSLAM
(Stachniss et al. n.d.), por exemplo, oferece diferentes bibliotecas de localização e mapeamento simultâneos (SLAM) para uso em aplicações robóticas.
Contudo, cada biblioteca segue a filosofia de
implementação de seus projetistas, de forma que um
mesmo módulo (físico ou lógico) pode ter representações completamente diferentes em bibliotecas distintas. Portanto, a adoção de um método comum e
padronizado de especificar tais módulos pode facilitar o desenvolvimento do software_de_controle.
3

Arquitetura Proposta

De forma geral, os computadores constituem hoje o
módulo responsável pela tomada de decisão do robô
e pela arbitração dos demais módulos. Isso se deve a
diversos fatores, cujos principais são a redução contínua de custo, consumo_energético e tamanho dos
equipamentos o aumento do poder de processamento
e memória o surgimento de linguagens de programação com maior grau de abstração a evolução dos
sistemas_operacionais e a popularização do computador em nossa sociedade. Muito embora seja possível criar robôs que não tenham um computador embarcado, esta abordagem resulta em um robô pouco
flexível que foge da proposta da arquitetura aqui
proposta.
O computador que controla o robô_móvel pode
ser embarcado ou remoto. Quando embarcado no
robô, o computador é capaz de acessar o hardware do
robô através de um barramento local. No modo remoto, o robô_móvel possui embarcado um sistema
simples  normalmente um supervisor  responsável
por acionar o hardware do robô quando solicitado
pelo computador remoto. A conexão entre o compu-

3823

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

tador e o supervisor se dá através de um link de comunicação que pode ser com fio ou sem fio. Ambos
os arranjos são mostrados pela Figura 2.

aspectos tecnológicos relativos ao software, bem
como os aspectos teóricos quem envolvem os robôs
móveis.
4.1 Arquitetura de Software

Figura 2. Computador (a) embarcado e (b) remoto.

Para ser adaptado s necessidades do projeto, o
computador necessita ser programado, o que envolve
as linguagens de programação para a composição do
software_de_controle. Portanto, é razoável supor que
a adoção da arquitetura de software é um momento
crucial para o projeto do aplicativo de controle, pois
definirá não apenas o modelo de processamento
adotado, mas também a facilidade de implementação,
manutenção e o reuso de código.
Como o objetivo principal deste trabalho é desenvolver uma plataforma_de_software que facilite a
criação de aplicativos de controle para robôs_móveis,
o planejamento da plataforma contemplou três características para o software, baseadas nos Fatores de
Qualidade de McCall (McCall 2002)
 Flexibilidade, que diz respeito  facilidade
com a qual a plataforma pode ser modificada para atender s necessidades do projeto
 Reusabilidade, que remete ao problema do
reaproveitamento de código para diferentes
projetos
 Portabilidade, que está associada ao esforço
necessário para transferir a plataforma para
robôs com diferentes hardwares.
Para alcançar estas características, a plataforma
desenvolvida  batizada de TAO  faz uso de interfaces padronizadas de software que implementam
diferentes módulos da navegação e colaboração entre
robôs_móveis. Os módulos contemplados atualmente
pela plataforma são localização, representação de
caminho, e controle.
As interfaces padronizadas, conforme será discutido a seguir, permitem o reuso de código através da
implementação dos métodos comuns aos módulos de
mesma categoria. Além disso, elas aumentam a flexibilidade do software, pois permitem sua modularização.
Finalmente, foi escolhida uma linguagem de
programação que permitiu tanto implementar tais
interfaces de forma eficiente, quanto executar a plataforma em diferentes hardwares de robôs_móveis 
seja de forma remota ou embarcada  ou ainda em
ambientes de simulação.
4

Métodos e Desenvolvimento

Esta seção apresenta os métodos adotados e o desenvolvimento do trabalho. Aqui serão discutidos os
ISBN 978-85-8001-069-5

Na literatura, é possível encontrar diferentes abordagens para a composição de arquiteturas de software
para robôs_móveis. De forma geral, elas podem ser
classificadas como bibliotecas, sistemas_operacionais
(SO) (Quigley et al. 2009), middleware (Utz et al.
2002) ou baseadas em protocolos de redes_de_computadores (Mok  Wu 2006). Para o desenvolvimento
da plataforma TAO, optou-se pela arquitetura baseada em bibliotecas, por não requerem comunicação
entre processos (IPC), o que reduz a complexidade
do algoritmo e evita o custo de tempo para troca de
mensagens.
Para o desenvolvimento da biblioteca, foi escolhida a linguagem C++, pois é uma linguagem robusta, aberta e com suporte a Orientação a Objetos
(OO). O uso de OO confere maior flexibilidade ao
promover o reuso de código, característica muito
utilizada no desenvolvimento desta arquitetura. Neste
sentido, a característica mais importante do C++ para
esta arquitetura é o polimorfismo, pois permite que
classes descendentes sejam apontadas por ponteiros
do tipo da classe ancestral (Prata 2004).
4.2 Sistema Operacional
Outra escolha tecnológica diz respeito ao SO utilizado. Neste trabalho foi contemplada apenas uma família de SO, o GNULinux, com o uso de bibliotecas
POSIX (Portable Operating System Interface, ou
Interface Portável ente Sistemas Operacionais) para
melhorar sua portabilidade entre sistemas UNIX. O
GNULinux designa uma família de SOs de código
fonte aberto, com várias distribuições voltadas a
diferentes aplicações, e que contempla diferentes
plataformas de hardware (Linux Kernel Organization
2011). Em decorrência desta escolha, a TAO pode
ser executada em qualquer plataforma robótica que
forneça suporte a uma distribuição do GNULinux,
seja de forma remota ou embarcada. Para o desenvolvimento deste trabalho, foi adotada a distribuição
Ubuntu em sua versão 10.04 de 32 bits, por ser uma
distribuição popular e madura.
4.3 Interfaces de Software
Neste trabalho, cada módulo de um sistema robótico
móvel foi mapeado por uma classe que serve como
interface padronizada para tais módulos. Esta decisão
foi tomada com o intuito de padronizar as interfaces
para facilitar e incentivar o reuso de código. Uma
interface consiste em uma classe que contém definições, ou rascunhos, dos métodos que devem ser
desenvolvidos nas classes descendentes que implementam tal interface. Em outras palavras, todas as
classes descendentes de uma interface possuem mé-

3824

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

todos com o mesmo nome, mesmos parâmetros e
mesma funcionalidade, porém os códigos destes
métodos são diferentes para cada classe. Junto ao
polimorfismo, estas interfaces permitem que suas
classes descendentes sejam trocadas ou reusadas por
outras classes sem a necessidade de reescrever o
código fonte.
Para exemplificar como as interfaces foram utilizadas, suponha duas interfaces Tração e Localização. A interface Tração, mostrada pela Figura 3 (a),
contém os métodos necessários para acionar um
sistema de tração qualquer, seja ele com rodas ou
não, através das velocidades descritas pelo robô. Já a
interface Localização, mostrada pela Figura 3 (b),
fornece os métodos necessários para verificar qual a
localização estimada por um sistema_de_localização
qualquer. Considere, também, quatro classes hipotéticas Diferencial e Holonômico, mostradas respectivamente pela Figura 3 (c) e Figura 3 (d), que representam dois sistemas de tração diferentes e que implementam a interface Tração Odometria e Visão
Global, mostradas respectivamente pela Figura 3 (e)
e Figura 3 (f), que representam dois sistemas de
localização diferentes e que implementam a interface
Localização.

necessitar a adequação de seu código. Para utilizálas, a classe Controlador requer apenas que as classes
desejadas sejam referenciadas nas interfaces corretas.
Por exemplo, a Figura 4 (b) mostra a classe Controlador utilizando as classes Diferencial e Odometria
referenciadas em suas respectivas interfaces, enquanto a Figura 4 (c) mostra a mesma classe Controlador
utilizando as classes Holonômico e Visão Global.
Para que houvesse a modificação do sistema de tração e localização, não foi necessário modificar o
código fonte da classe Controlador. Para modificalo, foi necessário apenas trocar as classes referenciadas pelas interfaces.

Figura. 4. Exemplo do uso de interfaces, onde (a) é a classe
Controlador que controla a locomoção de um robô_móvel e, para
este fim, utiliza as interfaces Tração e Localização (b) mostra a
classe Controlador utilizando as classes Diferencial e Odometria e
(c) mostra a classe Controlador utilizando as classes Holonômico e
Visão Global.

4.4 Modelo Cinemático do Robô

Figura. 3. Exemplo do uso de interfaces, onde (a) é a interface
para os sistemas de tração  Tração (b) é a interface para sistemas
de localização  Localização (c) é uma classe que implementa a
interface Tração para um robô diferencial (d) é uma classe que
implementa a interface Tração para um robô holonômico (e) é
uma classe que implementa a interface Localização para um
sistema de odometria e (f) é uma classe que implementa a interface Localização para um sistema de visão global.

Por implementarem a mesma interface Tração,
tanto a classe Diferencial quanto a classe Holonômico fornecem os métodos padrão de Tração, ao passo
que OdomAetria e Visão Global fornecem os métodos padrão de Localização. Logo, qualquer objeto de
Diferencial pode ser substituído por um objeto de
Holonômico, da mesma forma que um objeto de
Odometria pode ser substituído por um objeto de
Visão Global. Contudo, um objeto de Diferencial não
pode, por exemplo, substituir um objeto de Odometria, pois implementam diferentes tipos de interface.
Com as interfaces Tração e Localização, é possível escrever códigos que fazem uso dos métodos
por elas fornecidos. Por exemplo, suponha a classe
Controlador, mostrada pela Figura 4 (a), responsável
por controlar a locomoção de um robô_móvel. A
classe Controlador utiliza um sistema_de_localização
 fornecido pela interface Localização  para recuperar a posição atual do robô_móvel, e um sistema de
tração  fornecido pela interface Tração  para locomover o robô. Por usar as interfaces padrão, a
classe Controlador pode utilizar as classes Diferencial, Holonômico, Odometria e Visão Global sem

ISBN 978-85-8001-069-5

Os robôs_móveis adotados neste projeto utilizam um
sistema de tração diferencial e, portanto, o estudo de
suas restrições cinemáticas é de clara importância
para o desenvolvimento do trabalho.
Considere
e
como os planos global
e local do robô_móvel, respectivamente,
como o
centro de massa do robô, como o raio da roda,
como a distância entre as rodas,  e  como as
velocidades angulares das rodas direita e esquerda,
e como as velocidades linear e angular do robô, e
como a orientação do robô, conforme mostra a
Figura 5.

Figura 5. Modelo cinemático de um robô_móvel de
tração diferencial.

O modelo_cinemático do robô pode ser descrito
conforme a Eq. (1) e também em termos de velocidades nos eixos e de rotação, como mostra a Eq. (2).

3825

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.










 

e orientação do robô dadas por
. Esta técnica
de localização é mais precisa que a odometria e pode
fornecer informação sobre outros objetos presentes
na área de trabalho. Para facilitar o reconhecimento
dos robôs, cada robô possui um marcador fidedigno
único com duas cores diferentes. Este sistema é semelhante ao utilizado por competições de futebol de
robôs e é mostrado pela Figura 6.

(1)




(2)


4.5 Controlador Cinemático
O estabilizador de posição é um controlador capaz de
levar de uma posição qualquer da área de trabalho
até uma meta, dada pelo ponto
, sabendo-se a orientação do robô_móvel e as coordenadas de e , é possível determinar o erro de distância
e o erro angular . Tais erros são determinados através da Eq. (3).
Figura 6. Um exemplo de sistema de Visão Global utilizando uma
webcam como a câmera global para detectar a posição de dois
robôs.

(3)



5
Considerando que o robô apresenta uma velocidade linear máxima
e é capaz de desacelerar
com uma aceleração , é possível determinar tanto a
velocidade com que o robô deve se deslocar para
alcançar a meta, quanto a distância
com a qual ele
deve começar a desacelerar. A distância
é dada
pela Eq. (4).

As classes desta arquitetura foram divididas em
um pacote chamado Navigation2D, com as classes
que implementam a navegação no plano.
5.1 Pacote Navigation 2D

(4)

Para determinar um controle
que estabilize os erros
e em zero, é utilizada a seguinte lei
de controle
 
 


 

(
5)

Onde
é o ângulo de erro mínimo aceito para
que o robô possa se mover linearmente e
é o ganho da velocidade_angular. Com este controle, o robô
se moverá apenas quando o erro
for inferior a ,
o que impede o robô de se mover mais que o necessário para alcançar sua meta.
4.6 Visão Global
A Visão Global é uma técnica de localização global
que utiliza as imagens adquiridas de uma câmera
localizada paralela ao solo para identificar a posição
ISBN 978-85-8001-069-5

Módulos Desenvolvidos

O pacote Navigation2D é composto por duas estruturas básicas e três subpacotes. As estruturas básicas são Pose, que grava as informações sobre a pose
do robô com a tripla
 e Speed, que grava
informações de velocidade em termos de (    ).
Estas estruturas são utilizadas pelas demais classes
do pacote Navigation2D, presentes nos subpacotes,
para representar as poses e velocidades do robô. Já os
quatro subpacotes são Localization (Localização),
que fornece as interfaces para implementar as técnicas de localização Locomotion (Locomoção), com as
interfaces necessárias para implementar a locomoção
do robô e Path (Caminho), que oferece suporte a
construção de caminhos.
O pacote Localization (Localização) contém a
classe de interface LocalizationTechnique (Técnica
de Localização) que serve como classe ancestral para
todas as técnicas de localização implementadas dentro desta arquitetura. Portanto, ela oferece métodos
padronizados para ler a posição e velocidade do robô.
Há também um método para configurar a posição do
robô, que é utilizado por sistemas de localização
inercial ou para calibrar o offset de sistemas de localização absolutos.
O pacote Path (Caminho) é responsável por implementar as classes e interfaces referentes  geração
de caminhos ou trajetórias. Para isso, foram desen-

3826

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

volvidas duas estruturas para representar caminhos,
uma em termos de posição, PathPose, e outra em
termos de velocidade, PathSpeed. A classe PathFinder é a interface que dita os métodos que uma função
de busca de melhor caminho deve oferecer. Para
exemplificar o uso desta interface e também fornecer
um algoritmo de busca para a arquitetura, foi criada a
classe AStar, descendente de PathFinder, que implementa o algoritmo . É importante notar que a
classe PathFinder  e, consequentemente, a classe
AStar  recebem como parâmetro um mapa do tipo
GridMap e retornam um caminho descrito pela classe
PathPose ou PathSpeed.
Finalmente, o pacote Locomotion (Locomoção)
fornece uma interface para o sistema de tração de um
robô_móvel, uma interface para sistemas_de_controle
de locomoção, e duas classes para controle de locomoção. A interface para o sistema de tração do robô,
DriveSystem, fornece os métodos necessários para
acionar os motores do robô através das velocidades
(    ). Todo robô que utiliza esta arquitetura deve
fornecer uma classe descendente de DriveSystem
para o acionamento dos motores do robô, que implemente, também, os métodos definidos pela classe
ancestral.
Já a interface DriveControl serve como classe
ancestral para todas as classes que implementam um
controle de locomoção e, portanto, a classe PositionStabilizer, que implementa o controlador da seção 4.5, dela descende.
O diagrama de classes mostrado pela Figura 7
destaca as classes anteriormente apresentadas e seus
relacionamentos.

Como todos os robôs da BER utilizam sistema
de tração diferencial, foi crida a classe DiffDrive,
descendente de DriveSystem, para cada um dos robôs.
Para o sistema de Visão Global, foi criada a
classe GlobalVision, descendente de LocalizationTechnique, que faz a interface com o software criado
para o AEDROMO. Esta classe oferece as posições
de dois robôs e de um objeto presente na área de
trabalho.
Para fins de teste, também foi criada uma classe
Simulator, que implementa um simulador. Esta classe descende tanto de DriveSystem quanto de LocalizationTechnique, o que permite que as demais classes da TAO modifiquem a velocidade do robô simulado e obtenham dados sobre sua posição e velocidade de forma natural.
Para o software do usuário, a classe Simulator
funciona da mesma forma que uma classe escrita
para um robô real. Desta forma, o código utilizado na
simulação é o mesmo utilizado nos testes reais, não
requerendo, portanto, que sejam criadas duas versões
diferentes do software em ambientes de desenvolvimento diferentes. Esta flexibilidade acelera o desenvolvimento do software e facilita sua manutenção por
não necessitar de versões diferentes.
6

Experimentos e Resultados

Para avaliar e demonstrar o funcionamento da TAO,
foram realizados alguns testes com o estabilizador de
posição implementado pela classe PositionStabilizer.
Para tanto, foram utilizados dois robôs_móveis que
serão descritos a seguir.
6.1 Robôs móveis utilizados
Para realizar os experimentos, foram considerados
dois robôs de tração diferencial 14-bis e Roburguer,
mostrados pelas Figuras 8 (a) e (b), respectivamente.
Ambos foram desenvolvidos para atender aplicações
variadas, como educação, entretenimento e reabilitação. O desenvolvimento e avaliação destes robôs é
discutido por (Ferasoli Filho et al. 2012).

Figura 7. Diagrama de Classes simplificado da plataforma.

5.2 Pacotes desenvolvidos para os robôs_móveis
Para que os robôs 14-bis e Roburguer fossem
capazes de usufruir da arquitetura TAO, foi necessário criar classes de acionamento para os robôs descendentes da classe DriveSystem. Também foi criada
uma classe descendente de LocalizationTechnique
para o sistema de Visão Global descrito na seção.

ISBN 978-85-8001-069-5

(a)

(b)

Figura 8. Foto dos robôs (a) 14-bis e (b) Roburguer.

Estes robôs utilizam um sistema de locomoção
baseado no modelo_cinemático apresentado na seção

3827

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

4.4 e fornecem dois sensores reflexivos para detecção de linha. O robô 14-bis também possui uma
caneta, que é utilizada para desenhar nas superfícies,
enquanto o robô Roburguer fornece um mecanismo
que o permite mover pequenos objetos.
6.2 Discussão dos Experimentos e Resultados
Para testar o controlador discreto implementado pela
classe PositionStabilizer, apresentada na seção 5.2,
foi realizado um teste onde o robô deve se dirigir ao
centro da área de trabalho, dado pelas coordenadas
, partindo de um ponto qualquer. Na Figura 9, apresentam-se cinco repetições deste teste, onde
a posição de partida do robô varia em cada uma das
iterações. Conforme pode ser observado na mesma
figura, o robô foi capaz de alcançar o centra da área
de trabalho em todas as iterações do teste.

Portanto, pode-se concluir que o controlador discreto implementado pela classe PositionStabilizer
obteve resultados satisfatórios nos experimentos.
Também foram avaliadas as classes GridMap
para criação de mapas de grade_de_ocupação e AStar
para busca de melhor caminho. Para isso, foi elaborado um mapa de grade_de_ocupação a ser representado pela classe GridMap. Como a área de trabalho
do robô mede
por
e o corpo do robô tem
um diâmetro de
, o mapa foi divido em grades
quadradas de
de lado. Estabeleceram-se neste
mapa as grades inicial e final para o robô, que são,
respectivamente,
e
. Tendo o mapa e as
grades inicial e final como parâmetros, foi utilizada a
classe AStar para gerar o caminho. Tanto o mapa
quanto o caminho gerado é mostrado pela Figura 11.

Figura 11. Mapa do experimento e caminho gerado.

Figura. 9. Trajetória descrita pelo robô nos cinco testes.

O erro de posição, dado pela distância entre a
posição atual do robô e o centro da área de trabalho,
é apresentado pela Figura 10. Nela, pode-se observar
que o controlador apresenta o mesmo comportamento em todas as iterações do teste. Assim que o controlador entra em ação, o erro se mantém constante até o
momento em que o robô se alinha com o ponto central da área de trabalho. Uma vez alinhado, o controlador aciona o robô em sua velocidade máxima, causando a redução constante do erro até que este erro
seja igual a
. Quando o erro se torna menor
que
, o controlador passa a desacelerar o robô,
o que diminui a taxa de redução do erro. No fim de
cada iteração, o erro torna-se inferior ao critério de
parada do controlador, que equivale a
.

Finalmente, com o caminho gerado, foi possível
utilizar a classe PositionStabilizer para controlar o
robô_móvel dentro da papelaria hipotética, conforme
mostra a Figura 12. Para completar o caminho da
Figura 11, o robô levou
. Neste teste, o robô
seguiu satisfatoriamente o caminho gerado pela classe AStar. O caminho evitou colisões com os obstáculos estáticos presentes no ambiente e completou a
execução num tempo aceitável.

Figura 12. Caminho descrito pelo robô_móvel.

7

Figura 10. Erro de posição em cada um dos cinco testes.

ISBN 978-85-8001-069-5

Conclusão

A plataforma desenvolvida, TAO, facilita o desenvolvimento de robôs_móveis ao promover flexibilidade e reusabilidade do código. A portabilidade foi
alcançada através da adoção do SO GNULinux, que
suporta diferentes plataformas de hardware, e bibliotecas POSIX, garantindo que a plataforma seja executada em qualquer uma das distribuições que a
implemente. Além disso, o reuso de código foi alcançado com sucesso, pois foi possível utilizar a
classe PositionStabilizer para ambos os robôs 14-bis
e Roburguer sem necessidade alterar o código fonte
do controlador ou dos robôs.

3828

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Os experimentos mostram que a arquitetura de
software adotada produz bons resultados, uma vez
que o controlador adotado demonstrou o comportamento esperado com os dois robôs. Além disso, pode-se ver que a plataforma bem se adapta a ambientes estáticos. Para ser utilizada em ambientes dinâmicos, porém, é necessário que o usuário gerencie a
atualização do mapa e do controle_de_posição. Desta
forma, até o presente estágio de desenvolvimento,
pode-se afirmar que a plataforma TAO pode ser
usada em aplicações de mundo real com pequenos
robôs em ambientes estáticos.
Quanto ao software do usuário, a plataforma
TAO fornece os meios para abstrair alguns módulos
físicos e lógicos do robô_móvel, de forma que não é
necessário que o usuário os crie novamente. Os módulos fornecidos também utilizam um thread (linha
de execução) concorrente para que o usuário não
precise atualizá-los  como ocorre com a classe PositionStabilizer. Isto facilitou o desenvolvimento do
software do usuário por prover classes fáceis de usar
que abstraem os módulos dos robôs.
Atualmente, está sendo desenvolvidas outras interfaces para representação de mapas e geração de
caminhos para expandir a aplicação da TAO em
problemas reais. Outro foco de pesquisa futura é o
desenvolvimento de um mecanismo de comunicação
que permita aos robôs trocar informações.

and Applications, 2006. DELTA 2006. Third
IEEE International Workshop on. p. 5 pp.
Prata, S., 2004. C++ Primer Plus 5th ed.,
Indianapolis, Indiana Sams Publishing.
Quigley, M. et al., 2009. ROS an open-source Robot
Operating System. In ICRA Workshop on Open
Source Software.
Stachniss, C., Frese, U.  Grisetti, G., OpenSLAM
Give your algorithm to the community.
Available at httpopenslam.org Accessed
April 11, 2012.
Utz, H. et al., 2002. Miro - middleware for mobile
robot applications. Robotics and Automation,
IEEE Transactions on, 18(4), pp.493497.

Agradecimentos
Esse trabalho foi apoiado pelo Laboratório de Automação Integrada e Robótica (LAIR) do Departamento de Projeto Mecânico, Faculdade de Engenharia
Mecânica, Universidade Estadual de Campinas, e
também pelo Laboratório de Integração de Sistemas
e Dispositivos Inteligentes, Departamento de Computação, Faculdade de Ciências, Universidade Estadual Paulista.
O trabalho foi financiado pela Fundação de Amparo a Pesquisa do Estado de São Paulo (FAPESP)
sob o processo 201002000-0.
Referências Bibliográficas
Ferasoli Filho, H. et al., 2012. Use of Myoelectric
Signals to Command Mobile Entertainment
Robot by Disabled Children Design and Control
Architecture. In Proceedings of the 3rd IEEE
Biosignals and Biorobotics conference (ISSNIP).
3rd IEEE Biosignals and Biorobotics conference
(ISSNIP). Manaus.
Linux Kernel Organization, 2011. The Linux Kernel
Archives. Available at httpwww.kernel.org
Accessed January 1, 2012.
McCall, J.A., 2002. Quality Factors. In Encyclopedia
of Software Engineering. John Wiley  Sons,
Inc.
Mok, S.M.  Wu, C., 2006. Automation integration
with UPnP modules. In Electronic Design, Test

ISBN 978-85-8001-069-5

3829