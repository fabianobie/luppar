AMBIENTE DE ENSINO E DESENVOLVIMENTO DE SISTEMAS ROBÓTICOS MÓVEIS
SILAS F. R. ALVES1, HUMBERTO FERASOLI FILHO2, RENÊ PEGORARO2, JOÃO MAURÍCIO ROSÁRIO1
1

Laboratório de Automação Inteligente e Robótica, Departamento de Projeto Mecânico, Faculdade de
Engenharia Mecânica, Universidade Estadual de Campinas
Caixa Postal 6122, 13083-970, Campinas, São Paulo, Brasil
2
Laboratório de Integração de Sistemas e Dispositivos Inteligentes, Departamento de Computação, Faculdade
de Ciências, Universidade Estadual Paulista
Caixa Postal 473, 17033-360, Bauru, São Paulo, Brasil
E-mails silas@fem.unicamp.br, ferasoli@fc.unesp.br, yonezawa@fc.unesp.br,
rosario@fem.unicamp.br
Abstract Using robots for teaching is one approach that has gathered good results on Middle-School, High-School and Universities. Robotics permits the experimentation of concepts of a broad range of disciplines, principally those from Engineering courses and
Computer Science. However, there are not many kits that enables the use of robotics in classroom. This article presents an Teaching
and Development Environment for Robot Systems based on three tools which provides a framework for teaching Computer Science
and Engineering concepts through Robotics. Therefore, this article discusses the development and the questions regarding the implementation of these three tools (1) a flexible, low cost hardware to integrate sensors and control actuators commonly found on mobile
robots (2) a mobile robot device whose sensors and actuators allows the experimentation of different concepts and (3) an environment for the implementation of control algorithms through a computer network.
Keywords Mobile Robots, Education, Development Environment
Resumo O aprendizado através da robótica vem obtendo ao longo dos últimos anos bons resultados tanto no Ensino Fundamental
quanto no Ensino Médio e Superior. A robótica abre espaço para experimentar conceitos de um vasto universo de disciplinas, principalmente aquelas voltadas para os cursos de Engenharia e Ciências da Computação. Entretanto, nota-se que ainda existe poucos ambientes e materiais disponíveis para suporte do uso da robótica em sala de aula. Neste sentido, este artigo apresenta um Ambiente de
Ensino e Desenvolvimento de Sistemas Robóticos baseado em três ferramentas que fornecem uma base para se utilizar a robótica
para ensinar conceitos de Computação e de Engenharia. Assim, este trabalho discute o desenvolvimento e questões de implementação
das três ferramentas elegidas para compor este ambiente (1) um hardware flexível de baixo_custo para a integração de sensores e controle de atuadores comumente encontrados em robôs_móveis (2) um dispositivo robótico móvel cujos sensores e atuadores permitem
a experimentação de diferentes cenários e (3) um ambiente_de_desenvolvimento de algoritmos de controle para o mesmo através de
uma rede de computadores.
Palavras-chave 

1

(o computador). O computador atua, neste sentido,
como uma interface entre o aluno e a robótica, pois
possui o suporte de software necessário para desmitificar o hardware de aquisição_de_dados dos sensores
e de acionamento dos atuadores. Este suporte é composto principalmente por ferramentas de desenvolvimento como compiladores e bibliotecas de software,
que permitem ao aluno criar e testar seu próprio
aplicativo de controle. Abordagens semelhantes e de
sucesso são apresentadas por Balch et al (2008),
Newman et al (2002), Matsushita et al (2006), dentre outros.
Este artigo apresenta um Ambiente de Desenvolvimento para Robôs Móveis baseado em três ferramentas que oferecem suporte ao ensino baseado em robótica. A primeira consiste em um hardware de baixo
custo, flexível, controlado pelo computador, para a
aquisição_de_dados de sensores e o acionamento de
atuadores comumente encontrados no mercado. A
segunda consiste em robô_móvel, construído com a
primeira ferramenta, cujos sensores e atuadores permitem experimentar diferentes conceitos vistos em
sala de aula, seja eles de robótica ou outras disciplinas por ela suportada. Por fim, a terceira ferramenta

Introdução

A Robótica é utilizada com sucesso como abordagem de ensino. Por ser intrinsecamente multidisciplinar, estimular o trabalho em equipe e promover
um retorno visual real de forma estimulante e motivadora, ela contribui de forma efetiva na melhora
das estratégias pedagógicas (Avanzato 2000). O ensino baseado em Robótica também independe de faixa etária, obtendo ótimos resultados tanto no Ensino
Fundamental quanto no Ensino Médio (Wasserman
2002) e Superior (Balch et al. 2008).
A abordagem adotada pelo GISDI (Grupo de Integração de Sistemas e Dispositivos Inteligentes), grupo de pesquisa do Departamento de Computação da
Faculdade de Ciências da UNESP de Bauru, nas disciplinas de Circuitos Digitais, Laboratório de Circuitos Digitais e Introdução a Robótica Móvel do curso
de Bacharelado em Ciências da Computação, consiste em utilizar um computador para controlar os sensores e atuadores. Esta abordagem obtém bons resultados pois apresenta ao aluno um ambiente desconhecido (o controle de sensores e atuadores que
compõe um robô) através de um ambiente_conhecido
675

utiliza-se do robô_móvel (segunda ferramenta) para
criar um ambiente para de desenvolvimento em rede
para robôs_móveis. Este ambiente compartilha o
acesso ao robô_móvel através de uma rede de computadores, permitindo que os alunos desenvolvam o
software_de_controle ao mesmo tempo em suas estações de trabalho e compartilhem o robô para os testes de forma mais eficiente. Para esta finalidade, é
utilizada a arquitetura cliente-servidor, onde as rotinas necessárias para a criação do cliente são disponibilizadas em uma API (Application Programming
Interface, ou Interface de Programação de Aplicativos).

Figura 1. Arquitetura do Sistema de Controle de Robôs Móveis

O porto USB confere certa universalidade para o
Sistema de Controle por estar presente na maior parte dos computadores pessoais, inclusive em computadores portáteis. Desta forma, o Sistema de Controle contempla uma grande fatia dos computadores
disponíveis atualmente no mercado sem a necessidade de hardware adicional, como conversores, por
exemplo.

2 Sistema de Controle de Robôs Móveis
2.1 Desenvolvimento do harware

O Sistema de Controle de Robôs móveis é um
hardware de baixo_custo e alta flexibilidade que opera como interface entre o computador e os sensores e
atuadores de um robô_móvel. O Sistema de Controle
é acompanhado por uma Interface de Programação
de Aplicativos (API), que fornece os componentes de
software necessários para acessar os sensores e atuadores conectados ao Sistema de Controle. O Sistema
de Controle é inspirado na Bancada Experimental
Robótica desenvolvida no mesmo laboratório e herda
os mesmos objetivos pedagógicos (Alves et al.
2009), porém foi concebido para utilizar um porto de
comunicação atual, ao contrário da Bancada que usa
um porto legatório.
A arquitetura do Sistema de Controle, mostrada na
Figura 1, baseia-se em um computador, o próprio
Sistema de Controle e o robô. Do lado do robô, são
disponibilizadas linhas de entrada_e_saída de dados
digitais e, também, entradas para sinais analógicos.
Do lado do computador é estabelecida uma conexão
de dados através do porto USB, cuja programação é
facilitada pela API escrita em linguagem C++. Neste
sentido, o Sistema de Controle atua como um har dware genérico para a integração de sensores e atuadores através de uma base computacional. Sua biblioteca de software abstrai a arquitetura de hardware e permite a rápida compreensão e verificação dos
conceitos envolvidos. Esta facilidade de uso e aplicação abre espaço para experimentos mais elaborados
em disciplinas que envolvam circuitos eletrônicos,
instrumentação ou controle.
Seu principal objetivo é servir como plataforma onde
a robótica possa ser facilmente experimentada. O
hardware do Sistema de Controle é suficiente para
ensaiar vários experimentos de robótica  inclusive
montar um robô_móvel. Por outro lado, a API facilita
o desenvolvimento do software_de_controle para o
hardware, pois fornece classes e métodos que se encarregam de traduzir uma ordem de alto nível
(como, por exemplo, adquira o valor da tensão aplicada na entrada analógica 0) nos comandos de baixo nível que executam esta operação.

Para o desenvolvimento do hardware do Sistema de
Controle, foi escolhido o microcontrolador
PIC18F4550 da Microchip. Este componente se
adequa ao escopo do projeto por ter baixo_custo, ser
facilmente encontrado no mercado brasileiro, e conter diversos dispositivos de entrada_e_saída. Desta
forma, o circuito desenvolvido suporta os seguintes
periféricos







Oito entradas analógicas com resolução de
10 bits
Oito linhas de dados digitais bidirecionais
Cinco linhas de dados digitais de saída
Dois módulos de PWM (Modulação por
Largura de Pulso)
Quatro módulos para servo-motores
Três contadores digitais de 16 bits.

O circuito eletrônico foi concebido para utilizar poucos componentes, totalizando um microcontrolador,
um resistor, dois capacitores e um cristal.
2.2 API do Sistema de Controle de Robôs Móveis
A API do Sistema de Controle de Robôs Móveis
foi criada com o intuito de facilitar a comunicação
entre o computador hospedeiro e o Sistema de Controle. Ela abstrai o envio de comandos e a interpreta ção dos dados de resposta enviados pelo Sistema de
Controle, encarregando-se também de efetuar quaisquer cálculos necessários para a configuração dos
dispositivos do microcontrolador.
A API foi escrita em linguagem C++, que oferece
uma série de facilidades de comunicação com portos
de entrada_e_saída. É também uma linguagem popular ensinada na maior parte das universidades, além
de possuir uma base de conhecimento grande na internet. Isto a torna uma forte linguagem para fins
educativos, embora haja muita discussão sobre qual

676

a melhor linguagem para ensinar programação aos
alunos.
Para o desenvolvimento da API foram utilizados o
compilador MinGW, a IDE (Integrated Development Environment) Eclipse Galileo, e a API nativa
do Windows. Apesar de ser possível utilizar o ambiente GNULinux, o ambiente Windows foi escolhido
por ser mais popular.
A API é composta principalmente pela classe Controlador que atua como base para o desenvolvimento
de controladores mais completos, responsáveis por
agregar novos conceitos ao controle fornecido pelo
pacote. No que pauta o ensino, estes conceitos são as
teorias de controle vistas em sala de aula pelos alunos.

municação. Isto reduz o tempo gasto para resolver as
atividades deixando-as mais dinâmicas.
O software_de_controle é executado em um netbook
Asus Eee PC 900 com Windows XP, que também
pode ser utilizado para desenvolvimento. Ambientes
compostos por computadores pessoais e sistemas
operacionais gráficos, como este, não são apenas conhecido pela maior parte dos alunos, como também
são utilizados por eles para o desenvolvimento de
software. Desta forma, o ambiente_de_desenvolvimento está dentro do escopo de programação já conhecido pelo aluno, reduzindo o tempo necessário
para desenvolver algoritmos de controle para o robô.
3.1 Desenvolvimento do harware
Os sensores e atuadores escolhidos para comporem o
C2-25 são de baixo_custo e alta disponibilidade no
mercado que, quando combinados, permitem criar
diferentes cenários para a verificação de conceitos
aprendidos em sala de aula. Desta forma, os atuadores escolhidos foram

3 Robô C2-25
O robô C2-25, mostrado na Figura 3, foi construído com materiais previamente adquiridos pelo
Laboratório de Integração de Sistemas e Dispositivos
Inteligentes (LISDI) sensores, atuadores, barras de
alumínio, etc. Para o desenvolvimento do hardware
de controle, foi utilizado o Sistema de Controle de
Robôs Móveis, descrito no item 2.




Dois motores DC com redução, utilizados
para a tração diferencial (differential drive)
Um servo motor para alterar a direção para
onde os sensores nele acoplados estão apontados

Já os sensores escolhidos foram



Dois odomômetros incrementais acoplados
s rodas
Um sensor de distância por infra-vermelho
(modelo Sharp GP2D12) acoplado ao servo
motor

Além destes sensores, há também uma câmera do
tipo webcam embutida no netbook utilizado.
Estes sensores e atuadores permitem que sejam desenvolvidas atividades como controlar a velocidade
do motor DC explorar o ambiente com visão_computacional ou através do sensor de distância perseguir objetos visualizados pela webcam experimentar
diferentes arquiteturas de controle para robôs_móveis dentre outras.
O desenvolvimento do hardware foi facilitado pelo
uso do Sistema de Controle para Robôs Móveis, que
forneceu as interfaces para os sensores, os atuadores
e a comunicação com o computador. A Figura 4
mostra o diagrama em blocos do hardware montado
para o robô C2-25.

Figura 3. Robô C2-25

O objetivo do robô C2-25 é ser uma ferramenta didática para o ensino baseado em robótica. O robô embarca sensores e atuadores que, juntos ou separados,
permitam experimentar diferentes conceitos vistos
em sala de aula. Além disso, sua programação é facilitada por uma API escrita especificamente para o
robô. Esta API contém as classes e métodos necessários para adquirir os dados sensoriais e acionar seus
atuadores.
Esta ferramenta permite elaborar de forma rápida
atividades práticas que envolvam, por exemplo, software básico, teoria_de_controle, robótica, instrumentação ou redes de sensoriamento. Ele oferece uma interface simples para que os alunos façam a aquisição
de dados e acionamento de atuadores sem conhecerem o hardware da interface ou os protocolos de co-

3.2 API do Robô C2-25
A API do robô C2-25 foi construída sobre a API
do Sistema de Controle de Robôs Móveis e, portan677



to, utiliza as mesmas ferramentas e ambientes de desenvolvimento. A API do robô consiste na classe
Robo que descende da classe Controlador para que,
desta forma, faça uso de suas funções de comunicação com o Sistema de Controle.
A classe Robo oferece métodos que facilitam o uso
dos sensores e atuadores específicos presentes no
robô, inclusive o controle_de_velocidade automático
realizado em paralelo ao programa do usuário atra vés de uma linha de execução concorrente. Desta
forma, a programação do robô é facilitada e o tempo
gasto para o desenvolvimento de aplicativos de controle é reduzido.




Os pacotes de dados trocados entre o Cliente e o Servidor são pequenos na maior parte das transações,
não excedendo 64 bytes. Isto reduz o tempo de transmissão e melhora o uso da rede, reduzindo a perda
de desempenho por uso extensivo de cabeçalhos. As
únicas mensagens que utilizam mais de um pacote
para serem enviadas são aquelas que transmitem a
imagem capturada pela webcam.
Para que os pacotes sejam entregues com segurança,
foi adotado um protocolo de rede que, na medida do
possível, assegurasse proteção dos dados através de
um método de cifração de dados, conforme é descrito
no item 4.1.
Para implementar esta arquitetura, foi criada a API
de Redes para Robôs Móveis, que é detalhada no
item 4.2.

4 Ambiente de Desenvolvimento em Rede
O software_de_controle do robô C2-25 pode ser
criado tanto no netbook embarcado quanto em qualquer computador que tenha as ferramentas necessárias para a compilação do código do usuário junto 
API do robô. Entretanto, para testar este software, o
executável gerado deve ser copiado para o computador embarcado no robô e ser executado localmente.
Este processo retarda o desenvolvimento pois, além
do tempo gasto na cópia do executável de uma máquina para outra, não é possível depurar o software
remotamente.
Uma possibilidade é o uso de ferramentas de acesso
remoto, como a Computação Virtual por Rede
(VNC). Contudo, estas ferramentas dão privilégio de
acesso a serviços do computador embarcado no robô
que não devem ser atribuídos a usuários da rede,
como acesso ao sistema de arquivos e de configurações do computador.
A solução adotada foi a criação de uma arquitetura
cliente-servidor que oferece apenas o acesso aos sensores e atuadores do robô através da rede. O Servidor
é executado no Computador embarcado e atende as
chamadas do Cliente, que é executado na Base de
desenvolvimento (o computador do usuário). As chamadas do cliente consistem em comandos para os
atuadores (como, por exemplo, modificar a orientação do servo motor) e pedidos de leitura de sensores
(como o sensor de distância). Esta arquitetura é mostrada na Figura 5.
Esta arquitetura simples, baseada no protocolo de
rede TCPIP, que é popular e de baixo_custo, incentiva a implantação de laboratórios teleoperados. Uma
discussão sobre o uso de laboratórios teleoperados é
feita na Conclusão deste artigo (item 5).
Para implementar esta arquitetura, foram selecionados as funções do robô (serviços) que seriam oferecidos pelo Servidor. São eles



Alterar a orientação do servo motor do sensor de distância
Ler o estado do sensor de distância
Ler o estado dos odômetros.

4.1 Protocolo de Comunicação
O protocolo de comunicação implementado neste
projeto buscou a simplicidade para aumentar o desempenho da rede. Neste sentido, foi escolhido utilizar sockets para a comunicação entre o Cliente e o
Servidor. Este mecanismo de comunicação é simples
de ser programado e oferece o rápido envio de informações pela rede.
Entretanto, o socket não implementa nenhuma diretiva de segurança, transmitindo os dados sem cifração de dados ou assinatura digital. Para superar esta
deficiência, foi escolhido um algoritmo de cifração
de dados, o Blowfish , para proteger os dados trocados entre o Cliente e o Servidor.

Figura 4. Arquitetura de Hardware do Robô C2-25

Capturar a imagem da webcam do computador embarcado
Alterar a velocidade e direção dos motores
do robô

Figura 5. Arquitetura de Rede

678

O método Blowfish, criado em 1993 por Bruce
Schneier (1994), é um cifrador de blocos de alto_desempenho, livre de licenças e que, recentemente,
está ganhando maior aceitação da indústria como
um forte algoritmo de cifração. Por ser simétrico,
tanto o Cliente quanto o Servidor devem utilizar a
mesma chave.
Com as tecnologias definidas, criou-se o protocolo
de comunicação deste projeto. Os primeiros 64 bits
(8 bytes) de cada mensagem contém um número inteiro (int) de 32 bits (4 bytes) cifrado. Este número
indica o comprimento n , em bytes (de 8 bits), da
mensagem transmitida de modo que os n bytes
subseqentes correspondem  mensagem cifrada.
Ao enviar uma mensagem, tanto o Cliente quanto o
Servidor cifram a mensagem original e salvam seu
comprimento em um int. Este int é então cifrado, gerando sempre um bloco de 8 bytes de comprimento
ao qual é concatenada a mensagem cifrada. Ao receber a mensagem, o Cliente ou Servidor realiza o processo inverso lê os primeiros 8 bytes da mensagem
recebida e os decifra para recuperar o int com a
quantidade de bytes da mensagem depois, lê a quantidade de bytes especificada para esta mensagem e a
decifra, obtendo a mensagem original.
A ordem das mensagens também é importante neste
protocolo. Existem duas mensagens especiais, uma
que indica o início de uma sessão de comunicação e
outra que indica o fim desta sessão. Estas mensagens
contém, respectivamente, uma cadeia de caracteres
com a palavra iniciar e uma cadeia com a palavra
encerrar.
As demais mensagens são codificadas da seguinte
forma o primeiro byte (byte identificador) contém o
código do pedido os demais bytes contém os parâmetros do pedido. Estas mensagens são alteração da
velocidade e direção dos motores alteração do ângulo do servo motor do sensor de distância leitura dos
odômetros leitura do sensor de distância aquisição
da imagem da webcam.

classes SocketSelect, utilizada pelo SocketServer, e
Socket, base destas classes.
Outra classe de código fonte aberto utilizada no projeto é a CStopWatch, que permite a criação de um
temporizador de alta precisão, utilizado para medir o
desempenho da comunicação entre o Cliente e o Servidor.
A aquisição e manipulação das imagens da webcam
é feita através da biblioteca OpenCV (Open Computer Vision ) 2.0. Esta biblioteca contém rotinas de
entrada_e_saída de imagens, e uma variedade de algoritmos de tratamento de imagem. Ela foi escolhida
por apresentar uma interface simples para a aquisição de imagens e o algoritmo para compactação de
imagens no formato JPEG.
Por fim, os algoritmos de cifração e decifração de
dados do método Blowfish foram fornecidos pela biblioteca OpenSSL 0.9.8.
Baseado neste conjunto de classes, bibliotecas e
APIs, foram criadas as seguintes classes







BlowFish contém os métodos para cifrar e
decifrar strings com o método Blowfish. É
usada pelas classes Servidor e ClienteRobo
Camera ao ser iniciada, cria uma linha de
execução concorrente que adquire uma imagem da webcam a cada 33 ms para manter
uma cópia da imagem mais recente. Além
disso, a classe permite compactar uma imagem no formato JPEG
Log permite criar arquivos de registros de
gerenciamento de data e hora das entradas
de texto
Servidor contém os métodos necessários
para criar um servidor para o robô C2-25
ClienteRobo contém os métodos necessários para criar um cliente para o servidor do
robô C2-25.

Com a classe Servidor, foi criado um servidor simples e um programa de exemplo para o Cliente. O
servidor criado utiliza a classe Servidor para oferecer o controle do robô através da rede. Ele espera a
conexão de um cliente para então iniciar uma sessão.
As ocorrências da sessão são salvas num arquivo de
registros. Este servidor cria apenas uma única sessão
de controle para o robô_móvel e é configurado através dos parâmetros passados pela linha de comando.
O Cliente, por sua vez, permite ao usuário se conectar ao Servidor para controlar o robô através do teclado do computador ou do mouse. Além disso, o
cliente faz a leitura dos sensores e os exibe em duas
janelas. Uma das janelas exibe a imagem capturada
pela webcam do robô, como mostra a Figura 6, que
no caso consiste em uma caixa de madeira e um armário que estão na frente do robô. A Figura 7 mostra janela com a configuração da velocidade que o
robô deve desenvolver quando solicitado (no caso,

4.2 API do Ambiente de Desenvolvimento em Rede
A API de Redes para Robôs Móveis contém as
classes necessárias para a criação do Cliente e do
Servidor. Para o desenvolvimento destas classes, foram utilizadas diversas bibliotecas e classes de código aberto, além da API do robô C2-25 e as classes
padrões da linguagem C++.
Para utilizar os sockets no Windows, foi utilizadas
as classes do pacote C++ Socket Class for Windows.
Estas classes fornecem uma interface amigável para
o uso de sockets em C++ utilizando a API do Windows, o que facilitou o desenvolvimento tanto do
Cliente quanto do Servidor. São elas as classes SocketServer, para a criação do socket do lado do Servidor, e SocketCliente, para a criação do socket do
lado do Cliente. Além destas classes, existem as

679

0.2 ms), a leitura dos dados dos sensores de odometria e velocidade de cada motor (neste caso, todas
iguais a zero pois o robô esteve inerte durante a tira da das capturas de imagens da tela) e um gráfico que
representa a leitura do sensor de distância em cinco
ângulos diferentes (onde é possível notar a presença
de um obstáculo do lado esquerdo a caixa).
Em testes realizados na Intranet da universidade,
não fora observados problemas de atraso na comunicação entre o Cliente e o Sevidor. Testes realizados
através da Internet, por outro lado, demonstraram a
sensibilidade do sistema a atrasos. Neste sentido,
mais testes devem ser realizados para medir de forma eficiente o desempenho do sistema em diferentes
situações de rede.

nece uma base onde experimentos de outras áreas,
como Inteligência Artificial, podem ser desenvolvidos. Além disso, caso o software não possa ser embarcado, ele ainda pode ser executado em outra máquina e controlar o robô remotamente pela rede sem
fio. Estas características permitem aproximar os alunos tanto  robótica quanto s áreas que façam uso
dela como ferramenta para o ensino.
Entretanto, algumas questões pertinentes a implementação das três ferramentas permanecem abertas.
O Sistema de Controle de Robôs Móveis abre espaço
para a discussão sobre a escolha do Porto USB e da
arquitetura de hardware. O USB foi escolhido por
sua popularidade (está presente na maior parte dos
computadores encontrados hoje no mercado), alta
velocidade de transferência de dados e baixo_custo
de desenvolvimento. Porém, o Porto USB introduz
algumas dificuldades para a concepção do dispositivo. Primeiro, sua baixa velocidade de acesso (1 ms)
impede que um dispositivo USB opere como um dispositivo conectado ao Porto Paralelo, cuja velocidade
de acesso varia de 2s (500 Kbps) até 500 ns (2
Mbps) (Microsoft Corporation 1993). Essa limitação
não permite que o usuário altere os níveis de tensão
rapidamente no hardware, de forma a gerar formas
de onda para controle de servo-motores, PWM, entre
outros experimentos interessantes para disciplinas
que envolvam circuitos_digitais e teoria_de_controle.
Quanto a arquitetura de hardware, foi escolhido um
hardware baseado num único chip para facilitar o
desenvolvimento do circuito eletrônico e reduzir o
custo. Entretanto, a adoção de uma arquitetura de
hardware distribuída pode trazer vantagens de desempenho com pouco aumento do custo do circuito.
No que diz respeito ao Robô C2-25, uma das preocupações da sua criação foi embarcar sensores e atuadores que permitissem experimentar diferentes conceitos vistos em sala de aula. Todavia, dada a restrição de tempo e orçamento do projeto, o hardware
presente no robô foi subutilizado. Baseado no Sistema de Controle de Robôs Móveis, o hardware do C225 suporta um número maior de periféricos do que
atualmente estão instalados no robô. Neste sentido,
em trabalhos futuros novos sensores e atuadores podem ser adicionados ao robô para aumentar sua funcionalidade, como, por exemplo, sensores de choque,
sensores de temperatura e servo motores para implementar um pequeno braço robótico.
Por fim, as maiores preocupações do Ambiente de
Desenvolvimento em Rede são o desempenho da comunicação_em_rede e a segurança. Neste projeto,
adotou-se o protocolo TCP para a transmissão_de_dados via rede para o controle de um robô_móvel, o
C2-25.
Os resultados obtidos foram satisfatórios, entretanto
pode-se observar a perda de desempenho quando
ocorria o congestionamento de rede. Em trabalhos
futuros, outros protocolos podem ser estudados para
se obter o maior desempenho_de_rede. No que pauta

Figura 6. Imagem capturada pela webcam do netbook
embarcado no robô

Figura 7. Janela com os controles e leitura dos sensores do robô.

5 Conclusão
O Sistema de Controle de Robôs Móveis é uma
plataforma que oferece suporte a integração e controle de diferentes sensores e atuadores, conforme
prova o robô C2-25 cujo hardware de controle é baseado nesta plataforma.
O robô C2-25 oferece sensores e atuadores que permitem desenvolver diferentes atividades e, através
do Ambiente de Desenvolvimento em Rede, pode ser
controlado remotamente através de uma rede de
computadores TCPIP. Desta forma, ele atua como
uma plataforma padrão onde diferentes aspectos da
robótica podem ser experimentados sem muita dificuldade graças a API de software. Ele também for-

680

a segurança, ainda há aspectos do protocolo que podem ser melhorados, pois apesar da cifração dos dados transmitidos, ainda é possível o roubo de identidade na rede (ataque do homem do meio). Um outro
aspecto interessante a ser trabalhado é a integração
do Ambiente de Desenvolvimento em Rede a um sistema de EAD (Educação A Distância). Além das
vantagens em se utilizar das ferramentas já existentes em sistema EAD, esta integração permitirá o
controle de acesso ao robô de modo a impedir que
um usuário faça o monopólio do robô.
Ainda não foram coletados dados sobre a efetividade
das ferramentas aqui apresentadas no que diz respeito aos seus objetivos pedagógicos devido sua novidade. Completadas no início deste ano, estas ferramentas foram disponibilizadas recentemente para os alunos das disciplinas de Introdução aos Robôs Móveis
e para o uso em Trabalhos de Conclusão de Curso.
Neste sentido, trabalhos futuros deverão avaliar o
uso e resultados destas ferramentas no curso de Bacharelado em Ciências da Computação desta universidade. Além disso, os demais aspectos aqui discutidos também serão trabalhados para a melhoria das
ferramentas.

Microsoft Corporation, 1993. Extended Capabilities
Port Specifications.
Newman, K.E., Hamblen, J.O.  Hall, T.S., 2002.
An introductory digital design course using a
low-cost autonomous robot. IEEE Transactions
on Education, 45(3), 289296.
Sctmeier, B., 1994. Description of a new variablelength key, 64-bit block cipher (Blowfish). Fast
Software Encryption, Cambridge Security
Workshop Proceedings (December 1993), 191204.
Wasserman, E., 2002. Why industry giants are
playing with Legos. Fortune, 144(10), 101-106.

Agradecimentos
Agradecemos ao Laboratório de Integração de Sistemas e Dispositivos Inteligentes do Departamento de
Computação da Faculdade de Ciências da Universidade Estadual Paulista Júlio de Mesquita Filho UNESP pelo financiamento e apoio ao desenvolvimento deste projeto.
Referências Bibliográficas
Alves, S.F.D.R., Ferasoli Filho, H.  Yonezawa,
W.M., 2009. Bancada Experimental Robótica
para o Ensino de Computação. In Proceedings
of the 8th Brazilian Conference on Dynamics,
Control and Applications. 8th Brazilian
Conference on Dynamics, Control and
Applications. pp. 1-6.
Avanzato, R., 2000. Mobile robotics for freshman
design, research, and high schooloutreach. In
2000 IEEE International Conference on
Systems, Man, and Cybernetics.
Balch, T. et al., 2008. Designing Personal Robots for
Education
Hardware,
Software,
and
Curriculum. IEEE Pervasive Computing, 7(2),
5-9.
Matsushita, K., Yokoi, H.  Arai, T., 2006.
Robotics in Education Plastic Bottle Based
Robots for Understanding Morph-Functionality.
In
Robot
and
Human
Interactive
Communication, 2006. ROMAN 2006. The 15th
IEEE International Symposium on. pp. 662
667.

681