Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

VERIFICACAO GENERALIZADA DA PROPRIEDADE DE OBSERVADOR EM
SISTEMAS A EVENTOS DISCRETOS
Hugo J. Bravo Antonio E.C. Cunha Patrcia N. Pena Robi. Malik Jose E.R. Cury






SE3-Instituto Militar de Engenharia
Rio de Janeiro, RJ, Brasil

DELT- Universidade Federal de Minas Gerais
Belo Horizonte, MG, Brasil

Department of Computer Science - The University of Waikato
New Zealand


DAS-CTC- Universidade Federal de Santa Catarina
Florianopolis, SC, Brasil

Email hugobravoc@gmail.com, carrilho@ime.eb.br, ppena@ufmg.br, robi@waikato.ac.nz,
cury@das.ufsc.br
Abstract This paper addresses the verification of the observer property in abstractions of discrete event
systems obtained through natural projection. In this context, we propose a modification to the OP-verifier
I, that cannot be used when the system to be abstracted contains cycles of non relevant events, in order to
circumvent this limitation. The modified algorithm, the OP-verifier II, can be considered as a general method
for verification of the observer property.
Discrete event systems, Natural projection, Observer property.

Keywords

Resumo Este artigo aborda o problema da verificacao da propriedade_de_observador em abstracoes, obtidas
por projecao_natural, de sistemas_a_eventos_discretos. Neste contexto, apresenta-se uma modificacao do algoritmo
PO-Verificador I, em que se contornam as limitacoes do algoritmo com relacao ao nao tratamento adequado
de sistemas que possuam ciclos de eventos nao relevantes. As modificacoes no PO-Verificador I, tornam o
novo algoritmo, proposto neste artigo e denominado PO-Verificador II, um metodo geral para a verificacao da
propriedade_de_observador.
Palavras-chave

.

Introducao

A projecao_natural cumpre um papel fundamental na obtencao de abstracoes de Sistemas
a Eventos Discretos (SED). Na Teoria de Controle Supervisorio (TCS) (Ramadge e Wonham,
1989), as abstracoes obtidas por projecoes naturais sao empregadas em diversos contextos, como
no controle com observacao parcial de eventos
(Wonham, 2011), o controle_hierarquico (Torrico
e Cury, 2004), (Cunha e Cury, 2007) (Schmidt
e Breindl, 2011), e a verificacao de nao conflito
do controle modular (Hill e Tilbury, 2006), (Pena
et al., 2009), entre outras.
Em muitas das abordagens mencionadas, um
requisito fundamental e que as abstracoes atendam a Propriedade de Observador (PO). Quando
uma abstracao atende a PO diz-se que e uma POAbstracao (Pena et al., 2008). O conceito de PO
foi apresentado inicialmente por Wong e Wonham
(1996), no contexto da obtencao de supervisores
nao bloqueantes no controle_supervisorio hierarquico. Uma forma geral da PO foi introduzida
por Wong et al. (1995) e estendida por Wong et al.
(2000) para linguagens nao prefixo fechadas. De
forma geral, as PO-Abstracoes sao consistentes
com os sistemas originais no sentido da correspon-

ISBN 978-85-8001-069-5

dencia entre sequencias de eventos que definem o
cumprimento de tarefas.
Com a evolucao da literatura, descobriuse que as PO-Abstracoes possuem muitas outras propriedades interessantes, que extrapolam
a sua aplicacao original. Por exemplo, uma
PO-Abstracao e garantida de possuir um numero menor de estados que o sistema original
(Wong, 1998). Em Feng e Wonham (2006) e Pena
et al. (2006), revelou-se a modularidade das POAbstracoes, no sentido de que, dadas certas condicoes sobre os eventos compartilhados, a abstracao de um sistema composto apresenta a PO se,
e somente se, as abstracoes dos componentes do
sistema tambem apresentem a PO.
No contexto da verificacao da PO em abstracoes, Pena et al. (2008) apresentaram um algoritmo, denominado PO-Verificador I, o qual detecta se uma abstracao de um sistema, obtida por
uma projecao_natural arbitraria, atende a PO. O
PO-Verificador I nao precisa que a projecao_natural propriamente dita seja calculada para verificar
a PO. Entretanto, o PO-Verificador I possui as
restricoes de que o sistema original a ser abstrado
deve ser determinstico e nao pode possuir ciclos
de eventos nao relevantes.
Neste artigo, apresenta-se uma modificacao

2509

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

do PO-Verificador I em que se contornam as restricoes sobre o sistema original. Nesta modificacao,
denominada PO-Verificador II, encapsulam-se os
componentes fortemente conexos correspondentes
aos ciclos de eventos nao relevantes em macroestados e define-se um novo algoritmo para calculo
do verificador. Uma vantagem do verificador aqui
apresentado e que se contornam as restricoes impostas a aplicacao do PO-Verificador I ainda se
usufruindo das vantagens computacionais proporcionadas pelo mesmo.
Este artigo esta estruturado da seguinte
forma. A Secao 2 contem os conceitos preliminares ao trabalho. Na Secao 3 apresenta-se o POVerificador II, com a proposta do algoritmo para
sua construcao juntamente com algumas propriedades. A Secao 4 traz um exemplo de aplicacao
do PO-Verificador II. Comentarios finais sao apresentados na Secao 5.
2

Preliminares

Revisam-se nesta secao alguns conceitos fundamentais para o entendimento do algoritmo de verificacao presente neste artigo.
Para um alfabeto finito , o conjunto de todas
as sequencias de eventos em , incluindo a sequencia vazia , e denotado por  . O subconjunto
L   e denominado linguagem. Uma sequencia
de eventos s  L e uma palavra de L. A concatenacao das palavras s, u   formam a palavra
t  su, em que t   . A palavra s e prefixo de
t, denota-se s  t, e u e sufixo de t. O prefixofechamento de L e definido por L  s   s  t
para algum t  L.
Um SED e modelado por um automato determinstico G  (Q, , , q0 , Qm ), em que, Q e o
conjunto de estados,  e o alfabeto, q0  Q e o
estado inicial, Qm  Q e o conjunto de estados
marcados e  G  Q    Q e a funcao de transicao. O conjunto de eventos ativos associados a
q  Q e EnG (q)  s   (q, )!, em que (q, s)!
denota que  esta definida. A linguagem gerada
e marcada de G sao L(G)  s   (q0 , s)! e
Lm (G)  s  L(G)(q0 , s)  Qm . Diz-se que G
e trim se e acessvel, ou seja, todos os estados de
G sao acessveis a partir de q0  Q, e coacessvel,
ou seja, desde qualquer de estado G pode-se acessar um estado marcado. G e nao bloqueante se
L(G)  Lm (G), isto e, se G for coacessvel. Sem
perda de generalidade, assume-se que G e trim.
No contexto deste artigo, o alfabeto  e particionado como   r  nr , em que r e o
alfabeto de eventos relevantes e nr e o alfabeto
de eventos nao relevantes.
Para r  , a projecao_natural     r ,
mapeia palavras em  em palavras em r apagando os eventos que nao pertencem a r . Este
conceito pode ser estendido para linguagens como
(L)  t  r t  (s) para algum s  L. Uma

ISBN 978-85-8001-069-5

propriedade que caracteriza a projecao_natural e
apresentada a seguir.
Definicao 2.1 (Wong et al., 2000) Sejam uma
linguagem L   e     r a projecao
natural de  para r . Diz-se que (L) possui a
propriedade_de_observador quando para todo s  L
e todo t  r , se (s)t  (L) entao existe t  
tal que (st )  (s)t e st  L.
Em palavras, se uma abstracao verifica a PO,
entao as tarefas realizadas no sistema abstrado
correspondam sempre a abstracoes de tarefas do
sistema original. Uma abstracao, isto e, um automato projetado (G), denomina-se PO-Abstracao
se (Lm (G)) verifica a PO (Pena et al., 2008).
Na literatura, ha diversos algoritmos que
abordam o problema da verificacao da PO em
abstracoes (Pena et al., 2010b). Nesse contexto,
destaca-se por sua simplicidade e eficiencia o
algoritmo, denominado PO-Verificador I (Pena
et al., 2008).
O PO-Verificador I, inspirado no verificador
introduzido por Yoo e Lafortune (2002), constroi
um automato nao determinstico V , denominado
verificador, a partir um automato determinstico
M (obtido a partir de G), denominado automato
auxiliar, e um alfabeto relevante r . Apos a obtencao de V , uma abstracao (G) sera classificada
de PO-Abstracao se, somente se, o estado Dead
nao e acessvel em V . Para que os resultados do
PO-Verificador I sejam validos duas restricoes sao
impostas G deve ser determinstico e nao possuir
ciclos de eventos nao relevantes.
Na continuacao, uma nova versao do POVerificador I sera apresentada. Esta versao contorna as restricoes sobre G, tornando-o, assim, em
um metodo geral para a verificacao da PO.
3

Verificacao Generalizada da
Propriedade de Observador

Nesta secao, apresenta-se um algoritmo de verificacao, obtido por intermedio do aperfeicoamento
do PO-Verificador I, que contorna efetivamente
as restricoes impostas sobre G. Posteriormente,
apresenta-se um teorema que demonstra a corretude do algoritmo proposto.
3.1

Automato Auxiliar M

Seja G o automato que modela o sistema. No contexto da verificacao da PO, utiliza-se o automato
auxiliar M  (QM , ,  M , q0M ), obtido a partir de
G  (QG , G ,  G , q0G , QG
m ), por meio da substituicao dos estados marcados de G por estados sem
marcacao com autolacos rotulados com o evento
relevante   . A linguagem gerada e marcada para M sao L(M )  s    M (q0M , s )! e

Lm (M )  s  G  s  s  L(M ). Com o
proposito de tratar sistemas que possuam ciclos

2510

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.
Encontram-se as componentes fortemente conexas de M

de eventos nao relevantes introduz-se o automato
auxiliar M (nao determinstico). O automato auxiliar M  (QM , ,  M , AM
0 ) e definido a partir de
M  (QM , ,  M , q0M ) como segue

 O alfabeto    e particionado como  
r  nr , tal que r  r e nr  nr 
 At  QM denomina-se macroestado inicial de
M
M , isto e, AM
0  At se e somente, se q0  At ,
M
M
tal que q0  Q 
 A funcao de transicao  M  QM    2Q
e definida da seguinte forma

M

- Sejam At , Ak  QM , qi , qj  QM e   r .
Entao, Ak   M (At , ) se e somente, se qi 
At e qj  Ak tal que  M (qi , )  qj .
- Sejam At , Ak  QM , qi , qj  QM , e   nr .
Entao, Ak   M (At , ) se e somente, se (i)
At 6 Ak e (ii) qi  At e qj  Ak tal que
 M (qi , )  qj .
A linguagem gerada e marcada de M sao, res
pectivamente L(M )  s     M (AM
0 , s )! e
 
Lm (M )  s  (   ) s  s  L(M ) .
Observacao 3.1 Se G nao possui ciclo de eventos nao relevantes, entao M  M . Entao, as linguagens gerada e marcada de M e M sao iguais.
Exemplo 3.1 Para ilustrar a obtencao de M ,
considere o automato G, mostrado na Figura 1.
Para G, tem-se que G  a, x, y, em que G
r 
a e G

x,
y.
O
automato
auxiliar
M
,
obnr
tido a partir de G e mostrado na Figura 2.

Figura 1 Automato G.



 O conjunto de estados QM esta definido a
partir do conjunto de componentes fortemente conexos de M , considerando-se apenas as transicoes com eventos nao relevantes. Para realizar esta tarefa, utiliza-se o algoritmo de Tarjan (Nuutila e Soisalon-Soininen,
1994). Nesse sentido, QM e uma particao de
QM . Cada componente At  QM , tal que
At  QM , denomina-se macroestado

Redefine-se a estrutura de transição M

Figura 3 Obtencao do automato auxiliar M .
3.2

Verificador Generalizado V

No ambito deste artigo, utiliza-se um automato
nao determinstico V , denominado verificador generalizado, como um meio auxiliar para determinar se uma abstracao e ou nao PO-Abstracao.
Este novo verificador e obtido apos a execucao do
algoritmo, denominado PO-Verificador II (Algoritmo 3.1).
O verificador generalizado V  (Q, , , AM
0 )
e definido da seguinte forma
 Q e o conjunto de estados, tal que, cada
estado pertencente a Q e apresentado como
um conjunto de cardinalidade 1 ou 2, isto e,
1  At , Ak   2, em que At , Ak  QM , ou
um estado especial denominado Dead.
  e o alfabeto
 AM
0   Q e o estado inicial
   Q    2Q e a funcao de transicao definida pela sub-rotina Delta(X) (Algoritmo
3.2).
O PO-Verificador II, constroi V , a partir de
M e r . Se Dead e acessvel em V , entao (G)
nao e PO-Abstracao.
A estrutura do PO-Verificador II e semelhante
ao PO-Verificador I. Por esse motivo opta-se por
descrever somente as modificacoes realizadas ao
PO-Verificador I. As diferencas significativas entre
os algoritmos, encontram-se em Delta(X).
Como a funcao de transicao  e nao determinstica, iniciam-se todas as entradas da transicao (At , Ak , ), para todo    como vazias.
Da constroi-se interativamente as transicoes nao
vazias nas linhas 14, 18, 24 e 30 da sub-rotina
Delta(X).
Algoritmo 3.1
1 Entrada M  (QM , ,  M , AM
0 )
2 Faca Q   e QT  AM
0 
3 enquanto QT  Q 6  Faca

Figura 2 Automato M .
A obtencao do automato auxiliar M , a partir de
M , e mostrada na Figura 3.

ISBN 978-85-8001-069-5

4

Selecione X  QT  Q

5

Faca QT  QT  X e Q  Q  X

6
Delta(X) (Algoritmo 3.2)
7 fim
8 Sada V  (Q, , , AM
0 )

2511

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.
Algoritmo 3.2
9 Seja X  At , Ak 
10 para cada   En(X)  EnM (At )  EnM (Ak ) faca
11

se   r entao

12

se   EnM (At ) e   EnM (Ak ) entao

13

para cada At   M (At , ) e Ak   M (Ak , ) faca

14

(At , Ak , )  (At , Ak , )  At , Ak 

15
16

QT  QT  At , Ak 
fim

17

a

A0 A1 

a

(Linha 12)

A2 , A1  Dead (Linha 17)

A1 A1 

a

(Linha 12)

A2 , A1  Dead (Linha 17)

a

(Linha 12)

A2 , A1  Dead (Linha 17)

A1 A2 , A1  (Linha 12)

A2  A2  (Linha 12)

A1 A2 
a

a





senao, se (  EnM (At ) e EnM (Ak )  nr  )
ou (  EnM (Ak ) e EnM (At )  nr  ) entao

18
19
20
21
22
23
24

(At , Ak , )  (At , Ak , )  Dead
Q  Q  Dead
fim
senao
se   EnM (At ) entao
para cada At   M (At , ) faca
(At , Ak , )  (At , Ak , )  At , Ak 

25
26
27

QT  QT  At , Ak 
fim
fim

28

se   EnM (Ak ) entao

29
30

para cada Ak   M (Ak , ) faca
(At , Ak , )  (At , Ak , )  At , Ak 

31
QT  QT  At , Ak 
32
fim
33
fim
34 fim
35 fim

De forma similar ao PO-Verificador I, o POVerificador II tambem esta definido distintamente
para cada tipo evento. Descrevem-se, a seguir, as
linhas 11 a 20, em que   r , e as linhas 21 a 34,
em que   nr , de Delta(X).
Se   r (Linha 11), entao verificar se
  EnM (At ) e   EnM (Ak ) (Linha 12). Se
for verdade, entao At e Ak transitam sincronizadamente atraves de , gerando assim, um conjunto
de estados At , Ak  (Linhas 13 a 14). Do contrario, ir para as linhas 17 a 20. Adiciona-se este
conjunto de estados ao conjunto QT (Linha 15).
Para a verificacao da acessibilidade de Dead em
V (Linhas 17 a 20), utiliza-se, de forma similar,
o procedimento no PO-Verificador I.
Se   nr (Linha 21), At e Ak transitam
assincronamente atraves de , portanto dois casos podem ocorrer (i)   EnM (At ) (Linha
22), entao gera-se um novo conjunto de estados At , Ak  (Linhas 23 a 24) e adiciona-se
ao conjunto Q (Linha 25) (ii)   EnM (Ak )
(Linha 28), entao gera-se um novo conjunto de
estados At , Ak  (Linhas 29 a 30) e adicionase ao conjunto Q (Linha 31).
Exemplo 3.2 Para ilustrar a construcao de V ,
considere, M , mostrado na Figura 3. O alfabeto
relevante de M e r  a,  . V , obtido apos a
execucao do PO-Verificador II, a partir de M e
r , e mostrado na Figura 4. A execucao do POVerificador II gera as seguintes transicoes

ISBN 978-85-8001-069-5

Figura 4 Verificador generalizado V .
3.3

Propriedades

O teorema a seguir demonstra a corretude do algoritmo PO-Verificador II.
Teorema 3.1 O estado Dead e acessvel em V ,
se somente, se (G) nao e PO-Abstracao.
A demonstracao do Teorema 3.1, baseia-se nos
seguintes lemas.
Lema 3.1 Para todas as palavras sn , sm  L(G)
com a mesma projecao, isto e, com (sn )  (sm ),
vai existir um estado em V , At , Ak   Q, tal que
existem qi  At e qj  Ak tais que  G (q0 , sn )  qi
e  G (q0 , sm )  qj .
Lema 3.2 Todo estado diferente de Dead em V e
um conjunto At , Ak , tal que 1  At , Ak   2,
em que At e Ak sao componentes de QG e qi 
At , qj  Ak e sn  L(G) tais que  G (q0 , sn ) 
qi , existe sm  L(G) tal que  G (q0 , sm )  qj e
(sm )  (sn ).
Por causa da limitacao de espaco a demonstracao dos Lemas 3.1, 3.2 e do Teorema 3.1 sao
omitidos aqui.
Exemplo 3.3 Considere G da Figura 1 cujo conjunto de eventos relevantes e G
r  a. A correspondente projecao de G, denotada por (G), e
mostrada na Figura 5. No verificador generalizado
V , mostrado na Figura 4, observa-se que o estado
Dead  Q e acessvel em V , portanto (G) nao
e PO-Abstracao. Esta afirmacao e demonstravel
aplicando a Definicao 2.1, em que, para s  axya
e t  a, tem-se que (s)t  aaa  (Lm (G)), mas
 t tal que st  Lm (G) e (st )  (s)t. Assim,
demonstra-se que (G) nao e PO-Abstracao.

Figura 5 Projecao de G em G
r .

2512

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

4

Complexidade

A complexidade do algoritmo PO-Verificador II
esta determinada pela complexidade para construir o verificador generalizado V . Como o ADEF
M  (QM , ,  M , AM
0 ) e a entrada do algoritmo,
entao o numero de estados alcancaveis de V esta
limitado por,
M 2

M 2

M

Q  + Q  + 1  O(Q  ).
Para calcular o numero de transicoes de V ,
considere uma transicao (x, , x ) em M , e seja
y  QM um estado arbitrario. Se   r , entao,
de acordo com as linhas 12 e 17 do Algoritmo 3.2,
origina-se no maximo uma transicao

Figura 8 Automato auxiliar M .
que (s)t  aa  (Lm (G)), mas  t tal que
st  Lm (G) e (st )  (s)t. Portanto, (G)
nao e PO-Abstracao.

(Ax , Ay , , Ax , Ay ) ou (Ax , Ay , , Dead),
em que Ax  QM denota um macroestado contendo o estado x  QM , e se   nr , entao, de
acordo com as linhas 22 e 28 do Algoritmo 3.2,
origina-se uma transicao
(Ax , Ay , , Ax , Ay ).
Entao, para cada transicao de M originam-se ate
QM  transicoes em V . O automato M tem ate
QM  transicoes, portanto o numero total de
transicoes de V esta determinado por,
M

M 2

M

M 2

 Q   Q   O(Q  ).
5

Exemplo

Nesta secao, um exemplo de aplicacao e utilizado
para ilustrar a efetividade do PO-Verificador II,
proposto neste artigo, em comparacao com o POVerificador I.
Seja o automato G, mostrado na Figura 6. O
alfabeto de G e G  a, x, y, em que G
r  a
e G

x,
y.
A
projecao
de
G
sobre
o
conjunto
nr
de eventos relevantes G
r e mostrada na Figura 7.
Observa-se que G tem um ciclo de eventos nao relevantes. O automato auxiliar M , obtido a partir
de G, e mostrado na Figura 8. A seguir constroise V , por meio da execucao do PO-Verificador I, a
fim de classificar se (G) e ou nao PO-Abstracao.

Figura 9 Verificador V .
Nesta primeira parte do exemplo, observa-se
que o PO-Verificador I erra em classificar a (G)
como PO-Abstracao. O que ja era esperado, ja
que G possui um ciclo de eventos nao relevantes.
Na segunda parte do exemplo, mostra-se como
aplicando o PO-Verificador II consegue-se classificar de forma correta a (G).
Considera-se novamente os automatos G e M,
das Figuras 6 e 8. M , obtido a partir de M , e
mostrado na Figura 10. Apos construir V , mostrado na Figura 11, por meio do PO-Verificador
II, determina-se que (G) nao e PO-Abstracao.

Figura 10 Automato auxiliar M .

Figura 6 Automato G.
Figura 11 Verificador generalizado V .
6
Figura 7 Projecao de G em G
r .
Observando V , mostrado na Figura 9, concluise, que (G) e PO-Verificador. No entanto, esta
afirmacao encontra-se errada, ja que aplicando
a Definicao 2.1 em s  ay e t  a, tem-se

ISBN 978-85-8001-069-5

Conclusoes

Neste artigo foi proposto um novo algoritmo, denominado PO-Verificador II, para a verificacao da
propriedade_de_observador em abstracoes, obtidas por meio da operacao projecao_natural. Este
novo algoritmo contorna as limitacoes do POVerificador I no que diz respeito ao nao tratamento

2513

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

conveniente de automatos que sejam nao determinsticos e possuam ciclos de eventos nao relevantes. Alem de contornar de forma versatil as limitacoes do PO-Verificador I, o algoritmo proposto
continua usufruindo as vantagens proporcionadas
pelo PO-Verificador I. O PO-Verificador esta implementado em Supremica (Akesson et al., 2006).
Tem-se como prespectiva de trabalho realizar
estudos de casos de aplicacao do algoritmo tanto
no teste do nao conflito no controle modular local
quanto na obtencao de consistencia hierarquica e
nao bloqueio no controle_hierarquico.
7

Agradecimentos

A pesquisa do primeiro autor e apoiada pela CAPES. O terceiro autor e apoiado parcialmente pela
FAPEMIG. O quarto autor e apoiado parcialmente pelo CNPq (PQ30095393-3). Todos os
autores sao apoiados parcialmente pela CAPES
(Procad 1022007).
Referencias
Cunha, A. e Cury, J. (2007). Hierarchical Supervisory Control Based on Discrete Event
Systems With Flexible Marking, IEEE Transactions on Automatic Control 52(12) 2242
2253.
Feng, L. e Wonham, W. (2006). Computationally
Efficient Supervisor Design Abstraction and
Modularity, 8th International Workshop on
Discrete Event Systems, pp. 38.
Hill, R. e Tilbury, D. (2006). Modular Supervisory
Control of Discrete-Event Systems with Abstraction and Incremental Hierarchical Construction, 8th International Workshop on Discrete Event Systems, pp. 399406.
Akesson, K., Fabian, M., Flordal, H. e Malik, R.
(2006). Supremica - An integrated environment for verification, synthesis and simulation of discrete event systems, Proceedings of
the 8th Internationsl Workshop of Discrete
Event Systems, WODES06, Ann Arbor, MI,
USA, pp. 384385.
Nuutila, E. e Soisalon-Soininen, E. (1994). On
Finding the Strongly Connected Components
in a Directed Graph, Information Processing
Letters 49 14.
Pena, P., Cury, J. e Lafortune, S. (2006). Testing
Modularity of Local Supervisors An Approach Based on Abstractions, 8th International
Workshop on Discrete Event Systems, 2006,
pp. 107112.
Pena, P., Cury, J. e Lafortune, S. (2008).
Polynomial-Time Verification of the Observer Property in Abstractions, American Control Conference, 2008, pp. 465470.

ISBN 978-85-8001-069-5

Pena, P., Cury, J. e Lafortune, S. (2009). Verification of Nonconflict of Supervisors Using Abstractions, IEEE Transactions on Automatic
Control 54(12) 2803 2815.
Pena, P., Cury, J., Malik, R. e Lafortune, S.
(2010b). Efficient Computation of Observer
Projections using OP-Verifiers, Proceedings
of the 10th International Workshop on Discrete Event Systems (WODES).
Ramadge, P. J. G. e Wonham, W. M. (1989). The
Control of Discrete Event Systems, Proc. of
the IEEE 77(1) 8198.
Schmidt, K. e Breindl, C. (2011). Maximally Permissive Hierarchical Control of Decentralized
Discrete Event Systems, IEEE Transactions
on Automatic Control 56(4) 723 737.
Torrico, C. R. C. e Cury, J. E. R. (2004). Controle
supervisorio hierarquico modular por agregacao de estados, Sba Controle  Automacao vol.15 no.3 Campinas JulySept. 2004
15 291299.
Wong, K. C. (1998).
On the Complexity
of Projections of Discrete-Event Systems,
IEEE Workshop on Discrete Event Systems,
pp. 201208.
Wong, K. C., Thistle, J. G., Malhame, R. P. e
Hoang, H. H. (2000). Supervisory Control
of Distributed Systems Conflict Resolution,
Discrete Event Dynamic Systems 10 131
186.
Wong, K., Thistle, J., Hoang, H.-H. e Malhame,
R. (1995). Conflict Resolution in Modular
Control with Applications to Feature Interaction, Proceedings of the 34th IEEE Conference on Decision and Control, 1995, Vol. 1,
pp. 416 421 vol.1.
Wong, K. e Wonham, W. M. (1996). Hierarchical
Control of Discrete-Event Systems, Discrete
event Dynamic Systems Theory and Applications 1 1330.
Wonham, W. M. (2011).
Supervisory control of discrete-event systems,
Department of Electrical and Computer Engineering, University of Toronto,
httpwww.control.utoronto.caDES (updates posted annually).
Yoo, T.-S. e Lafortune, S. (2002). PolynomialTime Verification of Diagnosability of Partially Observed Discrete-Event Systems,
IEEE Transactions on Automatic Control
47(9) 1491  1495.

2514