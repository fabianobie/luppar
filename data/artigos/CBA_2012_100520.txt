Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

ACELERAÇÃO E AVALIAÇÃO DA COMPLEXIDADE COMPUTACIONAL DO
ALGORITMO COMPETITIVO SENSÍVEL  DISTÂNCIA PARCIAL APLICADO AO
PROJETO DE QUANTIZADORES VETORIAIS
RODRIGO R. A. GALVÃO
Fundação Parque Tecnológico Itaipu, FPTI
Escola Politécnica de Pernambuco
E-mail rodrigoregisag@gmail.com

FRANCISCO MADEIRO
Escola Politécnica de Pernambuco, POLI-UPE
E-mail madeiro@poli.br

DANIEL C. CUNHA
Departamento de Sistemas de Computação, CIn-UFPE
E-mail dcunha@cin.ufpe.br

PAULO HUGO E. S. LIMA
Departamento de Eletrônica e Sistemas, DES-UFPE
E-mail paulohugos@gmail.com

JULIANO B. LIMA
Departamento de Matemática, CCEN-UFPE
E-mail juliano@dmat.ufpe.br
Abstract Signal compression, digital watermarking and pattern recognition are examples of applications of vector quantization
(VQ). A significant problem in VQ is the design of dictionaries. In this work, it is presented a proposal for accelerating the partial
distortion sensitive competitive learning (PDSCL) algorithm applied to the design of dictionaries that does not compromise the
quality of the dictionaries obtained. Also, it is presented an analysis of the computational complexity of the PDSCL algorithm.
Keywords Vector quantization, computational intelligence, codebook design.
Resumo Compressão de sinais, marca dágua digital e reconhecimento_de_padrões são exemplos de aplicações de quantização
vetorial (QV). Um problema relevante em QV é o projeto_de_dicionários. Neste trabalho, é apresentada uma proposta de aceleração do algoritmo competitivo sensível  distorção parcial aplicado ao projeto_de_dicionários que não compromete a qualidade dos
dicionários obtidos. Adicionalmente, uma análise da complexidade computacional do algoritmo PDSCL é apresentada.
Palavras-chave .

1. Introdução
Recursos de sistemas_computacionais para comunicação de dispositivos e armazenagem de dados
são cada vez mais requeridos, pois crescem com os
avanços tecnológicos e popularização de produtos. A
redução desses requisitos é o objetivo das técnicas de
compressão de sinais 1, que buscam codificar de
forma mais eficiente esses dados (sinais). Neste cenário, a quantização_vetorial (QV) apresenta-se como
uma técnica adequada, bastante utilizada em diversos
sistemas de codificação de sinais.
A eficiência obtida no processo de codificação
por meio de técnicas baseadas em QV é sensivelmente dependente dos dicionários empregados nesse
processo. O algoritmo de Linde-Buzo-Gray (LBG)
2 é o "estado da arte" das técnicas de projeto de
dicionários para QV, sendo apresentadas diversas
modificações para aceleração do processo aceleração da convergência do algoritmo LBG 3 uso de
redes_neurais artificiais 4 uso de algoritmos fuzzy
5-7. Redes neurais artificiais são utilizadas para o
projeto_de_dicionários devido s suas capacidades de
aprendizagem e de generalização. O aprendizado
hebbiano, base para algoritmos competitivos, apre-

ISBN 978-85-8001-069-5

senta-se como uma valiosa técnica para o projeto de
dicionários para QV, mas introduz o problema de
subutilização de neurônios, isto é, alguns neurônios
(vetores-código, no contexto de QV) participam
pouco do processo de aprendizagem da rede (subutilização).
Para sanar esse problema, foi proposto em 8
um processo de aprendizagem mais "consciente"
baseado no teorema da distorção parcial, fundamento
do algoritmo competitivo sensível a distorção parcial.
Esse trabalho avalia o desempenho do algoritmo
competitivo sensível  distorção parcial (PDSCL,
partial distortion sensitive competitive learning),
comparando-o com o algoritmo competitivo clássico
sobre os seguintes aspectos qualidade do dicionário
projetado e complexidade computacional associada.
Expressões analíticas sobre o número de operações
lógicas e aritméticas são apresentadas, assim como
uma proposta para redução de sua complexidade.
2. Quantização Vetorial
A quantização_vetorial consiste no mapeamento
Q de um vetor de entrada x pertencente ao espaço

4070

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Euclidiano N-dimensional,
, em um vetor pertencente a um subconjunto finito
de
, ou seja,
.
O dicionário
    1, 2, ,  é o conjunto de vetores de reprodução (também chamados
de vetores-código ou vetores de reconstrução), é a
dimensão do quantizador e K é o tamanho do dicionário. A taxa de codificação do quantizador vetorial,
que mede o número de bits por componente do vetor,
é dada por
Em se tratando de codificação de imagens, a taxa é expressa em bits por pixel
(bpp). Na codificação de voz, é expressa em bits por
amostra.
No processo de avaliação da qualidade dos
quantizadores vetoriais, a metodologia utilizada para
mensurar a qualidade dos sinais reconstruídos é a
relação_sinal-ruído de pico (PSNR, peak signal-tonoise ratio). Essa medida faz a comparação matemática direta entre o sinal original e é definida como

em que
é o quadrado do valor de pico da amplitude de entrada e MSE (mean square error) é o erro
médio quadrático entre as imagens original e reconstruída, definido como

em que
e
representam os valores de
pixels das imagens original e reconstruída. Os índices
l e c designam, respectivamente, a l-ésima linha e a
c-ésima coluna de uma matriz-imagem 256 x 256
pixels.

vetor atualizado, isto é, a cada apresentação de um
vetor de treino, apenas um vetor-código é atualizado
(aquele que possui, após o cálculo do vizinho mais
próximo (VMP), maior proximidade com o vetor
de entrada).
No algoritmo AC, as constantes de inicialização
são

, número de vetores-código do dicionário (tamanho do dicionário)

, dimensão do dicionário

, número total de iterações

, taxa inicial de aprendizagem

, taxa final de aprendizagem

, número total de iterações do algoritmo
competitivo

, número de vetores treino de entrada.
Após inicializar aleatoriamente o dicionário inicial com protótipos, o algoritmo AC pode ser descrito conforme a Fig. 1.
Na descrição do algoritmo AC,
é o ésimo vetor do conjunto de treino
é o ésimo vetor-código e
, o vencedor para o
-ésimo vetor de treino na -ésima iteração. A expressão (3) da Fig. 1 denota a atualização do vetor
vencedor, em que
é a modificação introduzida
na -ésima componente do vencedor,
é a taxa
de aprendizagem na -ésima (com
),
é a componente do vencedor e
é a versão
atualizada da -ésima componente do vencedor. Por
sua vez,
é a distância Euclidiana
quadrática entre
e
.
Para 1  n 

Um problema relevante no âmbito da QV é o
projeto_de_dicionários. O desempenho de sistemas de
processamento_de_sinais baseados em QV depende
fortemente da qualidade dos dicionários projetados.
De fato, em sistemas de compressão de sinais, a
qualidade dos sinais reconstruídos depende dos dicionários em sistemas de identificação vocal, as
taxas de reconhecimento dependem da qualidade dos
dicionários.
3. Técnicas de Inteligência Computacional para
Quantizadores Vetoriais
3.1 - Algoritmo Competitivo Simples (AC)
Segundo 9, na fase de aprendizagem do algoritmo AC, somente o neurônio vencedor tem seu

ISBN 978-85-8001-069-5

 

Para 1  m  M

Como a quantização_vetorial realiza um mapeamento de padrões de entrada (vetores de entrada )
semelhantes em padrões de saída (vetores-código )
semelhantes, a mesma pode ser vista como uma forma de reconhecimento_de_padrões, em que cada padrão de entrada é aproximado por um padrão de
referência, pertencente a um conjunto predeterminado (dicionário) de padrões (vetores-código) de referência.

,

Determine o vencedor
 arg



,


,



(1)

Atualize o vencedor de acordo com
,



( ,

)+ 

,

,

(2)

( ,

)

(3)

em que


,



( )

Figura 1 Algoritmo Competitivo Simples.

A função taxa de aprendizagem decresce linearmente com a iteração n, permanecendo constante a
cada iteração, sendo expressa por
(4)
O algoritmo AC possui algumas limitações que podem comprometer o seu desempenho. São eles


Escolha dos valores iniciais dos pesos da rede dependendo dos valores iniciais atribuídos
aos pesos, alguns neurônios podem dominar o
treinamento, sendo sempre selecionados como
vencedores, enquanto outros nunca o são. As

4071

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.



unidades não selecionadas são chamadas de unidades mortas.

3 Passo - Seleção do vetor vencedor Selecionar o
vetor com menor valor de
 .

Valorização excessiva da informação contida
na entrada mais recente pela própria natureza
do algoritmo, as entradas apresentadas  rede no
início do treinamento têm menos influência no
valor final dos pesos dos neurônios do que aquelas apresentadas por último.

4 Passo  Atualização Atualizar o vetor-código
vencedor de acordo com

Na busca para minimizar esses problemas, foram
propostos novos algoritmos com o objetivo de tornar
mais homogêneo o processo de treinamento. Um dos
algoritmos é o PDSCL.
3.2 - Algoritmo Competitivo Sensível a Distorção
Parcial (PDSCL)
O principal objetivo da QV é produzir um dicionário ótimo minimizando o erro quadrático médio
, com
, em que
é uma região de Voronoi ou cluster, representado
pelo vetor-código . Dentro deste conceito, o teorema da distorção parcial 8 sugere que, em um
quantizador ótimo, cada partição do espaço, representada por um vetor-código, contribuirá igualmente
para a distorção média, isto é, a probabilidade de
cada vetor-código ser escolhido com o neurônio
vencedor é igual para todos os vetores. Esta propriedade pode ser considerada como uma condição
necessária para otimizar a QV. É óbvio que a utilização uniforme de cada vetor-código não é equivalente
a uma distorção uniforme parcial em cada partição,
exceto no caso da distribuição uniforme. No entanto,
para dicionários de elevado , isto é, de grande tamanho, é possível levar em consideração este teorema.
Assim, neste conceito, foi proposto em 8, de
acordo com o teorema da distorção parcial para o
mecanismo de aprendizagem competitiva on-line, um
novo algoritmo competitivo que pode ser chamado
de algoritmo competitivo sensível a distância parcial
(PDSCL), descrito a seguir
1 Passo  Inicialização Gerar aleatoriamente um
dicionário inicial de tamanho
e zerar todos os
valores de distâncias parciais da i-ésima região de
Voronoi, isto é, fazer
.
2 passo  Cálculo da distorção Aplicar um vetor
de entrada e encontrar a distorção de cada vetorcódigo na -ésima iteração através da expressão


 

em que
uma função não-decrescente em
por
  

uma constante definida como

ISBN 978-85-8001-069-5

e

.

  é
 e definida
, em que
é


em que









é obtido por meio da equação (4).

5 Passo  Atualização Obter o valor de
próxima iteração






para a
(7)

6 Passo  Incremento da iteração  e repetição dos
passos 2-6 até a conclusão do número de iterações.
4. Complexidade Computacional dos Algoritmos
Competitivos
Um aspecto relevante do processo de QV é a
complexidade computacional de seus algoritmos, isto
é, o número de operações lógico-aritméticas executadas. Observa-se que na QV, a busca do VMP é uma
etapa crítica quando se trata de complexidade computacional, pois a necessidade direta de comparação
de um padrão de teste com cada padrão de referência
armazenado tem elevada complexidade 10.
Da definição de taxa (
), é possível
encontrar a seguinte relação
. No algoritmo
clássico de VMP, encontrar o vetor-código mais
próximo do vetor de entrada requer encontrar a distância para cada um dos
vetores-código. Em seguida, deve-se comparar as distâncias de modo a
encontrar o vetor-código mais próximo.
Os algoritmos competitivos apresentados neste
trabalho possuem como critério de parada o número
de iterações, representado por
. A seguir, são
apresentadas expressões analíticas para o número de
adições, subtrações, multiplicações, divisões e comparações em função do tamanho do dicionário, da
dimensão , do número de vetores treino
e do
número de iterações
para os algoritmos competitivos abordados.
4.1- Algoritmo Competitivo Simples (AC)
Como já pontuado, a busca do VMP tem uma
importância significativa na complexidade computacional dos algoritmos de projeto_de_dicionários. Em
9, foi avaliada a complexidade do algoritmo AC,
com a apresentação de expressões analíticas e condições para que o algoritmo AC fosse tão ou menos
complexo que o algoritmo LBG.
A Tabela 1 apresenta as expressões analíticas do
número total de operações requeridas pelo algoritmo
AC em termos do número do número de adições
(Ad.), subtrações (Sub.), divisões (Div.), multiplicações (Mult.) e comparações (Comp.).

4072

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Tabela 1 Número total de operações requeridas no algoritmo AC.
Operação

Algoritmo AC

Operação

Mult.

Sub.

Ad.

Ad.

1

Comp.

 

4.2 - Algoritmo Competitivo Sensível a Distorção
Parcial (PDSCL)
No caso do algoritmo PDSCL, é necessário avaliar cada passo para contabilizar as operações aritméticas realizadas. Por ser uma etapa de inicialização, o
primeiro passo não é considerado. No passo seguinte
(cálculo da distorção), observa-se que a soma de
  com a distância Euclidiana quadrática
entre e ocorre
vezes. A Tabela 2 resume
o número de operações requeridas para o cálculo de
distorção no algoritmo PDSCL. Em relação  atualização do vetor código vencedor, a Tabela 3 apresenta
o número de operações requeridas na atualização.
O cálculo de
, dado pela equação (7), é realizado para cada vetor-código vencedor. Logo, o
número de adições é o mesmo do cálculo da distância
Euclidiana quadrática mais um. As demais operações
são iguais s da distância Euclidiana quadrática. Na
Tabela 4, são apresentados os números de operações
necessárias para a atualização de
. Já os números
de operações requeridas para atualizar a taxa de aprendizagem são apresentados na Tabela 5. Por fim,
a Tabela 6 resume o número total de operações requeridas pelo algoritmo PDSCL, acumulando as
operações de cada etapa (Tabelas 2 a 5).
Cabe ressaltar que a complexidade do cálculo de
  não foi contabilizado, pois o elevado
número das demais operações torna o cálculo da
exponencial desprezível.
Tabela 2 Número total de operações requeridas no cálculo da
distorção parcial do algoritmo PDSCL.
Operação

Algoritmo PDSCL

Mult.
Sub.
Ad.
Div.

-

Comp.

Tabela 3 Número total de operações requeridas na atualização.
Operação

Algoritmo PDSCL

Mult.
Sub.
Ad.
Div.

-

Comp.

-

ISBN 978-85-8001-069-5

Algoritmo PDSCL

Mult.

Sub.
Div.

Tabela 4 Número total de operações requeridas na atualização
.

Div.

-

Comp.

-

Tabela 5 Número de operações requeridas na atualização da taxa
de aprendizagem
.
Operação

Algoritmo PDSCL

Mult.
Sub.
Ad.
Div.
Comp.

-

Tabela 6 Número total de operações requeridas pelo algoritmo
PDSCL.
Operação

Algoritmo PDSCL

Mult.
Sub.
Ad.
Div.
Comp.

5. Proposta de Aceleração do Algoritmo PDSCL
No processo de aprendizagem do algoritmo
PDSCL, somente o neurônio vencedor é atualizado.
A busca pelo vencedor é realizada por meio da busca
do VMP. Procura-se qual dos vetores-códigos do
dicionário é o mais próximo do vetor de treino. Em
algoritmos com essa característica, uma das etapas de
maior complexidade computacional reside na busca
do VMP.
Dito isso, propõe-se o algoritmo PDSCLPDS,
que é um algoritmo que acomoda no processo de
busca pelo VMP a técnica PDS (partial distance
searching), que reduz o número de operações realizadas pela máquina na busca do VMP.
O algoritmo PDS foi proposto por Bei e Gray
11 e constitui uma técnica bastante difundida na
redução da complexidade computacional na busca
pelo VMP. Neste algoritmo, faz-se comparações
entre a distância parcial e as outras previamente
calculadas. Assim, consegue-se tomar decisões antes
de completar o cálculo completo da distância entre o
vetor de entrada e o vetor-código.
O codificador decide que o vetor-código em
questão não representa o VMP se, para algum
,
a distância acumulada para as primeiras j amostras
do vetor de entrada for maior que a menor distância
até então encontrada no processo de busca. O codificador, então, interrompe o cálculo de distância para
esse vetor-código e inicia esse cálculo para o próxi-

4073

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

mo vetor-código do dicionário. Assim, o número de
operações de adição, subtração e multiplicação se
reduz sensivelmente, todavia, aumenta-se o número
de comparações. No entanto, a complexidade computacional é reduzida como um todo.
Na Figura 2 é apresentado o algoritmo PDS, em
que d é a distância (distorção),
representa a
distância mínima,
é a -ésima componente do ésimo vetor de entrada
-dimensional
e
representa a -ésima componente do
-ésimo vetor-código -dimensional
.
(um número muito grande)
Laço A
Para

Laço B
Para
se

(condição de saída)

subtração, multiplicação, divisão e comparação)
realizadas pelos algoritmos nas Tabelas 8, 9, 10, 11 e
12. É importante ressaltar que o algoritmo PDSCL
clássico possui suas etapas bem definidas, isto é, o
número de operações pode ser obtido deterministicamente. Basta conhecer o número total de iterações,
o tamanho do conjunto treino, o tamanho e a dimensão do dicionário. Como os parâmetros de entrada
para o algoritmo PDSCL são constantes nas simulações, os resultados são constantes para todas as imagens analisadas.
Tabela 8 Resultados de complexidade computacional para as
imagens Lena, Elaine, Clock e Boat, considerando o uso do algoritmo PDSCL clássico.
K
Ad.
Sub.
Mult.
Comp.
32
1,33E+07 1,34E+07
1,42E+07
7,62E+05
64
2,59E+07 2,60E+07
2,75E+07
1,55E+06
128
5,11E+07 5,11E+07
5,43E+07
3,12E+06
256
1,01E+08 1,01E+08
1,08E+08
6,27E+06
512
2,02E+08 2,02E+08
2,15E+08
1,26E+07


ii+1

Figura 2 Algoritmo PDS.

6. Resultados
Os resultados apresentados nesta seção dizem
respeito  quantização_vetorial com dimensão N16
(blocos de 4 x 4 pixels). As imagens de 256 x 256
pixels são Lena, Elaine, Clock e Boat. Nas simulações realizadas, foram projetados 10 dicionários
iniciais utilizados como ponto de partida em todos os
algoritmos. A qualidade dos dicionários gerados foi
avaliada por meio da PSNR.
Cabe ressaltar que não há necessidade de se
comparar os resultados de PSNR entre os algoritmos
PDSCL e PDSCLPDS, pois são obtidos exatamente
os mesmos dicionários. Isto se deve ao fato do algoritmo PDSCLPDS ser uma versão do PDSCL que
acomoda a técnica de PDS na busca do VMP. Logo,
a única diferença efetiva é no número de operações
realizadas para encontrar o vizinho mais próximo,
não alterando os dicionários projetados. A igualdade
pode ser observada na Tabela 7 que apresenta os
valores médios de PSNR obtidos pelos algoritmos
PDSCL e PDSCLPDS. Foram feitas 10 inicializações para as imagens Lena, Elaine, Clock e Boat, e
tomados os valores médios para diversos comprimentos de dicionário .
Tabela 7 Resultados de PSNR para as imagens Lena, Elaine,
Clock e Boat, considerando o uso dos algoritmos PDSCL e
PDSCLPDS.
K
Lena
Elaine
Clock
Boat
32
26,32
27,45
26,15
24,63
64
27,50
28,85
27,62
25,79
128
28,84
30,33
28,64
26,86
256
30,46
31,88
29,76
28,40
512
32,29
33,58
31,66
32,29

No que tange  complexidade computacional,
são apresentados os resultados das operações (adição,

ISBN 978-85-8001-069-5

Tabela 9 Resultados de complexidade computacional para a
imagem Lena considerando o uso do algoritmo PDSCLPDS.
K
Ad.
Sub.
Mult.
Comp.
32
4,83E+06
4,85E+06
5,65E+06
1,44E+06
64
7,18E+06
7,21E+06
8,78E+06
3,00E+06
128 1,09E+07
1,09E+07
1,40E+07
6,14E+06
256 1,78E+07
1,78E+07
2,41E+07
1,24E+07
512 3,06E+07
3,06E+07
4,32E+07
2,49E+07
Tabela 10 Resultados de complexidade computacional para a
imagem Elaine, considerando o uso do algoritmo PDSCLPDS.
K
Ad.
Sub.
Mult.
Comp.
32
4,75E+06
4,77E+06
5,57E+06
1,45E+06
64
7,11E+06
7,13E+06
8,71E+06
2,99E+06
128 1,07E+07
1,07E+07
1,38E+07
6,14E+06
256 1,73E+07
1,73E+07
2,37E+07
1,24E+07
512 3,06E+07
3,06E+07
4,32E+07
2,49E+07
Tabela 11 Resultados de complexidade computacional para a
imagem Clock, considerando o uso do algoritmo PDSCLPDS.
K
Ad.
Sub.
Mult.
Comp.
32
4,13E+06
4,77E+06
5,57E+06
1,47E+06
64
6,43E+06
7,13E+06
8,71E+06
3,01E+06
128 1,00E+07
1,07E+07
1,38E+07
6,13E+06
256 1,70E+07
1,73E+07
2,37E+07
1,24E+07
512 2,92E+07
3,06E+07
4,32E+07
2,49E+07
Tabela 12 Resultados de complexidade computacional para a
imagem Boat, considerando o uso do algoritmo PDSCLPDS.
K
Ad.
Sub.
Mult.
Comp.
32
4,96E+06
4,98E+06
5,77E+06
1,45E+06
64
7,92E+06
7,94E+06
9,51E+06
3,00E+06
128 1,25E+07
1,25E+07
1,57E+07
6,13E+06
256 2,14E+07
2,15E+07
2,78E+07
1,24E+07
512 3,94E+07
3,94E+07
5,20E+07
2,49E+07

Considere, por exemplo, as Tabelas 8 e 9. Para
o conjunto de treino correspondente  imagem Lena,
é possível verificar uma redução no número de adições, subtrações e multiplicações. Por exemplo, para
, o número de adições no algoritmo PDSCL
é de 2,02E+08, ao passo que para o algoritmo
PDSCLPDS, o número de adições é igual a
3,94E+07. Em termos percentuais, a versão acelerada
reduziu o número de adições em 80,49. No entanto,
o número de comparações aumentou, o que já era
4074

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

previsto, pois é uma característica da técnica PDS
para otimizar a busca pelo VMP. Considere, por
exemplo,
, o número de comparações para o
algoritmo PDSCL é igual a 1,26E+07, enquanto para
o algoritmo PDSCLPDS é de 2,49E+07, isto é, um
aumento de 97,77. Observando as Tabelas 10, 11 e
12, é possível verificar o mesmo comportamento.
7. Conclusão
O projeto_de_dicionários possui relevância na
compressão de sinais baseado em QV, pois a qualidade dos sinais reconstruídos depende da qualidade
dos dicionários projetados. Este trabalho apresentou
uma proposta de redução de complexidade em algoritmos de inteligência_computacional aplicados a
projetos de dicionários. Tal proposta consistiu em
reduzir o número de operações aritméticas realizadas
pelo algoritmo competitivo sensível  distância parcial por meio da acomodação do algoritmo de busca
por distância parcial no processo de determinação do
VMP. Embora o algoritmo PDSCLPDS tenha tido
um aumento significativo no número de comparações
quando comparado ao algoritmo PDSCL clássico, foi
obtida uma redução média de 65 em adições, subtrações e divisões. Dessa forma, é possível observar
uma redução de complexidade e sem comprometer o
desempenho.

6 Tsekouras, G. E. et. al., "Fast fuzzy vector
quantization". In Proc. of the IEEE World
Congress on Computational Intelligence (WCCI
2010), Barcelona, 2010.
7 Silveira, F. A. B. S., Galvão, R. R. A., Madeiro,
F. e Cunha, D. C., Aceleração do algoritmo
fuzzy K-means avaliação em quantização_vetorial de imagens, Em Anais do Congresso Brasileiro de Inteligência Computacional (CBIC
2011), Fortaleza-CE, 2011.
8 Zhu, C. and Po, L.M., Partial distortion sensitive
competitive learning algorithm for optimal
codebook design, Electronics Letters, vol. 32, n.
19, pp. 1757-1758, 1996.
9 Arcoverde, E.N. et. al., "Sobre a complexidade
computacional de um algoritmo de aprendizagem
competitiva aplicado ao projeto_de_dicionários,"
Revista Symposium, vol. 8, n. 1, pp. 55-67, 2004.
10 Madeiro, F. Projeto e Avaliação de Dicionários
para Quantização Vetorial de Voz e Imagem.
Tese de Doutorado. Universidade Federal de
Campina Grande, 2001.
11 Bei, C. D. and Gray, R. M. An Improvement
of the Minimum Distortion Encoding Algorithm
for Vector Quantizztion, IEEE Trans.
Commun., vol. COM-33, n. 10, pp. 1132-1133,
1985.

Agradecimentos
Agradeço a Universidade de Pernambuco e a Escola
Politécnica de Pernambuco pelo apoio ao trabalho.
Referências Bibliográficas
1 Gersho, A. and Gray, R. M., Vector Quantization
and Signal Compression. Kluwer Academic Publishers, Boston, MA, 1992.
2 Linde, Y., Buzo, A. and Gray, R. M. An
algorithm for vector quantizer design, IEEE
Trans.Commun., vol. 28, n. 1, pp. 8495, 1980.
3 Kekre, H. B. and Sarode, T. K.. "New clustering
algorithm for vector quantization using rotation
of error vector," IEEE Publication format, Int.
Journal of Computer Science and Information
Security (IJCSIS 2010), ISSN 1947-5500, 2010.
4 Santo, P. H. E., Madeiro, F., Cunha, D. C. and
Albuquerque, R. C. On frequency sensitive
competitive learning for VQ codebook design,
In Proc. of the 10th Brazilian Symposium on
Neural Networks (SBRN 2008), Salvador - BA,
2008.
5 Singh, V. et. al.. "A neuro-wavelet model using
fuzzy vector quantization for efficient image
compression, Int. Journal of Image and
Graphics (IJIG), vol. 9, n.2, pp. 299-320, 2009.

ISBN 978-85-8001-069-5

4075