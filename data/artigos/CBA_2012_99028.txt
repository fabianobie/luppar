Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

ARQUITETURA DE HARDWARE E SOFTWARE PARA SUPERVISAO E
CONTROLE DE UM CARRO AUTONOMO
Tiago Amadeu Arruda, Guilherme Augusto Silva Pereira


Programa de Pos-Graduacao em Engenharia Eletrica,



Grupo de Pesquisa e Desenvolvimento de Veculos Autonomos,
Universidade Federal de Minas Gerais, Av. Antonio Carlos, 6626, 31270-901,
Belo Horizonte, MG, Brasil.
Emails tiagoaa@cpdee.ufmg.br, gpereira@ufmg.br
Abstract This paper presents the project, development and validation of a hierarchical hardware and software architecture for control and supervision of an autonomous car. The proposed architecture has three levels
named Control Level, Processing Level and User Level. This proposal was developed based on the study of architectures from several works available in the literature and on the compromise between fulfilling all the demands
of an autonomous car and offering an easy access model for sending commands and receiving information by an
end user.
Architecture Hardware Software Autonomous Car Real-Time.

Keywords

Resumo Este artigo aborda o projeto, desenvolvimento e validacao de uma arquitetura hierarquica de
hardware e software para controle e supervisao de um carro_autonomo. A arquitetura proposta possui tres
nveis denominados Nvel de Controle, Nvel de Processamento e Nvel Usuario. A proposicao desta arquitetura
foi baseada no estudo de arquiteturas desenvolvidas em varios trabalhos disponveis na literatura, visando a
obtencao de uma solucao de compromisso que, de um lado ofereca um sistema capaz de atender as demandas
exigidas por um carro_autonomo, e de outro, que ofereca um modelo de facil acesso para envio de comandos e
recepcao de informacoes por um usuario final.
Palavras-chave

.

Introducao

Os veculos_autonomos sao robos_moveis capazes
de executar tarefas sem a intervencao humana,
sendo utilizados para transporte de passageiros,
transporte_de_cargas, ou ate mesmo, exploracao
em ambientes que nao podem ser facilmente alcancados por seres humanos, como outros planetas e
aguas profundas (Jones, 2001).
Em um veculo_autonomo, cada sensor ou atuador precisa se comunicar com uma central de processamento, de modo a repassar ou receber uma
informacao. Em alguns casos, varias centrais de
processamento tambem precisam se comunicar entre si para executar as diversas tarefas necessarias
ao controle do veculo. Ao conjunto de sensores, atuadores e centrais de processamento, juntamente com todas as funcoes e interfaces necessarias para o seu correto funcionamento da-se o
nome de arquitetura. Devido a grande diversidade de veculos_autonomos existentes, tambem
e grande a variedade das arquiteturas existentes,
sendo a maioria delas concebidas para um veculo
em particular.
A proposta deste trabalho e o desenvolvimento de uma arquitetura multi-plataforma para
aplicacao em carros autonomos. Na literatura cientfica podemos encontrar diversos exemplos de
arquiteturas como esta, cada uma visando o melhor aproveitamento do carro. O veculo Little
Ben (Bohren et al., 2009), por exemplo, utilizouse de uma arquitetura dividida em varios n-

ISBN 978-85-8001-069-5

veis. Outro veculo, como o Junior de Stanford (Montemerlo et al., 2008) utilizou-se de uma
arquitetura dividida em hierarquias, na qual cada
bloco da arquitetura e responsavel por fornecer
um servico, e a comunicacao entre os blocos e feita
por meio de publicacaosubscricao autonoma de
mensagens.
A grande limitacao da maioria das arquiteturas encontradas na literatura e que estas sao
concebidas para uma plataforma especfica e para
uma pequena classe de missoes. Assim, o presente
trabalho propoe uma arquitetura para ser aplicada
a carros autonomos que permita o seu uso em diferentes carros, realizando as mais diversas tarefas.
Arquiteturas que possuem este mesmo requisito
foram propostas em (Nelson, 1999), onde e proposta uma arquitetura de software para veculos
autonomos e em (Szabo et al., 1992) onde e criado
um sistema de alto nvel para operacao remota de
veculos terrestres. A arquitetura proposta neste
artigo e dividida em tres nveis para permitir que,
nvel a nvel, a abstracao das informacoes se torne
cada vez maior, possibilitando assim a delimitacao
clara entre os diversos sistemas do carro_autonomo
e tambem uma interface amigavel para o usuario
final.
A arquitetura proposta foi implementada, testada e validada no CADU (Carro Autonomo desenvolvido na UFMG) mostrado na Figura 1.
O restante do artigo esta dividido da seguinte
forma na proxima secao sao introduzidos os requisitos desejados para uma arquitetura de carro

695

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Hardware e Software descritos nas proximas subsecoes.
2.1

Figura 1 Veculo Autonomo CADU, desenvolvido
pelo PDVA-UFMG.
autonomo, enquanto que a Secao 3 mostra as solucoes adotadas para cumprir estes requisitos. Na
Secao 4 sao mostrados algumas solucoes praticas
de implementacao e alguns experimentos realizados no CADU. Finalmente, a Secao 5 apresenta as
conclusoes e propostas para trabalhos futuros.
2

Arquitetura Proposta

Com base no estudo de alguns sistemas autonomos atualmente existentes, foi proposta uma arquitetura de Hardware e Software para controle e
supervisao de um carro_autonomo subdivida em
tres nveis supervisionados, sendo eles
1. Nvel de Controle nvel onde se localizam
os elementos de controle e sensoriamento em
tempo_real do carro e cujas caractersticas envolvem taxas de amostragem da ordem de dezenas de Hertz e pequena quantidade de informacao a ser transmitida.
2. Nvel de Processamento nvel onde estao
os elementos que nao necessitam de processamento em tempo_real, e cuja transmissao
e realizada com taxas da ordem de Hertz,
com uma quantidade maior de dados a serem
transmitidos se comparada as transmissoes de
informacoes do nvel anterior.
3. Nvel Usuario camada pela qual o usuario final envia comandos e recebe informacoes de
alto nvel do veculo. Programas, como por
exemplo, planejamento_de_trajetoria, seguimento_de_caminho, desvio_de_obstaculos e
execucao de missoes serao processados no nvel usuario utilizando as informacoes obtidas
e processadas nos nveis inferiores.
Em todos os nveis existe uma ligacao direta com
um elemento de supervisao responsavel por gerar
relatorio de toda informacao presente na arquitetura. Esta solucao foi baseada nos requisitos de

ISBN 978-85-8001-069-5

Requisitos de Hardware

De modo a comportar todos os sistemas de um
veculo_autonomo, a arquitetura de hardware deve
permitir uma flexibilizacao ao mesmo tempo em
que mantem a integridade de todo o sistema.
Baseando-se nesta necessidade, e apoiando-se nos
estudos previamente realizados, chegou-se a conclusao de que uma arquitetura de Hardware robusta o suficiente para permitir o uso simultaneo
dos sistemas necessita de uma divisao em diferentes camadas utilizando-se de um computador para
cada nvel da arquitetura. Cada computador seria responsavel pela gerencia das informacoes, integridade do sistema e passagem de dados para os
outros nveis. Complementam esta conclusao as
premissas citadas abaixo
 O Hardware utilizado no sistema de movimentacao deve permitir uma comunicacao determinstica entre os elementos constituintes
deste sistema e a unidade central de processamento. Esta caracterstica implica que no
nvel mais baixo da arquitetura deve ser possvel a troca de mensagens entre seus elementos sem a introducao da incerteza associada
a uma comunicacao estocastica.
 O Hardware deve ser compatvel com as dinamicas do veculo para evitar perda de informacao por incapacidade de processamento
ou transmissao de dados.
 O Hardware nao pode interferir no sistema
de funcionamento normal do veculo de modo
que, se este for desligado, o veculo deve voltar ao seu estado original.
 O Hardware deve oferecer seguranca e suporte a sistemas de emergencia.
 O Hardware deve permitir que cada sistema
ou subsistema do veculo possua sua propria
unidade central de processamento para favorecer o paralelismo e deixar claro as divisoes
entre cada um deles.
2.2

Requisitos de Software

De forma a permitir a integracao entre os sistemas, a arquitetura de Software necessita garantir
a integridade do sistema. Por meio dos estudos
de algumas arquiteturas de softwares existentes,
foram levantadas algumas caractersticas importantes que conduzem a proposicao de uma Arquitetura de Software robusta e integrada. Estas caractersticas sao mostradas a seguir
 O Software deve permitir o isolamento entre
os nveis, prevenindo que o sistema de um
nvel interfira destrutivamente nos outros.

696

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

 O Software deve processar a informacao para
facilitar o seu entendimento a todos os subsistemas de interesse.
 O Software deve permitir uma comunicacao entre os diversos sistemas e nveis,
diferenciando-os por meio de interfaces bem
definidas.
 O Software deve ser tolerante a perturbacoes
e falhas.
A proxima secao mostra a implementacao,
teste e validacao da arquitetura proposta em um
carro_autonomo.
3

Implementacao da Arquitetura

Na secao anterior foi levantada uma serie de requisitos para formatar a construcao de uma Arquitetura de Sistema aplicavel a carros autonomos.
Nesta secao, com base na arquitetura apresentada,
e feita a sua aplicacao no Carro Autonomo desenvolvido na UFMG (CADU).
3.1

CADU

O CADU e um veculo Chevrolet Astra ano
20032004 equipado com cambio automatico e direcao hidraulica, que desde 2007 vem sofrendo
adaptacoes para se tornar um veculo_autonomo.
As adaptacoes, que incluem intervencao eletronica
no sistema de aceleracao e introducao de motores
para controle dos sistemas de Cambio, Direcao e
Freios, sao mostradas em (Freitas et al., 2009).
A antiga arquitetura de Hardware do CADU,
apesar de funcional, possui falhas de estrutura que
a tornavam fragil do ponto de vista de robustez e
integridade. O principal problema do ponto de
vista de Hardware e a limitacao imposta pela utilizacao de um modelo de comunicacao baseado em
SerialUSB que instabilizava o sistema a medida
que novos elementos eram adicionados e exigia
grande numero de portas USB para acomodar todos os dispositivos.
A arquitetura de Software, por sua vez, estava sujeita a problemas tais como Comunicacao
Nao-Determinstica devido ao modelo de comunicacao USB impossibilidade de utilizacao de Sistema Operacional de Tempo Real para controle de
Baixo Nvel, dado que a maioria dos sistemas_operacionais de tempo_real nao tem suporte a USB
instabilidade da arquitetura de Software devido ao
efeito cascata na falha de um dos gerenciadores ou
drivers de comunicacao USBSerial e sobrecarga
do Computador Central pela dificuldade da divisao de tarefa com outros computadores.
3.2

Figura 2 Nova Arquitetura de Hardware para o
Carro Autonomo da UFMG. As linhas contnuas
representam comunicacao via cabo, as linhas tracejadas indicam contato direto com o veculo e a
linha pontilhada representa comunicacao_sem_fio.

Nova Arquitetura de Hardware

O Hardware do CADU, assim como a arquitetura proposta, foi dividido em tres nveis. Cada

ISBN 978-85-8001-069-5

uma das subsecoes seguintes explica de forma detalhada o que foi implementado e quais os elementos dispostos em cada parte da arquitetura. A Figura 2 mostra a arquitetura de hardware completa
aplicada ao CADU.
3.2.1

Nvel de Controle

O Nvel de Controle pode ser considerado o nvel mais crtico para o funcionamento de um sistema autonomo. Isto porque e neste nvel que se
encontram os atuadores necessarios para o efetivo
controle do veculo. Fazem parte do Nvel de Controle o Sistema de Frenagem, Aceleracao, Cambio,
Direcao e Velocidade.
Para a interacao entre os nos de sensoriamento
e atuacao e o veculo em si, nenhuma alteracao foi
realizada no Hardware pre-existente. No entanto,
para a comunicacao entre a central de processamento e os nos sensores e atuadores do veculo
foi escolhida a rede Modbus sobre camada fsica
RS-485 (Arruda et al., 2011).
O PC central do Nvel de Controle da Arquitetura de Hardware e um Intel Atom de 1Gb de
RAM e 40 Gb de SSD (Solid State Disk) que utiliza um conversor RS-232485 para comunicacao
com elementos da rede Modbus, interface RS-232
para comunicacao com sistema de movimentacao
do volante (unico sistema que nao esta na rede
por facilidade de integracao), conversor USB485
para fornecer dados ao Nvel de Processamento e
interface Ethernet para comunicacao com o Nvel
de Usuario da arquitetura.
Do modo como o sistema e montado, para que
o veculo passe de autonomo a manual, basta que

697

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

se desabilite os nos atuadores por hardware ou
software.
3.2.2

Nvel de Processamento

O Nvel de processamento e estruturado em tres
sistemas sendo eles o de Movimentacao, Localizacao e Reconhecimento.
No Sistema de Movimentacao, por questao de
conveniencia, o PC utilizado e o mesmo do Nvel
de controle, sendo sua separacao visvel apenas a
nvel logico. As informacoes que este sistema obtem do nvel de Controle sao processadas e preparadas para envio ao nvel de Usuario.
No Sistema de Localizacao, o processamento e
realizado por um PC com caractersticas identicas
ao do Nvel de Controle. De forma a aproveitar as
vantagens de uma comunicacao em rede evitando
os inconvenientes causados por multiplas ligacoes
seriais em um unico PC, todos os elementos do sistema de localizacao da camada de Processamento
foram interligados em outra Rede Modbus485
por meio de um no que contem dois microcontroladores. Um deles obtem os dados dos sensores
(geralmente por meio de protocolo RS232) e envia a informacao a um outro microcontrolador por
meio de uma interface I2C. Este segundo microcontrolador, por sua vez, envia as informacoes a
rede Modbus. Este procedimento foi necessario
pois os microcontroladores utilizados possuem somente uma interface serial de hardware, e esta, e
utilizada na Rede Modbus485.
Para o Sistema de Reconhecimento, o Hardware implementado consiste atualmente apenas de
um PC com a mesma configuracao dos anteriores
onde sensores a laser serao ligados por meio de
comunicacao RS-422.
3.2.3

Nvel de Usuario

O Nvel de usuario, do ponto de vista de arquitetura de hardware, e o menos crtico, pois sua
especificacao e utilizacao sao dependentes exclusivamente da atividade que os usuarios vao realizar. Como sera mostrado adiante, a arquitetura
de software torna a escolha deste hardware independente de qualquer parametro utilizado nos nveis abaixo.
3.2.4

Monitor

Como indicado na Secao 2, a arquitetura de Hardware permite a introducao de um sistema de supervisao para coleta de dados e diagnostico. O
computador responsavel por esta coleta tem a
mesma configuracao do PC de Controle e possui
dois conversores USB485. Estes conversores sao
a conexao fsica existente entre as redes e o Supervisor.

ISBN 978-85-8001-069-5

A Figura 2 mostra o Hardware de Supervisor
juntamente com a arquitetura Completa de Hardware aplicada ao CADU.
3.3

Nova Arquitetura de Software

O Software implementado no CADU tambem possui, de acordo com a arquitetura de software proposta, uma divisao em tres Nveis.
3.3.1

Nvel de Controle

O Nvel de Controle da arquitetura de software foi
desenvolvido para se adequar as propostas feitas
na secao anterior. Assim, existem duas classes de
algoritmos sendo executadas no nvel de Controle
 Software Mestre-Escravo para execucao das
rotinas de Controle do Carro Autonomo.
 Software de Publicacao de Mensagens para o
nvel de Processamento.
A primeira classe de software corresponde a
implementacao do protocolo da rede nos nos Modbus485, na qual foi possvel construir um software determinstico do tipo mestre escravo por
meio das funcionalidades oferecidas pelo protocolo Modbus e um Sistema Operacional de Tempo
Real - patch RTAI 3.8 aplicado ao Ubuntu 10.04.1,
kernel 2.6.31.8. Os requisitos temporais impostos pela arquitetura se mostram favoraveis na
adocao desta rede como mostrado em (Arruda
et al., 2011) onde e levantado um modelo de atraso
para o sistema baseado em rede Modbus, juntamente com as frequencias maximas que podem ser
obtidas com esta implementacao em funcao dos
parametros adotados.
A segunda Classe de Algoritmos corresponde
aos softwares responsaveis pelo transito da informacao entre o Nvel de Controle e o Nvel de Processamento. Este conjunto de processos tem duas
funcoes bem definidas
 Recepcao de Comandos - recebe comandos
do Nvel Usuario e decodifica esta informacao
para enviar os comandos necessarios aos nos
do Nvel de Controle. Esta funcao e executada pelo software de Movimentacao rodando
em Nvel de Processamento que transmite ao
Nvel de Controle os comandos de Velocidade
desejada e angulo do volante desejado.
 Envio de Informacoes - recebe as informacoes
dos Nos no nvel de controle e disponibiliza
esta informacao para que o Nvel de Processamento tenha acesso.
No Nvel de Controle, as interfaces Fornecedor e
Consumidor de Dados se comunicam com o Concentrador de Tempo Real. O Servidor Real-Time
de Dados IO disponibiliza os dados para quem
de interesse no Nvel de Processamento por meio
da interface Cliente RT.

698

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

3.4

Nvel de Processamento

O Nvel de Processamento e o responsavel pela
interface entre todos os sistemas do CADU e o
usuario final, e e caracterizado por necessitar da
transferencia de mais dados, ao mesmo tempo em
que requer uma frequencia menor de transmissao,
dada a natureza das informacoes e a sua utilizacao.
De forma a tornar a interface intuitiva, e
permitir ao usuario o controle do Veculo Autonomo como se fosse um sistema robotico comercial foi introduzido no Nvel de Processamento da
Arquitetura de Software do CADU a API (Application Programming Interface) Player (Gerkey
et al., 2003), comumente utilizada pela comunidade de robotica. O Player prove uma interface
de rede para uma grande variedade de sensores
e robos. Isto permite que por meio de interfaces
conhecidas, requisicoes e comandos possam ser facilmente enviadas ao sistema do veculo.
Para o sistema de Movimentacao do Nvel de
Processamento, o Computador Central do ponto
de vista de Hardware e o mesmo do Nvel de controle. No entanto, sob a otica de Software, eles
sao independentes um do outro, exceto pela informacao que trafega entre eles. Isto so acontece
pois o driver Player para comunicacao com o nvel de usuario e um programa que e executado em
paralelo com o modulo controlador, mas nao no
mesmo fluxo de programa.
Para o sistema de Localizacao, o algoritmo e
semelhante ao descrito para o sistema de Movimentacao. O algoritmo de localizacao e responsavel por coletar as informacoes provenientes do
GPS, da Bussola, da IMU, do encoder e da posicao do volante de forma a fornecer uma informacao consistente da velocidade e da posicao atual
do veculo.
No Nvel de Processamento, a interface Cliente RT do bloco de Movimentacao obtem os dados disponibilizados pela interface Servidor RealTime de Dados IO, enquanto que o GPS, a Bussola e a IMU por meio das interfaces de Fornecedor de Dados e Concentrador, disponibilizam as
informacoes para o bloco de Localizacao. A interface Observador do Supervisor e a responsavel
por coletar os dados neste Nvel. As informacoes
geradas no Nvel de Processamento sao disponibilizadas ao Nvel Usuario por meio da interface de
Servidor Player disponvel em cada bloco.
3.5

Nvel de Usuario

O processamento no nvel usuario depende exclusivamente das funcoes que serao executadas. O
unico requisito do ponto de vista de arquitetura
de software para que haja integridade no sistema
e que os elementos do Nvel Usuario sejam capazes
de instanciar um cliente Player. O Algoritmo do
Nvel de Usuario e entao chamado Cliente Player

ISBN 978-85-8001-069-5

Figura 3 A arquitetura de Software do CADU e
composta por varios blocos nos Nveis de Controle,
Processamento e Usuario, alem do bloco Monitor.
Cada bloco possui uma ou varias interfaces, representadas pelas cores que se veem na Figura. Cores
iguais significam comunicacao entre as interfaces.
e o modelo implementado permite que em um determinado servidor sejam ligados quantos clientes
se fizerem necessarios.
3.6

Monitor

Conforme previsto na arquitetura, e necessaria a
presenca de um elemento supervisor. Este elemento corresponde a um outro PC responsavel
por coletar e catalogar dados de todos os nveis
da arquitetura. No CADU o Supervisor foi implementado como sendo um elemento passivo, nao interferindo nos dados trafegados em nenhuma das
redes.
A Figura 3 mostra o resultado final para a
arquitetura de Software implementada no CADU.
As interfaces estao representadas nos diversos blocos. A Figura 4 mostra a montagem do sistema
completo no porta malas do veculo.
4

Resultados

Os resultados apresentados nesta secao mostram
tres experimentos realizados no CADU para validar o seu funcionamento nos tres nveis propostos.
4.1

Controle de Velocidade do CADU

O Controle de Velocidade do CADU foi realizado
utilizando-se o Nvel de Controle da arquitetura,
sendo para isto necessaria a utilizacao da rede
Modbus, juntamente com o seu mestre e os nos
de aceleracao e frenagem, o sensor de velocidade
e um no adicional chamado Setpoint, introduzido
somente para indicar o valor de referencia de velocidade. Neste teste foi criado, no proprio nvel de
controle, um programa executando no mestre que

699

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Figura 4 Montagem final dos diversos sistemas
no CADU. Ha dez caixas no total sendo quatro
computadores, o sistema de comunicacao, o sistema de alimentacao e quatro caixas contendo os
nos da rede.
consistiu em obter a velocidade atual do veculo
medida pelo no Sensor de Velocidade obter o valor da referencia do no de Setpoint processar um
algoritmo de controle Fuzzy enviar a mensagem
de atuacao para o no Freio e para o no Acelerador. Para esta sequencia, escolheu-se o perodo da
tarefa de tempo_real igual a 20ms, cumprindo-se
assim a taxa de amostragem de 50Hz para cada
um dos nos presentes na rede.
O resultado e mostrado nas Figura 5 e ilustra
a viabilidade do Nvel de Controle para executar
tarefas de controle_em_tempo_real. Note que o
controlador utilizado nao esta bem ajustado. De
fato, foi utilizado o controlador utilizado na arquitetura anterior, sem nenhuma modificacao. Como
houveram alteracoes no tempo de amostragem, o
desempenho do controlador foi alterado.
4.2

Determinacao da Localizacao

O teste de localizacao foi realizado de forma a validar a rede Modbus do Sistema de Localizacao,
o hardware de comunicacao entre os sensores e a
rede, alem de permitir a verificacao da integridade
dos dados obtidos diretamente do Nvel de Controle.
O Experimento consistiu em
 coletar dados do GPS Diferencial Hemisphere
Modelo R120 a uma taxa de 5Hz
 coletar dados de Rolamento, Arfagem, Guinada e Aceleracao em X, Y e Z do CADU
por meio da IMU Microstrain 3DM-GX1.
A informacao da IMU e do tipo perguntaresposta, e a solicitacao da medida foi
feita a uma taxa de 20Hz
 coletar dados do sensor de Velocidade das rodas, disponvel por meio do computador do
Nvel de Controle

ISBN 978-85-8001-069-5

Figura 5 Controle Velocidade. Neste experimento foram utilizados quatro nos no Nvel de
Controle sendo estes responsaveis respectivamente
por enviar a referencia de velocidade, obter velocidade do veculo, enviar comando de freio e enviar
comando de acelerador. O grafico (a) mostra a
referencia e a velocidade do veculo. O grafico (b)
mostra os comandos recebidos de aceleracao e frenagem.
 salvar, por meio do Supervisor, todos os dados trafegando nas redes do Nvel de Controle
e do Nvel de Processamento.
Apos todos os sistemas ligados, os programas
foram iniciados e o carro foi conduzido por um determinado percurso para geracao da informacao de
posicao, velocidade e aceleracao. O resultado forneceu todos os dados solicitados com um intervalo
de 20ms entre cada requisicao. A Figura 6 mostra
um pequeno caminho percorrido pelo carro obtido
por meio dos dados do GPS.
4.3

Teste com o Player

O teste da interface Player envolveu o envio de
comandos de velocidade e angulo do volante ao
veculo. Estes comandos foram enviados por um
usuario conectado remotamente aos servidores do
Nvel de Processamento pela interface position2d
e a funcao setCarLike do Player. Todos os comandos enviados ao veculo foram corretamente executados fazendo assim com que o veculo sasse de
um ponto e chegasse a outro utilizando de uma interface simples, a qual nao exige pouco ou nenhum
conhecimento do usuario a respeito do restante do
sistema.
5

Conclusoes e Trabalhos Futuros

Neste trabalho propos-se uma arquitetura de
Hardware e Software para utilizacao em um carro
autonomo. Esta e voltada ao operador, ou seja,
visa a operacao de um carro_autonomo por meio

700

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Referencias
Arruda, T. A., Campedelli, E. R. and Pereira, G.
A. S. (2011). Desenvolvimento de uma rede
modbus para o controle de um veculo_autonomo, Anais do X Simposio Brasileiro de Automacao Inteligente 1 16.

Figura 6 Dados de GPS sobre uma imagem de
satelite do Google Earth.
de comandos de alto nvel. A solucao foi baseada no estudo de diversas arquiteturas, tanto de
hardware quanto de software, utilizadas nos mais
variados tipos de veculos_autonomos.
A nova arquitetura proposta suprimiu os problemas causados pela antiga arquitetura do Carro
Autonomo Desenvolvido na UFMG (CADU). As
vantagens desta nova abordagem no nvel de hardware incluem dentre outras reducao do numero
de cabos reducao do numero de USBs necessarias
possibilidade e utilizacao e testes cada subsistema
independentemente. Em relacao ao software, as
vantagens sao comunicacao determinstica no Nvel de Controle processamento em paralelo dos diversos subsistemas facilidade de uso para o usuario final com o uso da interface Player. A todas
estas vantagens adiciona-se a possibilidade de monitoramento por um elemento externo de todos os
dados que trafegam pelo veculo.
Ainda assim, a arquitetura apresenta algumas
restricoes como os limites de quantidade dados
e velocidade de transferencia impostas pela rede
Modbus, a incapacidade de comunicacao assncrona e a dificuldade inerente para elaboracao de
modulos software de tempo_real. No entanto, apesar destas dificuldades, podemos considerar que a
aplicacao da arquitetura trouxe grandes melhorias
ao sistema. Alguma destas restricoes podem ser
superadas com utilizacao de Rede CAN e introducao da interface ROS (Robot Operating System).
Agradecimentos
O presente trabalho e financiado pela FAPEMIG.
Tiago Arruda e Guilherme Pereira sao bolsistas do
CNPq. Os autores agradecem aos colegas Erica
Campedelli, Jullierme Dias, Marco Tulio Pires e
Victor Costa pelo auxilio na realizacao deste trabalho.

ISBN 978-85-8001-069-5

Bohren, J., Foote, T., Keller, J., Kushleyev, A.,
Lee, D., Stewart, A., Vernaza, P., Derenick,
J., Spletzer, J. and Satterfield, B. (2009).
Little ben The ben franklin racing teams
entry in the 2007 darpa urban challenge, in
M. Buehler, K. Iagnemma and S. Singh (eds),
Darpa Urban Challenge Autonomous Vehicles In City Traffic, Vol. 56 of Springer Tracts
in Advanced Robotics, Springer-Verlag Berlin, pp. 231255.
Freitas, E. J. R., Vinti, M. N. W., Santos, M. M.,
Iscold, P., Torres, L. A. B. and Pereira, G.
A. S. (2009). Desenvolvimento de automacao
embarcada para um robo_movel baseado em
um carro de passeio, Anais do IX Simposio
Brasileiro de Automacao Inteligente 1 16.
Gerkey, B., Vaughan, R. T. and Howard, A.
(2003). The playerstage project Tools for
multi-robot and distributed sensor systems,
Proceedings of the 11th Intl. Conference on
Advanced Robotics, pp. 317323.
Jones, W. (2001). Keeping cars from crashing,
Spectrum, IEEE 38(9) 40 45.
Montemerlo, M., Becker, J., Bhat, S., Dahlkamp,
H., Dolgov, D., Ettinger, S., Haehnel, D., Hilden, T., Hoffmann, G., Huhnke, B., Johnston, D., Klumpp, S., Langer, D., Levandowski, A., Levinson, J., Marcil, J., Orenstein, D., Paefgen, J., Penny, I., Petrovskaya,
A., Pflueger, M., Stanek, G., Stavens, D.,
Vogt, A. and Thrun, S. (2008). Junior The
stanford entry in the urban challenge, Journal of Field Robotics 25 569597.
Nelson, M. (1999). A design pattern for autonomous vehicle software control architectures, Proceedings of the International Computer Software and Applications Conference,
pp. 172177.
Szabo, S., Szabo, O., Scott, H. A., Murphy, K. N.,
Legowik, S. A. and Bostelman, R. V. (1992).
High level mobility controller for a remotely
operated unmanned land vehicle, Journal of
Intelligent and Robotic Systems 5 6377.

701