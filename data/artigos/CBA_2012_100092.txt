Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

DIAGNOSTICADOR REDE DE PETRI PARA UM SED MODELADO POR UM
AUTOMATO FINITO
Marcos V. Moreira, Felipe G. Cabral, Oumar Diene




COPPE-Programa de Engenharia Eletrica, Universidade Federal do Rio de Janeiro, Cidade
Universitaria, Ilha do Fundao, Rio de Janeiro, 21.945-970, RJ, Brasil

Departamento de Engenharia Eletrica, Universidade Federal do Rio de Janeiro, Cidade Universitaria,
Ilha do Fundao, Rio de Janeiro, 21.945-970, RJ, Brasil
Emails moreira.mv@poli.ufrj.br, felipecabral@poli.ufrj.br, oumar@poli.ufrj.br
Abstract Fault detection and isolation is an essential task in automated manufacturing systems, and thus,
several works in the literature address this problem. We propose in this paper a Petri net approach to online
diagnosis of a discrete event system (DES) modeled as a finite state automaton. The diagnosis method requires
less memory than other methods proposed in the literature and relies on the computation of a Petri net diagnoser
(PND).
Keywords

Petri net, Automaton, Fault diagnosis, Discrete event systems.

Resumo Deteccao e isolamento de falhas e uma tarefa essencial em sistemas_de_automacao e, portanto,
varios trabalhos tem sido publicados sobre este assunto. Neste artigo, e proposta uma abordagem por redes
de Petri para diagnose online de falhas em um sistema a eventos discreto modelado por um automato finito.
O metodo de diagnose requer menos memoria do que outros metodos propostos na literatura e e baseado na
obtencao de um diagnosticador rede de Petri (DRP).
Palavras-chave

.

INTRODUCAO

Deteccao e isolamento de falhas e uma tarefa essencial em sistemas_de_automacao e, por isso,
muitos trabalhos tem sido publicados sobre esse
assunto (Lin, 1994 Sampath et al., 1995 Qiu
and Kumar, 2006 Carvalho et al., 2011 Basilio
et al., 2012).
Em Sampath et al. (1995), e apresentada uma
abordagem para diagnose_de_falhas utilizando sistemas_a_eventos_discretos (SEDs) modelados por
automatos nitos. O metodo de diagnose proposto em Sampath et al. (1995) consiste de tres
etapas (i) construcao de um automato rotulado
G obtido a partir do automato G que modela o
sistema, cujos estados sao (x, ), em que x e um
estado de G e   Y, N . Se x e um estado alcancado em G apos a ocorrencia de uma sequencia sY que contem o evento de falha, entao um
estado (x, Y ) e alcancado em G apos a ocorrencia da mesma sequencia sY , e se x e alcancado
em G apos uma sequencia normal sN , entao o estado (x, N ) e alcancado apos sN 1  (ii) obtencao
do automato diagnosticador Gdiag calculando-se o
observador_de_estados do automato rotulado G 
(iii) identicacao dos eventos de falha baseado no
estado alcancado de Gdiag apos a observacao de
uma sequencia executada pelo sistema.
O diagnosticador proposto em Sampath et al.
(1995) pode ser usado para detectar e isolar falhas
1 Note que o comportamento normal e o de falha do
sistema sao separados em G , i.e., um estado (x, Y ) e alcancado em G apos a ocorrencia de uma sequencia s se e
somente se s possui um evento de falha.

ISBN 978-85-8001-069-5

online e ainda para vericacao o-line da diagnosticabilidade da linguagem gerada pelo sistema.
Embora esse diagnosticador possa ser implementado de forma direta em um computador, em geral isso e evitado, uma vez que, no pior caso, o
espaco_de_estados do diagnosticador Gdiag cresce
exponencialmente com a cardinalidade do espaco
de estados do modelo do sistema G (Sampath
et al., 1995 Qiu and Kumar, 2006).
Em Qiu and Kumar (2006), um metodo de
diagnose online que evita a construcao e o armazenamento do automato Gdiag e proposto. Para
tanto, um automato nao determinstico Gnd
 e calculado substituindo-se cada transicao de Gl associada a um evento nao observavel por uma transicao . Nesse metodo apenas o estado atual do diagnosticador Gdiag e o automato Gnd
 precisam ser
armazenados para diagnose online. Apos a ocorrencia de um evento observavel, o proximo estado
de Gdiag pode ser obtido em tempo polinomial
conhecendo-se o estado atual de Gdiag e o automato Gnd
 .
Neste artigo, e apresentada uma abordagem
por redes de Petri para diagnose online de falhas
em um SED. A denicao de diagnosticabilidade e
a mesma apresentada em Sampath et al. (1995). E
suposto tambem que o sistema e descrito por um
automato nito G e que o conjunto de eventos de
falha f pode ser particionado em diferentes conjuntos de eventos de falha fk , k  1, . . . , r, em
que r denota o numero de tipos de falha. O metodo e baseado no calculo de um automato GC que
modela a composicao dos comportamentos normais do sistema, obtido a partir de G e automatos

3723

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

GNk , para k  1, . . . , r, em que o automato GNk
modela o comportamento normal de G com relacao ao conjunto de eventos de falha fk . Em
geral, GNk possui um numero menor de estados
do que G, levando a uma reducao na complexidade computacional da diagnose online em comparacao com o metodo proposto em Qiu and Kumar (2006), que usa os comportamento normais e
de falha do sistema descritos por Gk  GAk ,
para k  1, . . . , r, em que Ak denota o automato
rotulador com relacao a falha do tipo Fk .
A tecnica de diagnose proposta neste trabalho consiste em encontrar os estados alcancaveis
de GC apos a observacao de uma sequencia de
eventos e, baseado no conjunto de estados alcancaveis de GC , vericar se a falha ocorreu. Para
tanto, um diagnosticador rede de Petri (DRP) e
proposto. O DRP e obtido a partir de uma rede
de Petri binaria que e capaz de encontrar os estados alcancaveis de GC apos a observacao de uma
sequencia de eventos.
Este artigo esta organizado da seguinte forma
na secao 2 sao apresentados conceitos preliminares de automatos e de redes de Petri na secao 3 e
apresentada a denicao de diagnosticabilidade de
uma linguagem na secao 4 e proposto um metodo
para a obtencao do automato GC calculado a partir dos comportamentos normais do sistema GNk ,
k  1, . . . , r na secao 5 o diagnosticador rede de
Petri (DRP) e apresentado nalmente, as conclusoes sao apresentadas na secao 6. Um exemplo
e usado para ilustrar os resultados ao longo do
texto.
2

FUNDAMENTOS TEORICOS

Seja G  (Q, , , f, q0 ) um automato determinstico que modela um SED, em que Q e o espaco_de_estados nito,  e o conjunto de eventos,   Q  2 e a funcao de eventos ativos,
f  Q    Q e a funcao de transicao de estados
e q0 e o estado inicial do sistema. Por simplicidade, a funcao de eventos ativos sera omitida a
menos que seja necessaria.
A parte acessvel de G, denotada por Ac(G),
e a operacao que elimina todos os estados de
G que nao sao alcancaveis a partir do estado inicial q0 e suas transicoes relacionadas,
i.e., Ac(G)  (Qac , , fac , q0 ), em que Qac 
q  Q  (s   )f (q0 , s)  q e fac  Qac  
Qac e a nova funcao de transicao de estados.
A operacao de projecao Ps  l  s , em
que s  l e denida como Ps ()  , Ps () 
, se   s ou Ps ()  , se   l  s , e
Ps (s)  Ps (s)Ps (), para todo s  l , e   l .
A operacao de projecao pode ainda ser aplicada a
linguagem gerada por G, L(G), executando essas
regras a todas as sequencias s  L(G).
Sejam G1 e G2 dois automatos. Entao, G1 
G2 e G1 G2 denotam o produto e a composicao

ISBN 978-85-8001-069-5

paralela de G1 e G2 , respectivamente (Cassandras
and Lafortune, 2008).
Suponha agora que o conjunto de eventos de
 uo , em que o e
G seja particionado em   o 
uo denotam os conjuntos de eventos observaveis
e nao observaveis, respectivamente. O alcance nao
observavel do estado q  Q com relacao ao conjunto uo , denotado por U R(q), e denido como
U R(q)  y  Q  (t  uo )(f (q, t)  y). (1)
Essa denicao e estendida a um subconjunto de
estados B  Q da seguinte forma

U R(B) 
U R(q).
(2)
qB

Uma rede de Petri (RP) e outro formalismo comumente usado para modelar um SED
(Cassandras and Lafortune, 2008 Davi and Alla,
2005). A principal vantagem em usar redes de Petri para descrever SEDs em comparacao com os
automatos nitos, e a natureza distribuda do estado da RP, o que permite a obtencao de grafos
compactos para descrever SEDs. Para denir formalmente uma RP primeiramente a estrutura de
uma rede de Petri sera denida.
Definicao 1 A estrutura de uma rede de Petri e
um grafo bipartido ponderado (P, T, P re, P ost, w),
em que P e o conjunto finito de lugares, T e o
conjunto finito de transicoes, P re  (P  T ) e o
conjunto de arcos que ligam lugares a transicoes,
P ost  (T  P ) e o conjunto de arcos que ligam
transicoes a lugares, e w  (P  T )  (T  P )  N
e a funcao de pesos dos arcos, com w(pi , tj )  0
e w(tj , pi )  0 se e somente se (pi , tj )  P re e
(tj , pi )  P ost, respectivamente.
O conjunto de lugares e representado neste
artigo por P  p1 , p2 , . . . , pn  e o conjunto de
transicoes por T  t1 , t2 , . . . , tm . Logo, P   n
e T   m, em que . denota cardinalidade.
A indicacao de que as condicoes para o disparo das transicoes sao satisfeitas e obtida atraves da atribuicao de chas aos lugares. O numero de chas atribudas a um lugar pi e representado por x(pi ), em que x  P  N. Logo, uma
marcacao de uma rede de Petri e o vetor coluna
T
x  x(p1 ) x(p2 ) . . . x(pn ) , formado pelo numero de chas em cada lugar pi , para i  1, . . . , n.
Definicao 2 Uma rede de Petri N e uma sextupla N  (P, T, P re, P ost, w, x0 ), em que
(P, T, P re, P ost, w) e, de acordo com a definicao
1, a estrutura de uma rede de Petri e x0 e a marcacao inicial do conjunto de lugares.
Em uma rede de Petri, normalmente eventos
sao associados a transicoes e lugares sao associados as condicoes que precisam ser satisfeitas para
a ocorrencia desses eventos. Isso leva a seguinte
denicao de redes de Petri rotuladas.

3724

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Definicao 3 Uma rede de Petri rotulada N e
uma octupla N  (P, T, P re, P ost, w, x0 , , l), em
que (P, T, P re, P ost, w, x0 ) e, de acordo com a definicao 2, uma rede de Petri,  e o conjunto de
eventos utilizados para rotulacao das transicoes e
l  T  2 e a funcao de rotulacao que associa a
cada transicao um subconjunto de eventos do conjunto .
Uma transicao tj e dita estar habilitada
quando o numero de chas em cada um dos seus
lugares de entrada e maior ou igual ao peso dos
arcos que conectam os lugares a transicao tj , i.e.,
tj e dita estar habilitada se e somente se
x(pi )  w(pi , tj ), for all pi  I(tj ),

(3)

sendo I(tj ) o conjunto de lugares de entrada de
tj . Se a transicao tj esta habilitada para uma
marcacao x e o evento associado a tj ocorre, entao
a transicao tj dispara e uma nova marcacao x e
alcancada. A evolucao das marcacoes e dada por
x(pi )  x(pi )  w(pi , tj ) + w(tj , pi ), i  1, . . . , n.
(4)
Uma classe particular de redes de Petri e a
chamada rede de Petri maquina de estados. Em
uma rede de Petri maquina de estados cada transicao possui exatamente um lugar de entrada e um
lugar de sada. Se, aliado a isso, essa rede de Petri possuir apenas uma cha, entao a rede de Petri
maquina de estados se comporta exatamente como
um automato, em que cada lugar e associado a um
estado em seu automato correspondente.
3

o . Entao L e dita ser diagnosticavel com relacao
a projecao Po e com relacao a particao f em f
se
(k  f )(nk  N)(s  L  LNk )(st  L  LNk )
(t  nk )  (  Po1 (Po (st))  L,   L  LNk ),

em que . denota o comprimento de uma sequencia.
De acordo com a denicao 4, L e diagnosticavel com relacao a Po e f se e somente se para
todas as sequencias st de comprimento arbitrariamente longo apos a ocorrencia de um evento de
falha do conjunto fk , nao existirem sequencias
sNk  LNk , de tal forma que Po (sNk )  Po (st)
para todo k  Ir  1, 2, . . . , r. Portanto, se L e
diagnosticavel entao sempre e possvel identicar
unicamente o tipo de falha que ocorreu apos um
numero nito de observacoes de eventos.
O primeiro passo para implementar um diagnosticador online e vericar se todos os tipos de falha podem ser diagnosticados apos a ocorrencia da
falha em um numero limitado de observacoes. Em
Moreira et al. (2011) um algoritmo em tempo polinomial para identicar se uma linguagem L e diagnosticavel e apresentado. O algoritmo proposto
em Moreira et al. (2011) e baseado na construcao de um automato vericador determinstico e a
vericacao tem complexidade computacional inferior comparada com outros metodos na literatura
(Qiu and Kumar, 2006 Yoo and Lafortune, 2002).
Neste artigo e suposto que a linguagem gerada
pelo sistema e diagnosticavel com relacao a Po e
f .

DIAGNOSTICABILIDADE DE SED
4

Seja G o automato que modela o sistema e seja
f  uo o conjunto de eventos de falha. Alem
disso, suponha que o conjunto de eventos de falha
possa ser particionado como
f 

r


fk ,

(5)

k1

em que fk representa um conjunto de eventos de
falha do mesmo tipo e f denota essa particao.
Seja L(G)  L a linguagem gerada por G e
GNk o subautomato de G que representa o comportamento normal do sistema com relacao ao
conjunto de eventos de falha fk , i.e., supondo
que L(GNk )  LNk , entao LNk e a linguagem
prexo-fechada formada por todas as sequencias
de L que nao contem nenhum evento de falha
do conjunto fk . A seguinte denicao de diagnosticabilidade pode ser formulada (Sampath
et al., 1995).
Definicao 4 Sejam L e LNk  L as linguagens
prefixo-fechadas geradas por G e GNk , respectivamente, e defina a operacao de projecao Po   

ISBN 978-85-8001-069-5

OBTENCAO DO AUTOMATO GC

Nesta secao, e mostrado como obter o automato
GC utilizado no processo de diagnose online. Diferente do automato diagnosticador introduzido em
Qiu and Kumar (2006), que usa o comportamento
normal e de falha do sistema descrito por Gk , o
automato GC e construdo a partir dos automatos GNk , que modelam o comportamento normal
de G com relacao aos eventos de falha de fk , e
que, em geral, tem um numero menor de estados
e transicoes do que Gk .
Algoritmo 1
 Passo 1 Calcule o automato GNk , para cada
k  f , que modela o comportamento normal
de G com relacao ao conjunto de eventos de
falha fk , da seguinte forma
 Passo 1.1 Defina Nk    fk .
 Passo 1.2 Construa o automato ANk
composto de um unico estado Nk (tambem seu estado inicial) com um autolaco
rotulado com todos os eventos de Nk .

3725

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

 Passo 1.3 Faca GNk  G  ANk 
(QNk , , fNk , Nk , q0,Nk ).
 Passo 2 Construa o automato estendido
GaNk , para cada k  f , adicionando um
novo estado Fk , que indica que um evento
de falha do conjunto fk ocorreu. Uma nova
transicao rotulada com um evento fk  fk
e adicionada, conectando o estado (q, Nk ) de
GNk ao estado de falha Fk , se fk  (q).
Adicione um autolaco rotulado com todos os
eventos    ao estado de falha Fk .
 Passo 3
Calcule o automato GC 
(QC , , fC , C , q0,C )  GaN1 GaN2  . . . GaNr .
Note que, para cada GaNk , o comportamento
de falha do sistema com relacao ao conjunto de
eventos de falha fk e representado pelo estado de
falha Fk , com um autolaco rotulado com todos os
eventos do conjunto , o que indica que uma falha
do conjunto fk ocorreu. E importante mencionar
que essa representacao nao preserva a linguagem
gerada pelo sistema apos a ocorrencia do evento
de falha. Entretanto, como o diagnosticador e um
dispositivo passivo, essa representacao nao altera
a observacao dos eventos do sistema e, portanto,
nao interfere na diagnose_de_falhas.
Para mostrar como o automato GC pode ser
usado na diagnose online de falhas e preciso primeiro denir uma funcao que fornece os possveis
estados atuais de GC apos a ocorrencia de um
evento observavel. Essa estimativa e denotada
neste artigo por Reach(), em que   vo 
Po (s) e a sequencia observada pelo diagnosticador
apos a execucao de uma sequencia s  L cujo ultimo evento observavel e o , e pode ser calculada
recursivamente como (Qiu and Kumar, 2006)
Reach()



Reach(vo )



U R(q0,C ),

(6)

U R((Reach(v), o )), (7)

em que (Reach(v), o ) 
i1 C (qCi , o ),
com qCi  Reach(v),   Reach(v), e
C (qCi , o )  fC (qCi , o ) se fC (qCi , o ) e denida
e C (qCi , o )  , caso contrario.
Apos a observacao de uma sequencia , o
conjunto dos possveis estados atuais de GC ,
Reach(), pode ser calculado e seus estados podem ser usados para identicar a ocorrencia de
um evento de falha. O teorema a seguir apresenta
a base para o metodo de diagnose proposto neste
artigo.
Teorema 1 Seja L a linguagem gerada por G e
suponha que L e diagnosticavel com relacao a Po
e f . Seja s  L  LNk tal que   L, com
Po ()  Po (s),   L  LNk . Entao, a k-esima
coordenada de todos os possveis estados atuais de
GC , alcancados apos a ocorrencia de s, dados por
Reach(Po (s)), e igual a Fk .

ISBN 978-85-8001-069-5

0

a

u
1

b

2

f

f

1

5

u
3

4

c

2

f

7

1

u

a
6

a

8

a

9

b

Figura 1 Automato G do Exemplo 1.

Nk

fk 

Figura 2 Automato ANk do Exemplo 1.
Prova A prova do teorema 1 segue diretamente
da construcao do automato GC e sera, portanto,
omitida.
2
De acordo com o teorema 1, se L e diagnosticavel com relacao a Po e f , entao sempre e possvel identicar a ocorrencia de uma falha do tipo
Fk com um numero limitado de observacoes vericando os possveis estados atuais de GC . Se apos
a ocorrencia de uma sequencia s, todos os estados de Reach(), em que   Po (s), nao possuem
uma coordenada (q, Nk ), entao nao e possvel que
uma sequencia normal com relacao ao conjunto de
eventos de falha fk , com a mesma projecao que
, tenha sido executada, o que implica que uma
falha do tipo Fk ocorreu, ou seja, s contem um
evento de falha fk  fk . Logo, a diagnose de
uma falha do tipo Fk pode ser feita vericando-se
se um estado do comportamento normal descrito
por GNk e uma coordenada de um possvel estado
atual de GC .
Observacao 1 O numero de estados de GC e, no
pior caso, igual a (2r  1)  Q + 1, em que r e
o numero de tipos de falha do sistema. Logo, a
complexidade computacional da construcao de um
automato GC e O(2r Q), o que mostra que
a complexidade e linear com o numero de estados
e eventos do automato do sistema e exponencial
com o numero de tipos de falhas. A complexidade computacional pode ser linear com relacao
ao numero de tipos de falha se cada comportamento normal com relacao a um tipo de falha e
considerado separadamente. Nesse caso, ao inves
de um unico automato GC , tem-se r automatos
GaNk , em que cada um leva em consideracao apenas a falha do tipo Fk , e a complexidade computacional e O(rQ). Embora a analise de pior
caso sugira que e vantajoso considerar os automatos GaNk , para k  1, . . . , r, ao inves de GC , e importante observar que o numero de estados de GC
pode ser menor que a soma do numero de estados
de GaNk para k  1, . . . , r, levando a um codigo
de programacao menor para a implementacao do
diagnosticador.

3726

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.



0N1 ,0N2

F1

f

f

1

ON1

a

1N1

b

2N1

u

3N1

4N1

F1 ,6N2

c

a

f

F1 ,8N2
F1 ,9N2

7N1

u

0N2

1N2

f

b

2N2

u

3N2

4N2

c

f

1

2

5N2



F2

f

1

a
6N2

a

8N2

a

9N2

b

Figura 4 Automato aumentado GaN2 do Exemplo
1.

Exemplo 1 Seja G o automato do sistema apresentado na figura 1, em que
  a, b, c, u , f1 , f2 , o  a, b, c,
uo  u , f1 , f2 , e f  f1 , f2 . Suponha
que o conjunto de eventos de falha possa ser
 f2 com f1  f1 
particionado em f  f1 
e f2  f2 , e suponha que se queira calcular
o automato GC . De acordo com o algoritmo
1, o primeiro passo e obter os automatos ANk ,
para k  1, 2, mostrados na figura 2, e os
automatos que modelam os comportamentos
normais GNk  G  ANk . O proximo passo e
a construcao dos automatos aumentados GaN1 e
GaN2 , mostrados nas figuras 3 e 4, respectivamente, obtidos adicionando-se os estados de falha
F1 e F2 aos automatos GN1 e GN2 . O passo
final do algoritmo 1 e o calculo do automato
GC  GaN1 GaN2 , ilustrado na figura 5.
A partir de agora sera apresentado como o
automato GC pode ser usado no processo de diagnose online. Suponha que uma sequencia de falha s  af1 aa  L  LN1 tenha sido executada
pelo sistema. Entao, a sequencia observada e  
Po (s)  aaa. De acordo com o teorema 1, se nao
existir uma sequencia   LN1 tal que Po ()  
entao todos os estados no conjunto de estados alcancaveis Reach() possuem a primeira coordenada igual a F1 . O conjunto de estados alcancaveis Reach() pode ser obtido recursivamente
de acordo com as equacoes (6) e (7), da seguinte
forma Reach()  (0N1 , 0N2 ), Reach(a) 
(1N1 , 1N2 ), (2N1 , 2N2 ), (F1 , 5N2 ), (7N1 , F2 ),

ISBN 978-85-8001-069-5

b

3N1 ,3N2

u

4N1 ,4N2

c

a
9N1 ,F2

f

1

b

b

9N1

Figura 3 Automato aumentado GaN1 do Exemplo
1.
u

2N1 ,2N2
 f2
7N1 ,F2
u
8N1 ,F2

b
a

8N1

u

a

2

a

1N1 ,1N2
f1
F1 ,5N2

a

1

u

a

Figura 5 Automato GC  GaN1 GaN2 do Exemplo
1.
(8N1 , F2 ), Reach(aa)  (F1 , 6N2 ), (9N1 , F2 ),
e Reach(aaa)  (F1 , 8N2 ).
Uma vez que o estado alcancado apos a observacao de   aaa possui a primeira coordenada
igual a F1 , entao e possvel garantir que o evento
de falha f1 ocorreu.
Com relacao a complexidade computacional
para construcao de GC , pode ser visto que GC
possui 12 estados e GaN1 e GaN2 possuem 9 e 10
estados, respectivamente. Logo GC possui um numero menor de estados do que a soma de estados
de GaN1 e GaN2 . Portando, como mostrado na observacao 1, a diagnose online pode ser executada,
neste caso, com um custo_computacional menor
usando GC ao inves de GaNk , para k  1, 2.
Na Secao 5, uma rede de Petri e usada para
fornecer um diagnosticador online capaz de encontrar os estados alcancaveis de GC apos a observacao de uma sequencia de eventos para a identicacao da ocorrencia de um evento de falha.
5

DIAGNOSTICADOR REDE DE
PETRI

Considere o problema de encontrar os possveis estados de GC apos a observacao de uma sequencia
  o . Para resolver esse problema um observador online que armazena os estados estimados
atuais de GC apos a ocorrencia de um evento observavel precisa ser calculado. Esse observador
online de estados pode ser construdo usando o
formalismo de redes de Petri, explorando a natureza distribuda do estado de uma rede de Petri,
levando a um observador_de_estados rede de Petri.
O primeiro passo para a construcao de um
observador rede de Petri e a obtencao de uma
rede de Petri maquina de estados, NC , a partir
do automato GC . Isso pode ser feito associandose um lugar pCi em NC a cada estado qCi de
GC e associando-se a cada arco direcionado em
GC , (qCi , , qCi ), em que qCi  fC (qCi , ) e  
C (qCi ), uma transicao tCj , rotulada com , em
NC (Cassandras and Lafortune, 2008). Para ligar
lugares e transicoes em NC , dois arcos com peso

3727

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

igual a um precisam ser criados para cada transicao um arco (pCi , tCj ) e um arco (tCj , pCi ), em
que pCi e o lugar de NC associado ao estado qCi . O
estado inicial de NC e denido atribuindo-se uma
cha ao lugar de NC associado ao estado inicial
de GC e atribuindo-se zero aos outros lugares.
Apos NC ter sido obtida, o proximo passo
para o calculo do observador_de_estados rede de
Petri de GC e a criacao de novos arcos, conectando cada transicao rotulada com um evento observavel a lugares especcos que correspondem ao
alcance nao observavel de lugares. Para isso, seja
TCo o conjunto de todas as transicoes de NC rotuladas com eventos observaveis e dena a funcao
ReachT  TCo  2PC , em que PC e o conjunto
nito de lugares de NC . O conjunto de lugares
ReachT (tCj ), em que tCj  TCo , pode ser calculado de acordo com o seguinte algoritmo.
Algoritmo 2 Sejam O(t) e O(p) o conjunto de
todos os lugares de sada de t e o conjunto de todas
as transicoes de sada
de p, respectivamente.
Seja


tambem O(P )  pP O(p) e O(T )  tT O(t).
 Passo 1 Defina pout  O(tCj ), Pr  pout 
e Pr  Pr .
 Passo 2 Forme o conjunto Tu com todas as
transicoes de O(Pr ) associadas a eventos nao
observaveis. Se Tu  , ReachT (tCj )  Pr e
pare.
 Passo 3 Faca Pr  O(Tu ), Pr  Pr  Pr , e
retorne ao Passo 2.
Para implementar o alcance nao observavel
apos o disparo de cada transicao observavel, um
arco com peso um, conectando cada transicao
tCj  TCo a cada lugar pCi  ReachT (tCj ), precisa ser adicionado a NC , gerando uma nova rede
de Petri NC . Apos isso, todas as transicoes rotuladas com eventos nao observaveis de NC , e seus arcos relacionados, precisam ser removidos levando
a uma nova rede de Petri NCo , cujas transicoes
sao todas rotuladas com eventos observaveis pertencentes a o .
Note que para a estimacao dos estados de GC ,
apenas os lugares que sao associados aos possveis
estados atuais de GC devem ter chas e, apos a
ocorrencia de um novo evento observavel, o numero de chas nos lugares que nao sao mais possveis deve ser igual a zero. Isso implica que o numero de chas em cada lugar do observador rede
de Petri precisa ser igual a um ou zero, mesmo
que o disparo de uma transicao tCj  TCo resulte,
de acordo com a equacao (4), em uma marcacao
com duas ou mais chas. Portanto, lugares sao
forcados a ter marcacoes binarias e a equacao (4)
nao e mais valida. Esse requisito pode ser satisfeito usando-se redes de Petri binarias (Alayan
and Newcomb, 1987). Uma rede de Petri binaria pode ser denida como uma rede de Petri com

ISBN 978-85-8001-069-5

uma regra de evolucao diferente para a marcacao
de lugares alcancados apos o disparo de uma transicao tj , dada por

0, se x(pi ) w(pi , tj )+ w(tj , pi )  0
,
x(pi ) 
1, se x(pi ) w(pi , tj )+ w(tj , pi ) > 0
(8)
para i  1, . . . , n.
E importante observar que denir NCo como
uma rede de Petri binaria nao e suciente para
garantir que NCo possa ser usada como um observador_de_estados. Suponha, por exemplo, que pCi
e um lugar de NCo que possui uma cha e nao tem
uma transicao de sada rotulada com um evento
observavel o  o . Suponha ainda que pCi nao
possui uma transicao de entrada habilitada rotulada com o . Entao, se o ocorrer, pCi permanece
com uma cha. Considerando que um lugar pCi
com uma cha representa um possvel estado atual
qCi de GC , pode-se vericar que, neste exemplo,
pCi nao deveria ter permanecido com uma cha, o
que mostra que o estado da rede de Petri binaria
NCo nao corresponde aos possveis estados atuais
de GC apos a ocorrencia de o .
Para se obter o observador rede de Petri, NSO ,
e necessario adicionar um arco conectando cada
lugar pCi de NCo a uma nova transicao, rotulada
com os eventos observaveis de o que nao estao
no conjunto de eventos ativos do estado qCi de
GC associado a pCi . Essa modicacao e o fato
do observador rede de Petri ser uma rede de Petri
binaria garantem que se o lugar pCi nao esta associado com um possvel estado atual de GC apos o
disparo de uma transicao observavel, entao o numero de chas de pCi e igual a zero. Finalmente,
para denir o estado inicial de NSO , uma cha e
atribuda a cada lugar associado a um estado de
U R(q0,C ) e o numero de chas dos demais lugares
e igual a zero.
Apos NSO ter sido obtida, o diagnosticador rede de Petri NDiag pode ser calculado
adicionando-se a NSO transicoes tfk , para k 
1, . . . , r, com um lugar de entrada pNk e um lugar
de sada pFk . Cada transicao tfk esta associada
a vericacao da ocorrencia de um tipo de falha.
Arcos inibidores (Davi and Alla, 2005) de peso
igual a um sao usados para conectar cada lugar
associado a um estado de GC que tem uma coordenada (q, Nk ) a transicao tfk . Como o arco
inibidor de peso um habilita a transicao apenas
quando o numero de chas do lugar de entrada
e igual a zero, entao tfk sera habilitada apenas
quando o comportamento normal do sistema com
relacao a falha do tipo Fk nao for possvel, o que
implica que uma falha do conjunto fk ocorreu.
Um arco inibidor e representado por um arco cuja
extremidade nal possui um pequeno crculo. A
transicao tfk sera rotulada com o evento sempre
ocorrente  (Davi and Alla, 2005) para representar que tfk dispara imediatamente apos ter sido

3728

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

habilitada, removendo-se a cha do lugar pNk e
adicionando-se uma cha ao lugar pFk , o que indica que uma falha do tipo Fk ocorreu.
O algoritmo 3 resume os passos necessarios
para a obtencao do diagnosticador rede de Petri
NDiag a partir do automato GC .

0N1 0N2

1N1 1N2



a

 Passo 4 Calcule NSO  (PC , TSO , P reSO ,
P ostSO , wSO , x0,SO , o , lSO ) da seguinte
forma

1

f

3N1 3N2

4N1 4N2

u

b

c

2

7N1 F2

a
F1 6N2

u
8N1 F2

a
F1 8N2

 Passo 1 Calcule a rede de Petri maquina de estados NC  (PC , TC , P reC ,
P ostC , wC , x0,C , , lC ) a partir de GC .

 Passo 3
Elimine todas as transicoes
de NC rotuladas com eventos nao observaveis e seus arcos relacionados, gerando a rede de Petri binaria NCo 
(PC , TCo , P reCo , P ostCo , wCo , x0,C , o , lCo ).

u

f

F1 5N2

Algoritmo 3

 Passo 2 Adicione a NC arcos conectando
cada transicao observavel tCj  TCo aos
lugares em ReachT (tCj ), gerando a rede

,
de Petri NC  (PC , TC , P reC , P ostC , wC
x0,C , , lC ).

2N1 2N2

a
9N1 F2

a

b

f

F1 9N2

1

b

Figura 6 Rede de Petri maquina de estados NC .
0N1 0N2

1N1 1N2



2N1 2N2

3N1 3N2

a

b

F1 5N2

7N1 F2

4N1 4N2

c

a
F1 6N2

8N1 F2

a
F1 8N2

a
9N1 F2

a

b

F1 9N2

 Passo 4.1 Adicione a NCo transicoes
rotuladas com eventos observaveis de o
que nao estao no conjunto de eventos
ativos do estado qCi de GC associado a
pCi .
 Passo 4.2 Defina o estado inicial de
NSO atribuindo uma ficha a cada lugar
associado a um estado de U R(q0,C ) e nenhuma ficha aos outros lugares.
 Passo 5 Calcule o diagnosticador rede de
Petri NDiag  (PDiag , TSO  Tf , P reDiag ,
P ostDiag , InDiag , wDiag , x0,Diag, o  ,
r
lDiag ), em que Tf

k1 tfk  e
InDiag  PDiag  Tf denota o conjunto
de arcos inibidores, como segue
 Passo 5.1 Adicione a NSO transicoes
tfk , para k  1, . . . , r, rotuladas com o
evento sempre ocorrente .
 Passo 5.2 Adicione a cada transicao tfk
um lugar de entrada pNk e um lugar de
sada pFk , ambos conectados a tfk por
arcos com peso igual a um.
 Passo 5.3 Conecte cada lugar associado
a um estado de GC que tem uma coordenada (q, Nk ) a transicao tfk com um
arco inibidor.
 Passo 5.4 A marcacao inicial dos lugares pNk e igual a um e dos lugares pFk
e igual a zero. Os outros lugares possuem a mesma condicao inicial definida
por x0,SO .

ISBN 978-85-8001-069-5

b

Figura 7 Rede de Petri binaria NCo .
Observacao 2 Considerando a construcao de
um diagnosticador rede de Petri para um unico
tipo de falha, e possvel ver que no pior caso o numero de lugares da rede e igual a Q + 2 e o numero de transicoes e (Q + 2)  (o  + 1). Assim,
a complexidade computacional do diagnosticador
considerando um tipo de falha e O(Q  o ).
Note que isso e uma grande vantagem com relacao ao diagnosticador proposto por Sampath et al.
(1995) cuja complexidade e exponencial no numero de estados do sistema.
O exemplo a seguir ilustra os passos para a
obtencao da rede de Petri NDiag e o processo de
diagnose online.
Exemplo 2 Considere o automato diagnosticador GC mostrado na figura 5, e considere o problema de obter o diagnosticador rede de Petri
NDiag a partir de GC . De acordo com o algoritmo 3 o primeiro passo e o calculo da rede de
Petri maquina de estados NC , mostrada na figura
6. Seguindo os Passos 2 e 3, a rede de Petri binaria NCo , apresentada na figura 7, e obtida. Em
seguida, de acordo com o Passo 4, o observador
rede de Petri NSO , mostrado na figura 8, e obtido
a partir de NCo . Finalmente, seguindo o Passo
5 do algoritmo 3, o diagnosticador rede de Petri
NDiag , apresentado na figura 9, e calculado.

3729

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.
a, c

0N1 0N2

2N1 2N2

1N1 1N2



b

a , b, c

a

c

a , b, c

7N1 F2

F1 5N2 a , b , c

b, c

onando uma ficha ao lugar pF1 , indicando a ocorrencia do evento de falha f1 .

a, b

3N1 3N2 4N1 4N2

6

a

F1 6N2

b, c

8N1 F2

b, c

a

a

F1 8N2

b, c

9N1 F2

a, c

a

b
F1 9N2

a, c

b

Figura 8 Observador rede de Petri NSO .
a, c

tSO2

a



tSO3
tSO4

a , b, c

tSO1

b

a, b

a , b, c

tSO5

AGRADECIMENTOS

tSO7
PN1

a , b, c



tSO16

b, c

a

tSO10

tSO9

tSO17

b, c

tf1

b, c

a

tSO12

tSO11

tSO19

a

Referencias

tSO18
PN2

a, c

tSO14

tSO13

tSO20



b

Este trabalho foi parcialmente financiado pela Petrobras, convenio no. 6000.0069294.11.4, PFRH no.19, e
pela FAPERJ, processo 110.7282011.

PF1

b, c

a

Neste artigo foi apresentado um diagnosticador
rede de Petri que pode ser usado para a deteccao e isolamento de falhas online de sistemas a
eventos_discretos. Esse procedimento de diagnose
online utiliza menos memoria do que outros metodos propostos na literatura. Como um trabalho
futuro, visando a implementacao do diagnosticador em controladores_logicos_programaveis, e sugerido o desenvolvimento de um metodo de conversao de diagnosticadores redes de Petri em uma
linguagem de programacao adequada.

tSO6

c

tSO8

CONCLUSAO

Alayan, H. and Newcomb, R. W. (1987). Binary petrinet relationships, IEEE transactions on circuits
and systems CAS-34 565568.

a, c

b

tSO15

PF2
tf2

Figura 9 Diagnosticador rede de Petri NDiag .
Sera mostrado agora como utilizar a rede
de Petri NDiag no processo de diagnose online.
Para tanto, suponha que uma sequencia de falha s  af1 aa  L  LN1 tenha sido executada pelo sistema. Entao, a sequencia observada e
  Po (s)  aaa. Como o estado inicial de NDiag
possui uma ficha apenas no lugar (0N1 , 0N2 ), associado ao estado inicial de GC , entao, apos a
ocorrencia do primeiro evento a, a transicao tSO1
dispara e o conjunto de lugares associados com os
possveis estados de GC que possuem uma ficha
e dado por (1N1 , 1N2 ), (2N1 , 2N2 ), (7N1 , F2 ),
(8N1 , F2 ), (F1 , 5N2 ). Entao, quando o segundo
evento a e observado, as transicoes tSO2 , tSO3 ,
tSO9 , tSO16 , tSO18 disparam simultaneamente e o
conjunto de lugares com uma ficha e dado por
(F1 , 6N2 ), (9N1 , F2 ). Note que as transicoes
tSO2 , tSO3 , tSO16 removem as fichas dos lugares que nao estao associados aos possveis estados atuais de GC apos a observacao da sequencia aa. Apos a ocorrencia do terceiro evento a,
as transicoes tSO11 , tSO19 disparam e o unico lugar de NDiag que continua com uma ficha e dado
por (F1 , 8N2 ). Como todos os lugares associados
a um estado de GC com uma coordenada (q, N1 )
nao possuem fichas, entao a transicao tf1 , rotulada com o evento sempre ocorrente, e habilitada
e dispara, removendo a ficha do lugar pN1 e adici-

ISBN 978-85-8001-069-5

Basilio, J. C., Lima, S. T. S., Lafortune, S. and Moreira, M. V. (2012). Computation of minimal
event bases that ensure diagnosability, Discrete
Event Dynamic Systems Theory And Applications . to appear.
Carvalho, L. K., Moreira, M. V. and Basilio, J. C.
(2011). Generalized robust diagnosability of discrete event systems, 18th IFAC World Congress,
Milano, Italy, pp. 87378742.
Cassandras, C. G. and Lafortune, S. (2008). Introduction to Discrete Event System, Springer-Verlag
New York, Inc., Secaucus, NJ.
Davi, R. and Alla, H. (2005). Discrete, Continuous
and Hybrid Petri Nets, Springer.
Lin, F. (1994). Diagnosability of discrete event systems and its applications, Journal of Discrete
Event Dynamic Systems 4(2) 197212.
Moreira, M. V., Jesus, T. C. and Basilio, J. C. (2011).
Polynomial time verification of decentralized diagnosability of discrete event systems, IEEE
Transactions on Automatic Control pp. 1679
1684.
Qiu, W. and Kumar, R. (2006). Decentralized failure
diagnosis of discrete event systems, IEEE Transactions on Systems, Man, and Cybernetics Part
ASystems and Humans 36(2).
Sampath, M., Sengupta, R., Lafortune, S., Sinnamohideen, K. and Teneketzis, D. (1995). Diagnosability of discrete-event systems, IEEE Trans. on
Automatic Control 40(9) 15551575.
Yoo, T.-S. and Lafortune, S. (2002). Polynomial-time
verification of diagnosability of partially observed discrete-event systems, IEEE Transactions
on Automatic Control 47(9).

3730