UM NOVO ALGORITMO PARA VERIFICACAO DA DIAGNOSTICABILIDADE
DESCENTRALIZADA DE SISTEMAS A EVENTOS DISCRETOS
Marcos V. Moreira, Thiago C. Jesus, Joao C. Basilio, Lilian K. Carvalho


COPPE - Programa de Engenharia Eletrica
Universidade Federal do Rio de Janeiro
Rio de Janeiro, RJ, Brasil

Emails moreira@dee.ufrj.br, thiagocj@ufrj.br, basilio@dee.ufrj.br,
lilian@coep.ufrj.br
Abstract Failure diagnosis is an important task in large complex systems and, as such, this problem has
received in the last years considerable attention in the literature. The first step to diagnose failure occurrences
in discrete event systems is the verification of the system diagnosability. Several works in the literature address
this problem using either diagnosers or verifiers for the centralized and decentralized architectures. In this paper
a new polynomial time algorithm to verify the decentralized diagnosability property of a discrete event system
is proposed. The algorithm has lower computational complexity than other methods proposed in the literature
and can also be applied to the centralized case.
Keywords

Diagnosability, Discrete Event Systems, Automata.

Resumo O diagnostico_de_falhas e uma tarefa importante em sistemas grandes e complexos e, por isso, esse
problema tem recebido nos ultimos anos consideravel atencao na literatura. O primeiro passo para diagnosticar
a ocorrencia de uma falha em um sistema_a_eventos_discretos e a verificacao da diagnosticabilidade do sistema.
Varios trabalhos na literatura abordam esse problema utilizando diagnosticadores ou verificadores para as arquiteturas centralizadas e descentralizadas. Neste artigo um novo algoritmo de execucao em tempo polinomial
para verificar a propriedade de diagnosticabilidade descentralizada de um sistema_a_eventos_discretos e proposto.
O algoritmo tem complexidade computacional menor do que outros metodos propostos na literatura e tambem
pode ser aplicado ao caso centralizado.
Palavras-chave

.

Introducao

nosticabilidade centralizada de um sistema_a_eventos_discretos, algoritmos em tempo polinomial, baseados na construcao de automatos nao determinsticos
e na busca por ciclos com determinadas propriedades,
sao propostos em (Jiang et al., 2001) e (Yoo e Lafortune, 2002). Em (Jiang et al., 2001) e proposto
um algoritmo cuja complexidade computacional e de
quarta ordem no numeros de estados e de primeira
ordem no numero de eventos do sistema. A complexidade computacional do algoritmo proposto em (Yoo
e Lafortune, 2002) e de segunda ordem no numero de
estados e de primeira ordem no numero de eventos
do sistema e, portanto, possui menor complexidade
computacional do que o metodo proposto em (Jiang
et al., 2001). E importante observar que em (Jiang
et al., 2001) e (Yoo e Lafortune, 2002) sao feitas as hipoteses de que a linguagem gerada pelo sistema e viva
e que nao existem ciclos de eventos nao observaveis no
automato do modelo do sistema.

O problema de diagnosticar uma falha em um Sistema a Eventos Discretos (SED) consiste em inferir
a ocorrencia de um evento nao observavel (evento de
falha), baseado nas ocorrencias dos eventos observaveis desse sistema. Diagnostico de falhas e uma tarefa
importante em sistemas grandes e complexos e, assim, esse problema tem recebido consideravel atencao
na literatura nos ultimos anos (Willsky, 1976 Viswanadham e Johnson, 1988 Frank, 1990 Lin, 1994 Sampath et al., 1995 Sampath et al., 1996). Em (Sampath
et al., 1995) e (Sampath et al., 1996), uma abordagem
para o diagnostico_de_falhas em Sistemas a Eventos
Discretos e apresentada e um diagnosticador e proposto com dois propositos (i) deteccao on-line e isolacao de falhas de um sistema e (ii) verificacao offline das propriedades de diagnosticabilidade de um
sistema. Em (Sampath et al., 1995) e mostrado que
o problema da deteccao on-line de falhas de um sistema pode ser resolvido com complexidade polinomial
em cada passo do procedimento de diagnose. Entretanto, o problema de verificar se uma falha pode ser
diagnosticada com um atraso limitado tem, no pior
caso, complexidade exponencial no espaco_de_estados
do sistema. Isso se deve ao fato de que condicoes necessarias e suficientes para a diagnosticabilidade sao
determinadas no diagnosticador off-line, e a cardinalidade do espaco_de_estados deste diagnosticador e, no
pior caso, exponencial na cardinalidade do espaco de
estados do modelo do sistema.

Com o objetivo de obter um metodo para verificar a propriedade de diagnosticabilidade para o caso
descentralizado, tambem chamado de codiagnosticabilidade, algoritmos em tempo polinomial sao propostos
em (Qiu e Kumar, 2006), (Wang et al., 2007) e (Basilio
e Lafortune, 2009). Esses algoritmos sao baseados na
construcao de automatos de teste e na busca por ciclos
ofensivos nesses automatos. O protocolo de diagnostico descentralizado de falhas considerado em (Qiu e
Kumar, 2006), (Wang et al., 2007) e (Basilio e Lafortune, 2009) supoe que os diagnosticadores locais nao
se comunicam entre si e que a ocorrencia de um evento
de falha e diagnosticada com atraso limitado por pelo
menos um diagnosticador local usando suas proprias

Para suprir a necessidade de obter o diagnosticador off-line para verificar a propriedade de diag-

704

observacoes dos eventos do sistema (isso e equivalente
ao protocolo 3 em (Debouk et al., 2000)). O algoritmo
proposto em (Qiu e Kumar, 2006) pode tambem ser
usado para a verificacao da diagnosticabilidade centralizada e tem complexidade computacional de ordem
(m + 1) no numero de estados e eventos do sistema,
sendo m o numero de diagnosticadores locais. No caso
centralizado, m  1 e a complexidade do algoritmo e
de segunda ordem no numero de estados e eventos do
modelo do sistema, o que e maior do que a ordem da
complexidade do algoritmo proposto em (Yoo e Lafortune, 2002). Por outro lado, em (Qiu e Kumar, 2006)
as hipoteses de vivacidade da linguagem gerada pelo
sistema e de nao existencia de ciclos de eventos nao
observaveis sao removidas. O algoritmo proposto em
(Wang et al., 2007) tambem remove essas hipoteses e
o automato verificador tem no maximo 2m+1 Xm+1
estados e 2m+1  Xm+1    (m + 1) transicoes,
sendo X e  o espaco_de_estados e o conjunto de eventos do sistema, respectivamente, e . denota a cardinalidade de um conjunto.
Neste trabalho, um novo algoritmo para o teste
da codiagnosticabilidade de um SED e proposto. O
algoritmo tem menor complexidade computacional do
que outros metodos propostos na literatura e pode ser
usado para verificar a diagnosticabilidade para o caso
centralizado. As hipoteses de vivacidade da linguagem
gerada pelo sistema e de nao existencia de ciclos de
eventos nao observaveis sao removidas como em (Qiu
e Kumar, 2006) e (Wang et al., 2007).
2

f (xk+i1 , i ) para qualquer i  1, 2, . . . , l. O caminho forma um ciclo se xk+l  xk .
A parte acessvel de um automato G, denotada
por Ac(G), e a operacao unaria realizada sobre G que
elimina todos os estados de G que nao sao alcancaveis
a partir do estado inicial x0 e suas respectivas transicoes. Formalmente,
Ac(G)  (Xac , , fac , x0 ) ,

(2)

?

sendo Xac  x  X  (s   )f (x0 , s)  x e fac 
Xac    Xac a nova funcao de transicao obtida
restringindo-se o domnio de f para o domnio dos
estados acessveis Xac .
A parte coacessvel de G e obtida eliminando-se
todos os estados de G a partir dos quais nao e possvel alcancar um estado marcado. Essa operacao e
formalmente definida como
CoAc(G)  (Xcoac , , fcoac , x0,coac , Xm ) ,

(3)

?

sendo Xcoac  x  X  (s   )f (x, s)  Xm ,
x0,coac  x0 se x0  Xcoac , ou x0,coac e indefinido
se x0 6 Xcoac , e fcoac  Xcoac    Xcoac e a nova
funcao de transicao obtida restringindo-se o domnio
de f aos estados coacessveis Xcoac .
Suponha que o conjunto de eventos possa ser par uo sendo o e uo os conjunticionado em   o 
tos de eventos observaveis e nao observaveis, respectivamente, e seja f  uo o conjunto de eventos de
falha. Suponha agora que o conjunto de eventos de
falha possa ser particionado em
f 

Nocoes Preliminares

p


f i ,

(4)

i1

Um sistema_a_eventos_discretos e um sistema que tem o
espaco_de_estados discreto e o mecanismo de transicao
de estados e dirigido por eventos, isto e, o comportamento dinamico do sistema e condicionado a ocorrencia de eventos. Se  denota o conjunto de eventos,
entao o conjunto de todas as possveis sequencias de
eventos formadas com elementos no conjunto , juntamente com a sequencia vazia , e chamado de Fecho
de Kleene de , denotado por ? . A linguagem L gerada por um SED e um subconjunto de ? , ou seja,
L  ? , sendo que L e prefixo-fechada, isto e, L  L
com L sendo o fecho de prefixo de L definido como

em que f i representa um conjunto de eventos de falha de um mesmo tipo. O diagnostico de uma falha
do conjunto f i pode ser feito usando duas arquiteturas basicas centralizada ou descentralizada. No caso
centralizado, o problema de diagnosticar a ocorrencia
de uma falha da classe f i pode ser expresso como
o problema de diagnosticar a ocorrencia destes eventos baseado na observacao de uma sequencia finita de
eventos gerada por G, sendo que apenas os eventos em
o sao observaveis. Na arquitetura descentralizada
as observacoes de evento sao distribudas entre m diagnosticadores locais, sendo que cada diagnosticador
tem seu proprio conjunto de eventos
observaveis oi ,
S
para i  1, . . . , m, em que o  m
i1 oi . Nesse caso,
a ocorrencia de uma falha da classe f i e diagnosticavel se pelo menos um diagnosticador local identificar a
ocorrencia de uma falha do conjunto f i . Para o diagnostico de eventos de falha de tipos diferentes, pode-se
construir varios diagnosticadores sendo que cada um
identifica a ocorrencia de um tipo especfico de falha
(Yoo e Lafortune, 2002 Jiang et al., 2001). Assim,
neste artigo, sem perda de generalidade, e considerado
que existe apenas um tipo de falha, isto e, p  1.
E importante tambem apresentar algumas operacao usuais sobre linguagens e automatos.
A projecao Ps  ?l  ?s , em que s  l e
definida como (Ramadge e Wonham, 1989)

L  s  ?  (t  ? )st  L.
Neste artigo, a notacao   s representa que  e um
um evento da sequencia s  L, e o numero de eventos
nessa sequencia s e representado por s.
Seja G o automato que modela o sistema definido
como (Cassandras e Lafortune, 2008)
G  (X, , , f, Xm , x0 ),

(1)

sendo X o espaco_de_estados finito,  o conjunto de
eventos,  a funcao de eventos ativos, f a funcao de
transicao, Xm o conjunto de estados marcados e x0
o estado inicial do sistema. Por simplicidade, a funcao de eventos ativos e o conjunto de estados marcados serao omitidos em alguns casos. A linguagem
gerada por G, L(G), e a linguagem prefixo-fechada
gerada pelo sistema, ou seja L(G)  L, e um caminho (xk , 1 , xk+1 , 2 , . . . , l , xk+l ), para l > 0, e
uma sequencia de estados e eventos tais que xk+i 

705

Ps ()



Ps ()



Ps (s)



,


, se   s
,
, se   l  s

(5)

Ps (s)Ps (), para todo s  ?l ,   l ,

em que  denota a diferenca entre conjuntos. Assim,
e possvel ver que a projecao substitui na sequencia
s  ?l todos eventos   l  s pela sequencia vazia
, que e equivalente a apagar esses eventos da sequencia s. A operacao projecao tambem pode ser aplicada
na linguagem L gerada por G simplesmente aplicando
as regras (5) para todas as sequencias s  L. Essa
operacao pode ser implementada em G substituindo
todas as transicoes rotuladas por eventos de l  s
pela sequencia vazia , levando a um automato nao
determinstico. Para obter um automato determinstico que gera a linguagem Ps (L), um observador deve
ser computado (Cassandras e Lafortune, 2008).
?
A projecao inversa Ps1  ?s  2l e definida
como
Ps1 (t)  s  ?l  Ps (s)  t .
(6)

i  1, . . . , m. Entao, a seguinte definicao de codiagnosticabilidade pode ser apresentada (Qiu e Kumar, 2006).
Definicao 1 Seja L a linguagem prefixo-fechada gerada por um sistema e seja K  L a linguagem
prefixo-fechada gerada por H. Suponha que existam
m modulos locais com projecoes Poi  ?  ?oi
(i  IM  1, . . . , m) e seja f o conjunto de eventos de falha. Entao, L e codiagnosticavel em relacao
a Poi e f se, e somente se,
(n  N)(s  L  K)
(st  L  K, t  n ou st leva a um deadlock ) 
(i  IM )(w  Po1
(Poi (st))  L, w  L  K).
i
2

A operacao de projecao inversa pode tambem ser aplicada a linguagem gerada por um automato G, isto e,
Ps1 (L(G)). Isso pode ser feito adicionando a cada estado de G um autolaco rotulado por todos os eventos
em l  s . Com um leve abuso de notacao, esse automato que gera Ps1 (L(G)) sera denotado por Ps1 (G).
Em alguns casos, pode ser necessario realizar a
composicao de dois automatos para formar um terceiro. Sejam G1  (X1 , 1 , 1 , f1 , x01 ) e G2 
(X2 , 2 , 2 , f2 , x02 ). Entao, a composicao completamente sncrona de G1 e G2 , denotada por G1  G2 , e
definida como

Note que se existe um bloqueio no sistema, um
autolaco rotulado por um evento nao observavel u 
uo (o conjunto de todos os eventos que nao sao observaveis por qualquer um dos m diagnosticadores locais)
pode ser adicionado a cada estado de bloqueio. Isso
leva a uma linguagem viva L tal que todas as sequencias em L tem as mesmas projecoes Poi que antes, e assim, nao afeta a propriedade de codiagnosticabilidade
do sistema. Esse e o mesmo procedimento descrito em
(Qiu e Kumar, 2006) com a diferenca que em (Qiu e
Kumar, 2006) o evento nao observavel e a sequencia
vazia . Uma vez que neste artigo o automato G e
determinstico, os autolacos adicionados sao rotulados
por eventos nao observaveis u . Dessa forma, sem
perda de generalidade, e considerado neste artigo que
a linguagem L e viva.
De acordo com a Definicao 1, L e nao codiagnosticavel em relacao a Poi e f se, e somente se,
existe uma sequencia st de comprimento arbitrariamente longo apos a ocorrencia de um evento de falha, e
sequencias si  K, nao necessariamente distintas, tais
que Poi (si )  Poi (st) para todo i  1, . . . , m. Logo,
o algoritmo de verificacao e baseado na procura por
sequencias si  K, para i  1, . . . , m, e st  L  K que
violam as condicoes de codiagnosticabilidade apresentadas na Definicao 1.
A seguir, um algoritmo de verificacao sera apresentado considerando, sem perda de generalidade,
m  2.

G1 G2  Ac(X1 X2 , 1 2 , f12 , (x01 , x02 )), (7)
sendo

 (f1 (x1 , ), f2 (x2 , )), se
  1 (x1 )  2 (x2 )
f12 ((x1 , x2 ), ) 

indefinido, caso contrario.
(8)
Note que a transicao na composicao completamente
sncrona G1  G2 ocorre se, e somente se, a transicao
e possvel em ambos automatos G1 e G2 . Isso significa que a evolucao de estados em G1  G2 e completamente sincronizada com a evolucao de estados nos
automatos G1 e G2 . Uma consequencia importante
desse fato e que a linguagem gerada por G1  G2 e
igual a L(G1 )  L(G2 ). E importante observar ainda
que apenas a parte acessvel da composicao e usada
para formar G1  G2 uma vez que estados que nao sao
alcancaveis a partir do estado inicial (x01 , x02 ) podem
ser gerados na operacao.
A composicao sncrona e definida como G1 kG2 
P11 (G1 )P21 (G2 ), sendo Pi  (1 2 )?  ?i , para
i  1, 2.
3
3.1

3.2

Algoritmo de Verificacao

Nesta subsecao um algoritmo para a verificacao da
codiagnosticabilidade de um sistema e apresentado e,
em seguida, um teorema que mostra sua veracidade e
provado.

Codiagnosticabilidade de um SED
Algoritmo 1 Seja G o automato determinstico que
modela o sistema e f o conjunto de eventos de falha. Considere ainda as seguintes particoes de  sendo
que cada uma e associada a um diagnosticador local
 uoi , para i  1, 2, sendo oi e uoi os con  oi 
juntos de eventos observaveis e nao observaveis para
cada diagnosticador local, respectivamente.

Definicao

Seja G um automato que modela o comportamento
normal e de falha do sistema e seja H o subautomato
de G que representa o comportamento de nao falha do
sistema. Assim, a linguagem gerada por H, denotada
por K, e uma linguagem prefixo-fechada que contem
todas as sequencias de L que nao possuem qualquer
evento do conjunto f .
Suponha que existam m diagnosticadores locais,
cada um com seu conjunto de eventos observaveis oi ,

 Passo 1 Defina Z  (N ,   f , fZ , N ), ou
seja, um automato com um unico estado com
um autolaco rotulado por todos os eventos em
  f . Construa o automato de nao falha

706

Teorema 1 Sejam L e K (K  L) linguagens
prefixo-fechadas geradas, por G e pelo automato de
nao falha H, respectivamente. Considere dois modulos locais com projecoes Poi  ?  ?oi (i 
1, 2) e seja f o conjunto de eventos de falha.
Entao, L e nao codiagnosticavel em relacao a Poi
e f se, e somente se, existe um ciclo em V ,
cl  (xVk , k , xVk+1 , ..., xVl , l , xVk ) (como definido
no passo 6 do Algoritmo 1), sendo l  k > 0, que
satisfaz as seguintes condicoes

H  G  Z  (XH , , fH , H , xH0 ) e redefina
o conjunto de eventos de H como   f , isto e,
H  (XH ,   f , fH , H , xH0 ).
 Passo 2 Defina A  (XA , f , fA , xA0 ), sendo
XA  N, F , xA0  N e fA (N, f )  F e
fA (F, f )  F , para todo f  f (as unicas
transicoes definidas neste automato). Compute
H  GkA e marque todos os estados de H que
tem a segunda coordenada igual a F .
 Passo 3 Obtenha o automato de falha F 
CoAc(H). Note que todas as sequencias de G que
possuem um evento de falha pertencem tambem a
linguagem gerada por F , isto e, L(F )  L  K.

j  k, k + 1, . . . , l tal que (xAj  F )  (j  ).
(10)

 Passo 4 Defina a funcao Ri    f  Ri
como

, se   oi
Ri () 
.
(9)
Ri , se   uoi  f

Prova () Suponha que exista um ciclo cl 
(xVk , k , xVk+1 , ..., xVl , l , xVk ) satisfazendo as condicoes (10). Uma vez que xAj  F para algum j 
k, l, entao, pela construcao de A e V , tem-se que
xAj  F para todo j  k, l. Logo, existe uma
sequencia s0 t0  L(V ), tal que f  s0 e f  f e
t0  (k k+1 . . . l )n , n  N.
Defina agora as seguintes projecoes

Em seguida, construa os automatos Hi 
(XH , Ri , fHi , xH0 ), para i  1, 2, com
fHi (xH , Hi )  fH (xH , ), em que Hi  Ri ()
para todo     f .
Note que a funcao Ri apenas renomeia os rotulos
dos eventos em uoi f . A notacao Ri (f ) e
usada neste artigo para representar a renomeacao
dos eventos do conjunto   f como descrito em
(9). Assim, Ri  Ri (  f ).

PR1



(  R1  R2 )?  ?R1 ,

PR2



(  R1  R2 )?  ?R2 ,

P



(  R1  R2 )?  ? .

L(H1 ) 
Como V  H1 kH2 kF , entao L(V )  PR1
1
1
L(H
)

P
L(F
),
o
que
implica
que
s0 t0 
PR1
2
2
1
0 0
P L(F ). Seja st  P (s t ), em que
s  P (s0 ) e
 1
0
t  P (t ). Assim, uma vez que P P (L(F )) 
L(F), entao st  L(F). Note que, como t0 
(k k+1 . . . l )n , n  N, e, por hipotese, existe um
evento j   para j  k, l, entao a sequencia
t  P (t0 ) pode ser feita arbitrariamente longa. Isso
define uma sequencia st  L(G) arbitrariamente longa
apos a ocorrencia de um evento de falha.
Seja s1  PR1 (s0 t0 ).
Como s0 t0  L(V ),
1
0 0
Alem disso, como
entao s t  PR1 L(H1 ).


L(H
)

L(H
),
entao
s1  L(H1 ). Note
PR1 PR1
1
1
1
que H1 e obtido a partir de H apos a renomeacao dos eventos do conjunto   f usando a funcao
R1 . Assim, existe uma sequencia s1  L(H) tal que
Po1 (s1 )  P (s1 ). Usando o mesmo raciocnio pode
ser mostrado que existem sequencias s2  L(H2 ) e
s2  L(H) tais que Po2 (s2 )  P (s2 ). Para concluir a
prova, note que

 Passo 5 Construa o automato verificador V 
H1 kH2 kF  (XV ,   R1  R2 , fV , xV0 ). Note
que o j  esimo estado de V e dado por xVj 
(xH1 j , xH2 j , xFj ), sendo xH1 j , xH2 j e xFj estados de H1 , H2 , e F, respectivamente, e xFj 
(xj , xAj ), sendo xj e xAj estados de G e A, respectivamente.
 Passo 6 Um ciclo em V e definido como cl 
(xVk , k , xVk+1 , ..., xVl , l , xVk ), sendo l  k > 0.
Verifique a existencia de um ciclo em V satisfazendo as seguintes condicoes
j  k, k +1, . . . , ltal que(xAj  F )(j  ).
Se a resposta e sim, entao a linguagem L e nao
codiagnosticavel em relacao a Poi e f . Caso
contrario, L e codiagnosticavel.
2
Observacao 1 E importante ressaltar que o verificador proposto neste artigo e diferente do proposto em
(Qiu e Kumar, 2006) uma vez que o verificador obtido no passo 6 do Algoritmo 1 procura apenas sequencias de L(H) que tem a mesma projecao que uma
sequencia de L(F ), e o verificador proposto em (Qiu
e Kumar, 2006) procura por todas as sequencias de
L(H) que tem a mesma projecao que uma sequencia
de L(G). Isso reduz o numero de estados e transicoes
do verificador, reduzindo a complexidade do Algoritmo
1. Outra caracterstica importante e que o Algoritmo
1 usa basicamente a composicao sncrona para a criacao do verificador, nao necessitando da criacao de
nenhuma nova operacao para automatos, como feito
em (Qiu e Kumar, 2006).
2

P (s1 )  P PR1 (s0 t0 )  PR1 P (s0 t0 )  PR1 (st)
e assim
Po1 (s1 )  PR1 (st).
Como st  L(F)  ? ,
PR1 (st)  Po1 (st),
o que leva a
Po1 (s1 )  Po1 (st).
O mesmo raciocnio pode ser usado para mostrar que
Po2 (s2 )  Po2 (st). Esses fatos mostram que existem
sequencias s1 , s2  K e st  L  K que violam a condicao de codiagnosticabilidade da Definicao 1.
() Suponha que L nao e diagnosticavel em
relacao a Poi e f . Assim, existe uma sequencia
st  L(F), sendo f  s e t > n para todo

O seguinte teorema prova a veracidade do Algoritmo 1.

707

bilidade) de L(G), como segue

n  N, e s1 , s2  L(H), tais que Po1 (st)  Po1 (s1 )
e Po2 (st)  Po2 (s2 ). Note que, de acordo com o passo
4 do Algoritmo 1, apos a renomeacao dos eventos
nao observaveis dos diagnosticadores locais, sequencias s1  L(H1 ) e s2  L(H2 ) sao obtidas a partir
de s1 e s2 , respectivamente. Note tambem que, de
acordo com o passo 5 do Algoritmo 1, a linguagem gerada pelo verificador V e igual a L(V )  PR1
L(H1 )
1
1
1
PR2 L(H2 )P L(F ). Assim, seja v uma sequencia
de L(V ) tal que v  PR1
(s1 )  PR1
(s2 )  P 1 (st).
1
2
Seja xV  (xH1 , xH2 , xF ) um estado de V e suponha que   st e um evento viavel de xF . Considere o
problema de verificar a existencia de um estado de V ,
xV , alcancavel a partir de xV , tal que  e um evento
ativo. Entao, uma das tres possibilidades pode ocorrer (i)  e observavel por apenas um diagnosticador
local (ii)  e observavel por ambos os diagnosticadores locais (iii)  e um evento nao observavel, i.e.,
  uo . Considere o caso (i) e suponha, por exemplo, que   o1  o2 . Entao, como V  H1 kH2 kF ,
um autolaco rotulado por  e introduzido em todos
os estados de H2 . Assim,  pode ocorrer se, e somente se, ele e um evento viavel do estado associado
a H1 . Uma vez que Po1 (s1 )  Po1 (st), e possvel ver
que depois da ocorrencia de uma sequencia de eventos nao observaveis renomeados em ?R1 , um estado
de H1 , xH1 , que possui  como um evento viavel e
alcancado e, consequentemente,  e um evento viavel
de xV  (xH1 , xH2 , xF ). Considere agora o caso em
que ambos os diagnosticadores observam , ou seja,
  o1  o2 (caso (ii)). Nesse caso,  e um evento
viavel de xV se, e somente se, ele e viavel para o estado correspondente de H1 e de H2 . Uma vez que
Po1 (s1 )  Po1 (st) e Po2 (s2 )  Po2 (st), entao  sera
viavel para um estado de V , xV  (xH1 , xH2 , xF ), depois da ocorrencia de uma sequencia finita de eventos
nao observaveis renomeados de (R1  R2 )? . Finalmente, considere o caso (iii), i.e.,   uo . Nesse caso,
um autolaco rotulado por todos os eventos no conjunto
uo e adicionado para cada estado de H1 e H2 , que implica que  e viavel para xV  (xH1 , xH2 , xF ). Assim,
existe um caminho no automato verificador no qual
todos os eventos da sequencia st aparecem, na mesma
ordem, mas possivelmente com um numero finito de
eventos do conjunto R1  R2 entre dois eventos consecutivos de st. Seja v essa sequencia de L(V ). Entao,
pode ser verificado que st  P (v), o que implica que
v e uma sequencia de L(V ) de comprimento arbitrariamente longo apos a ocorrencia do evento de falha.
Para mostrar que existe um ciclo cl em V , associado
a v, sendo que pelo menos um dos eventos do ciclo
pertence a , note que F e V sao automatos finitos.
Entao, associado a st existe um ciclo de estados de
falha clF em F que pode ser associado a um caminho em V no qual os eventos de clF estao contidos
no caminho. Uma vez que V e um automato finito
e st  P (v), esse caminho deve incluir um ciclo cl
sendo que pelo menos um dos eventos de cl pertence a
. Alem disso, como clF e um ciclo de estados de falha, pode ser visto a partir da construcao do automato
verificador V que cl e um ciclo de estados de falha que
satisfaz a condicao (10).
2

(1) Identifique um ciclo que satisfaca a condicao para
nao codiagnosticabilidade imposta no passo 6 do
Algoritmo 1 e obtenha uma sequencia sv que leva
xV0 para este ciclo.
(2) Obtenha sR1  PR1 (sv ), sR2  PR2 (sv ) e st 
P (sv ).
(3) Defina a funcao de renomeacao inversa
Ri1 

Ri



Ri

7 

em que Ri  Ri (), com a seguinte extensao para o domnio ?Ri  Ri1 (sRi Ri ) 
Ri1 (sRi )Ri1 (Ri ) para todo sRi  ?Ri e Ri 
Ri , e Ri1 ()  .
(4) Obtenha s1  R11 (sR1 ) e s2  R21 (sR2 ).
3.3

2

Analise de complexidade do Algoritmo 1

O Teorema 1 fornece uma condicao necessaria e suficiente baseada no automato verificador V que tem,
em geral, um numero menor de estados e transicoes
do que outros verificadores propostos na literatura.
Isso acontece porque apenas sequencias s  L(F) e
s1 , s2  L(H) (s1 nao necessariamente distinta de s2 )
que satisfazem Po1 (s)  Po1 (s1 ) e Po2 (s)  Po2 (s2 )
sao representadas em V .
Para obter a complexidade computacional do Algoritmo 1 note que a complexidade de realizar os passos de 1 a 4 e linear no numero de estados e transicoes
do automato do sistema G e a complexidade computacional dos passos 5 e 6 do Algoritmo 1 e linear no
numero de estados e transicoes do automato verificador V . Na Tabela 1 e mostrado o numero maximo de
estados e transicoes de todos os automatos que devem
ser computados de acordo com o Algoritmo 1 para obter o automato V supondo m diagnosticadores locais.
O primeiro passo do Algoritmo 1 e a construcao
do automato Z, composto por um unico estado e com
transicoes rotuladas por todos os eventos do conjunto
  f , e do automato de nao falha H  G  Z. Isso
implica que o numero maximo de estados e o numero
maximo de transicoes de H sao X e   f , respectivamente. O segundo passo do Algoritmo 1 e a
construcao do automato H. Para tanto, e necessario
primeiro construir o automato A com dois estados, N
e F , cujas transicoes sao rotuladas somente por eventos de falha e, em seguida, fazer H  GkA. Note que
L(H)  L(G) e que os estados de H sao da forma
(x, N ) ou (x, F ), com x  X. Portanto, o numero
maximo de estados de H e 2  X. No passo 3 do
Algoritmo 1 o automato de falha F e computado tomando a parte coacessvel de H cujo conjunto de estados marcados e formado pelos estados da forma (x, F ),
x  X. Isso leva a um automato que gera a linguagem
L(F)  L  K. Uma vez que F  CoAc(H), entao,
no pior caso, F tem o mesmo numero de estados e
transicoes que H. No passo 4 os automatos Hi , para
i  1, . . . , m, sao obtidos a partir de H pela renomeacao dos eventos nao observaveis do conjunto uoi  f
para cada diagnosticador local de acordo com a funcao
Ri definida em (9). Isso leva a m automatos com os
mesmos numeros de estados e transicoes que H. Finalmente, no passo 5, o automato verificador V e obtido a

A prova do Teorema 1 fornece uma maneira simples para encontrar as sequencias ambguas s1 , s2 e st
(as sequencias que levam a violacao da codiagnostica-

708

Tabela 1 Complexidade computacional do Algoritmo 1
No. Estados
G
X
Z
1
H
X
A
2
2X
H
F
2X
Hi
X
V
2Xm+1
Complexidade

No. Transicoes
X  
  f 
X  (  f )
2f 
2X  
2X  
X 
 (  f )

m+1   + m(   )
2X
f 

O m  Xm+1  (  f )

Figura 1 Automato G do Exemplo 1.

Figura 2 Automato Z.

partir da operacao V  H1 kH2 k . . . kHm kF . Como os
numeros de estados de Hi e F sao no maximo iguais a
X e 2X, respectivamente, entao o numero de estados de V e no pior caso igual a 2Xm+1 . Alem disso,
o numero maximo de transicoes de V e igual a 2 
Xm+1   + m  (  f ) uma vez que, para
a construcao de cada automato Hi , (  f ) novos
eventos devem ser criados.
Portanto, a complexidade


do Algoritmo 1 e O m  Xm+1  (  f ) .
Note que
do Algo a complexidade computacional

ritmo 1 e O m  Xm+1  (  f ) , que e menor
do que a complexidade dos algoritmos propostos em
(Qiu e Kumar, 2006) e (W anget al., 2007) que sao
O(Xm+1  m+1 ) e O(m  2m  Xm+1  ), respectivamente. E importante observar ainda que o tamanho do automato verificador V e, em geral, menor
do que o pior caso apresentado na Tabela 1 uma vez
que o algoritmo procura apenas pelas sequencias em
L  K e K que podem levar a violacao da codiagnosticabilidade, ou seja, o automato verificador representa
apenas as sequencias em LK e K que tem as mesmas
projecoes.
2
E importante observar que um teste para a diagnosticabilidade de L em relacao a projecao Po e ao
conjunto de eventos de falha f no caso centralizado
pode ser obtido fazendo-se m  1 no Algoritmo 1.
Portanto, um automato verificador para o caso centralizado e dado por Vc  H1 kF e a condicao necessaria e suficiente para a nao diagnosticabilidade de L
e a existencia de um ciclo de estados de falha em Vc
tal que pelo menos um evento no ciclo e um evento
pertencente a .
2
4

obtencao do automato Z e do automato de nao falha H. Esses automatos sao mostrados nas Figs. 2 e
3, respectivamente. O proximo passo e obter o automato H, que e apresentado na Figura 5 e e o resultado
da composicao sncrona entre G e A (apresentado na
Figura 4), e o automato de falha F apresentado na
Figura 6, obtido tomando a parte coacessvel de H.
De acordo com o Algoritmo 1, e preciso obter os automatos H1 e H2 (mostrado nas Figs. 7 e 8) a partir de
H pela renomeacao dos eventos nao observaveis nos
conjuntos uo1  f  c, u  e uo2  f  b, u ,
respectivamente. Finalmente, o automato verificador
V  H1 kH2 kF , apresentado na Figura 9, e computado. Note que existe um autolaco no estado 2N 2N 6F
rotulado pelo evento u . Como este e um ciclo de estados de falha e u  , a linguagem gerada por G
nao e codiagnosticavel em relacao a Poi e f .
De acordo com a Observacao ??, as sequencias
que levam a violacao da codiagnosticabilidade podem
ser obtidas a partir do verificador proposto neste artigo. E possvel ver no verificador da Figura 2 que
as sequencias que levam a violacao da diagnosticabilidade sao as sequencias de falha st  af bcau?  as
sequencias de nao falha s1  abc? ac? em relacao a Po1 
e as sequencias de nao falha s02  abca ou s002  aca
em relacao a Po2 .
Com relacao a complexidade computacional, o
numero de estados e o numero de transicoes do automato verificador da Figura 2 sao 13 e 27, respectivamente, enquanto que os numeros de estados e transicoes do automato de teste proposto em (Qiu e Kumar, 2006) sao 16 e 70, respectivamente, e os numeros de estados e transicoes do automato verificador
proposto em (Wang et al., 2007) sao 71 e 168, respectivamente. Isso mostra que a procura por ciclos
que levam a violacao da codiagnosticabilidade possui
maior complexidade computacional utilizando os verificadores propostos em (Qiu e Kumar, 2006) e (Wang
et al., 2007) do que utilizando o verificador proposto
neste artigo.
2

Exemplos

Nesta secao, tres exemplos sao utilizados para ilustrar
o procedimento de verificacao da diagnosticabilidade
descrito no Algoritmo 1 para os casos centralizado e
descentralizado.
Exemplo 1 Considere o sistema modelado pelo automato G mostrado na Figura 1, e suponha que existam
dois diagnosticadores locais cujos conjuntos de eventos observaveis sao o1  a, b e o2  a, c. O
conjunto de eventos nao observaveis neste exemplo
e uo  u , f  e o conjunto de eventos de falha
e f  f . Para verificar se a linguagem L gerada por G e codiagnosticavel em relacao a Poi , para
i  1, 2, e f , um automato verificador V pode ser
obtido usando o Algoritmo 1. O primeiro passo e a

Exemplo 2 Considere o automato G apresentado na
Figura 10 e sejam o1  a, b, d e o2  a, c, d os
conjuntos de eventos observaveis dos diagnosticadores
locais. O conjunto dos eventos de falha e f  f .
Assim, seguindo os passos do Algoritmo 1, o automato
verificador da Figura 11 e obtido. Note que V nao
possui ciclos de estados de falha e, assim, a linguagem

709

Figura 3 Automato H do Exemplo 1.
Figura 10 Automato G dos Exemplos 2 e 3.

Figura 4 Automato A.

Figura 11 Automato verificador V do Exemplo 2
(caso descentralizado).

gerada por G e codiagnosticavel em relacao a Poi e
f .
2

Figura 5 Automato H do Exemplo 1.

Exemplo 3 Considere novamente o automato G da
Figura 10 e suponha agora que exista um diagnosticador centralizado, sendo que o conjunto de eventos nao
observaveis e uo  b, f  e o conjunto de eventos
de falha e f  f . Entao, seguindo os passos do
Algoritmo 1 para m  1, o automato verificador Vc da
Figura 12 e obtido. Como nao ha ciclos de estados de
falha em Vc , entao a linguagem L(G) e diagnosticavel
em relacao a Po e f .
Em (Yoo e Lafortune, 2002), a construcao de um
automato nao determinstico para a verificacao da diagnosticabilidade no caso centralizado e proposto. O
automato proposto em (Yoo e Lafortune, 2002) para
este exemplo tem 9 estados e 10 transicoes. Assim,
embora a complexidade para obter o verificador de
Yoo e Lafortune (2002) e o verificador proposto neste
artigo sejam da mesma ordem, o verificador proposto
neste artigo possui menor numero de estados e transicoes, o que leva a um menor custo_computacional
para verificar se existem ciclos que violam a condicao
de diagnosticabilidade.
2

Figura 6 Automato F do Exemplo 1.

Figura 7 Automato H1 do Exemplo 1.

Figura 8 Automato H2 do Exemplo 1.

Figura 12 Automato verificador Vc do Exemplo
3 (caso centralizado).

5

Conclusoes

Neste artigo um novo algoritmo em tempo polinomial
para a verificacao da diagnosticabilidade descentralizada de um sistema_a_eventos_discretos e proposto.

Figura 9 Automato verificador V do Exemplo 1.

710

Esse algoritmo possui menor complexidade computacional do que outros algoritmos propostos na literatura e nao requer as hipoteses de vivacidade da linguagem gerada pelo sistema ou a nao existencia de
ciclos de eventos nao observaveis. O algoritmo pode
tambem ser utilizado para verificar a diagnosticabilidade centralizada de SED. Exemplos sao utilizados
para ilustrar o metodo.

Willsky, A. (1976). A survey of design methods for
failure detection in dynamic_systems, Automatica
12(6) 601611.
Yoo, T.-S. e Lafortune, S. (2002). Polynomial-time
verification of diagnosability of partially observed
discrete-event systems, Automatic Control, IEEE
Transactions on 47(9) 14911495.

Agradecimentos
Este trabalho foi parcialmente financiado pelo CNPq.
Referencias
Basilio, J. C. e Lafortune, S. (2009). Robust codiagnosability of discrete event systems, American
Control Conference pp. 22022209.
Cassandras, C. G. e Lafortune, S. (2008). Introduction to Discrete Event Systems, Vol. II, Springer,
Secaucus, NJ.
Debouk, R., Lafortune, S. e Teneketzis, D. (2000).
Coordinated decentralized protocols for failure
diagnosis of discrete event systems, Discrete
Event Dynamic Systems Theory and Applications 10(1) 3386.
Frank, P. (1990). Fault diagnosis in dynamic_systems using analytical and knowledge-based redundancy. a survey and some new results, Automatica 26(3) 459474.
Jiang, S., Huang, Z., Chandra, V. e Kumar, R. (2001).
A polynomial algorithm for testing diagnosability of discrete-event systems, Automatic Control,
IEEE Transactions on 46(8) 13181321.
Lin, F. (1994). Diagnosability of discrete event systems and its applications, Discrete Event Dynamic Systems Theory and Applications 4(2) 197
212.
Qiu, W. e Kumar, R. (2006). Decentralized failure
diagnosis of discrete event systems, IEEE Transactions on Systems, Man, and Cybernetics Part
ASystems and Humans 36(2) 384395.
Ramadge, P. e Wonham, W. (1989). The control of
discrete event systems, Proceedings of the IEEE
77(1) 8198.
Sampath, M., Sengupta, R., Lafortune, S., Sinnamohideen, K. e Teneketzis, D. (1995). Diagnosability
of discrete-event systems, IEEE Transactions on
Automatic Control 40(9) 15551575.
Sampath, M., Sengupta, R., Lafortune, S., Sinnamohideen, K. e Teneketzis, D. (1996). Failure diagnosis using discrete-event models, Control Systems
Technology, IEEE Transactions on 4(2) 105
124.
Viswanadham, N. e Johnson, T. (1988). Fault detection and diagnosis of automated manufacturing systems, Proceedings of the 27th IEEE Conference on Decision and Control pp. 23012306.
Wang, Y., Yoo, T. . e Lafortune, S. (2007). Diagnosis of discrete event systems using decentralized
architectures, Discrete Event Dynamic Systems
Theory and Applications 17(2) 233263.

711