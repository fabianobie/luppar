Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

ESPECIFICAÇÃO E DESENVOLVIMENTO DE UMA FERRAMENTA SOFTPLC PARA
PEQUENAS E MÉDIAS EMPRESAS BASEADO NO PADRÃO 1499
LUCAS N. LIMA1, DIOLINO J. S. FILHO2, LUIS C. G. LOPES1, LINDOLPHO O. A. JÚNIOR1
1

CentroFederal de Educação Tecnológica de Minas Gerais
Rua José Peres, 558, Centro, Leopoldina, 36700-000, MG, Brasil
E-mails lucas.lima@member.isa.org, lindolpho@leopoldina.cefetmg.br,
gamboa@leopoldina.cefetmg.br
2

Universidade de São Paulo
Av. Prof. Mello Morais, 2231, Cidade Universitária  SP, 05508-030, SP, Brasil
E-mail diolino.santos@poli.usp.br
Abstract New technologies and standards are changing drastically the production systems in last decades. Currently, given
the success of object orientation and the use of technology-based control software, has made necessary the development of the
1499 standard, an open architecture that will define the next generation of distributed control systems. The standard
defines objects called function blocks with which they can model distributed systems, allowing re-use code as abstracted and the
use of programming languages high level. Is being developed a tool "SoftPLC" low cost, which expects to employ these new
technologies and improve systems for distributed control of small and medium enterprises. The article presents an introduction
and background on the evolution of distributed systems to reach the IEC61499 standard, which is detailed. Then, it is present the
basic architecture of "SoftPLC" which is being developed and its main characteristics. Finally, the requirements for modeling
and development are presented. It is hoped that this work provide a tool for high-level software and low cost for modeling and
development of distributed control systems and automation, focusing on small and medium enterprises.
Keywords 1499, distributed control, production systems, object-oriented modelling.
Resumo O surgimento de novos padrões e tecnologias tem levado a inúmeras transformações, os sistemas_de_controle produtivos. Atualmente, dado o sucesso da orientação_a_objetos e a utilização de tecnologias baseadas em softwares de controle, fez
necessário o surgimento do padrão 1499, uma arquitetura aberta que definirá as próximas gerações de sistemas_de_controle
distribuídos. O padrão define os blocos funcionais com os quais se podem modelar os sistemas distribuídos, permitindo reutilização de códigos, de forma abstraída e com a utilização de linguagens de programação de alto nível. Está sendo desenvolvida
uma ferramenta softplc de baixo_custo, em que se espera empregar essas novas tecnologias e melhorar os sistemas_de_controle
distribuído das pequenas e médias empresas. O artigo apresenta uma introdução e contextualização sobre a evolução dos sistemas distribuídos até chegar  norma IEC61499, a qual é detalhada. Em seguida, é apresentada a arquitetura básica do softplc
que está sendo desenvolvido e suas principais características. Por fim, os requisitos para modelagem e desenvolvimento são apresentados. Espera-se com esse trabalho oferecer uma ferramenta de software de alto nível e baixo_custo para modelagem e desenvolvimento de sistemas distribuídos de controle e automação, com foco nas pequenas e médias empresas.
Palavras-chave 1499, controle_distribuído, sistemas_produtivos, modelagem_orientada_a_objetos.

1

Introdução

O surgimento de novos padrões e tecnologias, ao
longo das últimas décadas, tem levado a inúmeras
transformações sobre os sistemas_de_controle industrial (Lewis, 2001). Muitas dessas transformações
dizem respeito s técnicas_de_modelagem e de controle_de_sistemas.
A utilização de computadores como controladores deve-se ao fato de que muitas malhas podem ser
controladas pela mesma máquina. Além disso, qualquer ajuste de parâmetro no controlador para fornecer uma resposta desejada, implica apenas em modificações no programa ao invés de modificações nos
dispositivos físicos. Um computador também pode
ser utilizado para supervisionar o sistema_de_controle
(Nise, 2011).
Atualmente, com o sucesso da programação orientada a objetos, que já é bastante utilizado no desenvolvimento de softwares para computadores pes-

ISBN 978-85-8001-069-5

soais, começa a ser adotado pelos controladores_programáveis. Em paralelo a isso, o surgimento da Unified Modeling Language (UML) se tornou um aliado
 engenharia_de_software auxiliando na redução da
complexidade dos sistemas baseados na orientação a
objetos (Lewis, 2001).
No âmbito do controle_de_processos_industriais,
consequência do surgimento dessas tecnologias, a
International Electrotechnical Commission (IEC)
desenvolveu o padrão 1499 especialmente como uma metodologia para a modelagem_de_sistemas
de controle_distribuídos. Esse padrão define modelos
na forma de blocos funcionais capazes de serem interligados e assim descrever o comportamento de um
sistema_de_controle_distribuído.
Com a utilização dos blocos funcionais, toda a
lógica de controle do sistema é encapsulada nesses
objetos, o que facilita o desenvolvimento e permite
também a reutilização de códigos e a programação
em diversas linguagens.
Por meio da utilização das tecnologias introduzidas anteriormente, esse trabalho especifica o desen-

3694

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

volvimento de um software, cujo objetivo é levar o
padrão 1499 s empresas de pequeno e médio
porte a um baixo_custo.
Esse trabalho está estruturado da seguinte forma
na seção dois é apresentada uma visão geral do padrão 1499, a seção três foca-se nos blocos funcionais, que formam a base para o desenvolvimento
do software, a seção quarto mostra a arquitetura e
algumas funcionalidades que o software que está
sendo desenvolvido possuirá, por fim, a seção cinco
apresenta os requisitos para a especificação e o desenvolvimento do software softplc.
2

O Padrão 1499

O padrão 1499 especifica uma arquitetura
aberta para as próximas gerações de sistemas_de_automação e de controle_distribuído (Frey and Hussain,
2006). As informações que seguem baseiam-se nas
descrições contidas na norma 1499, mais especificamente no que tange ao desenvolvimento de
softwares baseados no padrão.
Atualmente, o desenvolvimento de sistemas distribuídos (SD) é uma tarefa complexa, pelo fato de
que não há uma única linguagem de programação
com a qual se possa descrever sistemas_de_controle
de porte elevado (volumoso) por completo. O padrão
1499, concebido em antecipação ao aumento da
demanda por automação distribuída, propõe uma
linguagem de desenvolvimento em nível de sistema,
para leitura e controle de SDs, o que preenche o vazio deixado pelas as linguagens populares padronizadas utilizadas pelos controladores_programáveis, as
quais foram definidas pela norma IEC61131-3
(Vyatkyn, 2009). Além disso, o padrão permite a
utilização de outras linguagens de programação, como as utilizadas para programação de computadores.
De acordo com a norma 1499, um SD consiste de dispositivos computadorizados equipados
com interfaces para comunicação com o ambiente
(Vyatkyn, 2009). O diagrama apresentado na Figura
1 exemplifica o funcionamento de um SD utilizando
o padrão 1499. Nesse caso o dispositivo que
controlará o SD é o computador utilizando uma ferramenta softplc, que faz interface entre o computador e o SD. O computador, portanto, é responsável
pela recepção e envio das informações aos dispositivos controlados e, também, pela coordenação do envio de informações dos dispositivos entre si, utilizando algum protocolo de comunicação, além de conter
o modelo lógico de controle.
Com relação  programação do controlador, a
ferramenta sofplc pode utilizar bibliotecas de software externas e deve permitir a reutilização de códigos. Além disso, o software softplc deve ser capaz
de interpretar blocos funcionais produzidos com
software de terceiros, que também sigam a norma
1499-2, que é a seção da norma referente aos
requisitos que os softwares baseados nesse padrão
devem seguir.

ISBN 978-85-8001-069-5

O padrão estabelece a utilização de objetos chamados blocos funcionais para a descrição dos dispositivos que estão sendo controlados. Nas áreas sombreadas da Figura 1, a exemplo, as unidades terminais remotas (RTU  Remote Terminal Unit) podem
ser representadas como blocos funcionais na ferramenta softplc, onde havendo apenas uma definição
do bloco funcional podem-se instanciar as duas
RTUs. Da mesma forma, o motor e a válvula podem
ser representados como blocos funcionais que estarão
conectados ao bloco funcional da RTU.
Todos esses elementos são relacionados no algoritmo do bloco funcional e processados no software,
de forma que seja possível descrever situações em
que a leitura do sensor de outro bloco funcional influencie no acionamento do motor. Além dessas variáveis, um bloco funcional pode armazenar variáveis
internas, que podem ser utilizadas como contadores,
armazenadores de endereços para comunicação, dentre outros.
A execução dos algoritmos contidos nos blocos
funcionais é invocada pelos eventos que ocorrem no
sistema modelado. O gerenciamento dos eventos e a
execução dos algoritmos são interpretados e executados pela ferramenta softplc. Na Figura 1, os dados
enviados pela RTU ao computador podem acionar
eventos no sistema que, consequentemente, responderão com eventos de saída até que o computador responda as informações enviadas pela RTU.

Figura 1. Exemplo da Utilização do Software.

A comunicação entre o computador e os controladores_pode ser feita utilizando-se, o protocolo
modbus TCPIP, ou outro método, desde que haja um
bloco funcional de serviço capaz de intermediar a
comunicação entre o aplicativo softplc e o dispositivo controlador.

3695

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

3

Os Blocos Funcionais

O padrão 1499 descreve os blocos de função, herdados do padrão 1131, como sendo
blocos de software responsáveis por uma função básica no controle de um sistema como um todo. A
vantagem de se utilizar tais blocos é que eles propiciam características essenciais tais como encapsulamento, portabilidade, reconfiguração e uma visão
holística em aplicações distribuídas. Como o padrão
é projetado para o desenvolvimento de sistemas distribuídos, apoia ainda características como reusabilidade e interoperabilidade. No entanto, apesar de serem baseados no paradigma da orientação_a_objetos,
os blocos funcionais não permitem a utilização do
princípio da herança (Lewis, 2001).
No que tange a programação dos algoritmos que
serão executados pelos blocos funcionais, o padrão
1499 permite a utilização de linguagens de alto
nível, o que admite linguagens como C++ e Java, a
guisa de exemplo, além das definidas pelo padrão
IEC61131-3.
Os blocos de função são basicamente classificados em três tipos


Blocos funcionais simples  possuem variáveis de entrada, saída e interna, e possuem
um algoritmo que é invocado em resposta a
eventos de entrada. Os eventos, que podem
ser de entrada ou de saída, são controlados
pelo Execution Control Chart (ECC). A Figura 2 ilustra esse tipo de bloco funcional.
Esse tipo de bloco funcional é o átomo
para a formação dos demais.

Figura 3. Bloco Funcional Composto.



Blocos funcionais de interface de serviço 
são semelhantes a blocos funcionais básicos.
No entanto, o objetivo desses blocos é fornecer uma interface entre o domínio dos
blocos funcionais e os serviços externos,
permitindo a comunicação do software e,
consequentemente, a execução dos algoritmos dos blocos funcionais e os dispositivos
controlados.

Dessa maneira, podem-se criar classes de objetos
em que os objetos são blocos funcionais.
Voltando ao exemplo da Figura 1, a modelagem
daquele sistema pode seguir o formato a RTU como
um bloco funcional básico, podendo reutilizar o bloco no segundo caso, assim como os sensores, o motor
e a válvula. Da mesma forma, os dispositivos na área
sombreada podem ser agrupados na forma de um
bloco funcional composto. Além desses há necessidade de um bloco funcional de serviço, para que realize a comunicação entre o computador e as RTUs.
4

Figura 2. Bloco Funcional Básico.



Blocos funcionais compostos  em seu interior são formados por conexões de blocos
funcionais simples. Pode ser visto como um
agrupamento de blocos funcionais básicos.
A figura 3 ilustra um bloco funcional composto.

ISBN 978-85-8001-069-5

Arquitetura

Passa-se a descrever a arquitetura do softplc, a
qual prevê uma ferramenta de software de baixo_custo baseado no padrão 1499, para levar essa
tecnologia a empresas de pequeno e médio porte.
Esse tópico descreve o conteúdo básico do software.
Deve-se considerar que o software está em estado de
desenvolvimento, com previsão de conclusão do protótipo até o final de 2012. Algumas características do
software já foram desenvolvidas e outras estão em
fase final de desenvolvimento e testes para validação.
O padrão estabelecido para o desenvolvimento de
softwares controladores é definido pela seção 2 da
norma 1499. Tais ferramentas devem permitir
ao usuário executar tarefas como as exemplificadas
no diagrama de caso de uso, ilustrado na Figura 4.
O software deve permitir ao usuário desenvolver
um sistema_de_controle baseado em blocos funcionais. Dessa forma, o usuário deve ter liberdade para
desenvolver os próprios blocos funcionais, podendo
utilizar linguagens de programação de alto nível ou
as linguagens definidas pelo padrão 1131-3. O

3696

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

software deve disponibilizar uma biblioteca básica
contendo blocos funcionais de uso comum, tais como
blocos aritméticos, lógicos, comparadores, temporizadores, contadores incluindo alguns blocos de comunicação. Tendo desenvolvido um modelo de sistema_de_controle_distribuído, o usuário deve poder
executá-lo a partir do software.
Outra característica importante que deve ser considerada é o fato de que o software softplc permite
que o usuário o configure, de forma a garantir que a
ferramenta se adapte ao hardware utilizado e, assim,
possa realizar a comunicação entre os dispositivos
controlados e o computador.
Figura 5. Área de Trabalho

Em relação aos projetos, o software permitirá que
o usuário crie, altere e manipule novos projetos sempre que necessário.
A Figura 5 ilustra através de um esquemático o layout da interface desenvolvida para o softplc. Na
lateral esquerda, apresenta-se o projeto do usuário,
incluindo os blocos funcionais que ele desenvolverá.
A biblioteca padrão, na lateral direita, dá acesso ao
usuário a blocos funcionais prontos e de uso comum.
3.2 Arquitetura dos Blocos Funcionais

Figura 4. Diagrama de Caso de Uso.

3.1 Área de Trabalho
Ao ser inicializado, o software apresentará uma
área de trabalho para o desenvolvimento do sistema
conforme mostrado na Figura 5. É nessa área do programa que o usuário desenvolverá seus próprios blocos funcionais e modelará o sistema que será controlado. O usuário também terá acesso  biblioteca padrão a partir da área de trabalho.
Em termos de usabilidade, o software permitirá
ao usuário manipular os blocos funcionais, arrastando-os e interligando-os para modelar o sistema de
controle. Além dessas características, o usuário deve
ser capaz de importar blocos funcionais, mesmo que
de softwares de terceiros salva-los e modifica-los.

ISBN 978-85-8001-069-5

Os blocos funcionais devem ser desenvolvidos
conforme o padrão 1499 para impedir a ocorrência de incompatibilidade entre arquivos gerados
por outros softwares que sigam o padrão IEC61499.
Os blocos funcionais devem armazenar informações tais como os eventos de entrada_e_saída, as variáveis de entrada_e_saída, além das variáveis internas
os algoritmos (métodos), informações sobre o desenvolvedor e a versão do bloco, eventos de gatilho,
entre outras. Além disso, o software apresenta um
editor para a programação do bloco funcional conforme a linguagem escolhida pelo usuário.
Apesar do padrão 1499 permitir a utilização
de linguagens de alto nível, as linguagens disponíveis
ao usuário para que programe os blocos funcionais
dependerá do software softplc utilizado e das tecnologias que esse utiliza.
No que se refere ao funcionamento dos blocos
funcionais, em tempo de execução, eles devem ser
tratados como blocos de software independentes,
onde o algoritmo interno somente é invocado quando
um de seus eventos de entrada é acionado. Na Figura
6 é ilustrada a execução de um bloco funcional. No
caso de blocos funcionais compostos, ao acionar um
evento de entrada, no interior do bloco ocorrerá o
acionamento de um bloco funcional filho, para o qual
o processo de execução será idêntico, no entanto,
encapsulado.

3697

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

3.4 Comunicação com o Controlador
Para realizar a comunicação entre o computador e
o controlador programável deve-se utilizar um bloco
funcional de interface de serviço, que faz a comunicação entre o domínio de blocos funcionais e o controlador. Por isso, o protocolo de comunicação é estabelecido no interior do bloco funcional em questão.
Para o protótipo do softplc, está sendo desenvolvido um bloco funcional de serviço, que se comunicará
através do protocolo modbus. Outros blocos de serviço podem ser desenvolvidos pelo próprio usuário
para que seja possível se comunicar utilizando Profibus, CAN, DeviceNet, entre outros.
5

Figura 6. Diagrama de Execução dos Blocos Funcionais

Análise de Requisitos

Nessa seção se abordará os tópicos relacionados
aos requisitos estabelecidos para o desenvolvimento
da ferramenta de software softplc.

No momento em que não houver eventos de entrada acionados e o algoritmo for encerrado, o bloco
funcional entrará em modo de espera até que alguns
de seus eventos sejam acionados. Essa é uma característica importante, pois se a implementação do software optar por um procedimento não orientado a
eventos, certamente haverá problemas quanto ao desempenho, que pode não ser satisfatório. A utilização
de processamento_paralelo nesse caso pode ser uma
boa aplicação, desde que se verifiquem os possíveis
conflitos entre blocos funcionais. Por exemplo, dois
blocos tentarem iniciar e interromper um mesmo evento ao mesmo tempo.

4.1 A Plataforma

3.3 Estrutura dos Arquivos

4.2 A Linguagem de Programação

O padrão 1499 estabelece o uso da linguagem de marcação Extensible Markup Language
(XML) para a definição dos arquivos. Portanto, tanto
os blocos funcionais quanto os arquivos que descrevem o projeto ou sistema_de_controle, devem satisfazer ao padrão, armazenando suas informações em
XML. O sistema em desenvolvimento permite esse
tipo de estruturação.
Nesse contexto, deve-se atentar para a codificação dos caracteres. Como o software está sendo desenvolvido para um público alvo brasileiro, o idioma
do software deve ser o português, o que descarta a
possibilidade da utilização do sistema de codificação
de caracteres americanos ASCII, por ocorrer incompatibilidade com os caracteres e acentos grecolatinos. Ao invés deste, deve-se utilizar o sistemas de
codificação Unicode, em especial o tipo UTF-8, que
assim satisfaz também o padrão 1499, que o
utiliza nos arquivos XML. A utilização desse tipo de
codificação também permite que o software também
utilize outros idiomas, pois o tipo UTF-8 pode representar qualquer carácter universal padrão do Unicode.

Atualmente, dispõe-se de diversas linguagens de
programação para o desenvolvimento de softwares,
voltados para a arquitetura dos computadores pessoais. No entanto, para o desenvolvimento de uma ferramenta, como a proposta, devem-se utilizar linguagens de programação que permitam desenvolvimento
rápido e que produzam código eficiente. Portanto,
pode-se utilizar linguagens como CC++, Java ou as
linguagens da plataforma .NET.
Nesse caso, como a ferramenta a ser desenvolvida
deve usufruir do maior desempenho possível, optouse pela linguagem de programação C++, que é uma
linguagem compilada, ou seja, o código é transformado diretamente em linguagem de máquina. Além
disso, pode-se usar outras linguagens, como as interpretadas, em paralelo, durante a execução do programa.
Apesar da linguagem C++ ter surgido a partir da
linguagem C em 1985, é uma linguagem moderna e
deve-se observar que é uma das linguagens mais utilizadas na indústria de softwares, padronizada pela
International Organization for Standardization
(ISO), e que recebeu uma recente atualização,
ISOIEC 148822011, informalmente chamada de

ISBN 978-85-8001-069-5

Como a ferramenta será desenvolvida para a utilização por várias empresas de pequeno e médio porte, é esperado que elas não utilizem a mesma plataforma. Por isso, a ferramenta deve ser desenvolvida
focando-se na compatibilidade do código, para que
assim seja possível executar a versão final na maior
quantidade de plataformas possíveis. No entanto, o
projeto se focará nas plataformas Microsoft Windows e nos sistemas baseados em Linux, pois abrangem maior parte dos computadores utilizados atualmente.

3698

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

C++11. Por ser uma linguagem definida por um padrão aberto internacional, torna-se livre a sua utilização para o desenvolvimento tanto de softwares opensource quanto proprietários (Stroustrup, 2009).
Outro ponto levado em consideração nessa decisão é a alta quantidade de bibliotecas disponíveis
para a linguagem C++ na rede mundial de computadores, desconsiderando as que foram feitas na linguagem C, que também são compatíveis. Isso agilizará o desenvolvimento do programa, já essas bibliotecas cobrem algumas tarefas que deveriam ser implementadas no projeto.

Portanto, para o desenvolvimento da ferramenta,
optou-se pelo toolkit wxWidgets, que é construído
em C++ e está disponível para os principais sistemas
operacionais atuais. As vantagens de sua utilização
são o desempenho, a portabilidade (mediante compilação) e a liberdade de sua licença, que permite a
utilização para a produção de softwares com fins
proprietários, com é o caso desse projeto e por ser
um toolkit estável e com frequentes atualizações.

4.3 Compilador

Apesar de não se tratar de um trabalho de Pesquisa e
Desenvolvimento totalmente concluído, espera-se ao
final, disponibilizar uma ferramenta de software para
a modelagem e o desenvolvimento de sistemas de
controle_distribuídos de baixo_custo, a partir do padrão 1499. A ferramenta de software encontrase já em fase de testes e será concluída até o final do
ano de 2012. Com o uso dessa ferramenta espera-se
obter impacto positivo em relação ao projeto e desenvolvimento de sistemas distribuídos de controle.
Numa próxima etapa desta pesquisa, pretende-se desenvolver bibliotecas de blocos funcionais compostos
para aplicação em nichos específicos de sistemas
produtivos industriais, e a medição do impacto no
tempo e no custo de desenvolvimento de novos sistemas_de_controle através do softplc.

Quando se trabalha com linguagens compiladas, o
principal fator que deve ser levado em consideração é
o compilador - software que transformará o códigofonte em linguagem de máquina.
Atualmente, dispõe-se de diferentes compiladores
para a linguagem C++, muitos deles proprietários. No
entanto, buscou-se um compilador que permitisse o
uso para desenvolvimento de software proprietário,
com suporte a C++11, e livre. Além disso, levando
também em consideração o sistema operacional e
questões de melhor compatibilidade, optou-se por
utilizar o compilador GNU Compiler Collection
(GCC), que está disponível para diversas plataformas
e, também, por ser compilador de código aberto, recebe atualizações com bastante frequência.
4.4 Linguagem de Marcação
O algoritmo desenvolvido para a ferramenta deve
ser capaz de interpretar e armazenar informações no
formato da linguagem de marcação XML, pois essa é
a linguagem utilizada pelo 1499 para o armazenamento das informações. Uma vantagem da utilização dessa linguagem é simplicidade e a flexibilidade (Lewis, 2008). Além, disso o uso do XML torna a
troca de informações entre softwares diferentes mais
fácil de se realizar, com maior portabilidade e menor
probabilidade de erro quando comparado  utilização
de arquivos binários sem marcação. Deve-se ter atenção quanto  codificação de caracteres utilizados, que
foi estabelecido como UTF-8.
4.5 Desenvolvimento da Interface Gráfica
Tratando-se de um software que envolve bastante
interação homem-máquina para a modelagem dos
sistemas, é indispensável  utilização de um toolkit
para o desenvolvimento da interface_gráfica do programa. Quando se considera os diversos sistemas
operacionais utilizados atualmente, essa necessidade
se torna ainda maior.
O toolkit utilizado por um software pode restringi-lo a determinados sistemas_operacionais e, portanto, essa escolha afeta a compatibilidade do software.
Tal escolha envolve também verificar se esse é capaz
de realizar o que o projeto propõe.

ISBN 978-85-8001-069-5

6 Conclusão

Agradecimentos
Esse trabalho contou com o suporte financeiro da
Fundação de Amparo  Pesquisa do Estado de Minas
Gerais (FAPEMIG), através do projeto APQ-0222210, do apoio logístico do Centro Federal de Educação Tecnológica de Minas Gerais (CEFET-MG) e da
Fundação CEFETMINAS.
Referências Bibliográficas
Frey, G., Hussain, T.. July (2006). Modeling
Techniques for Distributed Control Systems
based on the 1499 Standard  Current
Approaches and Open Problems. Proceedings of
the 8th Internacional Workshop on Discrete
Event System Ann Arbor, Michigan, USA.
Lewis, R. W. (2001). Modelling control systems
using 1499. - (Control engineering series
no. 59). The Institution of Engineering and
Technology, London.
Nise, Normam S. (2011). Engenharia de Sistemas de
Controle. LTC. Rio de Janeiro.
Stroustrup, B. (2009). Programming Principles and
Practice Using C++. Pearson Education. Boston.
Vyatkyn, V. (2009). The 1499 Standard and its
Semantics. Industrial Electronics Magazine,
IEEE. Vol.3, pp. 40-48.

3699