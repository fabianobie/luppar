Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

GERENCIAMENTO INTEGRADO DA MANUFATURA BASEADO NO PARADIGMA DA INTERNET
DAS COISAS
ROBERTO A. DIAS, TIAGO E. DE SOUSA, IGOR T. MARQUES MENDONÇA, REGINALDO STEINBACH, ADRIANO REGIS
Grupo de Sistemas Embarcados e Distribuídos, Departamento de Metal Mecânica, Instituto Federal de SC
Av, Mauro Ramo, 950  Centro- 88020-300  Florianópolis  SC.
E-mails roberto@ifsc.edu.br, tiagoemanoeldesouza@gmail.com,
igor@ifsc.edu.br, reginaldo.ifsc@gmail.com, adriano.regis@ifsc.edu.br.

Abstract The integration among the programmable logic controllers (PLCs) and the supervision and control software has
been a critical factor for industrial production management. The goal of this work is show a new approach for development of a
integration framework for industrial processes using the best practices of Service Oriented Architecture (SOA) and the recent integration technology called Devices Profile for Web Services (DPWS). The main result is a functional prototype system used in a
small-scale industrial process of bottles filler, using DPWS technology. Through this scenario was possible to validate the model
feasibility in an industrial environment, doing the performance test to evaluate the model and to observe the characteristics of
notification, description, discovery, reporting and control messages.
Keywords Internet of Things, Manufacturing Automation, DPWS,Web Services.
Resumo A integração entre controladores lógico programáveis (CLPs) e software de supervisão e controle representa um fator crítico para o gerenciamento da produção industrial. O objetivo deste trabalho é apresentar um modelo de desenvolvimento
de um framework de integração para processos_industriais usando as melhores práticas da Arquitetura Orientada a Serviços, usando a recente especificação Devices Profile for Web Services (DPWS) como tecnologia de integração. O principal resultado do
trabalho é a implementação de um protótipo funcional de um sistema de baixa escala de envasamento de garrafas utilizando a
tecnologia DPWS. Através de um cenário simples foi possível avaliar a viabilidade do modelo em um ambiente industrial, realizando uma avaliação_de_desempenho do modelo e observando as suas características de notificação, descrição, descoberta, relatórios e controle.
Palavras-chave .

1

Introdução

Com a crescente necessidade de integrar, de
maneira eficaz e segura, as informações coletadas em
dispositivos instalados no chão de fábrica com os
centros de tomada de decisão empresarial, surgem
conceitos inovadores de gerenciamento da produção
para aumentar a flexibilidade, modularidade e reconfiguração de sistemas. Tais conceitos tiram proveito
das tecnologias de informação e comunicação.
O futuro da indústria de manufatura pode ser
caracterizado, principalmente, pela mudança frequente das demandas do mercado, a pressão do tempo de
mercado, o surgimento contínuo de novas tecnologias
e, sobretudo, a competição global. Desta forma, é de
suma importância a adoção de tecnologias flexíveis e
adaptáveis a tais mudanças (Jammes and Smit, 2005).
O custo operacional de uma planta fabril está
fortemente vinculado aos processos de instalação e
manutenção. Sempre que um processo_industrial é
alterado devido  substituição ou alteração de um
produto, deve ser realizada uma reconfiguração que
causa uma inatividade considerável na produção,
atuando diretamente nos custos operacionais (Jammes and Smit, 2005).
As tecnologias existentes contribuíram até o

ISBN 978-85-8001-069-5

momento para a evolução dos processos_industriais,
mas suas características não contemplam as novas
necessidades demandadas pelas indústrias.
Segundo Souza et al (2008), o principal problema é que essas tecnologias dependem que cada
dispositivo tenha um controlador (driver) para se
comunicar com um sistema de banco_de_dados. Esse
driver fornece informações para a comunicação do
dispositivo com um determinado sistema, tornando
essas soluções limitadas aos sistemas suportados pelo
driver e a dispositivos ou recursos que suportem a
conectividade entre o dispositivo e o banco_de_dados.
Surge então a necessidade de uma tecnologia
que propicie a integração das informações de chão de
fábrica com os sistemas de informação gerencial de
forma direta, transparente e independente de plataforma. Uma alternativa recente é o emprego da Arquitetura Orientada a Serviços (Service-oriented architecture  SOA) que, conforme Papazoglou (2003),
é uma caracterização de sistemas distribuídos, em
que as funcionalidades do sistema são expostas via
descrição de uma interface, permitindo a publicação,
localização e a invocação por meio de um formato
padronizado.
A SOA tem como objetivo maior a capacidade
de conectar uma ampla variedade de sistemas sem
uso de programas proprietários, a fim de alcançar
uma interoperabilidade verdadeiramente aberta.

1468

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

SOA por si só é um conceito que preconiza que
dois programas, que foram escritos em diferentes
linguagens e suportados por sistemas_operacionais
distintos, tenham uma integração facilitada de suas
aplicações pela adoção de uma arquitetura aberta e
independente de plataforma.
Dentro deste contexto, este trabalho tem por objetivo o desenvolvimento de um modelo para a integração dos dispositivos existentes no ambiente industrial com os softwares de controle e supervisão, dentro do atual paradigma de integração de dispositivos
físicos com a Internet, denominado Paradigma da
Internet das Coisas (Atzori et al, 2010). Para tanto,
serão utilizados os conceitos da Arquitetura Orientada a Serviços através da utilização do Perfil de Dispositivos para Serviços Web ou Device Profile for
Web Services - DPWS (Jammes et al, 2007).
O modelo será validado através de um protótipo, em uma aplicação industrial de exemplo, onde
serão estudadas as principais características da tecnologia e verificado o seu desempenho.
2 O Paradigma da Internet das Coisas
No presente trabalho foi adotada uma nova abordagem de integração de dados coletados no ambiente de chão de fábrica com sistemas de informação
gerencial das empresas utilizando como camada de
software de intermediação (middleware) tecnologias
Web. Para tanto utilizamos tecnologias e arquiteturas
de software que aderem a um novo paradigma de
desenvolvimento denominado Internet das Coisas
ou Internet of Things  IoT.

Neste trabalho, foi adotada a especificação Devices Profile for Web Services (DPWS) como middleware para desenvolvimento de uma aplicação baseada em IoT. A implementação de DPWS adotada
neste trabalho, foi baseada em .NET Micro Framework (NETMF) portado para uma plataforma de desenvolvimento baseada em um microcontrolador,
com core compatível ARM 7, denominada NETduino
Plus.
3 Especificação DPWS
3.1 Definição
O DPWS define um conjunto mínimo de funcionalidades que permite os dispositivos com limitações de recursos computacionais suportarem Serviços
Web (SW). Este conjunto mínimo que é formado
basicamente por troca de mensagens seguras, serviços de descoberta e de notificação de eventos e, ainda, pela descrição de serviços, deve permitir a implementação direta em dispositivos embarcados em
geral, sem comprometer a conformidade com a padronização dos Serviços Web.
3.2 Arquitetura
O DPWS possui a pilha de protocolos mostrada
na Fig. 1 e é composta dos protocolos padrão dos
SWs e algumas extensões. Um detalhe importante,
mostrado na Figura 1, é que a especificação para o
DPWS (Oasis, 2009) define que o mesmo trabalhe
com o protocolo SOAP na versão 1.2 e a WSDL na
versão 1.1.

2.1 Definição
Protocolos de aplicação específicos

De acordo com Atzori et al (2010), IoT é um
novo paradigma que vem ganhando destaque sobretudo nos modernos sistema de comunicação_sem_fio e
sistema de identificação por etiquetas de rádio frequência (RFID). Este novo paradigma favorece o
desenvolvimento de aplicações que integram sistemas
físicos, como sensores, atuadores, dispositivos_móveis, smartphones, dentro de um ambiente de cooperação e interoperabilidade.
Neste sentido, IoT surge como uma cola que
permite integrar diversos ambientes. Dispositivos
utilizados no dia a dia sensores e atuadores são integrados a internet através de sistemas de comunicação
com ou sem fio. Pela simplicidade do hardware destes dispositivos, novas arquiteturas de comunicação
são necessárias, como a IPSO (IP for Smart Objects 
http httpwww.ipso-alliance.org).
Dentre os principais elementos empregados na
implementação da IoT está a adoção de uma camada
de intermediação de software (middleware) baseada
em SOA e que deve ser executada no dispositivo
físico.

ISBN 978-85-8001-069-5

WS-Discovery

WS-Eventing

WS-Security
WS-Policy
WS-MetadataExchange
WS-Addressing

SOAP 1.2
WSDL 1.1, XML Schema
HTTP 1.1
UDP
TCP
IPv4IPv6

Figura 1. Pilha de protocolos da arquitetura de DPWS.

3.3 Padronização
Inicialmente produzido por um consórcio entre
Microsoft, Ricoh, Intel e Lexmark, atualmente padronizado pela OASIS, que através de um comitê técnico sob o codinome WS-DD, especifica além do
DPWS o SOAP-over-UDP e o Web Services Dyna-

1469

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

mic Discovery (Oasis, 2009). Atualmente as três especificações estão na versão 1.1.
3.4 Modelo Geral
O modelo computacional enfatizado na especificação DPWS preconiza que dispositivos podem
assumir diferentes papeis são ou consumidores de
serviços (clientes), ou serviços ou, ainda, ambos. No
caso de serviços, dois tipos são distinguidos serviços
de hospedagem (hosting services) e serviços hospedados (hosted services). A figura 2 ilustra como os
dois tipos de serviços se enquadram no modelo.
Hosting Service (Device)
Hosted Service
Hosted de
Service
(Serviços
Aplicação)
Hosted
Service
(Serviços
de
Aplicação)
(Serviços
Eventos de Aplicação)
Notificação
Inscrição (Subscription)
Serviços de Execução
- Engine do SOAP 1.2
- API de endereçamento (WS-Addressing)

Serviços de Eventos
- Gestão de Inscrições

Porta HTTP
Soap 1.2
WS-Addressing

Invocação

WS-Transfer
WS-MetadataExchange
WS-Eventing

Eventos
Eventos
operações
operações
Ativação de Serviço

Serviços de Decoberta
- Publicação de metadados Locais
- Cachê para Metadados Remotos

Porta multicast UDP
Soap 1.2 sobre UDP
WS-Addressing

WS- Discovery

Figura 2. Modelo computacional do DPWS

O chamado serviço de hospedagem (ou dispositivo) é uma parte importante do modelo DPWS. Vários dos aspectos não funcionais que atuam na evolução de serviços de aplicação estão concentrados neste
componente, na forma de serviços incluídos. Serviços
que permitem descoberta dinâmica e a troca de metadados (interfaces WSDL e seus attachments como o
WS-Policy, XML Schemas, etc) são exemplos destes
serviços fundamentados no componente dispositivo.
O próprio motor do protocolo SOAP 1.2 é também
parte destes serviços do componente de hospedagem.
Os serviços hospedados são SWs específicos
das aplicações e fornecem o comportamento funcional das mesmas. Um dispositivo pode possuir diversos serviços hospedados, cada um deles possuindo
seu endpoint próprio e é daí que vem o nome serviço
de hospedagem. Estes serviços hospedados dependem do dispositivo e fazem uso dos seus serviços
incluídos tal qual o processo de descoberta (Oasis,
2009).
O repertório destes serviços incluídos envolve o
conjunto de quatro áreas descoberta, eventos, descrição e trocas de mensagens.
Os Serviços de Descoberta Dinâmica (Jammes
et al, 2007) são usados por dispositivos para se anunciarem em uma rede e para serem descobertos por
clientes. O WS-Discovery usa o SOAP sobre a pilha
UDPMulticast IP para difundir e escutar mensagens
de descoberta. Em W3C (2011a), são definidos serviços de Publicação (fonte de eventos) e Inscrição em
uma fonte de eventos. A combinação de serviços de

ISBN 978-85-8001-069-5

aplicação com estes serviços incluídos permitem clientes se inscreverem para recepção de mensagens
assíncronas (eventos) produzidas por serviços hospedados. Os metadados de serviços hospedados ficam
disponíveis para clientes através do uso das especificações do WS-MetadataExchange (W3C, 2011b). As
trocas de mensagens ocorrem seguindo as especificações SOAP 1.2, como informado antes. As informações de cabeçalho do SOAP seguem o WSAddressing (W3C, 2006), permitindo a disponibilidade destas para qualquer protocolo de transporte
(HTTP, SMTP, TCP, UDP, etc.).
4 Gerenciamento Integrado da Manufatura
empregando DPWS
Um dos problemas encontrados na indústria é a
integração dos controladores_lógicos_programáveis
(CLPs) com ferramentas SCADA (Supervisory Control and Data Acquisition) e outros CLPs. Essa integração é feita através de drivers que precisam ser
desenvolvidos pelos desenvolvedores de cada sistema
SCADA.
Uma das soluções existentes para integração de
redes_industriais é o uso de Object linking and Embedding for Process Control (OLE for process control ou simplesmente OPC). O padrão OPC fornece
um meio comum para conectar fontes de dados como
CLPs, dispositivos de automação e banco_de_dados
com um servidor de aplicações. O padrão OPC conecta as fontes de dados (dispositivos de automação,
banco_de_dados) com as aplicações. Neste contexto,
atua como elemento de ligação entre aplicações
SCADA e os CLPs, por exemplo. O OPC é baseado
na tecnologia Distributed Common Object Model
(DCOM) (Modelo da Microsoft para computação
distribuída), permitindo a integração de aplicações
industriais e o compartilhamento de seus dados em
forma de objetos localmente através de uma Local
Area Network-LAN (W3C, 2009)
Entretanto, muitas características inerentes ao
DCOM prejudicam o desempenho das aplicações em
algumas situações. Algumas de suas desvantagens
são
 é dependente de plataforma (W3C, 2009)
 o tipo de mensagens geradas é muito complexo (W3C, 2009)
 ao mandar mensagens pela internet, torna-se
um grande problema a presença de firewalls (Kapsalis, 2003) (Lima Filho, 2005)
Outra tecnologia parecida com o DCOM é o
Common Object Request Broker Architecture
(CORBA) que é independente de plataforma, mas
contêm algumas deficiências do DCOM entre outras
(W3C, 2009).
Dentro desse contexto, a integração dos CLPs

1470

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

com os demais dispositivos do ambiente industrial,
utilizando tecnologia independente de plataforma,
com recursos de auto-descrição de suas funcionalidades, auto-descoberta, e com orientação a eventos, é
a principal questão deste trabalho.
4.1 Definição do Problema
A SOA implementada através de serviços Web
tem se tornado um padrão de desenvolvimento para a
maior parte das empresas. Investimentos de corporações como a Microsoft e a Sun (Oracle), criaram
ferramentas de desenvolvimento poderosas que facilitaram o desenvolvimento de serviços Web, que deixou de ser uma aposta, para se tornar um negócio que
tem previsão de gerar 30 bilhões de dólares e estar
presente em 80 das aplicações das grandes corporações até o final do ano de 2012. Estimativas apontam serviços Web, como a principal tecnologia para
integração_de_sistemas distribuídos por corporações
de tecnologia de informações (Henning, 2006).
Essa migração de tecnologias, como DCOM,
CORBA ou outros middlewares, para serviços Web
(Lima Filho, 2005), deve-se a algumas vantagens que
estão intimamente ligadas aos principais conceitos
adotados por serviços Web.
A primeira vantagem é o baixo acoplamento entre o cliente e o servidor. Ao utilizar SOA, o serviço
Web é desenvolvido para que possa ser consumido
pelo cliente com pouco ou nenhum conhecimento do
código existente no serviço Web, possibilitando a
interação entre cliente e servidor, utilizando apenas
as operações existentes no serviço Web. Quanto mais
baixo for o acoplamento mais fácil será a reutilização
de código (Henning, 2006).
Outra vantagem é que serviços Web utilizam
protocolos e padrões que estão realmente consolidados. O XML é usado como modo de formatação da
informação e utiliza o protocolo HTTP como transporte para essas informações. Como o HTTP é suportado por qualquer plataforma que permita a visualização de páginas na internet e, o XML é um padrão
de transporte e armazenamento de dados que utiliza
texto plano, os serviços Web se tornam independentes
de plataformas ou sistemas (W3C, 2009).
Como citado anteriormente, a utilização dos
preceitos da SOA através de serviços Web, como
ferramenta de integração entre sistemas distribuídos,
já é largamente utilizada nos departamentos de desenvolvimento de tecnologia de informações (TI).
Mas a idéia de utilização de serviços para a comunicação de sistemas_embarcados está apenas começando.
Através da SOA, este trabalho tem a finalidade
de expandir a integração entre os softwares SCADA
e SAD (Sistemas de Apoio  Decisão) em nível de
chão de fábrica, disponibilizando serviços embarcados nos CLPs.

ISBN 978-85-8001-069-5

Ao tratar o CLP como um serviço Web embarcado, ele terá as suas funcionalidades expostas, eliminando-se a necessidade de drivers de dispositivo,
ou tecnologias de integração como o OPC. Procedimentos de configuração ou reconfiguração poderão
ser automatizados, em grande parte, através das funcionalidades de autodescoberta e autodescrição inerentes aos serviços.
Como exemplo, uma fábrica de bebidas usa uma
das suas esteiras para encher garrafas de 600 mililitros, mas devido uma nova demanda resolve utilizar a
esteira para encher garrafas de 355 mililitros. Para
isto, dever-se-á configurar o tempo que cada garrafa
será cheia. Esta configuração pode ser feita diretamente pelo software_de_controle e supervisão, através
de uma operação existente no serviço Web embarcado no CLP.
Outro exemplo é o caso da substituição de um
CLP devido a um problema qualquer. Através do
serviço de descoberta, as características do novo CLP
são obtidas. Assim, é possível realizar-se a troca,
com a seleção automática do Serviço Web de configuração correspondente ao novo CLP, sem a necessidade de drivers ou do OPC. Quando o novo CLP for
instalado e ligado a rede, será enviada uma mensagem para o software SCADA anunciando o novo
CLP e descrevendo suas funcionalidades, que poderão ser agregadas pelo programa de controle e supervisão.
4.2 Solução Proposta
O modelo apresentado na Figura 3 é baseado
nos conceitos de SOA no âmbito de anunciar, descobrir e descrever dinamicamente os serviços existentes
em cada elemento do ambiente industrial. Para isso, é
proposta o DPWS como tecnologia de integração
(middleware) dos diversos elementos.

Figura 3. Modelo da Solução Baseado em SOA.

1471

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Ao embarcar um serviço Web em um dispositivo da indústria, como um CLP, se cria o conceito de
um driver universal, que suporta qualquer sistema
operacional ou plataforma_de_software. Assim que o
CLP for ligado  rede TCPIP, ele será anunciado, e
os programas interessados terão sua descrição para
poderem utilizá-lo.

métodos utilizados.

4.3 Plataforma de Hardware e Software
Como plataforma de desenvolvimento para o
serviço_web embarcado é proposta a plataforma
NETDUINO PLUS um hardware aberto e de domínio público baseado em um processador ARM7 da
Fabricante Atmel. Esta plataforma é programável em
linguagem C sobre ambiente o .NET Micro Framework (NETMF), versão 4.1.
O NETMF foi desenvolvido pela Microsoft como uma plataforma para desenvolvimento de sistemas_embarcados, com recurso de no mínimo 250 KB
de RAM. O principal objetivo é o desenvolvimento
de sistemas_embarcados para linguagens de alto nível, tornando o desenvolvimento mais rápido de aplicações_embarcadas e agilidade no trabalho de manutenção de código.
O desenvolvimento das aplicações utilizando
NETMF pode ser realizado através do programa Visual Studio, ferramenta amplamente difundida no
desenvolvimento de aplicações para Windows e Internet. Através do Visual Studio, por exemplo, são
fornecidas ferramentas de gravação, de debug e de
emulação.
Ao lançar o NETMF 4, em novembro de 2009,
a Microsoft liberou o seu código através da licença
apache 2.0, que permite o uso e distribuição do código fonte e da aplicação final, livre de royalties. O que
trará contribuições para a tecnologia de fora da Microsoft, o que ajudará no desenvolvimento do framework (Gandolpho, 2008).
Como cenário de validação foi adotado o modelo apresentado de um processo simples de envasamento de garrafas.
O processo_industrial é simples, contém dois
sensores, um temporizador no CLP e um motor. Apesar da sua simplicidade, é suficiente para estudar as
características do modelo.
4.4 Serviço Web Embarcado
O serviço Web foi desenvolvido através das bibliotecas fornecidas pelo .NET Micro Framework
(NETMF) da Microsoft.
Foi modelado de forma que fosse possível adquirir e enviar informações para o CLP. Para evitar
varreduras entre o cliente DPWS e o CLP foi criado
um evento para leitura de memória que é disparado
quando determinada posição de memória tem o seu
valor alterado. Na Figura 4, podem ser observados os
ISBN 978-85-8001-069-5

Figura 4. Classe representando o serviço Web do CLP.

O serviço foi modelado na forma da classe
clpService, que herda as características de um serviço hospedado (DpwsHostedService).
4.5 Cliente DPWS
Para desenvolver um cliente DPWS, foi basicamente necessário ter um cliente HTTP para o envio
de mensagens, um servidor HTTP para recebimento
de mensagens e um tratamento para mensagens
XML. Tudo organizado de forma que seja possível a
interpretação das mensagens SOAP (W3C, 2007) de
controle e de eventos.
4.6 Serviço de segurança
Em (Mendonça et al, 2010) foi proposta uma
extensão de segurança para o DPWS
com o
uso da especificação WS-Security, que foi utilizado
neste trabalho. A WS-Security é a principal especificação de segurança para Serviços Web e apóia-se nos
padrões XML-Signature (Bartel, 2002) e XMLEncryption (Imamura, 2002) para prover trocas de
mensagens seguras. A especificação visa ser flexível,
sendo possível utilizar uma grande variedade de mecanismos de segurança. Com isso é possível prover o
suporte para diferentes tipos de credenciais de segurança1 (security tokens), múltiplos formatos para assinatura e várias tecnologias de cifragem de dados. A
multiplicidade de opções é importante para alcançar a
interoperabilidade entre diferentes tecnologias de
segurança.
Na literatura, alguns trabalhos defendem de maneira mais enfática o uso do WS-Security no modelo
do DPWS (Hernández, 2009). Com isto, assumem
então as propriedades de confiabilidade, autenticidade e integridade como garantidas em nível de protocolos de aplicação (portanto, garantias fim a fim).
Este é o caminho tomado nas experiências com o
DPWS em nosso trabalho.
1

Entre os formatos de credenciais de segurança estão o
UserNameToken, X.509, Kerberos e SAML.

1472

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Como consequência, o presente trabalho utilizou no modelo do DPWS, o Serviço de Segurança,
ilustrado na Figura 1. Este serviço, por sua vez, trabalha de maneira independente interceptando mensagens de entrada e de saída do dispositivo, atuando no
tratamento dos aspectos de segurança nas mensagens,
sempre seguindo os padrões especificados pela WSSecurity. A Figura 5 exibe a arquitetura desse serviço.

Fig. 6. Esquema da envasadora de garrafas.

Serviço de Segurança

GERENCIADOR

Mensagens
SOAP

inicia contexto
envia política

notifica

Localizador de
políticas

Processador de
políticas

Cache de
Políticas

busca
registro

Contextos de Segurança de Canais Seguros
- Algoritmos, chaves, credenciais, etc.

cria

Recupera informações de contexto

encaminha

montado um protótipo conceitual de envasadora de
garrafas conforme o esquema da figura 6.

Motor de segurança
WS-Security
- XML-Encryption
- XML-Signature

Crifragem
requisita

Assinaturas
requisita

Figura 5. Funcionalidades do Serviço de Segurança

A Tabela 1 descreve os módulos do Serviço de
Segurança apresentados na Figura 5 e suas
funcionalidades. Dos elementos exibidos na figura,
cifragem e assinaturas são implementados conforme a
necessidade da aplicação desenvolvida com o
dispositivo, e os outros são elementos fixos da
arquitetura. O motivo para a variação das APIs de
cifragem e assinaturas está na diversidade de
algoritmos de criptografia existentes. Cada
dispositivo poderá ter sua implementação de acordo
com sua capacidade computacional e requisitos de
segurança.

O processo começa com o motor ligado sinalizado pelo led do motor (LM), que gira até a garrafa
atingir o sensor da válvula (SV). Com o motor parado, é aberta a válvula (LV) durante um tempo préprogramado no temporizador de válvula (TV). O
tempo em TV é o que define a quantidade de líquido
a ser carregado na garrafa. Quando o temporizador
alcançar o valor esperado, a válvula será fechada e o
motor continuará girando até o sensor da caixa (SC),
o que indica que a garrafa está dentro da caixa. Por
último quando a última garrafa for colocada na caixa
será ativado o led da caixa (LC), que indica que caixa
está cheia.
O serviço DPWS é responsável pelo controle e
supervisão e suportará as seguintes funcionalidades
 Regulagem do tempo de válvula aberta
quantidade de garrafas por caixa
 Início da produção
 Parada da produção
 Envio de notificações a cada caixa cheia
concluída.

Tabela 1. Módulos do Serviço de Segurança
Módulos
Cifragem
Assinaturas
(APIs)

Contextos
segurança
Cache
políticas

Função
e Estes módulos estão disponíveis em forma de
bibliotecas e são responsáveis pelas cifragens e
decifragens de dados e a assinatura e a verificação das
mesmas, respectivamente. Suas implementações
variam de acordo com as necessidades e a capacidade
do dispositivo.
de Para cada canal seguro estabelecido com o dispositivo
é criado um contexto de segurança, armazenado na
forma de política de segurança (WS-Policy).
de Módulo que armazena as políticas (metadados) de
interfaces de serviços que o dispositivo tem
conhecimento recente.

de Este componente é usado na recuperação e
armazenamento de políticas. Identifica e armazena no
cache local as políticas compartilhadas com seus pares
conhecidos.
Processador de Realiza comparação entre políticas. No processo de
estabelecimento de canal seguro, será criado um
políticas
contexto de segurança válido quando esta comparação
for bem sucedida.
Motor
de Cifra, decifra, assina e verifica assinaturas em
mensagens SOAP seguindo o WS-Security.
segurança
Elo entre os componentes, responsável por tomadas de
Gerenciador
decisões e respostas aos pares. É a partir deste módulo
que ocorrem as interceptações necessárias para a
implantação dos mecanismos e políticas que atuam
sobre as mensagens.
Localizador
políticas

5 Resultados
Para avaliar as funcionalidades da proposta de
gerenciamento da manufatura baseado em DPWS foi
ISBN 978-85-8001-069-5

Para gerar a notificação de caixa cheia concluída foi realizada uma varredura da posição de memória que conta as garrafas já envasadas entre o serviço DPWS e o CLP.
O cliente DPWS foi o responsável por realizar a
descoberta do serviço DPWS, enviar as mensagens
de controle e receber as notificações de caixa concluída.
Sempre que um dispositivo que contém um serviço DPWS é ligado na rede_local, ele envia uma
mensagem hello na forma de multicast para qualquer
cliente DPWS presente na rede. A parte do programa
cliente DPWS responsável por receber esta mensagem de anúncio no programa cliente DPWS foi denominado de Explorer. Nele são listados os serviços DPWS da rede_local e obtidas informações detalhadas a respeito de cada um deles.
No Explorer do cliente é possível realizar
uma sondagem da rede (probe) para verificar a existência de todos os dispositivos presentes na rede_local, uma mensagem de resposta do tipo resolve verifica a existência de determinado dispositivo e uma
mensagem do tipo get obtém a descrição de disposi-

1473

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

tivo, modelo, serviço de hospedagem e serviços hospedados. No Explorer a mensagem hello do serviço
DPWS é automaticamente reconhecida como um
dispositivo.
Depois do Explorer do cliente DPWS descobrir ou capturar o anúncio de um serviço CLP o cliente DPWS poderá consumir o serviço através do
processo denominado Envasador, onde ocorrerá o
controle e supervisão do processo_industrial. Aqui
são utilizadas as principais operações disponíveis
pelo serviço DPWS. Através dele é possível obter e
definir o tempo de abertura de válvula e quantidade
de garrafas que serão armazenadas por caixa. Também é possível obter a quantidade de garrafas por
operação de controle. A quantidade de caixa é alimentada através de um evento disparado a cada caixa
concluída.
Foram realizados ensaios de desempenho da
troca de dados em uma rede ethernet a 100 megabitss. Para realizar a avaliação_de_desempenho das
trocas de mensagens do DPWS, foi utilizado como
ferramenta para medição o software Wireshark. Este
software é um analisador de rede, mais conhecido
como sniffer, que captura os pacotes enviados e
recebidos da placa de rede, documentando o
momento de chegada ou envio de determinado
pacote.
Com esta ferramenta foi cronometrado o tempo
entre o envio e a resposta das mensagens do DPWS.
Os resultados podem ser observados na Tabela 2.

Tabela 2  Tempo entre troca de mensagens.
Operação

Tempo
Conexão
(segundos)

Probe

Sem conexão
0.355

restart (oneWay)
readHoldingRegisters
(twoWay)
presetSingleRegister (twoWay)
subscribe
RegisterChanged (Eventing)

Tempo
requisição 
resposta
(segundos)
1.180

Tempo
Total (segundos)

0.547

0.902

0.357

0.872

1.220

0.349

0.798

1.147

0.361

1.109

1.471

0.023

0.052

0.211

1.180

Observando a Tabela 2 pode-se verificar que se
tratando de mensagens de controle o DPWS com a
inclusão do serviço de segurança tem uma latência
considerável, levando mais de um segundo para mensagens de controle simples. Mas as mensagens de
eventos, por evitar as varreduras na rede, são muito
rápidas levando apenas 212 milissegundos para serem completadas.
Foram realizadas medições com o mesmo apa-

ISBN 978-85-8001-069-5

rato, mas utilizando-se um servidor OPC no lugar de
Serviços Web e constatou-se que a leitura da tag (variável) consome em torno de 480 milissegundos, valores similares foram encontrados na literatura (Galli,
2009). Este tempo confrontado com o readHoldingRegisters (twoWay) é mais rápido. No entanto o OPC
não dispõe de serviço de notificação de eventos como
no DPWS. A utilização de notificação de eventos
para supervisão do processo utiliza protocolo UDP, o
que justifica a baixa latência verificada na tabela I.
Assim, com este recurso o uso do DPWS se torna
bastante viável. Além disso, não existe implementação de segurança intrínseca a plataforma OPC empregada, o que foi implementado neste trabalho.
6 Conclusão
A utilização de SOA e o paradigama IoT para
integração entre dispositivos do chão de fábrica e
sistemas de supervisão e controle mostrou-se como
uma alternativa promissora.
O uso do DPWS como middleware para esta integração apresentou um desempenho pobre para aplicações que exijam menor latência. No entanto, o objetivo do trabalho foi experimentar e validar a funcionalidade do modelo.
Como trabalhos futuros estão o estudo e implementação de uma abordagem de supervisão e controle de redes_industriais empregando o novo padrão
OPC-UA, que embarca na nova especificação do
OPC o suporte de middleware SOA para dispositivos
industriais.
Referências Bibliográficas
Atzori, L. Iera A. and Morabito, G. (2010). The Internet of Things A survey. Computer Networks, Vol. 54, No. 15, pp. 2787-2805.
Bartel, M., Boyer, J., e Fox, B. (2002). XMLSignature Syntax and Processing. W3C.
Galli, P. (2009). Microsoft to Open Source the. NET
Micro Framework. Disponivel em
<httpport25.technet.comarchive20091116micro
soft-to-open-source-the-net-micro-framework.aspx>.
Acesso em 29 maio 2010.
Gandolpho, C. (2008). Cresce uso de SOA. Disponível em
<httpinfo.abril.com.brcorporateinfraestrutu
racresce-uso-de-soa.shtml>. Acesso em 10
abr. 2010.
Henning, M. (2006). The Rise and Fall of Corba.
ACM QUEUE, New York, Vol. 4, No. 5, pp.
28-34.
Hernández, V., López, L., Prieto, O., Martínez, J. F.,
García, A. B. e Da-Silva., A. (2009) Security
Framework for DPWS Compliant Devices.
In Emerging Security Information, Systems

1474

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

and Technologies, 2009. SECURWARE 09.
Third International Conference.
Imamura, T., Dillaway, B., e Simon, E. (2002). XML
Encryp. Syntax and Proc. W3C.
Jammes, F. and Smit H. (2005). Service-Oriented
Paradigms in Industrial Automation. In 23rd
IASTED International Multi-Conference Parallel and Distributed Computing and Networks, Innsbruck, Áustria, pp. 716-723.
Jammes, F. Mensch, A. and Smit, H. (2007). Service-Oriented Device Communications Using
the Devices Profile for Web Services. Article
No. 16. In 21st International Conference on
Advanced Information Networking and Applications Workshops, Ontario, Canada.
Kapsalis, V. et al. (2003). Architecture for Webbased Services Integration. In 29th Annual
Conference of the IEEE, Virginia, pp. 866871.
Lima Filho, F. S. de. (2005). Gerência de Informação
de Processos Industriais Usando Web Service.
Monografia (Curso Superior de Tecnologia
em Desenvolvimento de Software)  CEFET
RN. GEINF, Natal, 53 f.
Mahnke, W. Leitner, S. H. and Damm, M. (2009).
OPC Unified Architecture. Springer, Germany.
Mendonça, I. T. M. Fraga, J. da S. and Dias, R. A.
(2010). Extensão de Segurança para o Perfil
DPWS. In X Simpósio Brasileiro em Segurança da Informação e de Sistemas Computacionais, Fortaleza.
Oasis. Web services discovery and web_services devices profile (WS-DD). (2009). Disponível
em <httpwww.oasisopen.orgcommitteestchome.php?wgabbrev
ws-dd>. Acesso em 20 abr. 2012.
Papazoglou, M. P. (2003). Service-Oriented Computing Concepts, Characteristics and Directions.
In Fourth International Conference on Web
Information Systems Engineering (WISE03),
Roma, pp. 3-12.
Souza, L. M. S. de et al. (2008). Socrades A Web
Service Based Shop Floor Integration Infrastructure. In Proc. of the Internet of Things
(IOT), Springer.
Web Services Dynamic Discovery. (2005). Disponível em
<httpschemas.xmlsoap.orgws200504disc
overy>. Acesso em 19 out. 2009.
W3C. Web Services Addressing 1.0  Core. (2006).
Disponível em <httpwww.w3.orgTRwsaddr-core>. Acesso em 19 out. 2009.
W3C. Web Services Eventing. (2011a). Disponível
em <httpwww.w3.orgTRws-eventing>.
Acesso em 20 abr. 2012.
W3C. Web Services Metadata Exchange. (2011b).
Disponível em <httpwww.w3.orgTRwsmetadata-exchange>. Acesso em 20 abr.
2012.
ISBN 978-85-8001-069-5

1475