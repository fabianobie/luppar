Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

ALGORITMO IMUNO INSPIRADO PARA MINIMIZAÇÃO DE MAKESPAN EM MÁQUINAS
PARALELAS NÃO RELACIONADAS, COM TEMPOS DE PREPARAÇÃO DEPENDENTES DA
SEQUÊNCIA
RODNEY O.M. DIANA, EDUARDO C. DE SIQUEIRA, MOACIR F.F. FILHO, SÉRGIO R. DE SOUZA
Centro Federal de Educação Tecnológica de Minas Gerais
E-mails rodneyoliveira@dppg.cefetmg.br, eduardosiqueira@dppg.cefetmg.brfranca@des.cefetmg.br,
sergio@dppg.cefetmg.br

Abstract - This paper has its focus in the unrelated parallel machine scheduling problem with makespan minimization. Setup
times between jobs are sequence and machine dependent. We propose and evaluate an immune inspired algorithm, based on
clonal selection process, named CLONALG. Mutation and maturate algorithm operators are specifically proposed to the problem
at hand. In the maturate process is applied a local search based on the Variable Neighborhood Descent (VND) algorithm. The results show that the proposed algorithm has a great performance, since it leads to a lot of improvements on the set of instances
used in other papers published in the literature.
Keywords - Parallel machines, Scheduling, Makespan, Clonal Selection Algorithm, CLONALG, VND
Resumo - O foco deste trabalho é o estudo do problema de sequenciamento_de_tarefas em máquinas_paralelas não relacionadas,
com objetivo de minimização do makespan. No problema, os tempos de preparação entre tarefas são considerados dependentes
da sequência de processamento das tarefas, bem como da máquina em que ocorre o processamento. Propõe-se, para a resolução
do problema, a implementação do algoritmo imuno inspirado CLONALG, baseado no processo de seleção clonal. Foram desenvolvidos operadores de mutação e maturação específicos para o problema. No operador de maturação é aplicado um processo de
busca local baseado no método VND. Os resultados mostram que o algoritmo apresenta bom desempenho, melhorando os resultados conhecidos de 80 das instâncias utilizadas neste trabalho.
Palavras-chave 

1

Introdução

O problema de seqenciamento de tarefas em
máquinas_paralelas consiste em alocar um conjunto N
de n tarefas para processamento em um conjunto M
de m máquinas_paralelas. Cada tarefa requer um
determinado tempo para processamento, que pode
variar dependendo da máquina em que a tarefa for
processada. Neste caso, as máquinas são classificadas como não relacionadas (Kampke, 2010). Em
diversos cenários, uma tarefa i não pode ser iniciada
imediatamente após o término de outra tarefa j, devido  necessidade de configuração da máquina para o
processamento da referida tarefa i. O tempo decorrente desta configuração é denominado tempo de
preparação. Segundo Allahverdi (1999), na maioria
dos trabalhos sobre seqenciamento de tarefas, os
tempos de preparação são desconsiderados ou são
inseridos nos tempos de processamento das tarefas.
Em Vallada e Ruiz (2011) e Kampke (2010), são
apresentados casos em que os tempos de preparação
dependem não apenas da tarefa i a ser processada,
mas também da tarefa j que a precede e da máquina k
em que ambas as tarefas são processadas.
Segundo Vallada e Ruiz (2011), a minimização
do instante de conclusão da última tarefa a deixar o
conjunto de máquinas, conhecido por makespan ou
 , é o critério de otimização mais considerado em
problemas de sequenciamento_de_tarefas. Este critério visa uma melhor utilização das máquinas, o que
equivale a menores ociosidades (Pinedo, 2008). Levando em consideração estes aspectos e a representa-

ISBN 978-85-8001-069-5

ção apresentada em Pinedo (2008), o problema aqui
tratado pode ser representado por   .
Algoritmos genéticos têm sido largamente utilizados em problemas de seqenciamento (Allahverdi,
2008). No entanto, algoritmos imuno inspirados
ainda são pouco explorados, como pode ser constatado em Allahverdi (1999, 2008). Neste contexto, o
presente trabalho apresenta uma implementação do
algoritmo imuno inspirado CLONALG, proposto por
Castro e Von Zuben (2000).
Na Seção 2, é detalhado o modelo_matemático
para o problema estudado. Na Seção 3, são apresentados e detalhados o algoritmo imuno inspirado
seus operadores e um método de busca local baseado na metaheurística Variable Neighborhood Descent (VND). As instâncias e os experimentos são
detalhados na Seção 4. Na Seção 5, os resultados
obtidos são discutidos. Por fim, na Seção 6, são apresentadas as conclusões.
2

Modelo Matemático

O modelo_matemático para o problema é aquele
apresentado em Vallada e Ruiz (2011), em que a
seguinte notação deve ser considerada







tempo para processamento da tarefa j na
máquina i.
 tempo de preparação da máquina i para que a
tarefa k possa ser executada imediatamente
após a tarefa j.
  1 se a tarefa j precede (imediatamente) a

1113

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

 

tarefa k na máquina i
 0, caso contrário.
instante de conclusão da tarefa j na máquina i.



min 



 1,   

(2)

!  

(3)

"  

(4)

, !,   , !  , "  

(5)



  




  









 ,





1,



1,




(1)

  ()1 *  +       ,
!  0  ,   , !  , "  

(6)

  0, !  , "  

(8)

  0, "  



 , !  , "  

 0,1,

!  0  ,   , !  , "  

(7)
(9)
(10)

O conjunto de restrições (2) estabelece que cada
tarefa tem apenas um predecessor e é executada em
apenas uma máquina. As restrições (3) garantem que
há, no máximo, um sucessor para cada tarefa e as
restrições (4) garantem que as tarefas fictícias iniciais
de cada máquina têm apenas um sucessor. Por meio
das restrições (5), se uma tarefa j for processada na
máquina i, existirá, em tal máquina, uma tarefa h que
precede a tarefa j. As restrições (6) são utilizadas
para promover uma correta alocação temporal de
qualquer tarefa k, processada imediatamente após
outra tarefa j, em uma dada máquina i. No caso de
duas tarefas que não ocupam posições adjacentes na
seqência de uma dada máquina ou que estão alocadas em máquinas distintas (casos em que a variável
é nula), as restrições (6) são automaticamente

satisfeitas, graças  constante V (positiva e suficientemente grande). As restrições (7) definem como 0 o
instante de conclusão da tarefa fictícia inicial de cada
máquina, enquanto que as restrições (8) limitam os
instantes de conclusão de qualquer tarefa j (j1,.., n)
a valores não-negativos. As restrições (9) estabelecem o makespan como sendo maior que ou igual ao
instante de conclusão de qualquer tarefa. Finalmente,
as restrições (10) definem as variáveis de decisão
 como binárias.
3

Algoritmo Imuno Inspirado

O algoritmo imuno inspirado apresentado neste
trabalho é baseado no algoritmo CLONALG, proposto por Castro e Von Zuben (2000). O algoritmo,
fundamentado no processo de seleção clonal presente
no sistema imunológico dos seres vivos, é dividido
ISBN 978-85-8001-069-5

em 6 fases. A primeira fase representa a construção
de um conjunto Pu com P soluções iniciais (também
conhecidas como anticorpos). Na segunda fase, as
soluções são ordenadas de acordo com valores nãocrescentes de uma função de avaliação (afinidade).
Na terceira fase (clonagem), são geradas soluções
idênticas s soluções do conjunto inicial. O número
de clones gerados a partir de uma determinada solução inicial depende da afinidade da referida solução.
Quanto maior a afinidade, maior o número de clones
gerados. Como em um processo biológico, os anticorpos clonados estão sujeitos a mutações, que constituem a quarta fase. Na quinta fase, denominada
maturação, executam-se buscas locais a partir de
cada um dos clones (mutados ou não). Na sexta e
última fase, um novo conjunto Pu+1 com P soluções é
formado a partir das soluções obtidas após as buscas
locais, juntamente com aquelas do conjunto Pu anterior. Neste processo, são mantidas as soluções com
as maiores afinidades e com as maiores diversidades
entre si, enquanto que as demais são descartadas. Na
Figura 1, é apresentado o pseudocódigo do algoritmo
CLONALG. As características e particularidades de
cada uma das fases são detalhadas nas próximas
seções.
1 u  0
2 Gerar população inicial Pu
3 enquanto critério de parada não satisfeito, faça
4
Ordenar as soluções em Pu, segundo a afinidade
5
Clonar os anticorpos de Pu, gerando um novo conjunto
Pt, com t anticorpos
6
Submeter os elementos de Pt  mutação
7
Maturar os elementos de Pt
8
Selecionar, em Pu  Pt, P elementos com as maiores
afinidades e maiores diversidades entre si e adicionálos  nova população Pu+1
9
u  u + 1
10 fim enquanto
Figura 1. Pseudocódigo Algoritmo CLONALG.

3.1 Representação de uma solução e geração da
população inicial
Para o problema aqui tratado, uma solução (anticorpo) é representada como um vetor de m posições,
em que cada posição representa uma máquina. Cada
posição do vetor de máquinas contém um apontador
para um vetor de tarefas, em que a posição da tarefa
representa a ordem na qual ela é processada. Na
Figura 2, ilustra-se a representação de uma solução
para uma instância com 4 máquinas e 11 tarefas.
Como exemplo, na máquina M1 são processadas as
tarefas T3, T5 e T11, nesta ordem.
M1
11
M2

T3

T5

T11

T10

M3

T4

T7

M4

T2

T9

T8

T1

T6

Figura 2. Representação de uma solução.

1114

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

A população inicial (conjunto P0) consiste em P
anticorpos, cada um deles gerado aleatoriamente,
conforme explicado a seguir. Dados os conjuntos 
- (cujos elementos são as t
(com m máquinas) e 
tarefas ainda não alocadas), gera-se um par .",  de
números inteiros aleatórios, no qual "  .1, 0 e
- . A k-ésima tarefa é retirada do conjunto
  .1, 
- e alocada na última posição da máquina i. O pro
- se torne vazio.
cesso é repetido até que o conjunto 
3.2 Ordenamento das soluções no conjunto Pu
O ordenamento das soluções do conjunto Pu se
dá de acordo com valores não-crescentes da função
de afinidade definida na expressão (11), em que
, é o makespan da solução i e max   representa o makespan da pior solução do conjunto Pu.
A solução com o mais elevado valor da função de
afinidade ocupa a primeira posição no conjunto Pu,
enquanto que a solução com o mais baixo valor ocupa a última posição. Empates são desfeitos aleatoriamente.
,
4  1 *
max  

A probabilidade de ocorrência de mutação é definida como pmut. Para cada clone, um número randômico r, entre 0 e 1, é sorteado. Se r < pmut, o
clone sofrerá mutações. Em seguida, para os casos
em que r < pmut, o total de mutações é definido,
gerando-se um número randômico entre 1 e mutmax.
O tipo de mutação a ser efetuado é escolhido randomicamente, com probabilidades pmutti (mutações
por trocas internas), pmutie (mutações por inserções
externas) e pmutte (mutações por trocas externas).
A Figura 3 mostra exemplos dos movimentos de
troca e inserção.

(12)

O objetivo da mutação é fazer com que os clones
gerados a partir de um mesmo anticorpo alcancem
diferentes regiões do espaço de soluções, conferindo
uma diversidade controlada ao algoritmo.
Neste trabalho, são utilizados 3 tipos de movimentos para produzirem mutações nos clones gerados na fase anterior. São eles




Troca Interna duas tarefas, k e w, atribuídas a
uma mesma máquina i, têm suas posições trocadas entre si.
Inserção Externa uma tarefa k atribuída a uma
máquina i é realocada em uma máquina j, i  j.
Troca Externa seja k uma tarefa atribuída 
máquina i e w uma tarefa atribuída  máquina j,
com i  j. Em decorrência de um movimento de
troca externa, a tarefa k passa a ser atribuída 
máquina j e a tarefa w passa a ser atribuída 
máquina i.

ISBN 978-85-8001-069-5

T5
T2

T1

T3

T4

T7
T6

T1

T3

T7

T6

T4

M1

T5

M2

T2

M1

T5

M2

T2

T1

T3

T4

T6

T7

T1

T3

T6

T7

T4

M1
M2

T5

M1
M2

T5

T2

T2

T1

T3

T6

T7
T4

T1

T3

T6

T4
T7

(c)

Figura 3. (a) Troca interna da tarefa T4 com a tarefa T6, na máquina M2. (b) Inserção da tarefa T4 na última posição da máquina
M2. (c) Troca externa entre as tarefas T4 e T7.

3.5 Maturação

3.4 Operador de Mutação



M1
M2

T2

(b)

3.3 Processo de Clonagem

D E F
89<>?<9@?AB  C
G

T5

(a)

(11)

No processo de clonagem, cópias idênticas das
soluções do conjunto Pu são geradas. Denotando por
p a solução que ocupa a p-ésima posição no conjunto
ordenado Pu, o total de clones da referida solução é
dado pela expressão (12), em que B é um número
positivo, definido experimentalmente. A notação 567
representa o menor inteiro maior que ou igual a f.

M1
M2

No presente trabalho, o processo de maturação
de um clone (mutado ou não) consiste na aplicação
da heurística Variable Neighborhood Descent (VND)
que promove a exploração cíclica das vizinhanças
associadas aos movimentos definidos na Seção 3.4.
Como o objetivo é a minimização do makespan, os
movimentos realizados sempre têm que envolver a
máquina i com o maior instante de conclusão da
última tarefa (   ).
3.5.1

Exploração da vizinhança de trocas
internas

Na exploração da vizinhança de trocas internas,
cujo pseudocódigo é apresentado na Figura 4, são
avaliadas as trocas entre cada par de tarefas k e w
atribuídas  máquina i, "   , realizando-se o
movimento que promove a maior redução de
makespan, se tal movimento existir.
1 para cada tarefa k da máquina i, "    faça
2
para cada tarefa w da máquina i, w  k, faça
3
Troque k com w
4
Avalie a nova solução
5
Desfaça a troca
6
fim para

1115

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

7 fim para
8 se a melhor troca diminuir Ci, então
9
Efetive a melhor troca

Figura 4. Exploração da vizinhança de trocas internas.

3.5.2

Exploração da vizinhança de inserções
externas

As máquinas são ordenadas em uma lista L,
segundo valores não-crescentes do instante de
conclusão da última tarefa. Assim, a máquina i, tal
que    , ocupa a primeira posição da lista. Seja
L* a lista composta pelas m* últimas máquinas de L e
j uma máquina em L*, escolhida randomicamente. A
exploração da vizinhança de inserções externas
(pseudocódigo mostrado na Figura 5) consiste em
avaliar a inserção de cada tarefa k da máquina i em
cada uma das posições de uma máquina j, escolhida
randomicamente em L*. É realizado o movimento
que promove a maior redução de makespan, se tal
movimento existir. Ressalta-se que a vizinhança de
inserções externas é reduzida.
1
2
3
4
5
6
7
8
9
10

Defina as listas L e L*
i  Primeira máquina da lista L
j  Máquina escolhida randomicamente na lista L*
para cada tarefa k da máquina i
Insira a tarefa k em cada uma das posições da máquina j
Avalie a nova solução
Desfaça a inserção
fim para
se melhor inserção diminuir Cmax faça
Efetive a melhor inserção
Figura 5. Exploração da vizinhança de inserções externas.

3.5.3

Exploração da vizinhança de trocas
externas

Considerando-se as listas L e L* e as máquinas i
e j definidas na Seção 3.5.2, cada uma das k tarefas
da máquina i é trocada com cada uma das w tarefas
da máquina j. É realizado o movimento que promove
a maior redução de makespan, se tal movimento
existir. O pseudocódigo da exploração da vizinhança
de trocas externas é apresentado na Figura 6. A
vizinhança de trocas externas também é reduzida.
1
2
3
4
5
6
7
8
9
10
11
12

Defina as listas L e L*
i  Primeira máquina da lista L
j  Máquina escolhida randomicamente na lista L*
para cada tarefa k da máquina i
para cada tarefa w da máquina j, faça
Troque k com w
Avalie a nova solução
Desfaça a troca
fim para
fim para
se melhor troca diminuir Cmax faça
Efetive a melhor troca
Figura 6. Exploração da vizinhança de trocas externas.

3.5.4

Variable Neighborhood Descent (VND)

A heurística Variable Neighborhood Descent
(VND), (Mladenovic, 1997) consiste na exploração,
ISBN 978-85-8001-069-5

de modo cíclico, de diferentes vizinhanças. Começase pela vizinhança de trocas internas (Seção 3.5.1),
que é explorada até que um ótimo local seja
alcançado. Passa-se, então,  exploração da
vizinhança de inserções externas. Existindo
movimentos que diminuam o valor da função
objetivo, realiza-se o melhor deles e retoma-se a
exploração da vizinhança de trocas internas. Caso
contrário, inicia-se a exploração da vizinhança de
trocas externas (Seção 3.5.3). Em caso de melhora da
solução, todo o processo é reiniciado. Caso contrário,
o processo está terminado. Na Figura 7 é apresentado
o pseudocódigo do VND.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

V1 Vizinhança de trocas internas
V2 Vizinhança de inserções externas
V3 Vizinhança de trocas externas
continua  verdadeiro
enquanto continua faça
Realize exploração de V1
se exploração de V1 diminuir Cmax então
Retornar para o passo 5
Realize exploração de V2
se exploração de V2 diminuir Cmax então
Retornar para o passo 5
Realize busca local parcial em V3
se exploração de V3 diminuir Cmax então
Retornar para o passo 5
continua  falso
fim enquanto
Figura 7. Pseudocódigo do VND para o problema estudado.

3.6 Geração da próxima população  Conjunto PIJK

Os anticorpos que irão integrar a próxima
população FLJK são selecionados a partir do conjunto
FL  FM , em que o conjunto FL representa a
população da iteração anterior e FM representa o
conjunto dos clones maturados. Um total de X
anticorpos é selecionado dentre os mais aptos (não
sendo admitidas repetições). A população FLJK é
completada com F *
anticorpos, escolhidos
aleatoriamente. Esta última seleção é utilizada para
garantir a diversidade na população.
4

Experimentos

4.1 Instâncias
Os experimentos realizados neste trabalho utilizam um conjunto de 1620 instâncias utilizadas por
Vallada e Ruiz (2011) e disponíveis em Ruiz (2012).
Este conjunto de instâncias é dividido em dois grupos, denominados Small e Large. Suas características
são apresentadas na Tabela 1.
Tabela 1. Tipos de instâncias
Tipo de Instância

Small

Large

N de Instâncias

620

1000

N de Tarefas

6, 8, 10, 12

50, 100, 200, 250

N de Máquinas

2, 3, 4, 5

10, 15, 25, 20, 30

Distribuição dos tempos de
preparação

1-9, 1-49,
1-99, 1-124

1-9, 1-49, 1-99,
1-124

1116

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Distribuição dos tempos de
processamento

1-99

1-99

Valores ótimos conhecidos

Sim

Não

Para a validação do algoritmo implementado, foram consideradas as 620 instâncias do grupo Small
(Tabela 1), cujos valores ótimos são conhecidos.
Entende-se por validação a verificação da correção
da implementação realizada. A validação pode ser
considerada bem sucedida, uma vez que todos os
valores ótimos conhecidos foram alcançados. Já as
instâncias do grupo Large foram utilizadas para avaliar o desempenho do algoritmo.
4.2 Parâmetros
Todos os parâmetros utilizados no trabalho
foram definidos empiricamente. Os valores estão
apresentados na Tabela 2.
Tabela 2. Parâmetros utilizados
Parâmetro
Tamanho da População (P)
Número gerações
Probabilidade de ocorrência de mutação, pmut
Número máximo de mutações, mutmax

Valor
adotado
20
500
100
3
0.6

B

15

X
Probabilidade de mutação com trocas externas,
pmutte
Probabilidade de mutação com inserções externas,
pmutie
Probabilidade mutação com trocas internas,
pmutte
NE

50
70
30
30

4.3 Medida de Desempenho
Para medir o desempenho do algoritmo, foi utilizada a métrica apresentada em Vallada e Ruiz
(2011), denominada Relative Percentage Deviation
(RPD). Esta métrica está apresentada na expressão
(13). Nesta expressão, MethodSol representa o valor
de makespan obtido com o algoritmo proposto, enquanto que Bestsol representa o melhor valor encontrado por Vallada e Ruiz (2011).

RPD 

Methodsol  Bestsol
*100
Bestsol

(13)

4.4 Ambiente de Teste
O algoritmo foi implementado em Java, JDK 1.6.
Os testes foram executados em um computador com
processador Intel i5-2450M com 2.5 GHz, 4GB de
memória RAM e em ambiente Windows 7 Home
Premium. Apesar de o computador utilizado possuir
2 núcleos de processamento, não se fez uso de programação paralela.

ISBN 978-85-8001-069-5

5

Resultados

Ao se utilizar as instâncias do grupo Small para
validação, foram obtidas todas as soluções ótimas
conhecidas, em todos os experimentos realizados.
Os resultados obtidos ao se resolver as instâncias
do grupo Large são apresentados na Tabela 3. Cada
grupo de instâncias com mesmas dimensões (n x m) é
composto por 40 instâncias. Os resultados
apresentam a média dos valores encontrados para as
instâncias do grupo. Cada instância foi processada 30
vezes pelo algoritmo.
O makespan mínimo para cada instância foi
obtido através dos experimentos realizados por
Vallada e Ruiz (2011), os quais propõem um
algoritmo_genético (AG) e comparam os resultados
do AG com a heurística de inserção múltipla (MI) e
com o algoritmo_genético de chaves aleatórias
(RKGA), ambos propostos por Kurz e Askin (2001).
Vallada e Ruiz (2011) ainda comparam seus
resultados com a heurística proposta por Rabadi
(2006).
Na Tabela 3,  representa o melhor valor encontrado pelo algoritmo aqui proposto a média das
soluções encontradas é dada por OP  D?AQRS é o
melhor valor conhecido para a instância. Os valores
RDP, calculados para  e OP , são representados por TFQRS e TFOP , respectivamente. A coluna UVOMMOW representa o número de instâncias (de um
dado grupo de 40) em que os melhores valores conhecidos foram superados, isto é,  X D?AQRS .
Os valores RDP negativos representam situações em
que o algoritmo aqui proposto superou o melhor
valor conhecido. Por outro lado, valores positivos de
RDP estão associados aos casos nos quais o algoritmo proposto não conseguiu atingir o Best sol .
Como pode ser observado na Tabela 3, o algoritmo proposto conseguiu, em 80 das instâncias,
resultados melhores que aqueles obtidos pelos experimentos realizados por Vallada e Ruiz (2011). De
acordo com os valores do RDP, observa-se que em
grande parte das instâncias ocorreu uma melhora
significativa do D?AQRS , a qual chegou a 34,24 nas
instâncias com 200 tarefas e 30 máquinas. O desvio
médio apresentou certa variação em relação ao desvio para a melhor solução encontrada, mas ainda
assim a média das soluções apresentou melhora em
relação ao D?AQRS .
Nas instâncias com 10 máquinas, o algoritmo
proposto não apresentou o mesmo desempenho,
tendo melhorado o Best sol em apenas 39 dentre 200
instâncias com este número de máquinas. Mesmo
assim, em tais instâncias, os desvios entre os resultados encontrados pelo algoritmo e o D?AQRS correspondente não ultrapassam os 5.
Levando em consideração estes resultados,
percebe-se que o algoritmo proposto apresenta um

1117

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

desempenho superior quando comparado ao AG de
Vallada e Ruiz ( 2011).

Tabela 3. Resultados
Grupo de
Instância
50 x 10

S max
99

107

97

50 x 15

46

52

50 x 20

29

34

50 x 25

22

50 x 30

18

100 x 10

Smed Bestsol RDPsol RDPmed
1,30

NI Better

9,28

16

59

-19,12 -9,75

40

40

-23,44 -11,55

40

27

30

-23,52 -6,69

36

23

23

-17,90 3,36

186

199

176

100 x 15

89

98

100 x 20

55

62

100 x 25

40

100 x 30

33

150 x 10
150 x 15

5,22

32

11,87

10

107

-14,54 -7,10

40

74

-22,51 -13,42

39

47

58

-25,65 -14,09

36

39

46

-22,77 -8,84

31

267

283

253

11,52

8

129

139

151

-14,48 -8,00

40

150 x 20

79

87

107

-25,49 -18,31

40

150 x 25

58

65

84

-31,14 -22,38

40

150 x 30

46

53

68

-31,68 -21,95

34

200 x 10

350

368

334

200 x 15

166

177

200 x 20

102

200 x 25

73

200 x 30

5,30

4,93

10,13

4

194

-14,59 -8,88

40

111

139

-26,40 -20,26

39

81

107

-31,94 -24,80

40

57

64

87

-34,24 -26,19

36

250 x 10

446

466

423

250 x 15

219

233

265

-16,33 -11,01

40

250 x 20

123

133

168

-23,51 -17,62

40

250 x 25

88

96

131

-27,97 -21,76

39

250 x 30

69

76

105

-29,32 -22,14

5,24

Média

9,82

1

39
80

6

Conclusão

O algoritmo_de_seleção_clonal proposto no presente trabalho mostrou-se eficiente para a resolução
do problema de seqenciamento de tarefas em máquinas_paralelas com tempos de preparação dependentes da seqência. Operadores de busca local tornam-se necessários, uma vez que o algoritmo proposto por Castro e Von Zuben (2000) apresenta uma boa
estratégia de busca global, mas, localmente, não é
capaz de caminhar sozinho para mínimos, com a
representação utilizada.
Mesmo os resultados sendo satisfatórios, diversos refinamentos podem ser aplicados ao algoritmo.
Para uma convergência em menor tempo computacional, podem ser definidas heurísticas para a construção de soluções iniciais de melhor qualidade,
como as utilizadas em Vallada e Ruiz (2011). Além
disto, Vallada e Ruiz (2011) apresentam um algoritmo para ponderação de parâmetros, mostrando que,
para o Algoritmo Genético, os resultados obtidos
através desta ponderação foram superiores queles
alcançados com a definição empírica dos parâmetros.

ISBN 978-85-8001-069-5

Esta técnica de ponderação pode ser aplicada com
algumas alterações ao algoritmo proposto neste trabalho. Deve-se ainda implementar outros algoritmos
presentes na literatura e fazer a comparação estatística, considerando a convergência e o tempo computacional. Todas estas melhorias serão realizadas em
trabalhos futuros.
Agradecimentos
Ao CEFET-MG,  CAPES e  FAPEMIG por toda
infra-estrutura e financiamento dos recursos utilizados neste trabalho.
Referências Bibliográficas
Allahverdi, A. and Gupta, J.N.D. and Aldowaisan, T
(1999). A review of scheduling research
involving setup considerations. The international
Journal of Management Science, Vol.27
pp.219-239.
Allahverdi, A. and Anzi, A (2006). A PSO and a tabu
search heuristics for assembly scheduling
problem of the two-stage distributed database
application. Computers and Operations Research
Vol. 33 pp.1056-1080.
Allahverdi, A. and . Ng, C.T. and Cheng, T.C.E. and
Kovalyov, Y.M (2008). A survey of scheduling
problems with setup times or costs. European
Journal of Operational Research, Vol. 187
pp.985-1032.
Castro, L. N. and Von Zuben, F. J (2000). The
Clonal Selection Algorithm with Engineering
Workshop
Applications.
GECCO00

Proceedings, pp. 36-37.
Castro, L.N (2001). Engenharia imunológica
desenvolvimento e aplicação de ferramentas
computacionais
inspiradas
em
sistemas
imunológicos artificiais. Universidade Estadual
de Campinas, Campinas - SP.
Fawaz, S. and Anzi, A. and Allahverdi, A (2007). A
self-adaptive dierential evolution heuristic for
two-stage assembly scheduling problem to
minimize maximum lateness with setup times.
European Journal of Operational Research, Vol.
182 pp.80-94.
French, S (1982). Sequencing and scheduling an
introduction to the mathematics of the job shop.
Wiley, New York, USA.
Gupta, J.N.D. and Alex, J. and Torres, R (2005).
Generating efficient schedules for identicall
parallel machines involving flow-time and tardy
jobs. European Journal of Operational
Research, Vol. 167 pp. 679-695.
Kampke, E. H (2010). Metaheurísticas para problema
de programação de tarefas em máquinas
paralelas com tempos de preparação dependentes
da sequência de recursos. Universidade Federal
de Viçosa, Viçosa - MG.
Kurz, M. and Askin, R (2001). Heuristic scheduling
of parallel machines with sequence - dependent
1118

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

set-up times. International Journal of
Production Research, Vol. 39, pp. 3747-3769.
Mladenovic, N. and Hansen, P (1997). Variable
neighborhood
Search.
Computers
and
Operations Research, Vol. 24 pp.1097-1100.
Pinedo, M. (2008). Scheduling Theory, Algorithms
and Systems. Prentice Hall, New Jersey, third
edition.
Rabadi, G. and Moraga, R. and Salem, A (2006).
Heuristics for the unrelated parallel machine
scheduling problem with setup times. Journal of
Intelligent Manufacturing, Vol. 17, pp. 8597.
Ruiz, R. and Andrés, C (2007). Unrelated parallel
machines scheduling with resource-assignable
sequence dependent setup times. Proceedings of
the
3rd
Multidisciplinary
International
Conference on Scheduling Theory and
Applications (MISTA), pp. 439-446.
Ruiz, R (2012). Instâncias para o problema de
sequenciamento_de_tarefas em máquinas
paralelas dependentes do tempo de setup, URL
httpsoa.iti.esproblem-instances.
Vallada, E. and Ruiz, R (2011). A Genetic
algorithms for the unrelated parallel machine
scheduling problem with sequence dependent
setup times. European Journal of Operational
Research, Vol.211 pp. 612622.
Zandieh, M. and Ghomi, F. and S.M.T. and Moattar
Husseini, S.M (2006). An immune algorithm
approach to hybrid flow shops scheduling with
sequence-dependent setup times. Applied
Mathematics and Computation Vol. 180
pp.111-127.

ISBN 978-85-8001-069-5

1119