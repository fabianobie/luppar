XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

DIAGNOSTICO DE FALHAS EM TEMPO REAL DE SISTEMAS A EVENTOS
DISCRETOS DESCRITOS POR AUTOMATOS FINITOS
Thiago C. Jesus, Marcos V. Moreira, Joao C. Basilio


COPPE - Programa de Engenharia Eletrica
Universidade Federal do Rio de Janeiro
Rio de Janeiro, RJ, Brasil

Emails thiagocj@ufrj.br, moreira@dee.ufrj.br, basilio@dee.ufrj.br
Abstract Diagnosing a failure in a discrete-event system consists of identifying the occurrence of an unobservable failure event based on the occurrence of observable events. In order to do so, sensors must be used to
observe the events of the system. With the view to reducing the costs with the use of sensors, several works in the
literature address the sensor selection problem via different approaches. In this paper, a new algorithm for online
failure diagnosis of discrete-event systems described by finite automata is proposed. The main characteristic of
this algorithm is that the system events are observed only when they are strictly necessary for the diagnosis
process, allowing that the process be interrupted if a failure is detected or if the failure has not occurred and
cannot occur anymore. This leads to a reduction in the use of sensors, thus saving energy and computational
time for processing the information provided by the sensors.
Keywords

Failure diagnosis, Diagnosability, Discrete-Event Systems, Automata.

Resumo Diagnosticar uma falha em um sistema_a_eventos_discretos consiste em identificar a ocorrencia
de um evento de falha nao observavel baseado nas ocorrencias de eventos observaveis. Para tanto, sensores
devem ser utilizados para a observacao dos eventos do sistema. Visando reduzir custos com o uso de sensores,
diversos trabalhos na literatura abordam o problema de selecao de sensores utilizando diferentes abordagens.
Neste trabalho e proposto um novo algoritmo para o diagnostico_de_falhas em tempo_real de sistema a eventos
discretos descrito por automatos finitos. A principal caracterstica desse algoritmo e a observacao dos eventos do
sistema somente quando esses eventos sao estritamente necessarios para o processo de diagnose, permitindo que o
processo seja interrompido caso a falha seja detectada ou nenhuma falha tenha ocorrido e nao possa mais ocorrer.
Isso leva a uma reducao no uso de sensores, economizando energia e tempo computacional para o processamento
das informacoes fornecidas pelos sensores.
Palavras-chave

.1

Diagnostico de Falhas, Diagnosticabilidade, Sistemas a Eventos Discretos, Automatos.

Introducao

Diagnostico de falhas de sistemas_a_eventos_discretos

Diagnosticar uma falha em um sistema_a_eventos_discretos (SED) consiste em identificar a ocorrencia de
um evento nao observavel de falha baseado em um
numero finito de ocorrencias de eventos observaveis,
i. e., eventos que sao detectados por sensores. Diversos trabalhos na literatura abordam esse problema
utilizando automatos (Sampath et al., 1995 Sampath
et al., 1996 Qiu e Kumar, 2006). Nesses trabalhos,
a deteccao da ocorrencia de um evento de falha e associada a uma estimativa dos estados alcancados pelo
sistema apos a ocorrencia de uma sequencia de eventos observaveis. Assim, o processo de diagnose e interrompido quando a estimativa de estados da planta
indica com certeza que a falha ocorreu. Contudo, em
muitos casos, o processo de diagnose pode continuar
desnecessariamente mesmo que a falha nao tenha ocorrido e nao possa mais ocorrer. Por exemplo, considere
o automato E da Figura 1, que foi primeiramente
apresentado em (Cassez et al., 2007). Nesse automato, os conjuntos de eventos observaveis, nao observaveis, e de falha sao, respectivamente, o  a, b,
uo  f , u  e f  f  . Neste caso, se no estado inicial o evento a e observado, entao e facil ver
que o estado 4 e alcancado e, uma vez que nenhum
outro estado pode ser alcancado por uma sequencia
de eventos sem falha cujo unico evento observavel e

Figura 1 Automato E.

a, entao a falha ocorreu com certeza e o processo de
diagnose pode ser interrompido. Por outro lado, se o
evento b e observado, entao o estado 1 e alcancado e a
falha nao somente nao ocorreu como tambem nao pode
mais ocorrer. Continuar o processo de diagnose neste
caso e totalmente desnecessario levando a um gasto de
energia com o uso de sensores e de esforco computacional para a leitura e processamento das informacoes
fornecidas pelos sensores.
Neste trabalho e proposto um algoritmo para o
diagnostico em tempo_real de SEDs em que somente
as sequencias de eventos observaveis estritamente necessarias para o diagnostico_de_falhas sao percorridas
pelo diagnosticador, ou seja, o processo de diagnose e
interrompido caso a falha seja diagnosticada ou entao
se a sequencia observada indicar que a falha nao ocorreu e nao pode mais ocorrer no sistema. O diagnosticador proposto neste trabalho e baseado no automato
verificador apresentado em (Moreira et al., 2010).

712

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

1.2

Trabalhos relacionados

balho utilizando-se redes de Petri ou automatos que
estabelecam como criterio_de_parada do algoritmo de
identificacao de falha a impossibilidade de ocorrencia
de um evento de falha.

Diversos trabalhos na literatura abordam o problema
de selecao de sensores para o diagnostico_de_falhas
utilizando diferentes abordagens (Debouk et al., 1999
Yoo e Lafortune, 2001 Jiang et al., 2003 Cassez
et al., 2007 Cassez e Tripakis, 2008). Em (Yoo e
Lafortune, 2001) um algoritmo em tempo polinomial
para verificacao da propriedade de diagnosticabilidade
de SEDs descritos por automatos e apresentado e e
mostrado que o problema de encontrar um conjunto
de sensores ou eventos observaveis de menor cardinalidade que mantenha a propriedade de diagnosticabilidade de um SED e NP-completo. Visando estender
os resultados de Yoo e Lafortune (2001), Jiang et al.
(2003) apresentam um algoritmo em tempo polinomial para obtencao de um conjunto otimo de classes
de equivalencia de eventos utilizando mascaras de nao
projecao. O objetivo do metodo proposto em (Jiang
et al., 2003) e obter a informacao mnima necessaria sobre a observacao de eventos para que o sistema
permaneca diagnosticavel. Mais recentemente, Cassez
et al. (2007) e Cassez e Tripakis (2008), propoem a
construcao de um diagnosticador dinamico que seleciona a cada passo do processo de diagnose um conjunto
de eventos observaveis mnimo mantendo a propriedade de diagnosticabilidade do sistema. A motivacao
para esse problema e a reducao no tempo de computacao gasto com informacoes fornecidas pelos sensores consideradas nao relevantes e de energia necessaria para operar esses sensores. Note que o problema
formulado por Cassez et al. (2007) e Cassez e Tripakis
(2008) e diferente dos problemas formulados por Yoo
e Lafortune (2001) e Jiang et al. (2003) uma vez que
nestes trabalhos os diagnosticadores sao estaticos, ou
seja, o conjunto de eventos observaveis permanece o
mesmo em todas as etapas da diagnose.
Embora o diagnosticador dinamico proposto em
(Cassez et al., 2007) e (Cassez e Tripakis, 2008) leve
a uma economia de tempo de computacao e energia
com relacao ao uso de sensores, o metodo leva, em
geral, a um aumento no atraso para a identificacao
de um evento de falha. Esse atraso e indesejado na
maioria dos casos uma vez que pode representar um
gasto maior de energia no sistema em comparacao com
a economia com o uso de sensores, ou ate mesmo o
alcance de um estado em que nao seja mais possvel o
sistema se recuperar da falha.
Neste trabalho, um novo metodo para o diagnostico_de_falhas em SEDs e proposto. Assim como em
(Cassez et al., 2007) e (Cassez e Tripakis, 2008) a motivacao para esse problema e a reducao do esforco computacional e gasto de energia no processo de diagnose.
Alem disso, o metodo aqui proposto evita o aumento
no atraso para a identificacao da falha. E importante
ressaltar que este trabalho nao tem como objetivo determinar um metodo para selecionar o conjunto de
eventos observaveis como em (Yoo e Lafortune, 2001)
e (Jiang et al., 2003) e, portanto, e suposto que o conjunto de eventos observaveis e um dado do problema.
Diversos trabalhos na literatura abordam o problema de diagnose em tempo_real de SEDs utilizando redes de Petri (Corona et al., 2004 Giua e Seatzu, 2005 Ramirez-Trevino et al., 2007 Lefebvre e
Delherm, 2007 Basile et al., 2009). Contudo, nao e
de conhecimento dos autores que exista algum tra-

1.3

Organizacao do trabalho

Este trabalho esta estruturado da seguinte forma na
secao 2 a notacao e algumas nocoes preliminares sobre
sistemas_a_eventos_discretos sao apresentadas. Na secao 3 o verificador proposto em (Moreira et al., 2010)
e revisto, e na secao 4, baseado nesse verificador, o diagnosticador e o algoritmo para a diagnose em tempo
real sao apresentados. Finalmente, na secao 5, as conclusoes sao apresentadas.
2

Nocoes Preliminares

Um sistema_a_eventos_discretos e um sistema que tem o
espaco_de_estados discreto e o mecanismo de transicao
de estados e dirigido por eventos, isto e, o comportamento dinamico do sistema e condicionado a ocorrencia de eventos. Se  denota o conjunto de eventos,
entao o conjunto de todas as possveis sequencias de
eventos formadas com elementos no conjunto , juntamente com a sequencia vazia , e chamado de Fecho
de Kleene de , denotado por ? . A linguagem L gerada por um SED e um subconjunto de ? , ou seja,
L  ? , sendo que L e prefixo-fechada, isto e, L  L
com L sendo o fecho de prefixo de L definido como
L  s  ?  (t  ? )st  L.
Neste artigo, a notacao   s representa que  e um
um evento da sequencia s  L, e o numero de eventos
nessa sequencia s e representado por s.
Seja G o automato que modela o sistema definido
como (Cassandras e Lafortune, 2008)
G  (X, , , f, Xm , x0 ),

(1)

sendo X o espaco_de_estados finito,  o conjunto de
eventos,  a funcao de eventos ativos, f a funcao de
transicao, Xm o conjunto de estados marcados e x0
o estado inicial do sistema. Por simplicidade, a funcao de eventos ativos e o conjunto de estados marcados serao omitidos em alguns casos. A linguagem
gerada por G, L(G), e a linguagem prefixo-fechada
gerada pelo sistema, ou seja L(G)  L, e um caminho (xk , 1 , xk+1 , 2 , . . . , l , xk+l ), para l > 0, e
uma sequencia de estados e eventos tais que xk+i 
f (xk+i1 , i ) para qualquer i  1, 2, . . . , l. O caminho forma um ciclo se xk+l  xk .
A parte acessvel de um automato G, denotada
por Ac(G), e a operacao unaria realizada sobre G que
elimina todos os estados de G que nao sao alcancaveis
a partir do estado inicial x0 e suas respectivas transicoes. Formalmente,
Ac(G)  (Xac , , fac , x0 ) ,
?

(2)

sendo Xac  x  X  (s   )f (x0 , s)  x e fac 
Xac    Xac a nova funcao de transicao obtida
restringindo-se o domnio de f para o domnio dos
estados acessveis Xac .
A parte coacessvel de G e obtida eliminando-se
todos os estados de G a partir dos quais nao e possvel alcancar um estado marcado. Essa operacao e

713

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

formalmente definida como
CoAc(G)  (Xcoac , , fcoac , x0,coac , Xm ) ,

(X2 , 2 , 2 , f2 , x02 ). Entao, o produto de G1 e G2 ,
denotado por G1  G2 , e definido como

(3)

G1 G2  Ac(X1 X2 , 1 2 , f12 , (x01 , x02 )), (7)

?

sendo Xcoac  x  X  (s   )f (x, s)  Xm ,
x0,coac  x0 se x0  Xcoac , ou x0,coac e indefinido
se x0 6 Xcoac , e fcoac  Xcoac    Xcoac e a nova
funcao de transicao obtida restringindo-se o domnio
de f aos estados coacessveis Xcoac .
Suponha que o conjunto de eventos possa ser par uo sendo o e uo os conjunticionado em   o 
tos de eventos observaveis e nao observaveis, respectivamente, e seja f  uo o conjunto de eventos de
falha. Suponha agora que o conjunto de eventos de
falha possa ser particionado em
f 

p


f i ,

sendo


 (f1 (x1 , ), f2 (x2 , )), se
  1 (x1 )  2 (x2 )
f12 ((x1 , x2 ), ) 

indefinido, caso contrario.

(8)
Note que a transicao no produto G1  G2 ocorre se,
e somente se, a transicao e possvel em ambos automatos G1 e G2 . Isso significa que a evolucao de estados em G1  G2 e completamente sincronizada com
a evolucao de estados nos automatos G1 e G2 . Uma
consequencia importante desse fato e que a linguagem
gerada por G1  G2 e igual a L(G1 )  L(G2 ). E importante observar ainda que apenas a parte acessvel
da composicao e usada para formar G1  G2 uma vez
que estados que nao sao alcancaveis a partir do estado
inicial (x01 , x02 ) podem ser gerados na operacao.
A composicao paralela e definida como G1 kG2 
P11 (G1 )P21 (G2 ), sendo Pi  (1 2 )?  ?i , para
i  1, 2.

(4)

i1

em que f i representa um conjunto de eventos de falha
de um mesmo tipo.
O diagnostico de um falha do conjunto f i pode
ser expresso como o problema de diagnosticar a ocorrencia desses eventos baseado na observacao de uma
sequencia finita de eventos em o . Para o diagnostico
de eventos de falha de tipos diferentes, pode-se construir varios diagnosticadores sendo que cada um identifica a ocorrencia de um tipo especfico de falha (Yoo
e Lafortune, 2002 Jiang et al., 2001). Assim, neste
artigo, sem perda de generalidade, e considerado que
existe apenas um tipo de falha, isto e, p  1.
E importante tambem apresentar algumas operacoes usuais sobre linguagens e automatos.
A projecao Ps  ?l  ?s , em que s  l , e
definida como (Ramadge e Wonham, 1989)
Ps ()



Ps ()



Ps (s)



,


, se   s
,
, se   l  s

3

Algoritmo para verificacao da
diagnosticabilidade

Seja G um automato que modela o comportamento
normal e de falha do sistema e seja H o subautomato
de G que representa o comportamento de nao falha do
sistema. Alem disso, considere a seguinte particao do
 uo . Assim, a linconjunto de eventos de G,   o 
guagem gerada por H, denotada por K, e uma linguagem prefixo-fechada que contem todas as sequencias
de L que nao possuem qualquer evento do conjunto
f . Utilizando essas definicoes, a seguinte nocao de
diagnosticabilidade pode ser apresentada (Qiu e Kumar, 2006).

(5)

Ps (s)Ps (), para todo s  ?l ,   l ,

em que  denota a diferenca entre conjuntos. Assim,
e possvel ver que a projecao substitui na sequencia
s  ?l todos eventos   l  s pela sequencia vazia
, que e equivalente a apagar esses eventos da sequencia s. A operacao projecao tambem pode ser aplicada
na linguagem L gerada por G simplesmente aplicando
as regras (5) para todas as sequencias s  L. Essa
operacao pode ser implementada em G substituindo
todas as transicoes rotuladas por eventos de l  s
pela sequencia vazia , levando a um automato nao
determinstico. Para obter um automato determinstico que gera a linguagem Ps (L), um observador deve
ser computado (Cassandras e Lafortune, 2008).
?
A projecao inversa Ps1  ?s  2l e definida
como
Ps1 (t)  s  ?l  Ps (s)  t .
(6)

Definicao 1 Seja L a linguagem prefixo-fechada gerada por um sistema G e seja K  L a linguagem prefixo-fechada gerada por H. Defina a projecao
Po  ?  ?o e considere f o conjunto de eventos
de falha. Entao, L e diagnosticavel em relacao a Po e
f se, e somente se,
(n  N)(s  L  K)
(st  L  K, t  n ou st leva a um deadlock) 
(w  Po1 (Po (st))  L, w  L  K).
2
Note que se existe um deadlock em G, entao um
autolaco rotulado por um evento nao observavel pode
ser adicionado ao estado de bloqueio sem afetar a propriedade de diagnosticabilidade do sistema, tornando
a linguagem viva. Esse procedimento e utilizado em
(Qiu e Kumar, 2006) e (Moreira et al., 2010). Portanto, sem perda de generalidade, e considerado neste
artigo que a linguagem L e viva.
De acordo com a Definicao 1, L e diagnosticavel
em relacao a Po e f se, e somente se, para todas as
sequencias st de comprimento arbitrariamente longo
apos a ocorrencia de um evento de falha, nao existem
sequencias s0  K, tais que Po (s0 )  Po (st). Assim,

A operacao de projecao inversa tambem pode ser aplicada a linguagem gerada por um automato G visando
obter Ps1 (L(G)). Isso pode ser feito adicionando a
cada estado de G um autolaco rotulado por todos
os eventos em l  s . Com leve abuso de notacao,
esse automato que gera Ps1 (L(G)) sera denotado por
Ps1 (G).
Em alguns casos, pode ser necessario realizar a
composicao de dois automatos para formar um terceiro. Sejam G1  (X1 , 1 , 1 , f1 , x01 ) e G2 

714

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

o algoritmo de verificacao apresentado em (Moreira
et al., 2010) e baseado na procura por sequencias
s0  K e st  L  K que violam as condicoes de diagnosticabilidade apresentadas na Definicao 1.
O algoritmo de verificacao da diagnosticabilidade
proposto em (Moreira et al., 2010) e apresentado a
seguir.

Observacao 1 As seguintes observacoes sobre o Algoritmo 1 podem ser feitas.
a) Em (Moreira et al., 2010) e mostrado que o automato verificador V tem, no pior caso, 2X2 estados e 2X2 2f  transicoes. Portanto, a
busca pelos ciclos satisfazendo as condicoes (10)
pode ser feita em tempo polinomial.
b) Uma outra forma de calcular o automato H e
eliminar as transicoes rotuladas por eventos de
falha de H e tomar a parte acessvel do automato
resultante. Isso mostra que todos os estados de
H e de F podem ser associados aos estados de
H, ou seja, XF  XH  XH .

Algoritmo 1 Seja G um automato determinstico
que modela um sistema e f um conjunto de eventos
 uo .
de falha. Considere ainda a particao   o 
 Passo 1 Defina Z  f .
 Passo 1.1 Contrua o automato Z 
(N , Z , fZ , N ) composto por um unico
estado N com um autolaco rotulado por todos os eventos em Z .

Teorema 1 Seja G o automato do sistema e sejam
H, F e V , os automatos de nao falha, falha e verificador, respectivamente, obtidos seguindo os passos do
 uo e deAlgoritmo 1. Considere a particao   o 
fina a projecao P  (  R )?  ?o . Entao, uma
sequencia sV pertence a linguagem gerada por V , i.e.,
sV  L(V ), se e somente se existem sequencias sH 
L(H) e sF  L(F) tais que P (sV )  P (sH )  P (sF ).

 Passo 1.2 Contrua o automato de nao falha H  G  Z  (XH , , fH , H , xH0 ).
 Passo 1.3 Redefina o conjunto de eventos de H como f , i.e., H 
(XH , f , fH , H , xH0 ).

Prova A prova do Teorema 1 pode ser obtida pela
construcao do automato verificador V e sera omitida.
2
Note que todas as sequencias de G que possuem
um evento de falha pertencem a linguagem gerada por
F , isto e, L(F )  L  K. Assim, de acordo com o
Teorema 1, a principal caracterstica do Algoritmo 1
e gerar um automato V cujas sequencias sV  L(V )
estao sempre associadas a sequencias sH  L(H) e
sF  L(F) que tenham a mesma projecao no conjunto
de eventos observaveis, ou seja, somente sequencias
que podem ser ambguas.
Na proxima secao sera apresentado o algoritmo
para construcao do diagnosticador que sera utilizado
para o processo de diagnose em tempo_real proposto
neste trabalho.

 Passo 2
 Passo 2.1 Construa o automato A 
(XA , f , fA , xA0 ), sendo XA  N, F ,
xA0  N e fA (N, f )  F e fA (F, f )  F ,
para todo f  f .
 Passo 2.2 Compute H
(XH , , fH , xH0 ).



GkA



 Passo 2.3 Marque todos os estados de H
que tenham a segunda coordenada igual a
F.
 Passo 3 Obtenha o automato de falha F 
CoAc(H)  (XF , , fF , xF0 ).
 Passo 4 Defina a funcao R  f  R como

, se   o
.
(9)
R() 
R , se   uo  f

4

Diagnosticador

Nesta secao, utilizando o verificador V obtido a partir
do Algoritmo 1, um automato diagnosticador nao determinstico e apresentado. Neste diagnosticador apenas as projecoes das sequencias estritamente necessarias para o processo de diagnose sao representadas,
possibilitando que a informacao de que uma falha ja
ocorreu ou que uma falha nao ocorreu e nao ira mais
ocorrer seja obtida.
Antes de apresentar o Algoritmo 2 para a construcao do diagnosticador, e necessario introduzir o conceito de alcance nao observavel de um estado xV 
XV , definido como

Construa o automato HR  (XH , R , fHR , xH0 ),
com fHR (xH , R )  fH (xH , ), em que R 
R() para todo     f , e R  R(  f )1 .
 Passo 5 Construa o automato verificador V 
HR kF  (XV ,   R , fV , xV0 ). Note que o jesimo estado de V e dado por xVj  (xHj , xFj )
em que xHj e xFj sao estados de HR e F , respectivamente, e xFj  (xj , xAj ), em que xj e xAj
sao estados de G e A, respectivamente.
 Passo 6 Um ciclo em V e definido como cl 
(xVk , k , xVk+1 , ..., xVl , l , xVk ), sendo l  k > 0.
Verifique a existencia de um ciclo em V satisfazendo as seguintes condicoes

U R(xV )



yV  XV  (u  (uo  Ruo )? )
fV (xV , u)  yV ,

j  k, k +1, . . . , ltal que(xAj  F )(j  ).
(10)
Se a resposta e sim, entao a linguagem L e nao
diagnosticavel em relacao a Po e f . Caso contrario, L e diagnosticavel.
2

(11)

em que Ruo  R(uo  f ), ou seja, Ruo e o subconjunto de R formado pelos eventos nao observaveis
de   f renomeados de acordo com (9). O alcance
nao observavel pode ser definido para um conjunto
B  2XV como

U R(B) 
U R(xV ).
(12)

1 A notacao R(   ) e usada neste artigo para repref
sentar a renomeacao dos eventos do conjunto   f como
descrito em (9).

xV B

715

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Observacao 3 Note que L(V 0 )  P (L(V )) e, como
V 0 e D possuem estados equivalentes e as mesmas
transicoes, entao L(D)  P (L(V )).
2

Algoritmo 2 Seja G um automato determinstico
que modela o sistema e considere a particao  
 uo . Considere tambem que a linguagem gerada
o 
por G e diagnosticavel com relacao a projecao Po e
f .

A seguir, o procedimento para o diagnostico de
falhas em tempo_real utilizando o diagnosticador D
obtido a partir do Algoritmo 2 e apresentado.

 Passo 1 Construa o verificador V  (XV ,  
R , fV , xV0 ) de acordo com o Algoritmo 1.
 Passo 2 Construa o automato nao determinstico V 0  (XV 0 , o , V 0 , fV 0 , xV00 ) da seguinte
forma

Algoritmo 3
 Passo 1 Defina xon  xD0 .
 Passo 2 Aguarde ate que um evento observavel
  o ocorra.

 Passo 2.1 Defina xV00  U R(xV0 ) e faca
XV 0  xV00  e XV 0  XV 0 .

 Passo 3 Apos a observacao do evento   o
faca (i) se  6 D (xD ), xD  xon ,

F, se (xD  xon , tal que xH  xD ,



xH  (x, F ))
xon 
N, se (xD  xon , tal que xH  xD ,



xH  (x, N ))

 Passo 2.2 Faca X V 0  XV 0 e XV 0  .
 Passo 2.3 Para cada B  X V 0 ,
 Passo 2.3.1 Defina



V 0 (B)  
V (xV )  o .
xV B

(ii) Caso contrario

 Passo 2.3.2 Para cada   V (B)

fV 0 (B, ) 
U R(fV (xV , )) .
0

xon 



fD (xD , )

(15)

xD xon

xV B

 Passo 4 Se xon  N entao a falha nao ocorreu
e nao pode mais ocorrer. Se xon  F a falha
e identificada. Assim, se xon  N, F , interrompa o processo e sinalize xon . Caso contrario,
volte para o passo 2.
2

 Passo 2.3.3 XV 0  XV 0  fV 0 (B, ).
 Passo 2.4 XV 0  XV 0  XV 0 .
 Passo 2.5 Repita os passos 2.2 a 2.4 ate
que toda a parte acessvel de V 0 tenha sido
construda.

Note que em cada passo do processo de diagnose e
necessario apenas armazenar a estimativa de estado
xon de D. Apos a ocorrencia de um evento observavel   o , que seja ativo para pelo menos um dos
estados da estimativa xon , uma nova estimativa xon
e calculada a partir da estimativa de estado anterior
utilizando a equacao (15). Como, de acordo com o
Teorema 1 para toda sequencia sV estao associadas
sequencias sH e sF tais que P (sV )  P (sH )  P (sF )
e, de acordo com a Observacao 3, L(D)  P (L(V )),
entao associado a cada uma das sequencias sD  L(D)
existem sequencias sH  L(H) e sF  L(F) tais que
as projecoes P (sH ) e P (sF ) sao iguais a sD . Uma vez
que sH , sF  ? , P (sH )  Po (sH ) e P (sF )  Po (sF ),
o que implica que para toda sequencia sD  L(D) temse que sD  Po (sH )  Po (sF ). Portanto, neste caso,
nao e possvel ter certeza da ocorrencia de um evento
de falha ou entao afirmar que a falha nao ocorreu e nao
pode mais ocorrer. Contudo, se um evento observavel
nao ativo para todos os estados de xD  xon ocorre,
isso significa que nao existem sequencias sH  L(H)
e sF  L(F) cujas projecoes sao iguais a sequencia
observada. Logo, ou a sequencia s gerada pela planta
G pertence a L(H)  L(F) ou a L(F)  L(H). Se
s  L(H)  L(F), entao para todas as sequencias t
na pos linguagem de L apos s, Ls, tem-se que st
pertence a L(H)  L(F) e, portanto, correspondem somente a caminhos cujos estados pertencem a H com
a segunda coordenada igual a N , o que significa que a
falha nao ocorreu e nao pode mais ocorrer. Por outro
lado, se s  L(F)  L(H), entao todos os estados alcancados em H apos a sequencia s possuem a segunda
coordenada igual a F indicando a ocorrencia da falha.
O Algoritmo 3 leva a um processo de diagnose de
falhas em SEDs em que os criterios de parada sao (i)

XH

 Passo 3 Defina a funcao S  XH  XF  2
como

xH , se xH  xF
.
S(xH , xF ) 
xH , xF , caso contrario
(13)
Construa o automato diagnosticador D 
(XD , o , fD , xD0 ), em que cada estado xV 0 
XV 0 possui um estado correspondente xD  XD
obtido fazendo

xD 
S(xV ),
(14)
xV xV 0

o estado inicial e dado por

xD0 
S(xV )
xV xV 0
0

e a funcao de transicao de estados e dada por
fD (xD , )  fV 0 (xV 0 , ),   o ,
sendo xD o estado correspondente a xV 0 obtido a
partir de (14).
2
Observacao 2 Note que fV 0 e uma funcao nao determinstica e, portanto, o diagnosticador D e um automato nao determinstico. E importante ressaltar tambem que como o automato verificador V possui no pior
caso um numero maximo de estados igual a 2X2 , entao D possui no maximo o mesmo numero de estados.
Alem disso, pode ser verificado que um limitante superior para o numero de transicoes de D e igual a
4X4  o  e, portanto, o diagnosticador D pode ser
construdo em tempo polinomial.
2

716

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

a falha ocorreu e nao existe nenhuma sequencia sem
falha que tenha projecao Po igual a da sequencia gerada pelo sistema (ii) a falha nao ocorreu e nao existe
nenhuma sequencia com falha que tenha projecao Po
igual a da sequencia gerada pelo sistema. Portanto,
a metodologia proposta neste artigo leva a um processo de diagnose em que os eventos do sistema sao
observados somente enquanto ha duvida com relacao a
ocorrencia da falha, permitindo que os sensores sejam
desligados quando nao ha mais duvida. Isso permite
uma reducao no consumo_de_energia para ativar os
sensores e, principalmente, permite uma reducao no
esforco computacional para processar as informacoes
enviadas pelos sensores.
Uma abordagem diferente da apresentada neste
trabalho visando tambem reduzir custos com o uso
de sensores e apresentada em (Cassez et al., 2007) e
(Cassez e Tripakis, 2008). Contudo, o metodo apresentado nesses artigos leva, em geral, a um aumento
no atraso para o diagnostico_de_falha e nao e interrompido quando a falha nao ocorre e nao pode mais
ocorrer.
A seguir, um exemplo e usado para ilustrar a
construcao do diagnosticador e o processo de diagnose
apresentados nos Algoritmos 2 e 3, respectivamente.

Figura 3 Automato H.

Figura 4 Automato de nao falha H.

Exemplo 1 Considere o sistema G apresentado na
Figura 2 onde o  a, b, c, d, uo  u , f  e
f  f . Para a obtencao do diagnosticador D, o
primeiro passo e obter o verificador V de acordo com
o Algoritmo 1. Para tanto, primeiro sao construdos
os automatos H, H e F, mostrados nas Figs. 3, 4 e
5, respectivamente. Uma vez obtidos esses automatos, o verificador V apresentado na Figura 6 e obtido
fazendo-se V  HR kF , em que HR e semelhante ao
automato H, substituindo-se o rotulo da transicao nao
observavel u por uR .

Figura 5 Automato de falha F.

descrito no Algoritmo 3. Para entender como o algoritmo funciona, vamos considerar dois exemplos de
sequencias observadas pelo sistema sD1 e sD2 . No primeiro exemplo suponha que a sequencia que o sistema
observa e sD1  add. No passo 1 do Algoritmo 3, o
estado xon e feito igual ao estado inicial de D, xD0 ,
ou seja, xon  0N  e o sistema aguarda a ocorrencia
de um evento observavel   o . Apos o evento a
ser observado pelo sistema, e feita a verificacao do
passo 3 para a atualizacao do estado xon . Como,
a  D (0N ), o estado xon e atualizado utilizando-se
(15), levando a xon  1N, 3F  e o algoritmo volta ao
passo 2 em que e aguardada a ocorrencia de um novo
evento   o . Apos a ocorrencia do evento d, o algoritmo alcanca o passo 3 e como d  D (1N, 3F ),
o novo estado xon  2N, 7N , 2N, 7N, 4F  e obtido. Por fim, na segunda ocorrencia de d, como pode
ser visto na Figura 8, d nao e um evento ativo, i.e.,
d 6 D (2N, 7N )  D (2N, 7N, 4F ), o que implica
que ou a falha podera ser diagnosticada ou a falha nao
ocorreu e nao ocorrera mais. Como d  H (2N ), entao xon  N  indicando que a falha nao ocorreu e
nao pode mais ocorrer e o processo e interrompido.
Suponha agora que a sequencia de eventos observada seja sD2  adbda. Neste caso, seguindo os passos
do Algoritmo 3, pode-se observar que o prefixo de sD2 ,
adbd, pode ser percorrido em D alcancando o estado

Figura 2 Automato G.
Uma vez obtido o verificador V , o automato nao
determinstico V 0 e calculado seguindo o passo 2 do
Algoritmo 2. Na Figura 7 e mostrado o automato V 0 .
Note que os estados de V 0 sao conjuntos formados por
estados de V que sao agrupados de modo que todas as
transicoes rotuladas por eventos nao observaveis em
V nao aparecam em V 0 . No passo 3 do Algoritmo
2, o automato D mostrado na Figura 8 e construdo
a partir de V 0 renomeando os estados de V 0 visando
manter em cada estado de D a estimativa dos estados
alcancados em H apos a observacao de uma sequencia
de eventos.
O processo de diagnose em tempo_real de falhas
pode ser feito utilizando-se o diagnosticador D como

717

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

xon  2N, 7N , 2N, 7N, 6F . Contudo, a nao e
um evento ativo de nenhum dos estados xD  xon ,
o que implica que ou a falha ocorreu, ou a falha nao
ocorreu e nao ocorrera mais. Neste caso e facil ver que
a  H (6F ) o que leva a xon  F  indicando que a
falha ocorreu e o processo e interrompido.
2

mesma projecao. Essa caracterstica permite a construcao em tempo polinomial de um diagnosticador nao
determinstico que permite inferir se uma falha ocorreu ou se nenhuma falha ocorreu e nao pode mais ocorrer. Assim, o metodo para o diagnostico em tempo
real proposto neste trabalho permite o desligamento
de sensores sempre que as informacoes fornecidas por
eles forem inuteis para o processo de diagnose.
Agradecimentos
Este trabalho foi parcialmente financiado pelo CNPq.
Referencias
Basile, F., Chiacchio, P. e De Tommasi, G. (2009). An
efficient approach for online diagnosis of discrete
event systems, IEEE Transactions on Automatic
Control 54(4) 748759.
Cassandras, C. G. e Lafortune, S. (2008). Introduction to Discrete Event Systems, Vol. II, Springer,
Secaucus, NJ.

Figura 6 Automato verificador V .

Cassez, F. e Tripakis, S. (2008). Fault diagnosis
with dynamic observers, Discrete Event Systems,
2008. WODES 2008. 9th International Workshop
on pp. 212217.
Cassez, F., Tripakis, S. e Altisen, K. (2007). Sensor
minimization problems with static or dynamic
observers for fault diagnosis, Application of Concurrency to System Design, 2007. ACSD 2007.
Seventh International Conference on pp. 9099.
Corona, D., Giua, A. e Seatzu, C. (2004). Marking
estimation of petri nets with silent transitions,
Proc. of the 43rd IEEE Conf. on Decision and
Control pp. 966971.
Debouk, R., Lafortune, S. e Teneketzis, D. (1999). On
an optimization problem in sensor selection for
failure diagnosis, Proc. of the 38th IEEE Conference on Decision and Control pp. 49904995.

Figura 7 Automato V 0 .

Giua, A. e Seatzu, C. (2005). Fault detection for discrete event systems using petri nets with unobservable transitions, Proc. of the 44th IEEE Conference on Decision and Control pp. 63236328.
Jiang, S., Huang, Z., Chandra, V. e Kumar, R. (2001).
A polynomial algorithm for testing diagnosability of discrete-event systems, Automatic Control,
IEEE Transactions on 46(8) 13181321.
Jiang, S., Kumar, R. e Garcia, H. E. (2003). Optimal
sensor selection for discrete-event systems with
partial observation, IEEE Transactions on Automatic Control 48(3) 369381.
Lefebvre, D. e Delherm, C. (2007). Diagnosis of des
with petri net models, IEEE Transactions on Automation Science and Engineering 4(1) 114118.

Figura 8 Automato diagnosticador D.

5

Moreira, M. V., Jesus, T. C. e Basilio, J. C. (2010).
Polynomial time verification of decentralized diagnosability of discrete event systems, accepted
for presentation in 2010 American Control Conference .

Conclusoes

Neste artigo, um novo algoritmo para o diagnostico de
falhas em tempo_real de sistemas_a_eventos_discretos
e proposto. Esse metodo e baseado na construcao do
verificador apresentado em (Moreira et al., 2010), que
tem como principal caracterstica representar somente
as sequencias de falha e de nao falha que possuem a

Qiu, W. e Kumar, R. (2006). Decentralized failure
diagnosis of discrete event systems, IEEE Transactions on Systems, Man, and Cybernetics Part
ASystems and Humans 36(2) 384395.

718

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Ramadge, P. e Wonham, W. (1989). The control of
discrete event systems, Proceedings of the IEEE
77(1) 8198.
Ramirez-Trevino, A., Ruiz-Beltran, E. e LopezMellado, E. (2007). Online fault diagnosis of discrete event systems. a petri net-based approach,
IEEE Transactions on Automation Science and
Engineering 4(1) 3139.
Sampath, M., Sengupta, R., Lafortune, S., Sinnamohideen, K. e Teneketzis, D. (1995). Diagnosability
of discrete-event systems, IEEE Transactions on
Automatic Control 40(9) 15551575.
Sampath, M., Sengupta, R., Lafortune, S., Sinnamohideen, K. e Teneketzis, D. (1996). Failure diagnosis using discrete-event models, Control Systems
Technology, IEEE Transactions on 4(2) 105
124.
Yoo, T.-S. e Lafortune, S. (2001). On the computational complexity of some problems arising in
partially-observed discrete-event systems, American Control Conference, 2001. Proceedings of
the 2001 pp. 307312.
Yoo, T.-S. e Lafortune, S. (2002). Polynomial-time
verification of diagnosability of partially observed
discrete-event systems, Automatic Control, IEEE
Transactions on 47(9) 14911495.

719