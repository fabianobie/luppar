XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

PROGRAMAÇÃO INTEIRA BINÁRIA APLICADA AO PROCESSAMENTO DE ALARMES EM SISTEMAS ELÉTRICOS DE
POTÊNCIA

JOÃO M. ZAUK, OLINTO C. B.ARAÚJO, PAULO C. FRITZEN, GHENDY CARDOSO JR,
LAURIANE C. OBREGON, RAFAEL CORRÊA
Universidade Federal de Santa Maria  UFSM
Programa de Pós-Graduação em Engenharia Elétrica
Centro de Estudos em Energia e Meio Ambiente
Centro de Tecnologia, Avenida Roraima 1000, Camobi, CEP 97105-900, Santa Maria-RS

E-mails joaozauk@gmail.com olinto@smail.ufsm.br paulocicero@ifto.edu.br
lauriane.so@gmail.com rafael.serra@gmail.com
Abstract  The occurrence of a fault in the electrical system is reported to the centers of control and supervision by means of
numerous alarm messages, leaving the operator with the expensive task of interpreting them and acting accordingly in order to restore
the system, since energy companies need to minimize the duration of interruptions in the supply of energy caused by unplanned
shutdowns. In order to assist operators in the alarm processing task during a shutdown, several techniques based on computational
intelligence have been proposed in the literature. This paper proposes a binary programming model for alarm processing in power
systems. To validate the proposed methodology is presented a comparative results analysis with a method based on genetic algorithm.
Keywords  Alarm Processing, Supervision and Control of Electrical Systems, Integer Programming, Genetic Algorithms.
Resumo  A ocorrência de uma falta no sistema elétrico é reportada aos centros de controle e supervisão por meio de inúmeras
mensagens de alarmes, cabendo ao operador a dispendiosa tarefa de interpretá-las e agir adequadamente de maneira a restabelecer o
sistema. Isto é justificado devido ao fato de que as empresas de energia necessitam reduzir ao máximo a duração das interrupções no
fornecimento de energia ocasionadas por desligamentos não programados. No sentido de auxiliar os operadores durante a tarefa de
analisar os alarmes reportados em virtude de um desligamento, diversas técnicas baseadas em inteligência_computacional têm sido
propostas na literatura. Este trabalho propõe um modelo_matemático de programação_inteira_binária para o processamento_de_alarmes
em sistemas_elétricos_de_potência. Para validar a metodologia empregada é apresentada uma análise comparativa dos resultados com
um método que utiliza algoritmos_genéticos.
Palavras-chave  .

1.

Introdução

A utilização de ferramentas computacionais de
apoio  tomada de decisão tem se tornado
imprescindível nos centros de operação_e_controle dos
sistemas_elétricos_de_potência para o rápido
restabelecimento do mesmo ao seu estado normal de
operação.
Os operadores do sistema podem ser
surpreendidos por um devastador número de alarmes
reportados em virtude da ocorrência de contingências
em um grande sistema elétrico.
Na tentativa de diminuir a possibilidade de erro
durante a tarefa de analisar os alarmes disparados em
virtude da operação de relés_de_proteção são
desenvolvidas as ferramentas computacionais de
processamento_de_alarmes e diagnóstico_de_faltas,
Cardoso Jr (2003).
Os esquemas de proteção são elaborados de modo
a isolar a falta o mais rápido possível, por meio do
desligamento da menor quantidade de equipamentos.
Os alarmes são disparados de modo a sinalizar a
operação dos relés_de_proteção, enviando os códigos
com as informações para os centros de controle.

4538

Usualmente, sistemas especialistas, redes_neurais,
algoritmos_genéticos, grafos estruturados, lógica_fuzzy
e Redes de Petri são as técnicas sugeridas ao
processamento_de_alarmes. Métodos exatos, como
programação_inteira (PI), têm sido relegados a um
segundo plano. No entanto, recentes desenvolvimentos
em solvers para PI têm melhorado a capacidade de
estes resolverem instâncias de grande escala para
diferentes tipos de problemas. Atualmente o uso de PI
ganha aceitação e é considerada uma ferramenta
computacional poderosa para encontrar soluções
ótimas ou quase-ótimas para problemas reais de
planejamento estratégico ou operacional.
Neste trabalho é proposta uma nova abordagem
fundamentada em programação_inteira para o problema
de processamento_de_alarmes. O modelo proposto
considera diversas situações que envolvem o problema
de diagnósticos de faltas em sistemas_de_potência, tais
como falhas de equipamentos, falhas de comunicações
e eventos simultâneos. Para efeitos de validação foi
realizada uma comparação com o método proposto por
Wen e Han (1995), o qual utiliza o Algoritmo
Genético.

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

2.

Processamento de Alarmes

Os esquemas de proteção são projetados de modo
a isolar a falta o mais rápido possível, por meio do
desligamento da menor quantidade de equipamentos.
Os alarmes são disparados de modo a sinalizar a
operação dos relés_de_proteção.
O operador com base nestas informações deve
usar a sua experiência e decidir o que exatamente
aconteceu com o sistema. Essa tarefa pode muitas
vezes não ser trivial, pois existe a possibilidade de
ocorrência de eventos múltiplos, falha ou operação
indevida de relés, falha de disjuntores e falha em
unidades remotas de aquisição_de_dados.
Kirschen e Wollenberg (1992) destacam que o
principal objetivo dos processadores inteligentes de
alarmes é reduzir a quantidade de informações a ser
processada pelos operadores, acelerando o processo de
tomada de decisões e reduzindo a probabilidade de
erros. Segundo Gers e Holmes (2004) isto ajuda o
operador a concluir sensatamente e rapidamente sobre
os alarmes recebidos, descartando informações
redundantes e irrelevantes. Ainda, os processadores de
alarmes têm como funções melhorar a forma e o
conteúdo das mensagens apresentadas ao operador,
informar o período de início e fim das condições
anormais, apresentar quando possível, conclusões
cronológicas sobre a falha e, em alguns casos, sugerir
ao operador as ações corretivas a serem tomadas.
Como os sinais de alarmes são de natureza
informativa, é natural utilizar os recursos
proporcionados pelos métodos de inteligência_artificial.
Por exemplo, em de Souza et. al. (2004) é apresentada
uma metodologia para processamento_de_alarmes e
diagnóstico de falta que combina o uso de redes
neurais artificiais (RNAs) com a lógica_fuzzy. As
entradas para a RNAs são os padrões de alarmes
enquanto que as relações fuzzy são estabelecidas de
modo a formar uma base de dados utilizados para
treinar as RNAs. Cada neurônio da RNA é responsável
por estimar o grau de adesão de um componente
específico do sistema para classificar o componente
sob falta. Por outro lado, Lin e Sun (2004) apresentam
um método para o processamento_de_alarmes que
utiliza a rede probabilística (Probabilistic Neural
Network).
Segundo Kirschen e Wollenberg (1992), devido 
semelhança existente entre os alarmes recebidos e
padrões de treinamento, as redes_neurais passaram a ser
utilizadas como um meio de identificar as causas do
desligamento. Os sistemas especialistas baseados em
regras, também são muito utilizados no processamento
de alarmes. Entre esses dois métodos, as redes_neurais
apresentam mais flexibilidade.
Grande parte das pesquisas que vêm sendo
desenvolvidas na área de processamento_de_alarmes
está relacionada  inteligência_computacional. Vale e
Moura (1993) propuseram um processador de alarmes
que utiliza os sistemas especialistas. O conjunto de
regras é elaborado com base no conhecimento técnico
e empírico de engenheiros e técnicos. No entanto, El-

4539

Sayed e Alfuhaid (2000) destacam que os sistemas
especialistas apresentam desvantagens, pois é difícil
construir regras capazes de cobrir todas as possíveis
situações de faltas.
A teoria_dos_conjuntos_fuzzy também tem sido
muito utilizada. Em Choi et al. (1995) é descrito um
processador de alarmes que utiliza essa técnica para
manipular as incertezas.
Em Neis (2005), são propostos métodos de
processamento_de_alarmes baseados em algoritmos
genéticos, sendo que estes possuem a vantagem de
encontrar múltiplas soluções globais de maneira direta
e eficiente, especialmente em casos de alarmes falsos
eou não reportados, onde diferentes combinações de
eventos podem produzir o mesmo conjunto de alarmes.
O processador de alarmes proposto por Coutto
Filho et al. (1999) é composto por diversas RNAs,
sendo cada uma responsável por detectar defeitos em
determinados equipamentos componentes do sistema.
É amplamente aceito que se deve usar a teoria da
parcimônia na análise de múltiplas faltas em sistemas
de energia_elétrica. A premissa considerada é que o
menor número de eventos capaz de explicar os alarmes
recebidos deve ser selecionado. Encontrar esses
eventos é um problema de otimização, na qual procurase minimizar o número de eventos associados aos
alarmes. Neste processo alguns alarmes podem ser
considerados falhos, ou seja, deveriam estar ativos para
explicar um determinado evento. Ainda existe a
possibilidade, mais remota, do alarme ser falso, ou
seja, embora ativo, não é considerado na solução.
Soluções baseadas em inteligência computacionais
foram largamente propostas nos últimos anos. Porém,
atualmente, com os avanços no desempenho de
resolvedores genéricos para problemas de programação
inteira, tornou-se viável utilizar formulações analíticas
para solucionar o problema de processamento de
alarmes. Este artigo propõe um modelo_matemático
com variáveis binárias para resolução do problema de
processamento_de_alarmes. Tal metodologia prescinde
de ajustes de parâmetros como heurísticas e
metaheurísticas, o que torna fácil a sua aplicação numa
grande gama de instâncias do problema em questão.
Ainda, em casos em que o tempo computacional para
provar a otimalidade seja proibitivo para os fins
práticos desejados, pode-se truncar o processamento e
obter uma solução quase-ótima.
3.

Programação Inteira

Um problema de Programação Inteira é um caso
particular de problemas_de_otimização no qual as
variáveis só podem assumir valores inteiros (discretos)
um problema de Programação Inteira Mista é outro
caso particular no qual apenas uma parte das variáveis
está restrita a valores inteiros. Um subconjunto desta
classe de problemas ocorre quando as variáveis do
problema estão restritas a apenas dois valores (zero e
um, por exemplo), constituindo a programação binária
ou zero-um.

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Existem diferentes abordagens para resolução de
problemas de programação_inteira. Entre os métodos
exatos de resolução estão branch-and-bound,
programação_dinâmica, métodos baseados em
relaxação lagrangeana, e métodos baseados em
programação_linear e inteira, tal como branch-and-cut,
branch-and-price, e branch-and-cut-and-price. Estas
técnicas são projetadas para serem flexíveis e
independentes de domínio, a fim de serem aplicáveis a
uma grande variedade de problemas práticos sem a
necessidade de projetar estratégias específicas. De fato,
em ambientes reais, flexibilidade é frequentemente um
fator crítico para responder prontamente s trocas de
requisitos.
Muitos dos métodos citados acima são
implementados em solvers de otimização como
CPLEX, LINDO, XPRESS, MINTO. Atualmente esses
aplicativos conseguem tratar, de forma eficiente,
instâncias de problemas de programação_inteira com
dimensões suficientemente grandes para serem úteis
em aplicações práticas. Jnger et al. (2010) apresentam
um estudo sobre a evolução destes métodos nos
últimos 50 anos.
4.

 Requer apenas informação sobre a função
objetivo a ser otimizada, e avaliada para cada membro
da população.
5.

Metodologia
5.1 Formulação da Programação Inteira

O modelo_matemático apresentado a seguir é
baseado em um modelo para o problema de
recobrimento.
Modelo

s.a.









Algoritmos Genéticos

A evolução das espécies pode ser vista como um
mecanismo adaptativo de otimização que envolve certa
aleatoriedade, Tanomaru (1995).
Os algoritmos_genéticos (AGs) são modelos
computacionais inspirados na evolução das espécies,
que incorporam uma solução potencial para um
problema específico. Eles utilizam uma estrutura
semelhante  de um cromossomo e aplicam operadores
de seleção e cruzamento de forma a preservar
informações relevantes  solução do problema.
Cada cromossomo, chamado de indivíduo no AG,
corresponde a um ponto no espaço de soluções do
problema de otimização. O processo de solução
adotado nos algoritmos_genéticos consiste em gerar,
através de regras específicas, um grande número de
indivíduos, população, de forma a explorar o espaço de
soluções.
Wen e Han (1995) destacam que ao se utilizar o
método baseado no AG, múltiplas soluções ótimas
podem ser encontradas em um único passo, pois ele
tem facilidade em encontrar o ótimo global além da
possibilidade de encontrar muitos ótimos locais. Isto é
especialmente adequado para situações onde existir um
mau funcionamento dos relés_de_proteção eou
disjuntores, porque, nestas situações, pode haver mais
de um resultado estimado razoável, e é de se esperar
que todos sejam encontrados.
Os AGs pertencem  classe dos métodos
probabilísticos de busca e otimização. Como
características que diferenciam o AG de outros
métodos de otimização, destacam-se (Tanomaru
(1995))
 Utiliza um conjunto de pontos (soluções
candidatas)
 Opera em um espaço de soluções codificadas

4540

Conjuntos
I  conjunto dos índices dos eventos
J conjunto dos índices dos alarmes
E(j) conjunto dos índices dos eventos
associados ao alarme j
A(i)  conjunto dos índices dos alarmes
associados ao evento i
Parâmetros

Variáveis

A função objetivo é definida em (1), onde w1, w2
e w3 representam os pesos para alarmes falsos, alarmes
falhos e eventos, respectivamente. Esta função objetivo
é semelhante  proposta por Wen, Chang e Srinivasan
(1995). O critério que reflete as exigências para
resolver o problema de estimação da seção em falta é
fundamentado na teoria da parcimoniedade, ou seja, a
hipótese mais simples capaz de explicar os alarmes
recebidos deve ser a solução. Daí o uso de um um
critério minimizador.
A restrição (2) determina que cada alarme deve
estar associado a um evento ou é considerado falso. Os
alarmes falhos são determinados pela restrição (3).
Observe que um evento só pode ser considerado na
solução se todos os alarmes associados a este forem
considerados ativos ou falhos. As restrições (4) e (5)
correspondem  condição de binariedade das variáveis.

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Para um melhor entendimento, é apresentado um
exemplo com quatro eventos e três alarmes. Os eventos
e seus respectivos alarmes são representados pela
matriz M, conforme segue.
a1a1 a2 a2a3

M

ee1 1 11
e2 0
e2 0
e3 1
e  1
e4 3 0

e4

a3

00 0
1 0  
1 0
1 0 
1  0
0 1 
0 0 1 
0

A identificação de alarmes falsos e falhos pelo
modelo é discutida a seguir.
Assumindo agora o recebimento dos alarmes a2 e
a3, e avaliando como a possível causa dos disparos o
evento e3, teríamos as seguintes restrições para
avaliação dos alarmes falhos

s1  0  1  0
s2  0  1  1
s3  0  1

Para esta configuração o modelo assume a forma
Min w1 s1  s2  s3   w2  f1  f 2  f 3   w3 e1  e2  e3  e4 

s.a.

s1  e1  e3  a1
s2  e2  e3  a2
s3  e4  a3
e1  a1  f1

É possível ver que se considerado como resposta
o evento e3 teremos na primeira restrição s1+10, como
a igualdade já é verdadeira não há necessidade de
mudança na variável s1. Na segunda restrição s2+11,
também com a igualdade está correta, a variável s2
mantêm-se em 0. Já na terceira restrição temos s3+01,
assim a variável s3 assume o valor 1, para que a
igualdade seja mantida, tornando 11. Desta forma se
o evento e3 for escolhido como única resposta para os
alarmes recebidos o alarme a3 passa a ser considerado
falso.
O segundo grupo de restrições avalia quais
alarmes são falhos, assim para o evento e3, somente,
teríamos

e2  a2  f 2

0  0  f1

e3  a1  f1

0  1  f2

e3  a2  f 2

1  0  f1

e4  a3  f 3

1  1  f2

e1 , e2 , e3 , e4  0,1

0  1  f3

s1 , s2 , s3 , f1 , f 2 , f 3  0,1
Se todos os alarmes são recebidos, ou seja, a1  a2
 a3  1 e w1 >> w2 >> w3 > 0, uma solução ótima
possível é dada por e3  e4  1. Observe que outra
solução ótima é dada por e1  e2  e4  1.
As múltiplas soluções ótimas são facilmente
identificadas, uma vez que, em geral, os resolvedores
utilizam o método de branch and bound que pode ser
adaptado para tal finalidade. Caso o pacote de
programação_linear_inteira em uso não forneça essa
opção, é possível introduzir uma restrições
iterativamente no modelo para cortar a última solução
encontrada. Para tanto, basta considerar os n eventos
que compõem uma dada solução que se deseja cortar e
inserir a restrição (8).
n

e
i 1

i

 n 1
(8)

No exemplo, basta incluir a restrição
e3  e4  1

(9)
para eliminar a primeira solução, e fazer o modelo
encontrar a próxima solução com menor valor de
função objetivo possível. Desta forma, se a nova
solução possui o mesmo valor de função objetivo, esta
deve ser considerada uma resposta tão boa quanto a
anterior. Este processo pode ser iterado até que todas
as soluções ótimas sejam encontradas.

4541

Analisando as restrições é possível notar que
todas as igualdades estão corretas, com exceção da
terceira na qual 10+f1 necessita mudança de valor da
variável f1 para que a igualdade seja mantida, assim f1
deve assumir o valor 1, tornando a igualdade 10+1
verdadeira. Desta forma, se o evento e3 for escolhido
como única resposta aos alarmes recebidos a variável
s1 recebe o valor 1, diagnosticando o alarme a1 como
falho. Obviamente estas soluções não são ótimas, mas
exemplificam perfeitamente como alarmes falhos e
falsos são considerados pelo modelo.
5.2 Formulação do Algoritmo Genético
O Algoritmo Genético foi implementado no
MATLAB, seguindo as estruturas padrões. A função
objetivo utilizada, da mesma forma que no modelo
matemático, é semelhante  proposta por Wen, Chang
e Srinivasan (1995) e é formulada matematicamente
pela expressão (10).
(10)
Onde
E é a variável de hipótese expressa em forma de
vetor de ne elementos, onde ne é o numero de possíveis
eventos. Cada elemento do vetor E representa o estado

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

de um evento, recebendo 0 (se o evento não ocorreu) e
1 (se o evento ocorreu).
W  constante que garante o valor negativo da
função objetivo, independentemente dos valores das
variáveis
w1, w2, w3 coeficientes positivos de pesos, que
irão definir a importância de cada termo
A é um vetor de na elementos, sendo na o número
de alarmes do sistema, que depende dos vetores Ar e
Am(E). Ar é o vetor de alarmes recebidos (sendo
atribuído 0 se o alarme não for acionado e 1 se sim) e
Am(E) é o vetor que contém todos os alarmes
esperados para os eventos que compõem E. O vetor A
é determinado da seguinte maneira se o elemento jth
do vetor Ar for 0, então o elemento jth de A recebe 0.
Se o elemento jth dos vetores Ar e Am(E) forem 1,
então o elemento jth do A recebe 0. Os outros bits do
vetor recebem 1. A é o numero de não zeros
contidos no vetor A. Este termo verifica se E cobre
todos os alarmes recebidos, e representa uma pequena
possibilidade de um alarme recebido ser falso (Wen e
Chang (1997)).
B é um vetor de na elementos e é determinado pela
subtração dos elementos dos vetores Ar e Am(E),
criando assim um vetor diferença. B é a quantidade
de não zeros do vetor B. Este termo representa a
inconsistência dos eventos dados como respostas e o
evento ocorrido, representando a quantidade de
alarmes não justificados pela solução ou alarmes que
estariam faltando no evento por alguma falha de
comunicação.
E  quantidade de não zeros contida em E,
representando o número de eventos que o compõem.
Tomando a resposta mais simples como a mais correta.
Seguindo o principio da parcimônia
Vários parâmetros do algoritmo_genético podem ser
escolhidos para melhorar o seu desempenho,
adaptando-o s características particulares de cada
problema. Assim, cada problema exige valores
particulares para o tamanho da população, taxa de
crossover e de mutação. Foram utilizados os mesmos
operadores de Wen e Chang (1997), assim o crossover
utilizado foi de ponto simples e a taxa de mutação
utilizada foi a simples.
Foram utilizados 2 critérios de parada diferentes. No
primeiro, o algoritmo deve parar assim que o valor de
fitness chegue ao valor da equação (11), pois esta é a
resposta ideal para o caso mais simples possível, onde
todos os alarmes são explicados por somente um
evento, acarretando em vetores nulos para A e B. O
segundo critério de parada utilizado foi o de
estagnação do valor de fitness, que consiste em parar
de rodar o algoritmo quando em 10 gerações não
houver mudança no melhor valor de fitness encontrado,
indicando que o mesmo já foi obtido.

(11)

4542

6.

Resultados obtidos

As comparações foram realizadas com base nas
mesmas relações entre eventos e alarmes utilizados
por Wen, Chang e Srinivasan (1995) (1997), Wen e
Chang (1997). Assim foram feitos dois estudos para
testar as metodologias. O primeiro caso possui 11
alarmes e 10 eventos, e o segundo possui 70 alarmes e
50 eventos, conforme a Tabela 1 e 3, respectivamente.
Os resultados obtidos no primeiro e segundo testes
estão apresentados nas Tabelas 2 e 4, respectivamente.
O algoritmo_genético foi implementado e testado
no programa MATLAB, e o resolvedor genérico
utilizado foi programa open source glpk versao 4.9. Os
testes foram processados em um computador Intel Core
2 duo 2.1Ghz, 4GB memória RAM.
Os pesos utilizados para as constantes que
definem a importância relativa de cada um dos
parâmetros dos modelos de otimização foram os
mesmos utilizados por Wen, Chang e Srinivasan
(1995) (1997), com 100, 10 e 1 para w1, w2, w3,
respectivamente. No modelo de programação_inteira
foi necessário utilizar w1 com peso de 110, pois a
constante w2 do AG em Wen, Chang e Srinivasan
(1995) (1997) multiplica uma variável que mede a
diferença entre os alarmes recebidos e os justificados
pelos eventos dados como resposta. Desta forma, são
considerados tanto alarmes falsos como alarmes falhos,
entretanto o w2 do modelo de programação_inteira
multiplica somente os alarmes considerados falhos.
Tabela 1 Eventos e seus conjuntos de alarmes correspondentes
Eventos
Conjuntos característico de alarmes
e1
e2
e3
e4
e5
e6
e7
e8
e9
e10

a1, a4, a6, a7
a1, a4, a6, a8
a1, a4, a5, a9, a10
a1, a4, a9, a10
a1, a3, a4, a9, a10
a1, a3, a9
a9
a11
a1, a2
a1

Tabela 2  Resultados para o caso 11 alarmes 10 eventos
Casos
Alarmes recebidos
Eventos estimados
1
2
3
4
5
e6
e7
e8
e9
e10

a1, a4, a6, a7, a9
a1, a2, a4, a6, a8
a1, a2, a9, a11
a1, a3, a4, a9, a10, a11
a1, a2, a3, a9
a1, a3, a4, a5, a9, a10
a1, a3, a6, a9, a10
a1, a4, a6, a7, a8
a4, a5, a6, a8
a1, a2, a3, a4, a5, a6,
a7, a8, a9, a10, a11

e1, e7
e2, e9
e7, e8, e9
e5, e8
e6, e9
e3, e5 ou e3, e6
e5 ou e6
e1, e2
e2
e1, e2, e3, e6, e8, e9 ou
e1, e2, e3, e5, e8, e9

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Tabela 3  Eventos e seus correspondentes conjuntos característicos
de alarmes
Evento
Conjuntos característico de alarmes
e1
e2
e3
e4
e5
e6
e7
e8
e9
e10
e11
e12
e13
e14
e15
e16
e17
e18
e19
e20
e21
e22
e23
e24
e25
e26
e27
e28
e29
e30
e31
e32
e33
e34
e35
e36
e37
e38
e39
e40
e41
e42
e43
e44
e45
e46
e47
e48
e49
e50

a8, a13, a39, a49, a70
a11, a12, a25, a35, a46, a52
a10, a23, a41, a58
a24, a52, a56, a58
a55
a1, a45
a6, a12, a17, a47, a56
a18, a42, a56
a60
a17, a18, a58
a14, a32, a50
a47
a31
a22, a36, a45, a54
a9, a12, a50, a51, a66
a4, a41
a13
a26, a43 a49, a52, a60
a4, a25, a44, a63, a69
a37, a47, a57, a61, a66
a20, a26, a43
a2, a9, a23, a29, a36
a11, a23, a49, a66
a48
a42
a22
a3, a18, a40, a53, a69
a14, a57, a61, a64
a35, a59
a3, a53, a67, a69
a13, a33, a38, a63
a37, a70
a2, a8, a32, a56, a58
a6, a24, a30, a34, a57, a67
a16, a43, a64, a65, a70
a41, a59
a61, a67
a42, a49, a70
a1, a11, a46, a55, a68
a7, a35
a6, a16, a40, a50, a56
a6, a50, a53
a4, a31, a41, a63
a48, a57
a5, a7, a41, a69
a18, a27, a33, a36
a38
a11, a12, a17, a25, a62, a65
a27
a3, a19, a51, a59, a61

Tabela 5  Taxas de acerto do AG para o caso 70 alarmes 50 eventos

Tabela 4  Resultados para o caso 70 alarmes 50 eventos
Caso
Alarmes recebidos
Eventos estimados
1
2
3
4
5
6
7
8
9
10

a31, a55, a60
a8, a13, a39, a49, a55, a70
a2, a9, a23, a29, a37, a41, a59
a20, a26, a43, a48, a57, a59
a4, a11, a12, a17, a25, a41, a62,
a70
a8, a13, a33, a38, a39, a42, a49,
a63, a70
a20, a26, a43, a49, a52
a17, a18, a20, a26, a41, a59
a6, a12, a16, a17, a26, a40, a41,
a43, a47, a49, a50, a52, a59
a1, a3, a11, a22, a23, a36, a40,
a41, a45, a53, a55, a58, a68, a69

É importante observar que o modelo de
programação_inteira, ao contrário do AG, não necessita
de ajustes. Assim, foi necessário somente apresentar os
conjuntos I, J, E(j) e A(i), os quais representam a relação
entre os eventos e alarmes esperados no universo da
aplicação.
Outra característica importante é o fato do modelo
ser determinístico, isto é, os resultados encontrados
sempre são os mesmos para o mesmo conjunto de
alarmes recebidos, diferentemente dos modelos
heurísticos, que tendem a ter problemas com
convergência ao ótimo global, o qual não tem a
convergência garantida. Ou seja, os modelos
heurísticos podem atingir resultados diferentes para os
mesmos conjuntos de alarmes devido a problema com
mínimos locais e ajuste_de_parâmetros.
Em todos os testes, o modelo de programação
inteira encontrou todas as soluções ótimas em tempos
de processamento muito próximos a 0,1 segundos
Para a utilização do AG nos 2 estudos feitos
houve a necessidade de ajustes nos parâmetros do AG,
conforme as dimensões de cada problema. Assim os
valores utilizados para seus parâmetros foram os
seguintes
Teste 1 11 alarmes 10 eventos
 tamanho da população 50
 número de gerações 15
 probabilidade de cruzamento 0,75
 probabilidade de mutação  0,01
Teste 2 70 alarmes 50 eventos
 tamanho da população 400
 número de gerações 50
 probabilidade de cruzamento 0,9
 probabilidade de mutação  0,01
Os tempos médios de processamento do
algoritmo_genético para os testes do primeiro caso
foram próximos a 1 segundo, enquanto o tempo de
processamento médio para o segundo estudo foi de
aproximadamente 8 segundos. O AG obteve resultados
máximos nos testes do primeiro estudo, porém no
segundo estudo mostrou problemas de convergência 
resposta ótima, conforme demonstra a Tabela 5.

e5, e9, e13
e1, e5
e22, e36
e21, e44
e16, e48
e1, e31, e38 ou e1,
e25, e31
e18, e21
e10, e21, e36
e7, e18, e36, e41
e3, e14, e27, e39

4543

Caso
1
2
3
4
5
6
7
8
9
10

Taxa de acerto (teste 1total de teste)
910
910
810
1010
610
810
1010
910
1010
810

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

7.

Conclusão

Neste artigo foi proposta uma nova técnica com
o objetivo de solucionar o problema de processamento
de alarmes, sendo essa baseada em programação_inteira
binária. A fim de validar o método foi feita uma
comparação entre o algoritmo proposto com o
algoritmo_genético desenvolvido por Wen, Chang e
Srinivasan (1995) (1997).
Com o uso do modelo de programação_inteira
foi possível encontrar a solução ótima para todos os
experimentos em tempos computacionais muto
reduzidos. Diferente do AG, o modelo não possui
parâmetros para ajustar, sendo possível aplicá-lo
diretamente a sistemas de tamanhos diferentes, sem
nenhum tipo de ajuste.
O algoritmo_genético mostrou-se uma
ferramenta capaz de lidar com o problema de
otimização, encontrando respostas boas e ótimas para
os dois testes (teste1 e teste2). Porém foi necessário
ajustar os valores de população, crossover, mutação e
número de gerações para cada um dos estudos, para
que houvesse a convergência correta ao ótimo global.
Deve-se considerar ainda que os parâmetros foram
ajustados com o conhecimento prévio das soluções
ótimas globais.
Os resultados mostram que o método de
programação_inteira proposto é promissor, além de
tratar de modo natural a possibilidade de ocorrência de
faltas simultâneas.
8.

Referências Bibliográficas

Cardoso Jr., G. (2003). Estimação da Seção em Falta
em Sistemas Elétricos de Potência via Redes
Neurais e Sistemas Especialistas Realizada em
Nível de Centro de Controle.. Tese (Doutorado em
Engenharia Elétrica), Universidade Federal de
Santa Catarina, Florianópolis, 176p.
Choi, S. S. et al. (1995). Development of an on-line
fuzzy expert system for integrated alarm
processing in nuclear plants. IEEE Transactions
on Nuclear Science, Vol. 42, N 4, pp. 14061418.
Coutto Filho, M.B. do et al. (1999). Localização de
defeitos em sistemas de energia_elétrica
utilizando sistemas_inteligentes. In XV
Seminário Nacional de Produção e Transmissão
de Energia Elétrica  SNPTEE, Foz do Iguaçu,
PR, Brasil.
de Souza J., Meza E., Schilling M., and Filho, M. D. C.
(2004). Alarm processing in electrical power
systems through a neuro fuzzy approach. IEEE
Trans. Power Del., vol. 19, no. 2, pp. 537544.
El-Sayed, M.H. Alfuhaid, A.S. (2000). ANN-based
approach for fast fault diagnosis and alarm
handling of power systems. International
Conference on Advances in Power System
Control, Operation and Management, APSCOM00. Vol. 1, pp. 54-58.

4544

Gers, Juan M. Holmes, Edward J. (2004). Protection
of electricity distribution networks  2nd ed. The
Institution of Electrical Engineers  IEE,
London, United Kingdom.
Jnger M., Liebling T., Naddef D., Nemhauser G.,
Pulleyblank W., Reinelt G., Giovanni Rinaldi ,
Wolsey L. A. (2010). eds. 50 Years of Integer
Programming 1958-2008 From the Early Years to
the State-of-the-Art, Springer Heidelberg.
Kezunovic, M. and Guan, Y. (2009). Intelligent
Alarm Processing From Data Intensive to
Information Rich, 42nd Hawaii International
Conference on System Sciences, HICSS 09, pp.
18.
Kirschen, D. S.  Wollenberg, B. F. (1992).
Intelligent Alarm Processing in Power Systems.
Proceedings of the IEEE, Vol. 80, N 5, pp. 663
672.
Lin W., Lin C. and Sun Z. (2004). Adaptive multiple
fault detection and alarm processing for loop
system with probabilistic network. IEEE Trans.
Power Del., vol. 19, no. 1, pp. 6469.
Neis, P. et al. (2005). Processamento de alarmes em
sistemas_elétricos_de_potência utilizando
algoritmos_genéticos. VI SIMPASE. Simpósio
de Automação de Sistemas Elétricos. São Paulo,
SP, Brasil.
Tanomaru, J. (1995). Motivação, fundamentos e
aplicações de algoritmos_genéticos. In II
Congresso Brasileiro de Redes Neurais, Anais.
Curitiba, PR, Brasil.
Vale, Z.A. e Moura A.M. (1993). An expert system
with temporal reasoning for alarm processing in
power system control centers. IEEE Transactions
on Power Systems, Vol. 8, N 3, pp. 1307-1314.
Wen, F. and Han, Z. (1995). Fault section estimation
in power systems using a genetic algoriythm,
Eletric Power Systems Research, vol. 34, p. 165172.
Wen, F. S. and Chang, C.S (1997). Tabu search
approach to alarm processing in power systems.
IEE Proc. Gener. Transm. Distrib. Vol. 144, n 1,
p. 160-168.
Wen, F. S. Chang, C.S. Srinivasan, D. (1995). Alarm
Processing in Power Systems Using a Genetic
Algorithm. IEEE International Conference on
Evolutionary Computation. Volume 1, p. 27-32.
Wen, F. S. Chang, C.S. Srinivasan, D. (1997).
Probabilistic
approach
for
fault-section
estimation in power systems based on a refined
genetic algorithm. IEE Proc. Gener. Transm.
Distrib. Vol. 144, n 2, p. 160-168.
Wu, Y. Kezunovic, M. Kostic, T. (2007). An
Advanced Alarm Processor using Two-level
Processing Structure. IEEE Power Tech,
Lausanne, pp.125130.