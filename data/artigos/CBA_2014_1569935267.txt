Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

SÍNTESE DE ÁRVORES DE PADRÕES FUZZY ATRAVÉS DE PROGRAMAÇÃO GENÉTICA
ANDERSON R. SANTOS1,JORGE LUÍS M. DO AMARAL1,2.
1. Programa de Pós-Graduação em Engenharia Eletrônica - UERJ
2. Departamento de Engenharia Eletrônica e de Telecomunicações - UERJ
E-mail andersonrdsrj@hotmail.com, jamaral@uerj.br
Abstract This paper presents a system for induction of fuzzy classifiers , designed to obtain interpretable models that explain
"how" the distinction between classes was taken. The method used fuzzy pattern trees, which is a hierarchical tree-based method,
which presents as internal nodes, fuzzy logical operators and the leaves are composed of a combination of fuzzy terms with the
input attributes. The classifier was designed by creating a tree for each class, which will represent the class description which
guarantees the desired interpretability. The learning method originally designed for FPT was replaced by Cartesian Gentic Programming in order to exploit the search space better. The FPT classifier was compared against Support Vector Machines, K
Nearest Neighbor and Random Forests on five dataset from the UCI Machine Learning Repository and it presented competitive
results.
Keywords Machine Learning, Fuzzy Pattern Trees, Cartesian Genetic Programming, Classification, interpretability.
Resumo Este artigo apresenta um sistema de indução de classificadores fuzzy, buscando obter modelos interpretáveis, isto é,
que forneçam uma explicação de como foi feita a distinção entre as classes. Utilizou-se Árvores de Padrões Fuzzy(APF), que é
um método hierárquico, com uma estrutura baseada em árvores que possuem como nós internos operadores lógicos fuzzy e folhas
compostas pela associação de termos fuzzy com os atributos de entrada. O classificador foi feito criando uma árvore para cada
classe, esta árvore será uma descrição lógica da classe, o que garante a interpretabilidade desejada. O método de aprendizado originalmente concebido para o APF foi substituído pela Programação Genética Cartesiana com o intuito de explorar melhor o espaço de busca. O Classificador APF foi comparado com Máquinas de Vetores de Suporte, K Vizinhos mais próximos e florestas
aleatórias em cinco bases de dados do UCI Machine Learning Repository e observou-se que o classificador APF apresenta resultados competitivos. .
Palavras-chave .

1

maior interpretabilidade do modelo pelo fator humano (Hllermeier, 2005).

Introdução

Em geral os métodos fuzzy são baseados em regras, sendo o centro das pesquisas neste campo. Os
sistemas_fuzzy baseados em regras podem representar
tanto funções de classificação quanto de regressão.
Existe um grande número de estratégias que foram
desenvolvidas para induzir modelos fuzzy baseados
em regras (Cordón, 2011). Tem especial importância
na área de aprendizado de regras fuzzy, os métodos
híbridos que combinam a teoria de sistemas_fuzzy
com técnicas de inteligência_computacional como os
algoritmos evolucionários e as redes_neurais. Por
exemplo, algoritmos evolucionários são frequentemente utilizados para sintonizar uma base de regras
fuzzy ou para fazer uma busca no espaço de regras de
uma forma sistemática(Koza, 1992). Também tem
bastante destaque os chamados métodos neuro-fuzzy
(Nauck et al., 1997)(Sun et al., 1993). Nestes métodos, uma estratégia possível é codificar o sistema
fuzzy como uma rede_neural e aplicar métodos consagrados de treinamento, como o backprogation(Haykin, 1998).

O grande progresso na aquisição_de_dados digitais e a evolução das tecnologias de armazenamento
vêm criando um volume imenso de dados cuja análise está acima dos limites da capacidade humana. Isto
justifica um grande interesse no aprendizado_de_máquinas que é o ramo da inteligência_artificial que
trata do estudo de modelos que podem aprender a
partir de um conjunto de dados(Witten et al., 2005).
A indução destes modelos pode ser feita de forma
automática por meio de diversas abordagens tais
como redes_neurais artificiais, métodos bayesianos,
modelos gráficos, árvores de decisão, entre outros.
Entretanto, quando se deseja compreender como o
modelo induzido consegue fazer a distinção entre
diferentes classes, isto é, caso se deseje extrair o
conhecimento de como esta distinção é feita, os modelos gerados por abordagens mais simbólicas, por
exemplo, sistemas baseados em regras tornam-se
mais atrativos.
Alguns métodos que podem ser utilizados para
se obter esses modelos são baseados na teoria de
conjuntos_fuzzy(Cordón, 2011),(Herrera, 2008).
A maior motivação para a utilização dos sistemas_fuzzy foi criar uma interface entre padrões quantitativos e estruturas de conhecimento qualitativas
expressas em termos de linguagem natural. Esta
característica faz com que os sistemas_fuzzy sejam
atraentes do ponto de vista da representação_do_conhecimento, permitindo que o conhecimento adquirido em uma base de dados possa ser representado de
uma forma linguística compreensível, gerando uma

A obtenção de um sistema_fuzzy baseado em regras pode não ser uma tarefa simples, e dependendo
da aplicação, uma grande quantidade de regras é
necessária, podendo comprometer a interpretabilidade do sistema. Por outro lado, um sistema com poucas regras podem ser facilmente interpretável, mas
ter sua acurácia preditiva comprometida.
Neste trabalho foi feito um sistema para indução
de modelos de forma automática, utilizado na tarefa
de classificação. O projeto foi feito utilizando um

1261

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

método baseado na teoria de conjuntos_fuzzy, chamado Árvores de Padrões Fuzzy (APF) , este método
não é baseado em regras, mas é um método hierárquico, com uma estrutura de árvores não dependente
de conhecimento anterior. O método de aprendizado
do APF foi substituído e em seu lugar foi utilizada a
Programação Genética Cartesiana que é um método
de programação genética no qual o programa é representado por grafos codificados em uma sequência
linear de inteiros. Este projeto teve como objetivo
uma classificação com uma boa acurácia gerando um
modelo interpretável no processo.
Este trabalho está dividido nas seguintes seções,
primeiro será apresentado o conceito das Árvores de
Padrões Fuzzy, na seção seguinte será apresentada a
Programação Genética Cartesiana e na sequência será
apresentado o método propostos com as decisões
tomadas durante o projeto, e então os resultados
obtidos.

entrada são o teor alcoólico, a acidez, a concentração
de sulfatos e de dióxido de enxofre. Estes atributos
estão associados a um termo fuzzy que representa um
intervalo do universo de discurso do atributo. Por
exemplo na figura 1, o termo fuzzy álcoolbaixo,
representa o conjunto fuzzy que representa teor alcoólico baixo. O valor de pertinência obtido nos conjuntos_fuzzy vai sendo agrupado através de operadores
que mantém os resultados parciais no intervalo 0,1.
O valor obtido na saída após todos os agrupamentos
das características deve se aproximar de 1 se a árvore
representa bem a classe. No caso da figura 1 se a
árvore representa a classe de vinhos de boa qualidade. Um vinho que tem seus atributos inseridos nas
entradas da árvore e tem um valor próximo a 1 na
saída será considerado um vinho de boa qualidade.

2 Árvores de Padrões Fuzzy
O modelo de Árvores de Padrões Fuzzy (APF)
foi criado com o intuito de representar o conhecimento através de uma expressão representada na
forma de um grafo ao invés de representá-lo na forma de regras. A utilização deste tipo de representação hierárquica procura minimizar os problemas
existentes em sistemas baseados em regras tais como
o aumento exponencial do número de regras, como o
aumento do número de entradas e o comprometimento da interpretabilidade quando uma grande quantidade de regras é gerada para atingir os requisitos de
acurácia. O primeiro método de indução de APF foi
criado por Huang, Gedeon e Nikravesh(Huang et al.,
2008) foi utilizado na área do aprendizado_de_máquinas. O algoritmo de geração da árvore foi posteriormente aperfeiçoado em(Senge et al., 2011).
As Árvores de Padrões Fuzzy são modelos hierárquicos com uma estrutura de árvore, no qual os
nós internos são operadores utilizados nos sistemas
fuzzy e as folhas dessas árvores são compostas por
termos fuzzy associados a um atributo de entrada. A
APF propaga a informação do fundo para o topo, os
nós internos recebem os valores de seus antecessores
e os combinam utilizando um operador, apresentando
a saída para o nível superior. As APFs implementam
um mapeamento recursivo, apresentando a saída em
um intervalo unitário. Um classificador baseado em
árvore de padrões é construído criando uma árvore
para cada classe. São inseridos os valores dos atributos que se deseja classificar nas entradas das árvores
de cada classe e a predição da classe que esse conjunto de dados pertence é feita escolhendo a árvore que
tem o maior valor de saída. Geralmente cada árvore
pode ser considerada como uma descrição lógica
da classe, permitindo uma interpretação mais concreta do problema de aprendizado(Senge et al., 2011).

Figura 1 Árvore de Padrões Fuzzy da qualidade de um bom vinho
tinto

As APFs se apoiam em três conceitos a fuzzificação dos atributos de entrada a estruturação hierárquica de uma dependência funcional através do particionamento recursivo de um critério em sub-critérios
e a agregação flexível de sub-critérios através de
operadores fuzzy parametrizados(Senge et al., 2011).
A associação entre um atributo e um termo fuzzy é representada por uma função de pertinência.
Ver figura 2.

Figura 2 Associação Atributo-Termo Fuzzy

O modelo baseado em árvore de padrões mapeia diversas entradas em apenas uma variável de
saída. A interpretação da saída produzida pode ser
vista como um modelo que simplifica a avaliação
global de uma propriedade, avaliando diferentes subcritérios e agregando estas avaliações posteriormente(Senge et al., 2011). Retornando a figura 1, pode-se
observar que a qualidade do vinho está relacionada
com duas sub-árvores. A primeira relaciona o teor
alcoólico e a acidez, enquanto a outra trata da concentração de sulfato e de dióxido de enxofre. A in-

Um exemplo de APF pode ser visto na figura 1,
onde a árvore apresentada determina uma classe que
representa a qualidade de um vinho. Os atributos de
1262

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

res soluções parciais são mantidas como candidatos.
A cada nível da árvore, ela gera todos possíveis sucessores dos nós do nível atual, organizando-os em
uma ordem crescente de custo heurístico. Porém,
para reduzir os requisitos de memória, este método
só armazena um número pré-determinado, (largura
do feixe de busca) de melhores sucessores de cada
nível. Somente estes melhores sucessores serão expandidos futuramente.
A figura 3 exemplifica a sequência de criação de
uma Árvore de Padrões Fuzzy top-down, iniciando
com uma pattern tree primitiva (A), que é um subconjunto fuzzy no domínio de um atributo. Ocorre
então a expansão das árvores candidatas de forma
iterativa selecionando a melhor árvore baseando-se
em um critério de medida, até que um critério de
término seja atingido.

formação destas árvores é posteriormente combinada
em um nível mais alto. Neste tipo de sistema é possível identificar que as sub-árvores representam diferentes conhecimentos que devem ser combinados.
Além dos termos fuzzy, também são utilizados na
criação das árvores, t-normas, t-conormas e dois
operadores de média. O operador de média (OWAordered weighted average) é a combinação de k
números, v1, v2,..., vk, definido pela equação 1
(

)



()

(1)

Onde o  é uma permutação entre o conjunto de
números 1,2,...,k de forma que v(1) v(2)...  v(k)
e w(w1,w2,...,wk) é um vetor de pesos que satisfaz wi
 0 para i1,2,...,k e o somatório dos pesos de 1 a k
deverá ser igual a 1. O outro operador de média é o
WA (weighted average), que é similar ao OWA,
porém sem o ranqueamento dos valores de v.
O primeiro método de aprendizado proposto por
Huang, Gedeon e Nikravesh (Huang et al., 2008), é
chamado de bottom-up induction. Nele a indução das
árvores procura criar uma representação lógica para
cada classe de uma forma iterativa. O processo ocorre do fundo para o topo. Em cada iteração do processo, combina-se as duas melhores árvores candidatas
com um novo nó interno. O uso desta estratégia é
motivado intuitivamente. Ela pode ser vista como
uma combinação iterativa para a construção de características complexas, a partir de características mais
básicas criadas pelos atributos originais (Senge et al.,
2011).
Outro método para o aprendizado de FPTs foi
proposto por Robin Senge e Eyke Hllermeier chamado de top-down induction(Senge et al., 2011) .
Nesta estratégia, ao invés de juntar duas árvores em
uma nova árvore, muito maior e com certa diferença
na estrutura, a ideia é fazer pequenas modificações.
Isto é feito expandindo um nó de folha. Por exemplo,
na figura 3, a árvore formada apenas pela folha A ,
que representa a junção de um atributo e um termo
fuzzy, representando uma característica básica, é
substituída por uma característica composta pela
mesma folha A e outra folha B, agregadas por um
operador média. Os novos operadores são inseridos
em níveis mais baixos da árvore, mais ao fundo, isto
faz com que cada novo operador tenha uma influência menor no comportamento entrada-saída que os
operadores inseridos anteriormente. Este procedimento de realizar pequenas modificações na árvore a
cada iteração proporciona uma maior exploração do
espaço de busca, o que aumenta a chance de encontrar uma árvore que atenda ao requisitos do usuário.
A procura pela solução na estratégia top-down é
feita através de um algoritmo de busca heurístico
chamado beam search, que explora a árvore expandindo o nó mais promissor a partir de um conjunto
limitado de opções. A beam search é um procedimento de busca do tipo best-first search. Na beam
search apenas um número predeterminado de melho-

Figura 3 Criação de uma pattern tree  estratégia Top-Down

A estratégia top-down possui algumas desvantagens A primeira delas está relacionada ao fato do
algoritmo de busca utilizado ter uma característica
gulosa, olhando sempre para o melhor candidato
no estágio atual de construção. Esta característica as
vezes pode fazer com que o espaço de busca seja
restringido, fazendo com que o algoritmo fique preso
em sub-ótimos globais. A outra desvantagem está
ligada a maldição da dimensionalidade. Se a quantidade de atributos for grande, e a largura do feixe
também for, o algoritmo terá problemas em testar
todas as possibilidades, pois haverá uma explosão na
quantidade de possibilidades. Por outro lado se a
largura do feixe for pequena, então apenas uma pequena região do espaço de busca será explorada, o
que pode fazer com que o algoritmo obtenha soluções ruins.

Para minimizar estes problemas, está sendo
proposta a Programação Genética Cartesiana como
método de aprendizado da APF.
3 Programação Genética Cartesiana

A Programação genética cartesiana (PGC) é uma
forma de programação genética no qual os programas

1263

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

são representados por grafos. O grafo é codificado
em uma sequência linear de inteiros e são representados em uma grade de nós computacionais de ndimensões, com a extensão definida pelo programador, mas que em geral possui uma ou duas dimensões. A figura 4 mostra um exemplo desta grade de
nós computacionais. Este tipo de programação genética recebe o nome de Cartesiana, pois os nós são
endereçados pelo sistema de coordenadas cartesianas. Uma das motivações da utilização de grafos, ao
invés da árvore utilizada na programação genética
convencional, é o fato de que grafos são mais gerais,
flexíveis e compactos e podem ser aplicados em
diversos domínios(Gross et al., 2005). A PGC foi
vagamente inspirada no arranjo da arquitetura dos
Field Programmable Gate Arrays (FPGA) e tem uma
maior facilidade de lidar com sistemas de múltiplas
saídas(Miller, 2011).
Outras vantagens da PGC são a características de
neutralidade, redundância e a ausência de um problema chamado Bloat comum em outros métodos de
programação genética. (Miller, 2001)(Miller et al.,
2006).

mado de Level-Back, o máximo de colunas anteriores
que um gen de conexão pode se conectar. A quantidade de entradas dos nós é chamada de aridade, e é
determinada de acordo com a função que necessita
do maior número de entradas entre todas as funções
do conjunto. Tanto o Level-back como o aridade, são
parâmetros a serem definidos pelo programador.
(Miller, 2011).
O processo evolutivo ocorre nos genótipos, sendo necessária uma decodificação deste genótipo em
fenótipos, cuja formatação está no domínio da solução do problema. Quando o genótipo é decodificado
alguns nós podem estar desativados. Isso acontece,
pois alguns nós não estão ligados  saída de dados, o
que gera um efeito de neutralidade. O programa
gerado pela decodificação do genótipo é chamado de
fenótipo, um exemplo pode ser visto na figura 6.
Enquanto os genótipos tem um tamanho fixo, os
fenótipos podem variar de tamanho.
O operador mutação é o operador mais importante na PGC. É comumente utilizada a mutação em
um ponto. Neste caso, um gen ,escolhido aleatoriamente, tem o seu valor modificado para outro valor
válido. Podem ser modificados tanto gens de função,
conexão ou saída. No caso de gens de função será
escolhido outro valor possível dentro do conjunto de
funções. Para os gens de conexão podem ser escolhidos valores de saída de nós de colunas anteriores
ou da entrada e para o gen de saída pode ser usada a
saída de qualquer nó. A quantidade de gens que podem ser alterados a cada aplicação do operador mutação geralmente é definida como uma porcentagem
do total de gens do genótipo e é denominada taxa de
mutação. As figuras 6 e 7 mostram o antes e depois
de uma operação de mutação. Neste exemplo, o último gen do genótipo foi alterado, pode-se ver que a
alteração deste único gen pode alterar a conexão de
diversos nós, mudando significativamente o fenótipo.
(Miller,2011)

Figura 4 Modelo da grade de nós computacionais do CGP (Miller,2011)

Na PGC os programas são representados em
uma sequência linear de números inteiros, que são
denominados cromossomos ou genótipos, um exemplo pode ser visto na figura 5. Estes cromossomos
podem ser divididos em partes, denominadas gens,
que por sua vez, podem ser divididos em gens de
função, conexão ou saída.

Figura 5 Genótipo
Figura 6 Genótipo-Fenótipo (Miller,2011)

A junção de um gen de função com alguns gens
de conexão forma um nó. A Estrutura de cada nó
consiste em uma função (gen de função) em que são
aplicados os valores de entrada cuja localização é
dada pelo gen de conexão, para gerar uma saída, a
função é escolhida dentro de um conjunto de funções
previamente definidas de acordo com a aplicação. A
entrada de cada nó pode ser uma entrada do sistema
ou a saída de um nó de uma coluna anterior. É cha-

1264

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014



A exploração do espaço não é feita de forma
restrita como no caso da beam search (que é limitada pela largura do.feixe). Isto também aumenta as chances de obter soluções melhores

Foram desenvolvidas duas variantes a primeira
sintetiza um classificador para cada uma das n classes, enquanto que a segunda sintetiza um único classificador de n classes.
Figura 7 Genótipo-Fenótipo após mutação (Miller,2011)

O algoritmo_evolutivo mais utilizado em PGC, é
a estratégia evolutiva 1+, onde normalmente o valo
r de  é 4.
O algoritmo da estratégia evolutiva pode ser
descrito nos seguintes passos
1. Cinco Indivíduos (genótipos) são criados
aleatoriamente.
2. O indivíduo que possui o maior valor da
função de aptidão, será considerado o mais
apto e será promovido para a população da
geração seguinte. O operador mutação é
aplicado quatro vezes no individuo mais apto da geração anterior, gerando quatro novos
indivíduos, totalizando cinco indivíduos na
população atual. Caso tenha mais de um individuo com a mesma aptidão, sempre será
promovido para a próxima geração um individuo que tenha sido criado na geração atual.
3. Serão repetidos os passos anteriores até que
um critério de parada seja atingido.

Uma vez que o modelo proposto utiliza um algoritmo evolucionário, ele poderá ser melhor compreendido considerando os seguintes aspectos a representação do problema, os operadores evolucionários
(seleção, crossover e mutação) e função de avaliação
de aptidão.

4.1 Representação utilizada

Conforme foi dito anteriormente, os programas
na PGC são representados em uma sequência linear
de números inteiros denominada genótipo. Ele é
divido em partes chamadas gens, que podem ser gens
de função, conexão ou saída.
Neste trabalho, cada atributo teve seu domínio
dividido em cinco termos linguísticos (termos fuzzy),
denominados Baixo, Médio-Baixo, Médio,
Médio-Alto, Alto. Os termos linguísticos são
obtidos por intermédio do particionamento do espaço dos atributos de entrada. A figura 8 exemplifica a
partição de um atributo, cujo domínio é o intervalo
4.3,7.9. O valor de cada atributo ativa a função de
pertinência de cada termo fuzzy produzindo um valor
de pertinência no intervalo 0,1.

4 Método Proposto

Este trabalho propõe a utilização da Programação Genética Cartesiana para a síntese da Árvores de
Padrões Fuzzy. Dentre as razões para esta escolha
pode-se citar







A representação por grafos que é usada na PGC,
pode ser facilmente utilizada para representar
uma Árvores de Padrões Fuzzy.
A programação_genética_cartesiana é um método
de busca global capaz de explorar espaços de
busca bastante grandes de forma eficiente, tornando o processo de síntese menos sensível a
maldição da dimensionalidade.

Figura 8 Partições Fuzzy

Os gens de função podem representar os diversos operadores utilizados na APF. Porém com a intenção de aumentar a interpretabilidade da solução
(árvore), decidiu-se por reduzir a quantidade de operadores. Os operadores utilizados foram reduzidos
para os seguintes operadores

A exploração do espaço de busca na PGC não
segue a estratégia gulosa do beam search e portanto tem mais chances de obter soluções melhores

1265

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

(

)

(
( )

(

)

)
(

( )

( 3)
)

(

(

( 2)

)

( 6)

A equação acima produz um valor maior de
forma inversamente proporcional  quantidade de
gens ativos em comparação a quantidade total de
gens. Ou seja, árvores menores tem uma melhor
avaliação em comparação as mais longas.

( 4)
(

)

)
( 5)

4.3 Critérios de parada
Dentro do modelo proposto foram criados três
critérios de paradas. O primeiro é a parada pela quantidade total de gerações. Esta parada é acionada
quando a quantidade de gerações passadas atinge um
valor pré-estabelecido. Geralmente os outros critérios
serão acionados antes deste, porém ele é útil para
limitar o tempo total de execução caso os outros
critérios não sejam acionados.
O segundo critério é acionado se não houver
uma melhora significativa da aptidão dentro de uma
quantidade determinada de gerações passadas. Devese levar em consideração a característica de neutralidade da PGC. Neste caso a quantidade de gerações
passadas não deve ser muito limitada, pois pode
haver gens inativos em um determinado momento
que irão aumentar a aptidão de uma forma significativa no futuro.
O terceiro critério é acionado se a taxa de acerto
do conjunto de validação na geração atual for menor
que a média da taxa de acerto em um número estipulado de gerações passadas. O conjunto de validação é
criado utilizando uma ferramenta para criação de
dados artificiais a partir de uma base de dados. Esta
ferramenta baseia-se na estimação da função de densidade de probabilidade criada por Parzen(Parzen,
1962) para criar um novo conjunto de dados com
características similares ao conjunto original.

Onde a e b são os valores de entradas dos nós
que serão operados e no caso dos operadores WA e
OWA, x será um valor aleatório dentro do intervalo
0,1. Os operadores WA e OWA são utilizados para
preencher o espaço entre a maior combinação conjuntiva (t-norma) e a menor combinação disjuntiva
(t-conorma).

4.2 Avaliação

A função de avaliação proposta é composta de
duas parcelas e pode ser vista na equação 6.

( 6)

Onde w1 e w2 são pesos a serem atribuídos, desde que w1+w21.

A primeira parcela da função de avaliação utilizada é definida pelas equações 7 e 8. A Equação 7
calcula o RMSE ( Root Mean Square Error - raiz
quadrada do erro quadrático médio).

5 Resultados


(

)

( 7)

Nesta seção serão apresentados alguns experimentos iniciais realizados para avaliar o desempenho
do modelo criado, através da comparação com outros classificadores bastante conhecidos da área de
aprendizado_de_máquinas.

(8)

O RMSE produz como resultado a raiz quadrada do erro quadrático médio, que é definido pela
a partir da diferença entre valor obtido na saída da
árvore (oi) e o valor alvo (di), que deve ser 1 se os
valores apresentado na entrada pertencem a um ponto
da classe que a árvore deve representar e 0 caso contrário. e. O RMSE é subtraído de um, resultando na
medida de desempenho chamada similaridade.

Foram utilizados para testar e comparar o algoritmo as base de dados IRIS, WINE ,SONAR, PIMA
e BALANCE SCALE que estão disponíveis no (UCI
machine learning repository). A base de dados Iris
possui 150 objetos, 3 classes e 4 atributos. A base de
dados Wine possui 178 objetos, 3 classes e 13 atributos. A base de dados Sonar possui 208 objetos, 2
classes e 60 atributos. A base de dados Pima possui
768 objetos, 2 classes e 8 atributos. A base de dados
Balance possui 625 objetos, 3 classes e 4 atributos
Os algoritmos utilizados para comparações foram Máquinas de vetores de suporte com núcleo

A segunda parcela da avaliação dos genótipos é descrita pela equação 9

1266

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

linear (SVM-L- Support Vector Machine  Linear
Kernel)(Vapnik, 1999), o K-Vizinhos mais próximos
(KNN)(Webb, 2002), o florestas aleatórias (RF
Random forests)(Breiman, 2001) e Máquinas de
vetores de suporte com núcleo com função de base
radial (SVM-R Support Vector Machine with Radial
Basis Function Kernel) ( SVM-R) (Vapnik, 1999).
Os algoritmos escolhidos são conhecidos por terem
um bom desempenho em um grande número de benchmarks.
A estimativa do desempenho de generalização
foi feita através de uma validação_cruzada com cinco
partições e cinco repetições.

Os resultados podem ser vistos nas tabelas 1 e
2.Três variantes da APF foram utilizadas nos testes. a
variante APF1, possui genótipos com cem nós e a
variante APF2 possui genótipos com quatro mil nós.
A terceira variante, que se trata do algoritmo com
apenas um genótipo com três saídas, uma para cada
classe, apresentou um desempenho inferior aos demais, cuja possível causa seja a interferência das
mutações que são benéficas ao processo de classificação de uma classe, mas maléficas a outra, retardando assim o processo evolutivo.
Nota-se que a variante com um maior número de
nós possui um desempenho melhor, o que pode ser
atribuído a um melhor aproveitamento da característica da neutralidade, porém esta melhoria no desempenho da classificação vem em troca de um aumento
substancial no processamento computacional. Estas
duas variantes tiveram um bom desempenho, se
aproximando dos outros classificadores, mas com o
beneficio de proporcionar um modelo interpretável.

Foram utilizadas duas medidas de desempenho,
a taxa de acertos na classificação e a área sob a curva
ROC. Para os casos onde a base de dados possui
mais de uma classe, a AUC fornecida é dada pela
média das AUCs calculadas na modalidade um
contra todos
Os parâmetros dos outros classificadores foram
obtidos da seguinte forma O número de vizinhos K
foi fixado em 1 o número de árvores geradas na
Random Forest foi igual a 50 e o número de atributos
sob o qual é feita a partição foi igual a 1. Os parâmetros de regularização do SVM de base linear e de
base radial foram determinados a partir de busca
pelo melhor desempenho em um validação_cruzada
interna. Para cada partição, foi feita uma validação
cruzada que utilizava apenas o conjunto de treinamento da respectiva partição. Este mesmo método foi
utilizado para encontrar o valor do parâmetro r que
define a base radial. Esta forma de encontrar os parâmetros é baseada na validação_cruzada aninhada
(Cawley et al., 2010) e é tida como uma forma de
evitar o overfit.

Foi utilizado o teste de Friedman para determinar se há diferença estatística significante entre os
métodos experimentados, neste teste foi determinado
o parâmetro 0.05. O resultado apresentado pelo
teste de Friedman determina que há diferença significativa somente para o método FPT-3out, o rank médio obtido por cada método é apresentado na tabela
3.
Tabela 3- Rank Médio
SVM-L
2.2

KNN
4.8

RF
2.5

SVM-R
2.9

APF
5.3

APF3out
6.6

Tabela 1 Taxa de acerto

K5, r5
Iris
Wine
Sonar
Pima
Balance

SVM-L
0.96
0.98
0.8
0.72
0.63

KNN
0.94
0.96
0.86
0.66
0.56

RF
0.95
0.99
0.83
0.71
0.62

SVM-R
0.95
0.97
0.89
0.67
0.88

APF1
0.93
0.84
0.72
0.69
0.60

APF3out
0.89
0.72
0.60
0.68
0.52

APF2
0.97
0.94
0.76
0.70
0.6

RF
0.99
1
0.92
0.81
0.86

SVM-R
0.99
1
0.96
0.81
0.98

APF
0.99
0.95
0.79
0.79
0.80

APF3out
0.90
0.81
0.62
0.76
0.61

APF2
1
0.99
0.83
0.82
0.8

Tabela 2 Área sob a curva ROC

k5, r5
Iris
Wine
Sonar
Pima
Balance

SVM-L
0.93
1
0.89
0.83
0.79

KNN
0.98
0.97
0.95
0.73
0.67

1267

APF2
3.7

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

Miller, J.F., 2011. Cartesian Genetic Programming,
2011 edition. ed. Springer, Heidelberg 
New York.
Miller, J.F., Smith, S.L., 2006. Redundancy and
computational efficiency in Cartesian genetic programming. IEEE Trans. Evol. Comput.
10,
167174.
doi10.1109TEVC.2006.871253
Nauck, D., Klawonn, F., Kruse, R., 1997. Foundations of Neuro-Fuzzy Systems. John Wiley
amp Sons, Inc., New York, NY, USA.
Parzen, E., 1962. On Estimation of a Probability
Density Function and Mode. Ann. Math.
Stat.
33,
10651076.
doi10.1214aoms1177704472
Senge, R., Hllermeier, E., 2011. Top-Down Induction of Fuzzy Pattern Trees. Trans Fuz Sys
19,
241252.
doi10.1109TFUZZ.2010.2093532
Sun, C.-T., Jang, J.-S., 1993. A neuro-fuzzy classifier
and its applications, in , Second IEEE International Conference on Fuzzy Systems,
1993. Presented at the , Second IEEE International Conference on Fuzzy Systems,
1993,
pp.
9498
vol.1.
doi10.1109FUZZY.1993.327457
Vapnik, V., 1999. The Nature of Statistical Learning
Theory, 2nd edition. ed. Springer, New
York.
Webb, A.R., 2002. Density Estimation  Nonparametric, in Statistical Pattern Recognition.
John Wiley  Sons, Ltd, pp. 81122.
Witten, I.H., Frank, E., 2005. Data Mining Practical
Machine Learning Tools and Techniques,
Second Edition (Morgan Kaufmann Series
in Data Management Systems). Morgan
Kaufmann Publishers Inc., San Francisco,
CA, USA.

6 Conclusão
Neste Artigo foi proposto um modo alternativo
para sintetizar as Árvores de Padrões Fuzzy, através
da programação_genética_cartesiana como algoritmo
de aprendizado. Os resultados obtidos mostram que o
desempenho das Árvores de Padrões Fuzzy na tarefa
de classificação pode se aproximar do desempenho
de alguns dos melhores classificadores disponíveis,
mas provendo também um modelo facilmente interpretável, o que o torna transparente e o conhecimento
obtido no aprendizado é facilmente extraído do modelo. As Árvores de Padrões Fuzzy constituem uma
alternativa viável aos modelos clássicos fuzzy baseados em regras, pois sua estrutura hierárquica permite
uma representação mais compacta e um compromisso entre acurácia e a simplicidade do modelo.
Referências Bibliográficas
Breiman, L., 2001. Random Forests. Mach. Learn.
45, 532. doi10.1023A1010933404324
Cawley, G.C., Talbot, N.L.C., 2010. On Over-fitting
in Model Selection and Subsequent Selection Bias in Performance Evaluation. J
Mach Learn Res 11, 20792107.
Cordón, O., 2011. A Historical Review of Evolutionary Learning Methods for Mamdani-type
Fuzzy Rule-based Systems Designing Interpretable Genetic Fuzzy Systems. Int J
Approx
Reason.
52,
894913.
doi10.1016j.ijar.2011.03.004
Gross, J.L., Yellen, J., 2005. Graph Theory and Its
Applications, Second Edition, 2 edition. ed.
Chapman and HallCRC, Boca Raton.
Haykin, S., 1998. Neural Networks A Comprehensive Foundation, 2nd ed. Prentice Hall PTR,
Upper Saddle River, NJ, USA.
Herrera, F., 2008. Genetic fuzzy systems taxonomy,
current research trends and prospects. Evol.
Intell. 1, 2746. doi10.1007s12065-0070001-5
Huang, Z., Gedeon, T.D., Nikravesh, M., 2008. Pattern Trees Induction A New Machine
Learning Method. IEEE Trans. Fuzzy Syst.
16,958970.
doi10.1109TFUZZ.2008.924348
Hllermeier, E., 2005. Fuzzy Methods in Machine
Learning and Data Mining Status and Prospects. Fuzzy Sets Syst 156, 387406.
doi10.1016j.fss.2005.05.036
Koza, J.R., 1992. Genetic Programming On the
Programming of Computers by Means of
Natural Selection. MIT Press, Cambridge,
MA, USA.
Miller, J., 2001. What bloat? Cartesian Genetic Programming on Boolean problems, in 2001
GENETIC
AND
EVOLUTIONARY
COMPUTATION CONFERENCE LATE
BREAKING PAPERS. pp. 295302.

1268