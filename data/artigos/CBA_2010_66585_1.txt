XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

DESENVOLVIMENTO DE UMA NOVA PROPOSTA DE ARQUITETURA EM HARDWARE PARA
APLICAÇÕES GENÉRICAS UTILIZANDO REDES NEURAIS ARTIFICIAIS
RAFAEL N. DE A. PRADO, ANTONIO W. A. SOARES , JOSÉ A. N. DE OLIVEIRA, ADRIÃO D. DÓRIA NETO, JORGE D.
DE MELO
Programa de Pós Graduação em Engenharia Elétrica e da Computação, Departamento de Engenharia
Elétrica, UniversidadeFederal do Rio Grande do Norte - UFRN
Campus Universitário Lagoa Nova, CEP 59072-970 Natal  RN  Brasil
E-mails rnaprado@yahoo.com.br, wallace.ufrn@gmail.com, nicolau@ufrnet.br,
adriao@dca.ufrn.br, jdmelo@dca.ufrn.br
Abstract Abstract This work proposes a new architecture for applications that utilize Artificial Neural Network (ANN) to
embed totally in hardware technology. This necessity comes from the fact that the actual proposes are, in most of cases, developed in
software, that requires a lot of execution time and high computational cost, because they arent an system totally dedicated to this applications. This new propose intend to take a process less serialized and more parallel, whats required in a artificial neural system.
Its proposed a new hardware architecture of ANN that begins with an unique and small layer that can realize, through feedback,
processes of ANN with many layers and layers with more neurons then the initial system layer. The architecture was modeled in Register Transfer Level Design method and totally developed in Very High Speed Integrated Circuit Hardware Description Language
(VHDL) to be prototyped in FPGA Educational Kit DE2 of Altera.
Keywords Embedded Systems, Artificial Neural Network, RTL Design, FPGA, VHDL.
Resumo Propõe uma nova arquitetura em hardware para aplicações que utilizem Redes Neurais Artificiais (RNA) embarcadas.
Esse interesse deve-se as atuais propostas de implementação de RNA serem, em sua maioria, desenvolvidas em software, o que requer
demasiado tempo de execução e alto custo_computacional, por não se tratar de sistemas dedicados a esta aplicabilidade. Essa proposta
pretende tornar o processo menos serializado e mais concorrente, requisitos de um sistema neural artificial. Para isso propõe uma arquitetura de RNA em que a partir de uma única camada pode-se realizar, através de realimentação, processos de RNA com várias
camadas e inclusive camadas com mais neurônios do que os da primeira camada do sistema. A arquitetura foi especificada e modelada em RTL Design e totalmente desenvolvida em linguagem VHDL e sua síntese foi feita em FPGA, no Kit educacional DE2 da Altera .
Palavras-chave .

1

surgimento de novos métodos de como fazer. Algumas tecnologias surgiram no mercado, chamados de
neurocomputadores, os quais se utilizam de processadores de mercado operando paralelamente (Lindsey, 2002), a exemplo do SYNAPSE System, produzido pela Siemens, que se utiliza de processadores
MA16 e MC6804 CICS, e que, se apresenta como o
sistema mais popular num mercado que tem também
propostas como o CNAPS da Adaptative Solutioins,
RAP da ICSI Berkeley, LNeuro da Philips, dentre
outros, porém, todos se constituindo em hardwares
semi-dedicados.
Estudo comparativo entre os neurocomputadores
conhecidos (Dias, 2004), mostra que as diversas
soluções até então propostas estão buscando soluções
particulares e por isso, limitadas. Nessa análise foram postas mais de 17 arquiteturas que contemplam
em média 4 a 64 neurônios no total. Esses projetos
em sua maioria não fazem treinamento, a maioria
dos que o fazem, desenvolvem o treinamento em
software, e projetos mais arrojados mesclam as duas
abordagens (hardware e software) para obter resultados mais satisfatórios.
Estudos do IEEE Micro (Nikola, 1996) mostram
que o hardware dedicado atinge maior desempenho
em RNA que os sistemas em software, já que implementam um modelo específico de rede_neural
diretamente no circuito. O uso combinado de tecno-

Introdução

Os estudos de Redes Neurais Artificiais (RNA)
têm passado por diversos estágios de desenvolvimento, dentre eles está uma área ainda em lento processo
de desenvolvimento, que são as implementações
totalmente em hardware. Arquiteturas dedicadas
apenas a aplicações com RNA (Dias, 2004) e que
possibilitem as vantagens obtidas com os sistemas
cem por cento hardware, respeitando as necessidades
no nível de complexidade desejada para sistemas
com RNA são promissoras (Zhu, 2002). Uma dessas
necessidades vem da utilização de diversos processos
operando paralelamente, o que requer um grande
esforço computacional. As aplicações implementadas em software são demasiadamente lentas por não
conseguir implementar essa característica a contento
(Hassan, 2008), (Valença, 2005), (Ludwig, 2007) e
(Seiffert, 2002).
A área de RNA, que já desfruta de excelente aceitação e já possui muitos sistemas implementados
em software, não avançou muito nas implementações em hardware. Depara-se agora com a real necessidade da implementação em hardware, que as
possibilitem ao embarque em diversificados equipamentos da indústria ou de consumo, originando o

5097

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

2.1.1 Ferramentas de especificação de fluxo de dados e Máquina de Estados Finita (MdE)

logias digital e analógica produz neurochips que
atingem taxas de Giga CUPS (Conections Update
Per Second) na fase de aprendizado e de Tera CPS
(Conections Per Second) na fase de recall
(NAVAUX, 2002), parâmetros de avaliação da eficiência dos sistemas de RNA.
Por fim, com a rápida evolução da utilização de
RNA no mercado e o avanço acelerado da utilização
e capacidade dos Programable Logic Devices
(PLDs), como o Field Programable Gate Array,
(FPGA), novos estudos direcionaram para a implementação de RNA em hardware reconfigurável, como propôs (Molz, 1999) em uma avaliação sobre
qual o melhor método para desenvolvimento desse
tipo de sistema. Diversos trabalhos já provaram ser
possível essa técnica de implementação de RNA
(Eldredge, 1994), (Silva, 2009).
É nesse intuito que este trabalho se propõe ao
desenvolvimento de um sistema para aplicações de
Redes Neurais Artificiais (RNA) que necessitem ser
embarcados totalmente em hardware (Labrosse,
2002). Esse objetivo vem da preocupação existente
com as soluções, propostas de execução de RNA em
software, as quais se utilizam de processos extremamente serializados para realizar suas tarefas e
aplicações. Acrescente-se ainda de um alto custo
temporal na execução da rede, devido  utilização de
máquinas não dedicadas a essa finalidade, quando se
sabe uma aplicação com RNA requer de uma atuação com forte paralelismo nos perceptrons do sistema.
Outro fator importante da necessidade de uma
implementação totalmente em hardware vem da
possibilidade de seu embarque em projetos que utilizem RNA no processo, tendo-se, por exemplo, um
chip totalmente dedicado a aplicação desejada.

A técnica de modelagem Data Flow foi utilizada
pela necessidade inicial de se visualizar o fluxo dos
dados e as operações e ações realizadas nos ou pelos
neurônios (perceptrons). A parte controladora do
sistema, que coordenará a realimentação e distribuição dos pesos, está representado em State Chart, por
se tratar de uma Máquina de Estados Finita (MdE)
com superestados, os quais, internamente, desenvolvem máquinas de estado mais simples. A figura 1
mostra a modelagem do sistema por Data Flow e
State Chart.

Figura 1. Especificação em Data Flow e State Chart do projeto.

O estado A faz alocação dos dados, definidas em
arquivo texto (txt), nas memórias do sistema (instrução, valores de pesos e biases), para dessa forma
iniciar o sistema. Já o B, faz leitura da memória
da instrução a se executada. O estado C carrega os
valores dos pesos e biases nos registradores dos neurônios, e determina como serão conectadas as realimentações dos neurônios. Quando está tudo devidamente alocado e conectado, o estado D carrega os
dados nos neurônios para serem processados. O estado E representa o processamento do neurônio
descrito em Data Flow. Por fim, o estado F verifica se a ultima instrução (ou neurônio executado) foi
realizada, para então, mostrar o resultado final do
processamento da RNA.

2 Metodologia
2.1 Especificação em Projeto RTL
A especificação do projeto foi feita em nível de
transferência de registros (RTL Design), que metodologicamente separa o sistema em uma parte operativa e em uma parte controladora que coordena suas
operações (Vahid, 2007), como forma de facilitar o
desenvolvimento, o reuso de componentes e a otimização do sistema. O detalhamento das unidades,
operativa e controladora, foi feito com as ferramentas de especificação State Chart e Data Flow. Todos
os componentes envolvidos no projeto foram descritos em VHDL (VHSIC Hardware Description Language) (Ludwig, 2007), (Cavuslu, 2006), (Molz,
1999), (Valença, 2005) e (Xiaoguang, 2005).

2.1.2 Especificação da parte operativa DataPath
A partir da definição do controle do fluxo de dados
do sistema foi possível se determinar quais dispositivos digitais deveriam ser necessários para realizar as
ações impostos pelo controlador ao caminho de dados (datapath). Para executar a proposta de se realimentar dados de uma camada, que acabou de gerar
resultados para outra que deverá iniciar o processo
de cálculo, utilizando-se de uma única camada física
de neurônios, foram necessários diversos componentes digitais tais como demultiplexadores, somadores,
acumuladores, registradores, memória e contadores.

5098

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

tomada de decisão de prioridade no caso de mais de
um processador desejar acessar a mesma memória
ao mesmo tempo.
Isso mostra uma deficiência não desejada para
redes_neurais que preservem o paralelismo e onde
seja desejável se conectar todos os neurônios de uma
camada n com todos de uma camada n+1 (Matsuda, 2001). A figura 3 mostra um modelo de rede
Crossbar conectando processadores a bancos de memória (Venugopal, 2002).

3 Redes de Interconexão
Neste trabalho, propôs-se também a utilização
de uma rede de interconexão que possibilitasse a
ligação dos neurônios num processo de realimentação o controle das conexões no momento de contenção de dados, na passagem das informações de saída
para a nova camada da RNA que irá se estruturar
bem como a ativação ou desativação dos neurônios
que irão ou não participar da nova camada. Foram
analisadas diversas proposições de redes de interconexão já existentes e tradicionalmente usadas em
projetos de sistemas digitais tais como a por Barramento, a Multiestágios e a Crossbar (Venugopal,
2002), apresentadas a seguir.
3.1 Barramento
O barramento de dados é um clássico sistema de
interconexão onde todos os componentes presentes
no sistema, que trocam informações, são conectados
diretamente a um mesmo meio de comunicação que
é o barramento. A complexidade desse sistema mostra-se baixa e de fácil implementação, porém, conversas simultâneas não poderão ocorrer, já que o
mesmo meio para troca de informações é utilizado
por todos, ou seja, as colisões, se não controladas,
serão fáceis de ocorrer. Apesar do baixo_custo, temse a necessidade de realizar um controle do meio
através de algum protocolo, cujas regras, quando
obedecidas permitirá o fluxo das informações sem
que haja colisões ou conflitos. Isso mostra que essa
proposta não possui uma alta velocidade de trabalho
e também não serve para operações que envolvam
paralelismo entre componentes ou processadores. Na
Figura 2 é mostrado um barramento conectando diversos processadores.

Figura 3. Rede CrossBar.

3.3 Rede Multiestágios
Esse tipo de rede de interconexão mostra-se de
baixo_custo e com facilidade de redefinição das conexões, já que a configuração da rede se dá controlando-se cada nó (semelhante a um multiplexador
com 2 entradas e duas saídas) direcionando assim o
dado para a memória desejada. A figura 4 mostra os
nós que serão controlados de forma que cada nó receba um bit do endereço da memória, cada bit corresponde ao posicionamento de uma coluna de nós,
assim procura-se fazer a configuração para que o
processador conecte-se ao endereço de memória desejado.

Figura 2. Barramento.

3.2 Rede Crossbar
Figura 4. Rede Multiestágios.

Essa rede veio com a proposta de conectar processadores e bancos de memória através de um conjunto de barramentos com nós conectados a eles, de
modo que os nós controlem a abertura do caminho
desejado para atender num determinado momento a
conexão entre processadores e memórias constantes
no sistema. Há possibilidade de conexões simultâneas (paralelismo) e também de mudança nos caminhos desejados para novas conexões. Porém, cada nó
deverá possuir uma unidade decodificadora para

A tabela 1 abaixo mostra o resultado de um estudo comparativo entre as redes Crossbar, Multiestágios e Barramento, quanto a sua velocidade, custo,
confiabilidade e complexidade (Venugopal, 2002).

5099

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Tabela 1. Comparação entre 3 tipos de redes de interconexão.

Propriedade
Velocidade
Custo
Confiabilidade
Complexidade

Barramento
Baixa
Baixa
Baixa

Crossbar
Alta
Alta
Alta

Multiestag.
Alta
Moderada
Alta

Baixa

Alta

Moderada

mesma camada física. A solução proposta pode ser
claramente visualizada na figura 5.
Na Rede de Interconexão com realimentação
proposta, o processo é bem simples. Todas as conexões necessárias para conectar todos os neurônios de
uma camada n aos de uma camada n+1 são realizadas simultaneamente através de um conjunto registrador-drive de 3 estados que irão determinar uma
conexão de dados previamente armazenados ou ausência de dados, numa conexão em alta impedância.
A decisão de que conexões serão ativadas ou desativadas será feita pela unidade de controle e repassada
a rede de interconexão através de uma unidade decodificadora.
Na tabela 2 são apresentados alguns parâmetros
que permitem avaliar as três redes de interconexão
estudadas e a proposta quanto ao número de elementos lógicos utilizados e quanto a sua resposta em
número de ciclos de clock.

Embora houvesse possibilidade de se optar por
alguma dessas redes, observou-se que elas são muito
adequadas para sistemas com multiprocessadores
acessando bancos de memória e não para aplicações
com RNA onde o neurônio de uma camada n precisa
se conectar com todos os neurônios da camada n+1,
preservando o paralelismo do processamento de cada
neurônio de cada camada específica.

Tabela 2. Comparativo das redes de interconexão.

3.4 Rede de Interconexão com Realimentação
Rede
Clocks
Drives
Mux
Regs

Diversos trabalhos optaram por não trabalhar
com nenhum tipo de rede de interconexão (Silva,
2009), (Yamina, 1998), utilizando assim conexões
fixas enquanto que, outros estudos, com características de camadas fixas, optaram por utilizarem alguma das redes clássicas mostradas anteriormente (Dias, 2004). Na proposição feita neste trabalho, como a
quantidade de neurônios não será fixa, e sim, variável de acordo com as mudanças de camada e em
conformidade com as definições de redes previamente embarcadas, optou-se por desenvolver uma rede
de interconexão própria.

Crossbar
2
18x16
18
0

Multiest.
2
36x16
9
0

Proposta
2
9x16
9
3

Bus
Muitos
2x16
0
0

4 Arquitetura Proposta

4.1 Parte Controladora
O desenvolvimento do controlador (ou parte operadora) foi implementado de tal forma a executar
o State Chart da Figura 6, enviando sinais de controle para o datapath e recebendo seus sinais de status
na realização das tarefas de ler a instrução de configuração de cada camada buscar os valores dos pesos
e dos biases da referida camada nas memórias específicas inserir os pesos e biases nos registradores
dos neurônios e por fim, configurar a rede de interconexão, liberando a saída de dados dos neurônios
para o registrador interno da rede de interconexão
proposta, o qual, ficará disponível como entrada
para os neurônios da próxima camada a ser executada.
As ações dos estados podem ser descritas da seguinte forma A inicializa todos os componentes
do sistema B é um superestado que, através de
uma pequena MdE, seta os drives da rede de interconexão em alta impedância, carrega os dados da
memória de instrução e inicializa o incrementador
de endereços de memória C, também um superestado, configura o destino dos pesos para os neurônios da próxima camada, carrega esses dados nos
neurônios e incrementa o incrementador de endereços, caso tenham sido alocados todos os pesos, segue

Figura 5. Rede Proposta.

Nesta nova proposição utilizou-se de elementos
lógicos que permitem a realimentação das informações de neurônios de uma camada para outra sucessora, a prior, implementadas por neurônios de uma

5100

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

4.2 Parte Operativa ou Datapath
Após a especificação da parte controladora do
sistema definiu-se o datapath e seus componentes na
realização das funções estabelecidas no controlador.
Dentre os componentes utilizados pode-se destacar
a memória de instrução, comportando instruções de
16 bits o Contador de Programa (PC), o Incrementador de endereços das memórias onde estão armazenados os pesos e os biases e as memórias dos pesos e dos biases. No caso dos biases utilizou-se uma
memória com largura de 48 bits, pouco usual, mas
que permite o envio de todos os biases de uma mesma camada de uma única vez para a próxima camada que está se configurando (16 bits por bias). A
Figura 7 mostra o esquema RTL do Datapath do
sistema, com todos os componentes utilizados.

Figura 6. Controlador.

para o próximo estado D configura a rede de interconexão com realimentação E atualiza os valores dos registradores da rede de interconexão por
fim, F verifica se foi executada a última instrução,
caso sim, exibe a saída, caso não, volta a executar as
instruções.

Figura 7. Datapath do sistema.

A figura 10 mostra a estrutura completa do neurônio
desenvolvido.

4.3 Neurônio
O desenvolvimento do neurônio, baseado na
clássica arquitetura do Perceptron (Silva, 2009),
(Haykin, 2001), foi dividido em 2 partes, função de
ativação e função_de_transferência. A função de
transferência é composta pelas entradas multiplicadas pelos pesos e o resultado entra em um somador,
como descrito em Flow Chart na figura 9 (Silva,
2009), (Hassan, 2008) e (Ortigosa, 2006). O dado
necessário para ser armazenado no registrador do
neurônio é alocado na memória RAM, no datapath.
A função de ativação foi desenvolvida baseada em
um método de aproximação, essa técnica aproxima o
resultado da saída da função_de_transferência entre o
melhor valor do intervalo de valores da função tangente sigmóide, implementada nos neurônios utilizados no projeto. Os dados são processados em ponto_fixo e os multiplicadores tem precisão de 16 bits.

Figura 9. Modelo do Perceptron em Data Flow.

4.4 Configuração do sistema em hardware para
aplicações em RNA.
Os valores de todos os pesos, biases e instruções
de todas as camadas precisam ser armazenadas em
5101

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

suas respectivas memórias. Para criar uma RNA no
sistema proposto, é necessário inicialmente treinar a
rede off line, (em software ou hardware) para obtenção dos dados de cada camada, como pesos e bias
(Lorrentz, 2008).
Cada instrução fornece o número da camada e a
posição dos valores dos pesos e bias de cada neurônio. As instruções são descritas em arquivo texto, e
depois transferidas, via protocolo RS-232, para o Kit
Educacional DE2 da Altera usando o chip
MAX232 presente no kit. O MAX232 converte sinais TTL em padrão RS-232 e vice-versa.
Um bloco do sistema é responsável pelo carregamento de todas as instruções, valores de biases e
pesos, bem como de iniciar o controlador na execução das instruções.

6 Conclusão
O grande avanço da presente proposta é sua capacidade de emular qualquer arquitetura de rede
neural sem acréscimo na área de silício ou de blocos
lógicos quando implementada em um FPGA. É observado claramente que a limitação do sistema está
atrelado ao espaço para dados da memória, quanto
mais registros tiver nas memórias utilizadas, mais
pesos, biases e instruções poderemos armazenar, ou
seja, emulando assim uma maior quantidade de neurônios nas aplicações. Logicamente, o tamanho da
memória a ser usada dependerá do tipo de aplicações
em RNA que serão embarcados no sistema.
Em uma segunda etapa, novas e mais complexas
aplicações serão testadas, de forma que possibilitem
melhor validar a proposta apresentada bem como
que possibilitem apontar para soluções mais apropriadas em substituição ao uso da unidade controladora
(MdE).
Como trabalho futuro pretende-se aumentar o
paralelismo do sistema. Para tal, pretende-se configurar cada camada com a arquitetura do controlador
atual e os dados dos biases e dos pesos serem carregados em paralelo sob controle, por exemplo, de um
processador Nios II da Altera, num projeto baseado
em plataforma com barramento Avalon.

5 Resultados
Por fim, os resultados encontrados foram satisfatórios. Todo o sistema foi testado separadamente e
também em conjunto no Kit Educacional DE2 da
Altera executando diversas instruções perfeitamente. Os resultados também foram baseados na análise
de alguns sistemas de mercado. Foram analisadas
características como velocidade, custo, eficiência,
precisão etc.
Como forma de validar o sistema proposto, foi
executada uma aplicação simples, o clássico problema da porta XOR. O erro apresentado no sistema em
teste foi de apenas 0.01562, bem próximo do obtido
no Matlab em seu ToolBox ANN que apresenta erro
de 0.0150 para o mesmo problema. O tempo de execução no Matlab foi de 21 ms enquanto que no sistema propost foi de apenas 120,23s, portando-se
bem mais eficiente. Para consolidar a validade do
sistema proposto e sua alta performance, outras aplicações, com mais camadas ou com camadas com
mais neurônios devem ser implementadas.
A tabela 3 mostra um comparativo do sistema
proposto com outros sistemas em hardwares existentes (Dias, 2004).

Referências Bibliográficas

Amore, Robert d. VHDL Descrição e Síntese de
Circuitos Digitais. Rio de Janeiro LTC, 2005.
Cavuslu M. A., Karakuzu C. e Sahin S. Neural
Network Hardware Implementation Using
FPGA. ISEECE, 2006.
Dias F. M., Antunes A., Mota A. M. (2004).
Artificial Neural Networks a Review of
Commercial Hardware.
Eldredge, James G.HUTCHINGS, B.L. (1994).
Density Enhancement of a Neural Network
Using FPGAs and Run-Time Reconfiguration.
IEEE Workshop on FPGAs for Custom
Computing Machines, 180-188pp. Napa, CA.
April.

Tabela 3. Comparativo entre diversas arquiteturas com a proposta.
Nome

Aprendizado

Precisão
(bits)

Neurônios

Sinapses

Velocidade

MD1220

Não

1-16

8

8

1.9
MCPS

NeuraLogix
Lneuro2

Não

1-16

16

Não

16-32

12

Off
chip
64

300
CPS
720
MCPS

Não

16-16

32

264

360
MCPS

Sistema
Proposto

Hassan, A. A. A. Elnakib, M. Abo-Elsoud. FPGABased Neuro-Architecture Intrusion Detection
System, Proceedings of the Internatinal
Conference on Computer Engineering 
Systems, Cairo, pp. 268-273, 2008.

Haykin, Simon. Redes Neurais Princípios e
Pratica. Porto Alegre Bookman, 2001.

5102

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Bruges (Belgium), 24-26 April 2002, d-side
publi., ISBN 2-930307-02-1, pp. 319-330, 2002.

Labrosse, Jean J. Embedded Systems Building
Blocks. San Francisco CMP Books, 2002.

Silva C. A. e A., Doria Neto A. D., Oliveira J. A.
N., Melo J. D. (2009). Implementação de uma
Rede Neural Artificial em FPGAAplicação da
MLP como Arquitetura Modular. Anais do IX
Congresso Brasileiro de Redes Neurais
Inteligência Computacional (IX CBRN). Ouro
Preto 25-28 de Outubro de 2009.

Lindsey C. S. (2002).
Neural Networks in
Hardware
Architectures,
Products
and
Applications. Royal Institute of Technology
Stockholm,
Sweden.
httpwww.particle.kth.selindseyHardwareN
NWCoursehome.html, acesso em fevereiro de
2010.

Vahid, F. (2007). Digital Design. Editora Bookma.
558p.

Lorrentz P., Howells W. G. J. and McDonald-Maier
K. D., An
Analysis of Hardware
Configurations for an Adaptive Weightless
Neural Network, Proceedings of the World
Congress on Engineering 2008, Vol I WCE
2008, July 2 - 4, 2008, London, U.K.

Valença, Mêuser. Aplicando Redes Neurais Um
Guia Completo. Olinda,PE Ed.do Autor,
2005.
Venugopal, D. (2002). Design, Development, and
SimulationExperimental Validation of a
Crossbar Interconnection Network for a SingleChip
Shared
Memory
Multiprocessor
Architecture.
Masters Project Report,
University Of Kentucky, june.

Ludwig Jr., O. e Costa, Eduard Montgomery M.
Redes Neurais Fundamentos e Aplicações com
Programas em C. Rio de Janeiro Editora
Ciência Moderna LTDA, 2007.
Matsuda, S., Theoretical limitations of a Hopfield
network
for
crossbarswitching
Neural
Networks, IEEE Transactions on Volume 12,
Issue 3, Page(s)456  462, May 2001.

Wang Qinruo, Yi Bo, Xie Yun e Liu Bingru.The
Hardware Structure Design of Perceptron with
FPGA Implementation. 2003.
Xiaoguang LI, Medhat Moussa e Shawki Areibi.
Arithmetic formats for implementing Artificial
Neural Networks on FPGAs. Canadian Journal
on Electrical and Computer Engineering, 2005.

Molz R. F., ENGEL P. M., MORAES F. G. (1999)
Uso de um Ambiente Codesign para a
Implementação de Redes Neurais. IV Congresso
Brasileiro de Redes Neurais, pp. 013-018.

Yamina Taright e Michel Hubin. FPGA
Implementation of a Multilayer Perceptron
Neural Network using VHDL, Proceedings of
ICSP, pp. 1311-1314, 1998.
Zhu J., Sutton P. (2002). FPGA Implementations of
Neural Networks  a Survey of a Decade of
Progress. School of Information Technology and
Electrical Engineering, The University of
Queensland, Brisbane, Queensland 4072,
Australia.

Navaux P. O. A. (2002). Anotações de aula,
publicação interna UFRGS.
Nikola B. Serbedzija. Simulating artificial neural
networks on parallel architectures. Computer,
29(3)56-63, 1996.
Ortigosa E. M., Caas A., Ros E., Ortigosa P.M.,
Mota S. e Díaz J.. Hardware description of
multi-layer
perceptrons
with
different
abstraction
levels, Microprocessors and
Microsystems, pp. 435444, 2006.
Rolf F. Molz, Paulo M. Engel e Fernando G.
Moraes. Uso de um Ambiente Codesign para a
Implementação de Redes Neurais, Proceedings
of the IV Brazilian Conference on Neural
Networks, São José dos Campos  SP, pp. 013018, 1999.
Seiffert U., Artificial Neural Networks on
Massively Parallel Computer Hardware
, ESANN2002 proceedings - European
Symposium on Artificial Neural Networks

5103