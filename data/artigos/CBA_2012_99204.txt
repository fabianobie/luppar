Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

USANDO INVARIANTES NA ANALISE DOS REQUISITOS
Arianna Zoila Olivera Salmon, Jose Reinaldo Silva




Design Lab, Departamento de Enga Mecatronica, Escola Politecnica, Universidade de Sao Paulo
Av. Professor Mello Moraes, 2231, CEP 05508-970,
Sao PauloSP, Brasil

Design Lab, Departamento de Enga. Mecatronica, Escola Politecnica, Universidade de Sao Paulo
Av. Professor Mello Moraes, 2231, CEP 05508-970,
Sao PauloSP, Brasil
Emails arianna@usp.br, reinaldo@usp.br
Abstract Eliciting requirements is a fundamental step in the process of system design. In systems modeled
by Petri nets these requirements can be expressed using invariants. For doing so it is necessary to define a set
of state equations satisfied by every reachable state. The major advantage of representing requirements using
invariants is the low computational complexity required for their verification. This is due to the fact that, unlike
other methods such as model_checking, in this case the computation of all reachable states is not necessary. On
the other hand, the strong mathematical background needed for representing the requirement using invariants
turns out to be a disadvantage, which often makes its use inefficient. The aim of this work is to propose a
method to using invariants to represent requirements with less effort, anticipating its use to the very early phase
of design, and reinforcing abstraction.
Keywords

Petri net, Invariants, Requirements analysis.

Resumo A eliciacao de requisitos e uma etapa fundamental no processo de projeto de sistemas. Nos sistemas
modelados em redes de Petri estes requisitos podem ser representados usando invariantes. No entato, para analisar
os requisitos de um sistema usando invariantes e preciso definir um conjunto de equacoes de estado satisfeitas em
cada estado alcancavel da rede. A maior vantagem de representar requisitos usando invariantes e o baixo_custo
computacional que se requer para verifica- los, uma vez que nao e necessario analisar todos os estados alcancaveis
como em alguns algortimos de model_checking. No entanto, a forte base matematica necessaria para representar
os requisitos usando os invariantes, e a principal desvantagem, tornando seu uso muitas vezes ineficiente. Este
trabalho tem como objetivo propor um metodo para usar invariantes na representacao dos requisitos de sistemas
modelados em redes de Petri com menos esforco, antecipando o seu uso para as fases iniciais, e explorando ao
maximo a abstracao dos modelos.
Palavras-chave

.

Introducao

Na atualidade, devido a crescente complexidade
dos sistemas, o custo para projeta-los tem se incrementado consideravelmente, levando pesquisadores e desenvolvedores a procurar novas abordagens que garantam mais confiabilidade ao processo
de desenvolvimento de projetos. Neste contexto,
novos metodos de analise, modelagem, desenvolvimento e implementacao foram sugeridos e testados
em varias fase do processo de projeto. Especificamente, a fase inicial de projeto, baseada na obtencao, especificacao e analise_de_requisitos, e considerada a mais complexa, dado que esta e uma fase
onde a formalizacao completa do processo e inviavel, enquanto, por outro lado, se objetiva justamete a antecipacao da formalizacao, normalmente
feita na especificacao detalhada do artefato.
Entretanto, independentemente de como se
faz a especificacao final, o sucesso de qualquer projeto depende em grande parte da correta e completa definicao dos requisitos, e a especificacao dos
requisitos serve como um padrao para testar se as
fases de projeto e implementacao do processo de
desenvolvimento de sistemas estao corretas. Esta
e uma fase essencial do processo de engenharia de

ISBN 978-85-8001-069-5

requisitos, que compreende a representacao completa do comportamento do sistema, tanto em termos de requisitos funcionais quanto de requisitos
nao funcionais. A identificacao inadequada dos
requisitos e uma das principais causas de falhas
nos sistemas, e portanto, a eliminacao de erros
durante esta fase torna-se um processo de vital
importancia durante o ciclo de desenvolvimento
dos projetos.
Muitos pesquisadores tem usado tecnicas de
modelagem semi formais e formais para capturar os requisitos do sistemas seguida de uma fase
de analise e verificacao deses requisitos que acaba
por herdar a excessiva flexibilidade destes metodos. Os metodos semi- formais em geral se caracterizam por sua simplicidade e flexibilidade na
representacao dos requisitos, enquanto os metodos
formais, ao contrario, se caracterizam por possuir
uma forte base formal para simulacao e analise.
Sao varias as tecnicas e metodos para a analise
e especificacao dos requisitos propostas na literatura, mas, nenhuma delas garante a completa e
correta definicao e representacao dos requisitos.
Existem tres desafios fundamentais na analise
de requisitos que ainda nao foram resolvidos, e sao
frequentemente mencionadas em pesquisas recen-

5316

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

tes
 A deteccao e analise_de_requisitos imprecisos
e incompletos (Liu, 1996)
 A deteccao de insocnsistencias e o estabelecimento de metodos para gerencia-la
 A criacao de um processo sistematico que leve
dos requisitos especificados informalmente,
mesmo que imprecisos, a uma especificacao
formal.
A estes desafios podemos acrescentar ainda
a volatilidade dos requisitos, isto e, ao fato de
que requisitos importantes na fase de eliciacao e
analise podem perder importancia durante o proprio processo de design, ou ainda, podem praticamente desaparecer ou se fundir com outros.
Um grande desafio seria a deteccao previa, durante a fase de analise_de_requisitos, desta volatilidade (Santos, 2005). Outro desafio importante e garantir o mapeamento entre os requisitos e os featuresdo sistema de modo a garantir,
por um lado, que todos os requisitos tenham sido
atendidos, e por outro orientar a sua manutencao
(Vaquero, 2011). Estes desafios estao no entanto
fora do escopo do presente trabalho.
Muitos pesquisadores propoem converter os
requisitos semi- formais em uma representacao
formal (Baresi and Pezze, 2001). Entre os formalismos mais difundidos estao as Redes de Petri(RdP), amplamente usadas na representacao e
validacao dos requisitos e ate referendadas pela
OMG. As RdP possuem importantes propriedades que possibilitam a verificacao de requisitos,
entre estas os invariantes. A maior vantagem de
representar requisitos usando invariantes e reduzir
o custo_computacional do processo de verificacao,
uma vez que nao e necessario analisar todos os
estados alcancaveis. Os invariantes estao de fato
relacionados com propriedades gerais do sistema e
estao ligados a estrutura da rede eou ao estado
inicial. No entanto, a forte base matematica necessaria para representar os requisitos usando invariantes, e sua principal desvantagem, tornando
seu uso muitas vezes ineficiente.
O objetivo deste trabalho e mostrar como os
invariantes podem ser usados na representacao de
requisitos dos sistemas modelados em redes de Petri (RdP), ajudando no processo de sntese destes modelos. Para sistemas modelados usando
UML(Unified Modeling Language), os invariantes podem ser formulados a partir das restricoes
representadas na linguagem OCL(Object Constraint Language). Uma vez obtidos os invariantes,
estes podem ser usados na sntese do modelo em
RdP.
Este artigo esta organizado como segue na
secao 2 sao descritos os conceitos fundamentais
das redes de Petri e as definicoes dos invariantes. A secao 3 apresenta uma proposta de metodo

ISBN 978-85-8001-069-5

para representar e verificar os requisitos de sistemas modelados em redes de Petri. Um estudo
de caso e apresentado na secao 4, para ilustrar os
resultados que podem ser obtidos no desenvolvimento do metodo proposto na secao 3. Na secao 5
e feita uma breve discussao dos resultado e apresenta as conclusoes e sugestoes de trabalho futuro.
2

Redes de Petri

As RdP, criadas por Carl Adam Petri no inicio
dos anos 60, constituem uma potente ferramenta
de modelagem grafica e matematica que permite
a descricao e o estudo de muitos sistemas. Estas
redes possuem uma solida base matematica que
facilita a analise e a verificacao de um numero
grande de propriedades presentes nos sistemas. A
analise destas propriedades permite a verificacao
dos requisitos funcionais dos sistemas modelados,
o que facilita a deteccao de possveis erros e portanto a correcao destes, antes de iniciar a fase de
implementacao.
As RdP sao um formalismo visual baseado em
solidos princpios matematicos, que podem adequadamente explicar o comportamento fsico de
um sistema e seus componentes. Tem sido usadas tanto para modelar sistemas de software como
sistemas de hardware. Elas podem ser aplicadas
em diferentes nveis do processo de engenharia de
sistemas. Comparadas com outros formalismos,
as RdP sao mais adequadas para a visualizacao e
compreensao do comportamento dos sistemas.
2.1

Invariantes

Os invariantes sao uma das propriedades estruturais das RdP. Eles representam os componentes conservativos e repetitivos da rede. Existem dois tipos de invariantes invariantes_de_lugar(representam os componentes conservativos) e
invariantes de transicao (representam os componentes repetitivos).
Definicao 1 Um invariante de lugar e um vetor
x de dimensao n (onde n e o numero de lugares da
rede) que satisfaz o seguinte sistema de equacoes
AT .x  0

(1)

Cada vetor inteiro x satisfaz a seguinte equacao
M T .x  M0T .x

(2)

Onde M0 e a marcacao inicial e M pertence a
R(M0 ).
A equacao 2 significa que a soma_ponderada dos tokens nos lugares invariantes permanece
constante em todas as marcacoes e esta soma e determinada pela marcacao inicial.

5317

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Definicao 2 Um vetor y de dimensao m (onde m
e o numero de transicoes da rede), e um invariante
de transicao, se
Ay  0
(3)
Um invariante de transicao pode ser interpretado fisicamente como uma sequencia de disparo
de transicoes que nao modifica a marcacao da
rede. Tal invariante corresponde a uma sequencia cclica de eventos - um ciclo - que pode ser
repetida indefinidamente.
O vetor y armazena um numero inteiro nas
posicoes que pertencem as transicoes invariantes,
e armazena o valor zero nos outros casos. Os numeros inteiros representam a quantidade de vezes
que a transicao correspondente pode ser disparada
para que a rede volte ao seu estado inicial.
A analise dos invariantes permite investigar
propriedades nas RdP. Atraves deles e possvel investigar a estrutura da rede independentemente
dos processos dinamicos. Os invariantes tambem
podem ser usados para a verificacao de sistemas,
ja que oferecem uma importante ferramenta matematica para a analise de outras propriedades importantes, como por exemplo o deadlock.
A analise de invariantes pode ainda ser inserida em uma rede estruturada hierarquica 1 e estes
podem ser calculados em qualquer nivel de abstracao. Trabalhos anteriores mostram que os invariantes nao sao muito afetados pelos refinamentos
da rede e o seu calculo se mostra consistente exceto pela dimensao do vetor (que e proporcional
ao numero de lugares ou transicoes). Portanto
enquanto a Rede de Petri for tratada como um
formalismo esquematico, a analise de propriedades e uma boa opcao para os metodos de analise.
No entanto algumas dificuldades semanticas podem surgir se a interpretacao da rede for inserida
como parte da representacao.
3

O Metodo proposto

Para a representacao semi formal dos requisitos,
diversas linguagens de especificacao foram desenvolvidas. Os metodos semi formais em geral, se caracterizam por sua simplicidade e flexibilidade na
representacao dos requisitos, enquanto os metodos formais se caracterizam por possuir uma forte
base teorica que norteia tanto a simulacao quanto
a analise_dos_requisitos.
Durante o processo de eliciacao se destacam
aspectos estaticos que podem ser modelados corretamente usando ferramentas baseadas nos metodos semi formais. Entretanto, para os aspectos
1 Uma unificacao das redes de Petri esta sendo feita no
Projeto ISPIEC 15.909, onde as redes base sao a Rede
PlaceTransition (PT), rede colorida e a rede assimetrica.
Em uma segunda fase foi definido um padrao para exportacao de rede entre sistemas e em uma terceira fase as
extensoes. Redes hierarquica - classicas ou de alto nvel estao inclusas nesta categoria>

ISBN 978-85-8001-069-5

dinamicos, a possibilidade de verificacao que oferecem os metodos formais e de vital importancia
para a reducao do esforco computacional do proprio processo de verificacao, dos custos, do tempo
de implementacao, entre outras vantagens. Por
este motivo, muitos pesquisadores propoem converter os requisitos semi formais em um esquema
formal de representacao.
A proposta deste trabalho e partindo da modelagem em UML passar para uma representacao
formal em redes de Petri, e realizar a analise e verificacao_formal dos requisitos usando invariantes
definidos sobre estas redes. Portanto, primeiramente sera usada a linguagem UML para ter uma
primeira representacao semi formal dos requisitos,
para depois converter o modelo UML em redes de
Petri para fazer a analise. Os requisitos analisados, sem contradicoes, satisfazendo aos diversos
viewpoints serao a base da especificacao formal
que se segue. Os invariantes tambem podem ser
usados para mapear os requisitos e os features da
especificacao, mas este aspecto tambem esta fora
do escopo do presente artigo.
O processo de traducao da representacao semi
formal em UML para a representacao formal em
redes de Petri tem sido amplamente abordado e
existe ate um esforco cocentrado de diversos pesquisadores no estudo dos metodos de conversao da
UML para grafos e esquemas. Entretanto, neste
trabalho o objetivo e mais direto e especfico e consite em, depois de modelar os requisitos usando os
digramas da UML, usar a linguagem OCL para
representar restricoes e requisitos que nao poderiam ser claramente representados nos diagramas
da UML, usando em seguida esta base para formalizar o processo como um todo, transferindo este
conjunto de diagramas e restricoes em um grafo
(no caso uma rede de Petri).
Usando OCL serao definidas as regras para expressar os requisitos do sistemas que sejam invariantes.Uma vez especificados estes requisitos como
regras formais, o proximo passo seria converter
estas regras em um conjunto de equacoes que representem as restricoes do sistema. Ja com isto
e possvel passar a construcao da rede de Petri
usando alguns dos metodos de transformacao propostos na literatura mas levando em consideracao
as restricoes representadas em forma de equacoes.
As restricoes expressadas nestas equacoes devem
ser satisfeitas em todos os estados do sistemas,
portanto elas representam os invariantes.
E bom destacar que nem todos os invariantes se apresentam na forma de restricao (e nem
toda restricao e um invariante). Ainda assim, no
caso geral de sistemas automatizados, as restricoes
funcionais e nao-funcionais determinam regras de
adequacao do sistema ao seu domnio de aplicacao,
e sao de grande importancia mesmo quando nao
constituem um invariante. Tambem e verdade que
inumeras vezes estas restricoes sao bastante gene-

5318

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

ricas e se apresentam como um invairante. Portanto o resultado aqui apresentado e promissor
mas e ainda parcial, levando-se em conta o processo de design de sistemas automatizados como
um todo.
Um modo de verificar este tipo de requisitos
usando os invariantes, poderia ser simplesmente
construir a rede de Petri e obter os invariantes da
rede. Mas, uma vez obtidos os invariantes, uns
dos grandes problemas e a sua interpretacao. Assim, com na maioria dos metodos usados para a
obtencao dos invariante, geralmente so e possvel
obter um subconjunto deles. Em geral sao obtidos
conjuntos geradores a partir dos quais e possvel
obter os outros invariantes. Entretanto isto leva
ao seguinte problema como, partindo deste conjunto basico, e possvel obter os invariantes que
interessam em cada sistema?. Isto requer um conhecimento grande sobre o sistema para determinar quais invariantes precisam ser testados. Sendo
assim, o mais eficiente seria definir os invariantes
antes de construir a rede de Petri e assim facilitar
sua posterior verificacao. A figura 1 mostra um
esquema do que se propoe.

representam a evolucao dos estados do sistma.
3.1

Transformando restricoes em equacoes

As restricoes de um sistema podem estar baseadas no conceito de invariantes. No entanto, nem
todas as restricoes podem ser escritas inicialmente
desta forma, pelo que todos os outros tipos de restricoes devem ser transformadas para que possam
ser representadas em forma de equacoes. Nesta secao serao mostrados diferentes tipos de restricoes e
as transformacoes adequadas para descrever cada
uma delas. Estas transformacoes estao baseadas
no metodo proposto em (Yamalidou K Moody J
Lemmon M, 1996). Existem tres categorias gerais
restricoes logicas escritas em formulas conjutivas,
restricoes escritas em equacoes e na forma de inequacoes.
3.1.1

Restricoes logicas

Se uma restricao pode ser escrita como uma equacao logica em forma de conjuncao
A  1  2  . . .  g

(4)

onde A e uma variavel proposicional e cada
i e uma disjuncao da forma
i  i1  i2  . . . ih

(5)

e cada i e tambem uma variavel proposicional (E. and Kantor, 1991). A formula 5 pode
ser transformada em um conjunto de inequacoes
lineares simultaneas e equivalentes
(1  i1 ) + (1  i2 ) + . . . + 1  ih + A  hi (6)

Figura 1 Esquema da proposta
Como mostra o esquema da figura 1, a proposta e capturar os requisitos representados pelos
diagramas de classes e os diagramas de estados.
Nos diagramas de classes sao capturados os requisitos estaticos dos sistemas, e estes por sua vez
serao representados formalmente usando OCL. A
ideia e extrair destes diagramas algumas das restricoes do sistema. Os diagramas de sequencia,
atividades e estado representam o comportamento
dinamico dos sistemas modelados. Neste trabalho, propoe-se construir uma rede de Petri partindo dos diagramas de estado, levando em consideracao as restricoes do sistemas, expressos como
invariantes.
Para representar as restricoes do sistema
como invariantes e preciso usar os requisitos representados usando OCL e transforma- los em regras
expressas em logica linear. Com estas regras e
possvel estabelecer um conjunto de equacoes que

ISBN 978-85-8001-069-5

sendo i 1,2,. . . , g
O conjunto de inequacoes 6 agora ira representar as restricoes que o sistema tera que
satisfazer. As inequacoes obtidas da transformacao da formula 4 podem ser descritas como se
mostra a seguir.

3.1.2

Restricoes como inequacoes(menor
que, ou igual a)

 Restricoes que envolvem o vetor de
marcacao
As restricoes que devem ser satisfeitas pelo
sistema podem ser escritas como uma soma
dos elementos do vetor de marcacao
r
X

pi  k

(7)

i1

Isto significa que a suma dos tokens nos
lugares p1 , ..., pr da rede de Petri nunca pode

5319

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

exceder o numero k.
 Restricoes envolvendo os elementos do
vetor de disparo
Estas restricoes se referem a ocorrencia simultanea de dois ou mais eventos. Elas podem
ser descritas como
r
X

qj  r  1

(8)

j1

A equacao 8 indica que nem todas as transicoes q1 , q2 , . . . , qr podem ser disparadas simultaneamente.
4

Resultados

Para mostrar os resultados do trabalho foi selecionado o problema proposto pelo ROADEF2 2005
(Solnon et al., 2008). Este problema consiste no
trabalho diario de uma fabrica que tem duas funcoes principais atribuir um dia de producao a
cada veculo encomendado, de acordo com a capacidade da linha de producao e programar a ordem
em que os carros devem ser colocados na linha de
producao, enquanto satisfaz o maior numero de
requisitos dos processos de carroceria, pintura e
montagem.
Nao e objetivo deste trabalho modelar o planejamento da fabricacao dos carros, e sim mostrar
a modelagem do processo de fabricacao. Para simplificar a modelagem vamos considerar que a linha
de producao tem capacidade para tres carros e que
todos os carros sao do mesmo tipo. Na modelagem deste sistema uns dos requisitos fundamentais
e garantir que a linha de montagem nao possa ter
mais de um carro em cada processo. No problema
nao se especificam restricoes para a montagem da
carroceria, portanto neste trabalho nao daremos
detalhes da modelagem deste processo.
4.1

Modelagem usando a linguagem UML

Seguindo o esquema mostrado na figura 1 primeiramente representaremos os requisitos do sistema
usando os diagramas de classes e estados da linguagem UML. As figuras 2 e 3 mostram o diagrama de classes e os diagramas de estados respectivamente, correspondentes a modelagem do problema do ROADEF 2005.
4.2

Figura 2 Diagrama de classes

Transformando os diagramas de estados em
redes de Petri

Para gerar uma rede de Petri a partir dos diagramas de estados deve-se seguir os passos abaixo
(Baresi and Pezze, 2001)
2 Societe francaise de Recherche Operationnelle et Aide
a la Decision

ISBN 978-85-8001-069-5

Figura 3 Diagramas de estados (a)Diagrama
de estados correspondente a classe CFrabrica,
(b)Diagrama de estados correspondente a classe
CLinhaProducao, (c)Diagrama de estados correspondente a classe CPintura
1. Os estados dos diagramas de estados sao
modelados como lugares de uma rede de
Petri e as transicoes do diagrama de estados
sao modeladas com as transicoes das redes
de Petri.

5320

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

2. Estabelecer as relacoes entre os estados
e as transicoes no diagrama de estados,
modelados com arcos entre os lugares e as
transicoes correspondentes a rede de Petri.
3. As instancias sao modeladas como tokens.
Para este trabalho, sera considerado que a capacidade da linha de producao e tres. Portanto,
na modelagem vamos considerar que foram programados tres carros para a producao. Estes carros sao programados numa ordem especifica, de
acordo com as restricoes da linha de producao.
Seguindo os passos para transformar os diagramas de estados em redes de Petri, no caso do
digrama de estados mostrado na figura 3(b), um
lugar e associado a montagem da carroceria, um
a pintura e outro a montagem. Os tokens nestes
lugares representariam a presenca ou nao de carros. Mas, como os carros tem caractersticas diferentes, nao e adequado colocar varios tokens que
representam diferentes carros em uum mesmo lugar, porque nao seria possvel distinguir um carro
de outro. Por isso, cada estado do diagrama de
estados da figura 3(b) sera representado por tres
lugares, que vao indicar a presenca de cada carro
nesses estados.
Na tabela 1 se mostra o mapeamento de cada
estado do diagrama de estados correspondente a
classe CLinhaproducao como o seu lugar correspondente na rede de Petri.

Figura 4 Modelagem em GHENeSys da Linha de
Producao
regra geral para representar estes requisitos de um
modo mais formal. A seguir descreve-se a regra
- Se LCari.PosLinhaProd  j, onde, 1  i  3
e, 1  j  3
entao LCari+k.PosLinhaProd  j+k, onde
1k 3j
4.4

Definicao das equacoes (invariantes)

Como ja foi mostrado na secao anterior, a soma
dos tokens dos lugares que representam os processos da linha de producao, nao pode ser maior que
um. Estes requisintos podem ser convertidos em
restricoes, as quais representam os invariantes de
lugar da rede. A seguir serao apresentadas estas
inequacoes

Tabela 1 Transformando o diagrama de estados
da linha de producao em rede de Petri
Linha de Producao
Estado
Lugar
Montagem Carroceria b1, b2, b3
Pintura
b4, b5, b6
Montagem
b7, b8, b9
A figura 4 mostra a modelagem em GHENeSys(General Hierarchical Enhanced Net System) (del Foyo, 2001) da RdP correspondente ao
diagrama de estados da figura 3(b) da linha de
producao da fabrica.
4.3

Representacao das restricoes em forma de
regras

Um dos requisitos do sistema e garantir que um
carro esteja em apenas um processo da linha de
producao. Isto significa que a soma dos tokens dos
lugares que representam cada processo nao pode
ser maior que um.
Partindo da informacao representada nos diagramas e das notacoes em OCL, sera gerada uma

ISBN 978-85-8001-069-5

b1 + b2 + b3  1

(9)

b4 + b5 + b6  1

(10)

b7 + b8 + b9  1

(11)

Transformando estas inequacoes em equacoes
obtemos novas equacoes com novas variaveis
b1 + b2 + b3 + slack1  1

(12)

b4 + b5 + b6 + slack2  1

(13)

b7 + b8 + b9 + slack3  1

(14)

As variaveis slack1, slack2, slack3 representam os novos lugares que serao adicionados a
rede de Petri da figura 4. Estes novos lugares sao
inseridos na rede seguindo a regra
slackj 

S

bi ,

S
slackj  bi ,
sendo que 1  i  3, 1  j  3, e bi 
Equacao j
A figura 5 mostra a nova rede de Petri modelada em GHENeSys, com os novos lugares.

5321

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

M (b7)+M (b8)+M (b9)+M (slack3)  constante
(17)
M (b4)+M (b5)+M (b6)+M (Robot1)  constante
(18)

Figura 5 Modelagem em GHENeSys da Linha de
Producao com os novos lugares

4.5

Verificacao dos requisitos usando os invariantes

A figura 6 mostra os resultados do calculo dos
invariantes_de_lugar obtidos pelo sistema GHENeSys.

Figura 6 Invariantes de lugar obtidos por GHENeSys
A partir dos invariantes_de_lugar obtidos
podem ser definidas as seguintes equacoes

M (b1)+M (b2)+M (b3)+M (slack1)  constante
(15)

M (b4)+M (b5)+M (b6)+M (slack2)  constante
(16)

ISBN 978-85-8001-069-5

M (b7)+M (b8)+M (b9)+M (Robot2)  constante
(19)
As equacoes 15, 16 e 17 coincidem com as restricoes definidas na secao 4.4. Ja com as duas
ultimas, 18 e 19 verifica-se que, em um mesmo
momento, so um carro pode estar sendo pintado e
so um pode estar sendo montado.
Seguindo o metodo de modelagem do GHENeSys, foi construda uma rede hierarquica para
representar todo o sistema. Na figura 7 e mostrada
a rede completa. Para distinguir a ordem dos carros, estamos considerando que o primeiro carro
(representado por um token) na lista de montagem vai para o lugar b1, o segundo para o lugar
b2 e o terceiro para o lugar b3. Nesta rede fizemos
uso dos elementos macro da rede GHENeSys para
estabelecer a hierarquia do modelo.

Figura 7 Modelagem em GHENeSys do sistema
completo
Um metodo mais adequado para modelar este
tipo de problema, seria usar uma rede de alto nvel, na qual poderamos diferenciar os tokens e
por conseguinte reduzir o numero de lugares da
rede. Neste trabalho o problema foi reduzido para
tres carros, mas o problema real tem um numero
bem maior. Portanto, a modelagem do sistema
real usando uma rede lugartransicao seria muito
grande, dificultando seu entendimento. Sendo assim,seria mais conveniente partir das especificacoes em UML para uma rede alto nvel. Entretanto isto e um tema ainda em discussao, pois a

5322

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

UML ainda nao possui diagramas suficientemente
formais para transforma-los numa rede de alto nvel e ainda nao existem metodos eficientes computacionalmente que permitam a analise dos invariantes nas redes de alto nvel.
5

Conclusoes

Neste artigo foi abordado o tema da analise e especificacao de requisitos. Um metodo considerado
efetivo para garantir a qualidade dos requisitos, e
o uso de metodos formais, os quais geram especificacoes precisas que podem ser rigorosamente
testadas. Neste trabalho mostramos um metodo
para usar os invariantes das redes de Petri na especificacao e analise_dos_requisitos dos sistemas.
Primeiramente foi usada a linguagem UML para
capturar os requisitos e depois converter esta representacao semi- formal numa modelagem formal
usando as redes de Petri. A proposta mostra como
os requisitos de um sistema podem ser especificados em termos dos invariantes. Este enfoque tem
como desvantagens que nem todos os requisitos
poderao ser expressos como invariantes, portanto
este trabalho se limitou (conscientemente) aqueles requisitos que representam restricoes para o
sistema. A principal vantagem do uso dos invariantes na representacao dos requisitos e o baixo
custo_computacional que se requer para sua verificacao, comparado com outros metodos de verificacao existentes na literatura. A verificacao dos
sistemas usando os invariantes e um tema que tem
sido abordado em muitas pesquisas, mas esta verificacao, mesmo que seja eficiente computacionalmente, tem a dificuldade de que uma vez obtidos
os invariantes, a interpretacao deles e muito complexa. Portanto, a proposta deste trabalho foi definir os invariantes antes de construir a rede de Petri, e uma vez definidos os invariantes do sistema,
e construda uma rede de Petri considerando ja
os invariantes desejados. Depois e feito o calculo
dos invariantes, e estes resultados sao mapeados
com as especificacoes iniciais. A grande vantagem
desta proposta e que o processo de verificacao e
simplificado, uma vez que nao existe a problematica da interpretacao dos invariante mas continua
tendo a desvantagem da maioria dos metodos formais o alto nvel de conhecimento matematico
requerido para seu uso pratico.
Agradecimentos
A autora Arianna Z. Olivera Salmon possui bolsa
de estudo financiada pela CAPES.

Baresi, L. and Pezze, M. (2001). Improving UML
with petri nets, UNIGRA 2001, Uniform
Approaches to Graphical Process Specification Techniques (a Satellite Event of ETAPS
2001), Vol. 44 of Electronic Notes in Theoretical Computer Science, Elsevier, pp. 107
119.
del Foyo, P. M. G. (2001). Ghenesys  Uma rede
estendida orientada a objetos para projeto de
sistemas_discretos, Masters thesis, Departamento de mecatronica, Escola Politecnica da
Universidade de Sao Paulo, Brasil.
E., Y. and Kantor, J. C. (1991). Modelling and optimal control of discrete- event chemical processing using petri nets, Computers  Chemical Engineering 15 503519.
Jensen, Kurt, K. L. M. (2009). Coloured Petri
Nets. Modelling and Validation of Concurrent Systems, Theoretical Computer Science.
Liu, X. F.  Yen, J. (1996). An analytic framework
for specifying and analyzing imprecise requirements, Internacional Conference Of Software Engineering pp. 60  69.
Santos, E. A.  Silva, J. R. (2005). Applying petri
nets to requirements validation, ABCM Symposium Series in Mechatronics 1 508517.
Solnon, C., Cung, V. D., Nguyen, A. and Artigues,
C. (2008). The car sequencing problem overview of state-of-the-art methods and industrial case-study of the ROADEF2005 challenge problem, European Journal of Operational Research (EJOR) 191(3) 912927.
Valette, R. (2009). Some issues about petri net
application to manufacturing and process supervisory control, Computer and Information
Science Publications collection .
Vaquero, Tiago Stegun  Silva, J. R. B. J. (2011).
A brief review of tools and methods for knowledge engineering for planning  scheduling., Proceedings of the Knowledge Engineering for Planning and Scheduling (KEPS)
workshop .
Yamalidou K Moody J Lemmon M, A. P. (1996).
Feedback control of petri nets based on place
invariants, pp. 1528.
Zaitsev, D. A. (2004). Decomposition-based calculation of petri net invariants, Proceedings of
Workshop on Token based computing of the
25-th International conference on application
and theory of Petri nets pp. 7983.

Referencias
Adamski, M. (1998). Sfc, petri nets and application specific logic controllers, IEEE .

ISBN 978-85-8001-069-5

5323