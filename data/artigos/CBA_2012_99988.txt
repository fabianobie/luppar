Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

IDENTIFICAÇÃO AUTOMÁTICA DE PROBLEMAS DE USABILIDADE EM INTERFACES DE
SISTEMAS WEB ATRAVÉS DE REDES NEURAIS ARTIFICIAIS
GISELE ALVES SANTANA, ALESSANDRO GOEDTEL, LUCIANO TADEU ESTEVES PANSANATO
Universidade Tecnológica Federal do Paraná, Câmpus Cornélio Procópio
Programa de Pós-Graduação em Engenharia Elétrica
Avenida Alberto Carazzai, 1640, Cornélio Procópio, Paraná, CEP 86300-000
E-mails a706639@pos.utfpr.edu.br, agoedtel@utfpr.edu.br,
luciano@utfpr.edu.br
Abstract
 Quick access to information depends on the quality of interface design. A poorly designed interface and without
clarity on the information presented may result in the misinterpretation of this information, leading to wrong decisions of the
system operator. Otherwise, the access mode to system functionality is an important factor for time to performing the tasks.
Therefore, the quality of interaction design from the point of view of navigation, can compromise the efficiency of task
execution, the overall performance of a system and safety aspects. In this context, the main purpose of a usability evaluation in
web system is the identification of interface problems, recognizing that this interface has good usability. This paper describes a
study on the identification of usability problems in an experimental web system through log analysis using artificial neural
networks. The results produced by this work indicate that our approach is effective towards identifying usability problems in web
systems interface.
Keywords
 Usability Evaluation, Log Analysis, Artificial Neural Networks.
Resumo
 O acesso rápido  informação depende da qualidade do projeto da interface. Uma interface mal projetada e sem
clareza na apresentação das informações pode resultar em interpretação errônea, ocasionando decisões equivocadas do operador
do sistema. Por outro lado, o modo de acesso s funcionalidades do sistema é fator determinante para o tempo de realização das
tarefas. Portanto, a qualidade do projeto da interação do ponto de vista da navegação pode comprometer a eficiência de execução
da tarefa, o desempenho global de um sistema e aspectos de segurança. Neste contexto, a principal finalidade de uma avaliação
de usabilidade em um sistema web é a identificação de problemas nas interfaces, reconhecendo se a mesma apresenta usabilidade
adequada. Neste artigo será apresentado um estudo sobre a identificação de problemas de usabilidade num sistema web
experimental através da análise_de_logs, utilizando redes_neurais artificiais. Os resultados indicam que esta abordagem é
satisfatória em relação  identificação automática de problemas de usabilidade na interface de um sistema web.
Palavras-chave
 .

1 Introdução
A interface de um sistema é o meio pelo qual o
diálogo entre o programa e o ser humano é
estabelecido (Pressman, 2010). Problemas de
usabilidade ocorrem quando um usuário encontra
dificuldades para realizar uma tarefa com uma
interface, podendo ter origens variadas e ocasionar
perda de dados, diminuição da produtividade,
podendo chegar  rejeição total do sistema por
parte dos usuários. Assim, a interface dever ser
fácil de aprender, simples de usar, direta e
amigável. Se essas características forem
negligenciadas,
problemas
de
usabilidade
possivelmente ocorrerão.
A usabilidade é um termo usado para definir a
facilidade com que as pessoas podem usar uma
ferramenta, a fim de realizar uma tarefa específica
e importante (Nielsen, 2000). A finalidade de uma
avaliação_de_usabilidade é garantir uma boa
interação entre a interface e o usuário, ou seja,
observa-se se a interface de um sistema está
integrada ao usuário.
Nesta perspectiva, verifica-se um grande
esforço na averiguação dos padrões de qualidade da
usabilidade. A necessidade de melhorar o controle
e monitoramento_de_equipamentos e processos
aparece quando se nota a inclusão de novas
ISBN 978-85-8001-069-5

tecnologias no cenário da automação, o que
enfatiza a problemática enfrentada pelos
profissionais que trabalham no desenvolvimento e
utilização destes sistemas (Campos, 2003).
A internet tornou-se um meio conveniente para
acesso s informações capaz de integrar diferentes
serviços de rede numa única e amigável interface
com o usuário (Silva et al., 2008). A
implementação de um sistema_web_de_supervisão e
controle pode, com custo competitivo, agregar
dados que estejam distribuídos geograficamente em
uma plataforma computacional ergonômica, coesa
e flexível. Desse modo, é notória a necessidade de
sistema_web_de_supervisão e controle fáceis de
serem compreendidos e bem projetados, e
desenvolvidos com a intenção não somente do bom
funcionamento do sistema, mas também com uma
boa usabilidade.
Existem diversas referências no campo da
engenharia da usabilidade, dentre elas pode-se
enfatizar o trabalho de Tamir (2008) que apresenta
uma abordagem de avaliação da usabilidade
baseada no tempo e esforço físico do uso do
software em tarefas interativas. Kwon et al. (2007)
avaliam a usabilidade do software usando cenários
organizacionais com estruturas de abstração. Por
sua vez, Petrie et al. (2006) avaliam a usabilidade
de forma remota enquanto Campos (2003)

869

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

apresenta uma abordagem de uma avaliação formal
com recursos de ferramentas e notações
matemáticas.
Dos trabalhos que identificam problemas de
usabilidade automaticamente, destaca-se o estudo
de Ying et al. (2009) que identifica fatores
preditivos na interação com a pesquisa web através
de redes_neurais. O objetivo fundamental desta
abordagem é determinar os métodos mais eficientes
para otimizar a taxa de cliques e assim garantir
maior satisfação do usuário na interação com um
sistema web.
Chang et al. (1997) utilizam inteligência
computacional introduzindo lógica Fuzzy ao
cenário da avaliação da usabilidade. O trabalho
desenvolve um modelo de medida geral de
usabilidade utilizando a teoria dos conjuntos Fuzzy.
Sivaji et al. (2011) demonstram o uso de um
suporte automático para avaliação da usabilidade
através do desenvolvimento de uma ferramenta
chamada Sistema de Gestão de Usabilidade. A
feramenta permite ao avaliador reduzir os
processos manuais e se concentrar em capturar
mais defeitos em um curto período de tempo. Os
resultados mostram que com a ajuda de automação,
mais problemas de usabilidade podem ser
detectados, reforçando a viabilidade e eficácia da
avaliação_de_usabilidade automatizada de um
sistema.
Morandini (2003) aborda a proposta de um
ambiente chamado Ergo-Monitor. Tal sistema
objetiva o monitoramento da usabilidade de
sistemas_web por meio da coleta seletiva e da
análise de dados dos arquivos de log referentes s
interações reais que se estabelecem entre usuário e
sistema web. Com base em dados selecionados o
sistema calcula, por meio de modelos de
comportamentos esperados para tarefas específicas,
as métricas que visam quantificar a usabilidade
efetiva do sistema web.
A abordagem descrita neste artigo é
semelhante  de Morandini (2003) em termos de
coleta e filtragem de log. No entanto, este trabalho
não quantifica a usabilidade efetiva de um sistema,
mas identifica automaticamente se um sistema web
apresenta problemas de usabilidade, através da
utilização de redes_neurais artificiais.
O objetivo deste artigo é apresentar os
resultados da aplicação de uma rede_neural para
classificar a presença ou ausência de problemas de
usabilidade na interface de um sistema web
experimental, utilizando as heurísticas de Nielsen
(1993) para embasar a detecção dos problemas. A
análise_de_logs é usada como técnica para avaliação
da interface do sistema. A rede_neural utilizada é a
Multilayer Perceptron do tipo feedforward com
algoritmo de aprendizado Backpropagation
gradiente_descendente.
Este artigo está organizado da seguinte
maneira inicialmente, na Seção 2 é realizado um
estudo sobre a usabilidade e as heurísticas para a

ISBN 978-85-8001-069-5

avaliação das interfaces com os usuários. Na Seção
3 é descrito como os logs são coletados. Na Seção
4 é realizado um estudo para a elaboração de um
modelo de tarefas, descrevendo a interação do
usuário com o sistema web experimental. Na seção
5 é descrita uma metodologia para filtragem dos
arquivos de log. Na seção 6 são apresentados os
parâmetros da rede_neural escolhida, assim como os
resultados obtidos por esta rede. Na Seção 7 são
apresentadas as conclusões.
2 Usabilidade
Segundo Nielsen (1993), um sistema cujo
manuseio seja fácil e rapidamente aprendido,
dificilmente seja esquecido, não provoque erros
operacionais e resolva eficientemente as tarefas
para as quais foi projetado, pode ser considerado
um sistema com boa usabilidade.
A aceitação de um sistema está diretamente
ligada  satisfação do usuário durante a utilização
do mesmo (Sivaji et al., 2011). Dessa forma,
percebe-se a importância do desenvolvimento de
um sistema baseado em práticas de usabilidade,
visando assim uma melhor aceitabilidade deste por
parte do usuário.
2.1 Avaliação de Usabilidade
Avaliação é o processo sistemático de coleta de
dados responsável por obter informações sobre o
modo como um determinado usuário deve utilizar
um sistema para uma determinada tarefa num
determinado ambiente (Preece et al., 2002).
Alguns objetivos apontados por Cybis et al.
(2005) a serem atingidos pelas avaliações são
constatar, observar e registrar problemas durante a
interação calcular métricas objetivas para eficácia,
eficiência e produtividade do usuário na interação
com o sistema diagnosticar as características do
projeto que provavelmente atrapalhem a interação
e prever dificuldades de aprendizado na operação
do sistema.
As técnicas de avaliação de interface diferem
entre si em vários aspectos. A principal diferença
entre as técnicas está na maneira utilizada para
coletar os dados, os tipos de dados coletados, e
ainda o tipo de análise realizada com as
informações obtidas.
Neste trabalho é utilizada a técnica de análise
de log para a avaliação da interface de um sistema
web experimental, realizado especificamente para
os testes e obtenção de resultados. O sistema web
experimental representa uma agência fictícia de
empregos e disponibiliza serviços referentes ao
cadastro de currículos de usuários em diferentes
áreas de atuação. Para fins de demonstração do
método empregado foi avaliada especificamente a
funcionalidade Cadastrar currículo oferecida por
este sistema.

870

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

A análise_de_log é uma técnica onde são
analisadas as interações do usuário através de
arquivos de log gerados durante a utilização do
sistema e permite coletar informações sobre como
os usuários usam este sistema (Prates et al., 2000).
É um método de avaliação que além de apontar
problemas de usabilidade, ajuda a compreender o
comportamento dos usuários com relação 
interface do sistema (Winckler e Pimenta, 2001).
A utilização dessa técnica tem apresentado
experiências positivas, como a possibilidade de
identificar como os usuários chegam ao site
desejado, os links mais visitados e locais da
interface nunca explorados.
Uma característica que merece destaque é que
a análise_de_log é uma técnica discreta, pois não
interfere na interação do usuário com as tarefas
executadas no sistema. De acordo com Winckler e
Pimenta (2001) outro ponto de destaque é o fato de
que as informações obtidas a partir da aplicação
dessa técnica geram dados estatísticos confiáveis,
relativos a várias questões, como padrões de uso,
usabilidade de produtos, estratégias de integração e
utilidade percebida de produtos que envolvam o
uso de sistemas_computacionais.
2.2 Heurísticas de Nielsen
As 10 Heurísticas de Nielsen (1993), conforme
ilustradas na Tabela 1, foram utilizadas no processo
de criação de um modelo de tarefas (Morandini,
2003), que determina o comportamento esperado
do usuário na execução de tarefas com o sistema.
Para este trabalho é definido especificamente a
tarefa de preenchimento de um formulário de
cadastro.
Tabela 1. Heurísticas de Nielsen

No
1
2
3
4
5
6
7
8
9
10

Heurísticas
Visibilidade do estado do sistema
Concordância com o mundo real
Controle e liberdade do usuário
Consistência e padrões
Prevenção de erros
Reconhecer ao invés de lembrar
Flexibilidade e eficiência de uso
Projeto minimalista e estético
Reconhecimento e diagnóstico de erros
Ajuda e documentação

Parte-se do princípio que se a página de
cadastro proporciona uma boa usabilidade, ou seja,
atende aos princípios heurísticos, presume-se que o
usuário não cometerá erros e nem precisará de
ajuda para a execução desta tarefa.
Para melhor esclarecimento deste conceito,
cita-se o exemplo de erros de preenchimento em
formulários de cadastro. Esses erros podem ocorrer
devido  falta de clareza na apresentação da
interface, caracterizada principalmente por texto

ISBN 978-85-8001-069-5

ilegível, não indicação de campos obrigatórios de
preenchimento, falta de máscaras em alguns
campos, entre outros.
A ausência destes recursos pode violar
algumas heurísticas e consequentemente dificultar
a interação do usuário com o sistema. Se o recurso
de máscaras não for utilizado, por exemplo, o
usuário tende a preencher esses campos
inadequadamente, ocasionando assim, fracasso na
tarefa. Esse fracasso, por sua vez, pode ser
considerado um problema de usabilidade.
3 Coleta dos Logs
Os dados de log de um servidor_web são a fonte
primária da sequência de cliques e urls toda vez
que o servidor responde a uma solicitação HTTP,
uma entrada é feita no arquivo de log do servidor.
De acordo com uma importante empresa de
pesquisas em servidores web, chamada Netcraft
(www.netcraft.co.ukSurvey), mais de 60 dos
servidores web no mundo utilizam o Apache, um
servidor_web configurável com um projeto
modular, tecnologia gratuita e aberta, funcionando
com diversas linguagens de programação e
plataformas.
A distribuição do Apache inclui um módulo
chamado modlogconfig, responsável pelo
registro de log básico, que grava arquivos de log
CLF (Common Log Format) por padrão. Os
arquivos de log CLF contêm uma linha separada
para cada solicitação.
O servidor Apache registra uma entrada para
todo acesso que recebe, registrando as seguintes
informações a url requisitada, o endereço IP de
origem, o tempo de duração, entre outras. Uma
entrada de log é adicionada automaticamente cada
vez que o servidor recebe um pedido para um
recurso.
Neste trabalho foram analisados os arquivos de
log gerados pelo servidor Apache, identificando
principalmente as sequências de páginas visitadas,
para posterior comparação com o modelo de
tarefas. O formato de cada entrada de um arquivo
de log gerado pelo servidor Apache é o seguinte
127.0.0.1 - - 13Dec2011150957 -0200 "GET
index.html HTTP1.1" 304

Na Tabela 2 pode-se visualizar o significado
de alguns itens presentes no log do servidor
Apache.
Tabela 2. Campos do arquivo de log do servidor Apache

Endereço do IP
Nome do cliente (- se anônimo)
Data da solicitação
Horário da solicitação
Código status HTTP retornado
Método solicitado
Documento solicitado

127.0.0.1
13Dec2011
175558
200
GET
index.html

871

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

4 Modelo de Tarefas
A ideia subjacente ao modelo de tarefas é apontada
por Morandini (2003) que define que o avaliadoroperador do sistema deve modelar as tarefas
executadas pelo usuário na interação com este
sistema. Assim, poderá ser realizada uma avaliação
de usabilidade em interfaces web baseada no
comportamento dos usuários perante estas tarefas.
Storrs (1995) define uma tarefa como sendo
um objetivo associado a um conjunto ordenado de
ações que podem satisfazer um objetivo nos
contextos apropriados. Traduzindo para o contexto
deste trabalho, uma tarefa foi definida como uma
sequência de passos que o usuário deve realizar
para atingir um determinado objetivo cada um
destes passos são acessos a uma página web e
identificados por urls.
Formalmente pode-se definir uma tarefa k pela
seguinte quádrupla tk   S, po, pf, T , onde S é um
conjunto, de tamanho n, de páginas web que devem
ser visualizadas pelo usuário para cada tarefa po é a
página web inicial pf é a página final que identifica
o sucesso da tarefa e, finalmente, T  S  S é a
função de transição que identifica a passagem de
uma página web pi para outra página web pj para i,
j  n.
Assim, pode-se definir um modelo de tarefas
(MT) como sendo MT   t1, t2, ..., tm , onde m é a
quantidade de tarefas do modelo. É importante
ressaltar que cada página web é identificada por
uma url e que o arquivo de log do servidor
armazena, de maneira sequencial, uma lista de urls
que determina o histórico de acesso de cada
usuário. Dessa maneira, uma possível tarefa no
sistema web experimental, como um cadastro de
currículo pode ser especificada.
Na página inicial do sistema, apresentada na
Figura 1, o usuário tem algumas possíveis opções
para cadastrar seu currículo através dos links
Currículos,
Cadastre
seu
currículo,
Estagiários, Profissionais e Vagas.

Os links Currículos e Cadastre seu
currículo, direciona o usuário imediatamente 
página de cadastro de currículo esta sequência de
ações (cliques nos links) é definida neste trabalho
como caminho 1. Com a escolha das opções
Estagiários, Profissionais, ou Vagas, o
usuário será direcionado a outra página com a
possibilidade de se candidatar a uma vaga
específica através do link Quero me candidatar e
assim, encaminhado  página de cadastro de
currículo. Por sua vez, esta sequência de ações é
definida como caminho 2.
Então, pode-se afirmar que o usuário que tem o
objetivo de cadastrar seu currículo no sistema web
tem dois possíveis caminhos no primeiro, ele
acessa os arquivos index.html, cadastro.jsp e
finalmente sucesso.html e no segundo caminho
o usuário acessa os arquivos index.html,
vagas.html, cadastro.jsp e sucesso.html.
No entanto, ao defrontar-se com um problema
na página cadastro.jsp, o usuário tem a opção de
consultar a página de ajuda (ajuda.html). Se o
problema persistir e o usuário insistir em se
cadastrar, o mesmo será direcionado para a página
de erro (erro.jsp). O usuário somente terá êxito em
seu objetivo se conseguir atingir a página de
sucesso (sucesso.html).
Esse exemplo de tarefa, denominado de
Cadastro de currículo, foi analisado e os
possíveis caminhos para a execução desta tarefa
foram relacionados, conforme Figura 2. Nota-se
que a página de início da tarefa é denominada
index.html e a página final, sucesso.html.
index.html

vagas.html

cadastro.jsp

erro.jsp

ajuda.html
sucesso.html

Figura 2. Modelo da tarefa Cadastrar currículo

Figura 1. Tela inicial  index.html

ISBN 978-85-8001-069-5

Portanto, o MT para esta tarefa está definido
 S   index.html, vagas.html, cadastro.jsp,
ajuda.html, erro.jsp, sucesso.html 
 po   index.html 
 pf   sucesso.html 
É importante ressaltar que o MT pode ser
realizado para quaisquer tarefas relacionadas 
interação do usuário com o sistema web, porém,

872

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

para fins deste estudo, apenas um MT foi
demonstrado.
Após a etapa do registro do MT torna-se
necessário desenvolver um mecanismo que realize
a filtragem, a busca e a organização por tarefas no
arquivo de log do servidor baseado nas tarefas
registradas no MT. Na próxima Seção é
apresentada a filtragem dos logs do servidor, com o
objetivo de normalizá-los para entrada da rede
neural.
5 Metodologia para Filtragem do Log
Pode-se considerar um sistema web como sendo
um conjunto de recursos web, representado por R 
 r1, r2, r3, ..., rv , onde v é a quantidade de
recursos oferecidos pelo sistema web, e o conjunto
U   u1, u2, u3, ..., uw  como sendo todos os
usuários que tenham acesso a este sistema. Assim,
é possível representar uma entrada no arquivo de
log por li   ui, d, h, c, ri, onde ui  U, ri  R d
representa a data do acesso h representa o horário
do acesso e c o código de status que identifica se
houve sucesso ou fracasso na requisição.
Quando um usuário acessa uma página, ele
visualiza um conjunto de recursos que representa a
mesma. Assim, pode-se representar a visualização
de uma página por pi   ri1, ri2,..., rip , onde rij
 R. Sabe-se que ri1 representa o recurso
desejado pelo usuário, sendo os demais recursos
embutidos e requisitados pelo navegador web.
Por outro lado, o MT apresenta sequências de
urls para cada tarefa, ou seja, sequências de páginas
que devem ser visitadas determinando uma tarefa
que se deseja avaliar. Assim, pode-se dizer que S 
 p1, p2, ..., pn , em que n é o número máximo de
páginas visitadas para uma tarefa.
A filtragem do arquivo de log é realizada de
forma que cada registro não represente mais um
acesso a um recurso, mas sim, um acesso a uma
página. Um registro no arquivo de log filtrado (lfi )
ficou representado como lfi   ui, d, h, c, pi .
Logo, define-se o problema da filtragem como
dado um arquivo de log com entradas li de um
determinado sistema web e um modelo de tarefas
MT, transforme os registros deste arquivo de tal
forma que todas as entradas neste arquivo
representem uma página visualizada.
No Quadro 1 é apresentado um trecho de um
arquivo de log que armazena o acesso a uma única
página web.
127.0.0.1 - - 14Dec2011100957 -0200 "GET index.html
127.0.0.1 - - 14Dec2011100958 -0200 "GET cssstyles.css
127.0.0.1 - - 14Dec2011100958 -0200 "GET logo.ico
127.0.0.1 - - 14Dec2011100958 -0200 "GET logo1.ico
127.0.0.1 - - 14Dec2011100958 -0200 "GET imagesjob.jpg
127.0.0.1 - - 14Dec2011100958 -0200 "GET imagesm1.jpg
127.0.0.1 - - 14Dec2011100959 -0200 "GET imagesm2.jpg
127.0.0.1 - - 14Dec2011100959 -0200 "GET imagesm3.jpg
127.0.0.1 - - 14Dec2011100959 -0200 "GET imagesm4.jpg
127.0.0.1 - - 13Dec2011100959 -0200 "GET imagesm5.jpg
127.0.0.1 - - 13Dec2011100959 -0200 "GET imagesfig.jpg

Quadro 1. Trecho de um arquivo de log real

ISBN 978-85-8001-069-5

Esse exemplo apresenta o acesso a 11 (onze)
recursos que constituem apenas uma única página
(index.html). Dessa forma, pode-se afirmar que o
problema da filtragem se resume em retirar deste
arquivo todos os recursos embutidos na página em
questão.
A ideia principal neste processo de filtragem é
analisar o MT (base para o processamento da
filtragem), o log do servidor para cada tarefa e
armazenar no log refinado somente as linhas
comuns ao MT e ao log.
Portanto, o log filtrado foi constituído somente
pelas páginas identificadas nos dois arquivos,
conforme observado no Quadro 2. O quadro
também demonstra o acesso  página de cadastro
de currículo, onde somente o caminho 1 está
exemplificado, com todas as possibilidades de
execução para esta tarefa.
13Dec201115095710 index.html
13Dec201115095830 cadastro.jsp
13Dec201115100230 sucesso.html
13Dec201115103010 index.html
13Dec201115103130 cadastro.jsp
13Dec201115103330 erro.jsp
13Dec201115103350 cadastro.jsp
13Dec201115103630 sucesso.html
13Dec201115103010 index.html
13Dec201115103130 cadastro.jsp
13Dec201115103330 ajuda.html
13Dec201115103350 cadastro.jsp
13Dec201115103630 sucesso.html
13Dec201115103010 index.html
13Dec201115103130 cadastro.jsp
13Dec201115103330 erro.jsp
13Dec201115103350 cadastro.jsp
13Dec201115103010 index.html
13Dec201115103130 cadastro.jsp
13Dec201115103330 ajuda.html

Acesso com
sucesso
Acesso com
sucesso +
Acesso a erro
Acesso com
sucesso +
Acesso ajuda
Acesso com
fracasso +
Acesso a erro
Acesso com
fracasso +
Acesso ajuda

Quadro 2. Log filtrado

6 Análise de Log utilizando Redes Neurais
Artificiais
As Redes Neurais Artificiais são projetadas para
simular a estrutura e funcionamento do cérebro
humano. São sistemas de processamento de
informação
intrinsecamente
paralelos
e
distribuídos, constituídos de unidades elementares
denominadas neurônios, que têm a capacidade de
armazenar
conhecimentos
experimentais
e
disponibilizá-los para uso (Haykin, 2001).
Uma característica importante das redes
neurais é a capacidade de aprendizado. Neste
processo, a rede adquire a habilidade de responder
a estímulos através do ajuste_de_parâmetros
internos.
As redes_neurais possuem alta capacidade de
reconhecimento_de_padrões, que tem por objetivo a
classificação em categorias. Essa característica,
aliada  competência de generalização, permite o
uso das redes_neurais no contexto deste trabalho,
classificando as saídas em sistema com problemas
de usabilidade e sistema sem problemas de
usabilidade. Porém, somente realizará este processo

873

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

para padrões de tarefas que foram previamente
definidos no MT e para os quais a rede foi treinada.

index.html

6.1 Projeto da rede
Após alguns testes preliminares definiu-se pela
utilização de uma rede_neural Multilayer
Perceptron (MLP), do tipo feedforward com
algoritmo
de
Backpropagation
gradiente
descendente (Silva et al., 2010). Os parâmetros da
rede foram alterados ao longo do treinamento com
a finalidade de se encontrar um modelo com
resultado de generalização da classificação dos
padrões satisfatório ao problema.
O ajuste dos pesos e do limiar de cada um dos
neurônios da rede foi efetuado utilizando o
processo
de
treinamento
supervisionado,
considerando que para cada amostra dos sinais de
entrada, as respectivas saídas desejadas estavam
disponíveis (Silva et al., 2010).
Os vetores dos pesos iniciais dos neurônios
foram inicializados com valores aleatórios
pequenos, entre 0 e 1.
Com o objetivo de buscar a melhor
configuração para a taxa de aprendizado, foram
realizados experimentos variando o seu valor,
procurando observar o efeito desta variação sobre a
convergência da rede. A taxa de aprendizado
utilizada que apresentou melhor desempenho foi de
0,1.
A quantidade máxima de épocas especificada
foi de 2000 (duas mil) e o erro quadrático médio do
processo de ajuste dos pesos foi inferior a 1.10-6.
Visando acelerar a fase de treinamento, os
dados foram normalizados (Haykin, 2001) para
cada página visitada, escolheu-se como entrada
normalizada o dígito 1, e para cada página nãovisitada, o dígito 0.
A função de ativação escolhida foi a logística
sigmoidal, obtendo-se saídas compreendidas entre
-1 e +1, representado duas classes distintas
presença de problemas de usabilidade e ausência de
problemas de usabilidade.
Na fase de treinamento e validação, o processo
somente foi interrompido por dois mecanismos prédeterminados o primeiro diz respeito, na fase de
retropropagação, pelo erro quadrático médio o
segundo mecanismo foi referente ao número
máximo de interações permitidas.
Também foi modificada a quantidade de
vetores de entradas da rede, iniciando com 5
(cinco) entradas e depois aumentando este número
para 6 (seis) entradas. As entradas são referentes ao
número de páginas necessárias para a execução da
tarefa estabelecida no MT, onde cada página
representa uma entrada da rede_neural.
A rede com 5 entradas representa a execução
da tarefa através do acesso ao links diretos
Currículos e Cadastre seu currículo,
disponíveis na página inicial (index.html), e
definido como caminho 1, conforme Figura 3.

ISBN 978-85-8001-069-5

erro.jsp
cadastro.jsp

ajuda.html
sucesso.html

Figura 3. Entradas da rede_neural  caminho 1

A Figura 4 demonstra a rede com 6 entradas
ilustrando o acesso através do link Vagas,
disponível na página inicial (index.html) do sistema
web experimental.

index.html

vagas.html

erro.jsp
cadastro.jsp

ajuda.html
sucesso.html

Figura 4. Entradas da rede_neural  6 entradas

O fluxo de tarefas necessárias para o
processamento dos dados pode ser observado na
Figura 5, assim como as etapas do funcionamento
da rede_neural.

874

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Web Site
Experimental

Arquivos de Log
do Servidor

Modelo de
Tarefas

O conjunto de treinamento é utilizado para
treinar todas as topologias candidatas e o conjunto
de teste é somente aplicado para selecionar aquela
que apresenta os melhores resultados de
generalização (Silva et al., 2010). Assim, com o
objetivo de encontrar a melhor topologia de rede,
partiu-se de cinco neurônios na camada oculta,
aumentando este número sem limites iniciais prédeterminados, conforme visualizado na Tabela 3.
Tabela 3. Tipos de arquiteturas utilizadas
Rede

Arquivo de Log
Filtrado

Normalização dos
dados de entrada

Montagem da
matriz de entrada
da RNA

No
Saídas

5
5
5
6
6
6

5
10
15
5
10
15

1
1
1
1
1
1

6.2 Resultados experimentais

Validação dos
dados

Tabela 4. Resultados obtidos
Rede

Treinamento
Classificação
+1 Presença de problemas
 -1 Ausência de problemas

Figura 5. Rotina de processamento dos dados

No tocante  arquitetura da rede, foi utilizada
apenas uma camada oculta, considerando que esta
topologia mais simples foi suficiente para
possibilitar a classificação dos padrões de saída.
Uma das técnicas estatísticas mais utilizadas para
seleção das melhores topologias candidatas é a
validação_cruzada (cross-validation) (Silva et al.,
2010). Neste trabalho é aplicado o método
denominado de validação_cruzada por amostragem
aleatória, no qual o conjunto total de dados é
aleatoriamente dividido em dois conjuntos
treinamento (80 do total dos dados) e validação
(20 do total dos dados).

ISBN 978-85-8001-069-5

No Neurônios
Camada Escondida

Os resultados obtidos referentes aos treinamentos
utilizando as arquiteturas apresentadas na Seção
anterior podem ser visualizados na Tabela 4. Para
cada rede foram registrados apenas os resultados
referentes ao melhor treinamento.
A rede com 6 entradas e 15 neurônios na
camada oculta (Rede 6) apresentou melhor
desempenho, com menor erro quadrático médio,
menor número de épocas e maior taxa de acertos.

Rede Neural

Apresentação

Rede 1
Rede 2
Rede 3
Rede 4
Rede 5
Rede 6

No
Entradas

Rede 1
Rede 2
Rede 3
Rede 4
Rede 5
Rede 6

Número
de épocas

Erro quadrático
médio ()

Taxa de
acerto ()

432
388
366
380
357
323

0,2004
0,2003
0,1908
0,1432
0,1412
0,1331

90
93
97
97
97
98

Os resultados demonstram a confiabilidade da
análise e a capacidade de generalização da rede
neural. Os dados são resultantes de uma correta
formação dos conjuntos de padrões destinados ao
treinamento, pois a generalização depende
principalmente de um treinamento adequado. Após
os treinamentos, a rede foi testada com um novo
conjunto de amostras (dados de teste) e utilizada
para verificar seu desempenho sob condições reais
de utilização.
7 Conclusão
Neste artigo foram apresentados os resultados
obtidos com a aplicação de redes_neurais MLP ao
problema de detecção de problemas de usabilidade

875

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

num sistema web experimental. Taxas de acerto
acima de 90 foram obtidas para todas as
configurações testadas.
Para os cenários avaliados foi possível
comprovar a capacidade de generalização das redes
neurais, a qual permite a identificação de padrões
de erros de usabilidade desconhecidos. A rede
neural conseguiu classificar corretamente os dados
de entrada nas saídas esperadas, que foram
divididas em duas classes sistema com problemas
de usabilidade e sem problemas de usabilidade.
Como a usabilidade não é uma grandeza
mensurável, foi necessária a construção de um
modelo de tarefas para representar padrões de
execução de tarefas esperados. Através deste
modelo foi possível comparar os dados esperados
com os dados armazenados nos arquivos de logs do
servidor, e realizar uma filtragem dos dados num
arquivo de log refinado e significativo como
entrada para a rede_neural. Foi constatado que o
modelo de tarefas pode ser modificado para
qualquer outro tipo de tarefa desejada na interação
do usuário com um sistema web.
Agradecimentos
Agradecemos  UTFPR, CAPES (Bolsa DS),
Fundação Araucária (Projeto no 17.563), Secretaria
de Estado da Ciência, Tecnologia e Ensino
Superior (SETI  PR) e Governo do Estado do
Paraná pelo apoio financeiro.
Referências Bibliográficas
Campos, J. C. (2003). A formal approach to the
usability engineering, Proceedings of the
Latin American Conference on HumanComputer Interaction. New York, USA.
Chang, E. J., Dillon, T. S. and Cook, D. (1997).
An intelligent system based usability
evaluation metric,
IEEE International
Conference on Intelligent Information Systems,
pp. 218.
Cybis, W. A., Scapin, D. and Morandini, M.
(2005). ErgoManager um sistema gerenciador
de interfaces com o usuário para sites web
transacionais,
CLIHC 2005, Cuernavaca,
México.
Haykin, S. (2001). Neural Networks A
Comprehensive Foundation, 2 edn, PrenticeHall.
ISOIEC.
(1998)
ISOIEC
14598-51998.
Information technology  Software product
evaluation  Part 5 Process for evaluators.
Kwon, G., Ham, D. H. and Yoon, W. C. (2007).
Evaluation of Software Usability Using
Scenarios Organized by Abstraction Structure,
Proceedings of the 14th European Conference
on Cognitive ergonomics.

ISBN 978-85-8001-069-5

Morandini,
M.
(2003).
Ergo-Monitor
monitoramento da usabilidade em ambiente
web por meio da análise de arquivos de log,
PhD Thesis, Santa Catarina Universidade
Federal de Santa Catarina.
Netcraft (2006). Web Server Survey. Disponível
em httpwww.netcraft.com.
Nielsen, J. (2000). Designing Web Usability, San
Francisco Morgan Kaufmann.
Nielsen, J. (1993). Usability Engineering, San
Francisco Morgan Kaufmann.
Petrie, H., Hamilton, F., King, N. and Pavan, P.
(2006). Remote usability evaluations with
disabled people, Proceedings of the SIGCHI
Conference on Human Factors in Computing
systems.
Prates, R., Souza, C. S. and Barbosa, S. (2000). A
method for evaluation the communicability of
user interfaces interactions, Proceedings of the
American
Conference
on
Cognitive
ergonomics, pp 31-38.
Preece, J., Rogers, Y. and Sharp, H. (2002).
Interaction Design Beyond Human-Computer
Interaction, New York John Wiley  Sons.
Pressman, R. S. (2010). Software Engineering a
Practitioners Approach., 5 edn, New York
Mc Graw Hill.
Silva, I. N., Spatti, D. H. and Flauzino, R. A.
(2010). Redes Neurais Artificiais para
Engenharia e Ciências Aplicadas, 1 edn, São
Paulo Artliber, Br.
Silva, L. E., Miranda, J. C., Neto, U. C., Coury, D.
V. and Oleskovicz, M. (2008). A utilização de
ferramentas web para supervisão e controle de
equipamentos do sistema_elétrico_de_potência,
XVII Congresso Brasileiro de Automática,
2008, Juiz de Fora. Anais do XVII Congresso
Brasileiro de Automática, 2008.
Sivaji A., Soo, S-T. and Abdullah, M. R. (2011).
Enhancing the effectiveness of usability
evaluation by automated heuristic evaluation
system, IEE Third International Conference on
Computational Intelligence, Communication
Systems and Networks, pp. 48-53.
Storrs, G. (1995). The notion of task un humancomputer interaction, The 10th Annual
conference of the British Human-Computer
interaction Group, UK.
Tamir, D., Komogortsev, O. V. and Mueller, C. J.
(2008). An effort and time based measure of
usability, Proceedings of the 6th International
Workshop on Software Quality.
Winckler, M. A. A., Pimenta, M. S. (2001).
Avaliação de usabilidade de sites web,
Sociedade Brasileira de Computação. X
Escola de Informática da SBC-Sul.
Ying, Z., Bernard, J. and Jansen, A. S. (2009).
Identification of factors predicting click
through in web searching using neural network
analysis, Journal of the American Society for
Information Science and Technology. pp.114.

876