XXI Congresso Brasileiro de Autom치tica - CBA2016
UFES, Vit칩ria - ES, 3 a 7 de outubro

PLANEJAMENTO DE ACOES EM SISTEMAS HIERARQUICOS TEMPORIZADOS
USANDO GHENESYS
Arianna Z. Olivera Salmon, Pedro M. Gonzalez Del Foyo, Jose Reinaldo Silva


Design Lab, Departamento de Mecatronica, Escola Politecnica, Universidade de Sao Paulo
Av. Professor Mello Moraes, 2231, CEP 05508-970
Sao PauloSP, Brasil


Departamento de Engenharia Mecanica, Universidade Federal de Pernambuco
Av. Academico Helio Ramos sn, CEP 50670-901
RecifePE, Brasil
Emails arianna@usp.br, pedro.foyo@ufpe.br, reinaldo@usp.br

Abstract A major issue using Automatic Planning techniques to solve real problems is the specification and
modeling of requirements. Because of that, this first stage is considered at the same time, the most complex and
the most strategic to achieve proper results. At this stage, errors must be detected before the implementation
begins, thus avoiding the waste of time and resources. This work proposes a method for the modeling, analysis
and verification of requirements, starting with a semi-formal representation in UML. Formal methods based on
Petri net are used to model, analyze and verify these requirements. A case study of a real planning system of ship
operations to support the logistic of oil rigs and ports will be presented and set in GHENeSys system (General
Hierarchical Enhanced Net System). To well defined problems this requirements sets could be used as a basis
to perform the planning avoiding the use of heuristics. Otherwise, the requirement set can be used as a start to
prepare the problem to AI planning tools.
Keywords

Automatic Planning, Modeling requirements, Verification, Petri Nets.

Resumo O uso de tecnicas de Planejamento Automatico para resolver problemas reais, tem entre seus
principais problemas a especificacao e modelagem adequada dos requisitos. Portanto, a fase inicial de eliciacao,
especificacao e analise_de_requisitos, e considerada, ao mesmo tempo, a mais complexa, e a mais estrategica para
obtencao de bons resultados. Erros precisam ser detectados durante esta fase inicial enquanto se antecipa ao
maximo a formalizacao do problema. Este trabalho propoe um metodo para a analise, modelagem e verificacao de
requisitos, partindo da sua representacao semi-formal em UML, e utilizando metodos formais baseados em Rede
de Petri para proceder a modelagem, analise e verificacao. E apresentado um estudo de caso de um sistema real
de planejamento de operacoes de navios para atender portos e plataformas de petroleo, e ambientado no sistema
GHENeSys (General Hierarchical Enhanced Net System). Para problemas bem estruturados esta base inicial de
requisitos pode ser usada para fazer o planejamento usando Redes de Petri com bons resultados, dispensando a
necessidade de heursticas. Em caso contrario este conjunto proprio de requisitos pode ser usado como entrada
para outras ferramentas de planejamento_automatico baseadas em AI (Inteligencia Artificial).
Palavras-chave

.

Introducao

O uso de tecnicas de Planejamento Automatico para solucionar problemas reais, tem dividido
a atencao dos pesquisadores da area de Inteligencia Artificial, que em geral se dedicam aos metodos baseados em logica, independentes do domnio de aplicacao. Entretanto, para problemas
reais, o conhecimento do domnio e fundamental,
e estes domnios sao considerados complexos, de
modo que a fase de eliciacao, analise, e modelagem de requisitos e considerada crucial para o sucesso do projeto. Nesse caso, um problema que
merece especial atencao e converter requisitos de
uma representacao semi-formal - como a UML por
exemplo - para uma aboradagem formal, onde se
pode fazer a analise destes requisitos e finalmente
transforma-los em especificacao (Liu et al., 2002).
A representacao formal de destino pode variar, dependendo do domnio de aplicacao, mas,
para sistemas_dinamicos automatizados as Redes de Petri tem sido a mais usadas (Baresi and
Pezze, 2001). No caso da transferencia de UML

ISSN 2525-8311

para redes de Petri existe ainda a possibilidade
de sair de uma linguagem semi-formal diagramatica, onde diferentes features podem ser representados por diagramas diferentes para uma representacao unificada. Assim, requisitos compatveis
e sem ambiguidades devem resultar em redes consistentes e com propriedades conservativas (invariantes) bem definidas. A analise de propriedades
da rede responde portanto pela analise_dos_requisitos, que ainda podem ser verificados no mesmo
processo. O presente trabalho tem como objetivo propor uma disciplina de projeto para resolver problemas complexos de planejamento usando
um metodo de modelagem, analise e verificacao,
baseado em UML e Redes de Petri (GHENeSys).
Na secao 2 descrevemos como UML e as redes de Petri estao sendo usadas na modelagem e
analise de sistemas a secao 3 descreve a metodologia de analise e modelagem de requisitos proposta.
Os resultados obtidos sao apresentados na secao 4,
onde mostramos um estudo de caso de um sistema
real de planejamento de transporte_de_carga por

1440

XXI Congresso Brasileiro de Autom치tica - CBA2016
UFES, Vit칩ria - ES, 3 a 7 de outubro

navios para um conjunto de plataformas no mar
(ambiente do pre-sal). Na secao 5 sao feitas as
consideracoes finais do trabalho.
2

UML e Redes de Petri na modelagem
de sistemas

A UML oferece um conjunto de notacoes e diagramas para representar requisitos eliciados, observando diferentes aspectos, sem que haja uma
forte interferencia entre eles. Porem, a notacao de
requisitos em UML sofre uma dicotomia por um
lado nao pode ser estritamente formal ou perderia
a flexibilidade de ajuste a diferentes situacoes do
processo de eliciacao por outro, exatamente por
nao poder ser formal, nao pode incluir uma fase
de analise (formal) de requisitos.
Portanto, para viabilizar uma fase de analise_de_requisitos e evitar a transferencia de problemas pertinentes a fase inicial de design para
as fases posteriores, e preciso fazer uma transferencia semantica dos requisitos representados em
UML para uma linguagem formal. Existe na literatura uma ampla discussao sobre a escolha da linguagem de especificacao (de requisitos) mais adequada (Frappier and Habrias, 2001). Neste contexto, as redes de Petri, e em especial as redes de
Petri orientadas a objeto sao consideradas uma
boa opcao.
Varios trabalhos propoem a transferencia semantica de UML para redes de Petri e suas extensoes (Baresi and Pezze, 2001), (Zhao et al., 2004),
(Labbani, 2010). Muitos destes trabalhos oferecem metodos para construir redes de Petri que
representem o comportamento dos sistemas partindo dos diagramas de sequencia, de atividades,
de estados, e ate de caso de uso. Entretanto, para
obter uma boa transferencia semantica dos requisitos deve-se levar em consideracao tanto a estrutura estatica e dinamica dos diagramas, como as
relacoes entre eles. Em outras palavras deve-se
capturar o funcionamento integrado entre as partes.
3

A Disciplina de Projeto UMLGHENeSys

Neste trabalho estamos propondo construir
uma rede de PT (placetransition) hierarquica
a partir dos modelos que integram diagramas com
vistas estatica e dinamica, possibilitando assim a
verificacao_formal destes modelos. Assim, serao
utilizadas extensoes das redes classicas (presentes na norma ISOIEC 15.909) das RdP, especialmente a estrutura hierarquica presente no ambiente GHENeSys (General Hierarchical Enhanced Net System)(del Foyo, 2009). Este ambiente
esta sendo preparado para cobrir todos os itens da
norma, incluindo as extensoes (ISOIEC 15.9093), como hierarquia, pseudo-boxes - associados aos

ISSN 2525-8311

gates e exclusivamente definidos para o ambiente
GHENeSys - e a extensao temporal. Mesmo incluindo estas extensoes, o GHENeSys prove uma
equacao de estado (para as redes PT) formalmente definida (del Foyo, 2009), o que posibilita
a analise das propriedades da rede.
A disciplina de projeto apresentada neste trabalho, consiste no uso da linguagem UML para
eliciar e representar os requisitos, numa primeira
etapa, e em seguida usar o ambiente GHENeSys
para prover uma representacao formal. Proporemos a analise de invariantes como parte do processo de analise e validacao de requisitos, e tambem na fase de verificacao.
Embora a UML possua um alto poder de expressao grafica, existem propriedades e restricoes
de sistemas que sao muito complexas ou impossveis de serem expressas adequadamente em um
diagrama visual (visual diagram). Mesmo os mecanismos de extensao da UML estereotipos, valores etiquetados e restricoes pre-definidas podem
ser insuficientes para compor uma especificacao de
requisitos completa1 . Assim, sera usada a OCL
para formular alguns dos requisitos (restricoes),
especialmente aqueles que representam invariantes. Uma vez feita a modelagem em UML, estes requisitos serao transformados em uma rede
GHENeSys, e posteriormente verificados formalmente, usando o metodo de analise de invariantes
(Salmon et al., 2014).A disciplina de projeto para
a fase inicial e descrita a seguir
1. Representar os requisitos do sistemas usando
os diagramas de classes, de estados e de
tempo da UML.
2. Definir restricoes para expressar os requisitos
do sistema que sejam invariantes, usando a
linguagem OCL.
3. Transformar as restricoes em OCL em um
conjunto de inequacoes que representem os
invariantes_de_lugar de uma rede de Petri.
4. Transformar a representacao UML em uma
rede GHENeSys atraves de um metodo desenvolvido pelos autores deste trabalho, sobre a proposta de (Baresi and Pezze, 2001).
As figuras 1, 2 mostram o mapeamento dos
diagramas UML na rede GHENeSys.
5. Verificar requisitos detectando inconsistencias eou usando os invariantes da rede de
Petri.
4

Resultados

A seguir mostramos os resultados obtidos no
estudo de caso de um sistema real de planejamento
1 Neste trabalho, chamaremos especificacao de requisitos
completa aquela que permite compor o arquetipo de um
artefato e nao apenas aspectos dele.

1441

XXI Congresso Brasileiro de Autom치tica - CBA2016
UFES, Vit칩ria - ES, 3 a 7 de outubro

4.2

Figura 1 Mapeamento dos elementos do diagrma de
estados de UML e os elementos da rede GHENeSys

Especificacoes do sistema

Dado um conjunto de itens de carga, o problema consiste em encontrar um plano viavel que
garanta a sua entrega, respeitando as limitacoes e
exigencias da capacidade dos navios. O objetivo e
minimizar a quantidade total de combustvel consumido, o tamanho das filas de espera nos portos,
o numero de navios utilizados, e o custo de ancoragem. Um objetivo especial e reduzir a zero a fila
de espera para ancoragem junto as plataformas.
4.3

Restricoes do sistema a ser consideradas
neste trabalho

 Somente um navio, por vez, pode ancorar na
plataforma de reabastecimento.
 Nao e possvel carregar e descarregar o navio ao mesmo tempo primeiro descarrega e
depois carrega.
Figura 2 Mapeamento das relacoes entre elementos
do diagrama de estados de UML e a rede GHENeSys

 O reabastecimento pode ser feito durante a
acao de carga ou descarga.

de operacoes de navios em plataformas e portos de
petroleo.

 O tempo de ancoragem e desancoragem nos
portos e de ate uma hora, e nas plataformas
de ate 30 minutos.

4.1

 O tempo para carregar e descarregar os navios tanto nos portos como nas plataformas e
ate 5 horas.

Descricao do estudo de caso

Genericamente, o problema que se apresenta
como estudo de caso pode ser descrito como a necessidade de fornecer o transporte de mercadorias
e de ferramentas entre portos e plataformas de exploracao eou producao no oceano.
Para simplificar o problema, optou-se por colocar duas plataformas na faixa de Rio de Janeiro,
e duas no Santos. Consideraremos tres embarcacoes, ou seja, grandes barcos que podem transportar varias toneladas de carga. O que realmente faz
a diferenca para o problema e que isso leva algum
tempo para carregardescargar a carga.
Dividimos estas faixas em duas partes de
Rio de Janeiro e Santos, respectivamente. Cada
faixa tem um porto (porto P1 no Rio de Janeiro
e porto P2 em Santos), onde as atividades de carregadescarga ocorrem para apoiar a extracao de
petroleo em aguas profundas (pre-sal). Ambas faixas contem um conjunto de plataformas duas plataformas (F1, F2 ) na faixa de Rio de Janeiro, e
duas (G1,G2) na faixa de Santos. Existem tambem areas de espera(uma area de espera em cada
faixa) a do Rio de Janeiro (chamado A1 ) esta localizada a 120 km (distancia radial) do porto P1
e o de Santos (chamado de A2 ) esta localizado a
100 km do porto P2 onde ficam ancoradas as embarcacoes para nao ocupar lugar nos respectivos
portos.

ISSN 2525-8311

 O reabastecimento de combustvel nos portos
pode demorar ate 3 horas, e nas plataformas
ate 5 horas.
Consideraremos como posicao inicial dos navios as
areas de espera A1 e A2. F2 e G2 sao as unicas
plataformas capazes de realizar o reabastecimento,
alem dos portos.
4.4

Modelagem do sistema de planejamento

O primeiro passo na modelagem do sistema
descrito e representar os requisitos usando UML.
Primeiramente se representam os principais objetos do sistema e suas relacoes atraves do diagrama
de classes da UML.
Partindo do diagrama de classes da UML sao construdos os diagrama de estados. A figura 3 mostra
a hierarquia destes diagramas de estados.
As restricoes de tempo do sistema sao representadas atraves dos diagramas de tempo. Para
este trabalho somente consideraremos as restricoes de tempo correspondente as acoes de ancoragemdesancoragem, carregamento e descarregamentos dos navios, tanto nos portos como nas plataformas. A figura 4 mostram as restricoes de
tempo para o navio nos portos e nas plataformas
respectivamente.

1442

XXI Congresso Brasileiro de Autom치tica - CBA2016
UFES, Vit칩ria - ES, 3 a 7 de outubro

do modelo hierarquico de diagramas de estados,
mostrado na figura 4, em uma rede hierarquica
GHENeSys. Porem esta rede nao representa o
problema real, uma vez que o sistema de planejamento que estamos modelando possui 3 navios,
2 portos, e 4 plataformas, duas delas com possibilidade de reabastecimento.

Figura 3 Hirarqua dos diagrams de estados.(a) Diagrama de estado Geral, (b) Diagrama de estado correspondentes aos portos, (c) Diagrama de estados
correspondentes as plataformas, (d) Diagrama de
estados correspondentes as plataformas de reabastecimento
Figura 5 Modelagem hierarquica do sistema na rede
GHENeSys. (a) Rede geral do sistema, (b) Rede correspondentes aos portos, (c) Rede correspondentes as
plataformas, (d) Rede correspondentes as plataformas
de reabastecimento

Figura 4 Diagrama de tempo para operacoes do navio em (a)Portos, (b)Plataformas.

4.4.1

Transformando os diagramas UML
em rede de Petri

Uma vez feita a modelagem em UML, os diagramas de estados sao transformados numa rede
GHENeSys como foi descrito na secao 3.
As acoes dos navios nos portos e nas plataformas foram representadas atraves de tres subdiagramas de estados o primeiro representa as
acoes do navio nos portos, enquanto as operacoes
das plataformas foram representadas em outros
dois diagramas de estados um para as plataformas onde nao e possvel reabastecer os navios, e
outro para representar o movimento relativo de
navios e plataformas onde e possvel o reabastecimento. A figura 5 mostra a transformacao

ISSN 2525-8311

Sendo assim, precisamos modelar todas as instancias do sistema. Numa rede de Petri, as instancias sao modeladas por marcas. Para o sistema
que estamos modelando as marcas representam a
presenca ou nao de um navio em cada estado (lugar da rede). Porem, neste sistema de planejamento os navios tem caractersticas diferentes, e
portanto nao seria adequado colocar varias marcas em um mesmo lugar para representar diferentes navios. Consequentemente, para cada estado
do diagrama de estados principal do sistema figura
3 (a) devem ser representados por tres lugares diferentes na rede GHENeSys, que representarao os
tres navios. No caso dos estados que representam
as areas de espera, e nos portos teremos seis lugares diferentes para cada um, devido a que temos
duas areas de espera e tres navios. Para as plataformas serao considerados doze lugares. A seguir,
na tabela 1 se mostra o mapeamento de alguns
dos estados do diagrama de estados geral figura
3(a) e os lugares da rede mostrada na figura 5(a).
A figura 6 mostra a rede hierarquica do sistema, ja considerando todas suas instancias.

1443

XXI Congresso Brasileiro de Autom치tica - CBA2016
UFES, Vit칩ria - ES, 3 a 7 de outubro

Diagrama de estados geral
Estado
Lugar
Descricao
ShipDockWA
Ni DockW A1,
Navio (i) ancorado
na area de espera 1
Ni DockW A2
Navio (i) ancorado
na area de espera 2
i  1...3
ShipDockPort
Ni DockP 1,
Navio (i) ancorado
no porto 1
Ni DockP 2
Navio (i) ancorado
no porto 2
i  1...3
ShipDockPlatform
Ni DockF 1,
Navio (i) ancorado
na plataforma F1
Ni DockG1
Navio (i) ancorado
na plataforma G1
i  1...3
ShipDockPlatform
Ni DockF 2,
Navio (i) ancorado
Refuel
na plataforma F2
Ni DockG2
Navio (i) ancorado
na plataforma G2
i  1...3

Tabela 1 Equivalencia entre os estados no diagrama
de estados e os lugares na rede GHENeSys.

Id
1

Especificacoes em OCL
(self.Load()) implies
not ((self.Unload())

2

if (self.Load() or self.Unload())
implies self.Refuel()

Invariantes
M (Ni LoadPj )+
M (Ni U nloadPj )  1
i  1...3, j  1...2
M (Ni LoadPj )+
M (Ni U nloadPj )  1
i  1...3, j  1...2

Tabela 2 Especificacao descritas em OCL correspondente as operacoes dos navios nos portos.

nao se realizem de forma simultanea.
Id
1
2

Especificacoes em OCL
(self.Load()) implies
not ((self.Unload())

Invariantes
M (Ni LoadF 1)+
M (Ni U nloadF 1)  1
M (Ni LoadG1)+
M (Ni U nloadG2)  1

Tabela 3 Especificacao descritas em OCL correspondente as operacoes dos navios nas plataformas.

A figura 7 mostra alguns dos invariantes de
lugar, corresponde a rede dos Portos (figura 5 (b)),
e a rede das Plataformas (figura 5 (c)), obtidos
pelo sistema GHENeSys. A equacao 1 da tabela
2 se verifica com a invariante numero 1 da figura
7(a) e a equacao 2 se verifica com o invariante
numero 5. As equacoes da tabela 3 podem ser
verificadas com a invariante numero 1 da figura
7(b). A figura 7(b) mostra o calculo dos invariante
na rede correspondente a plataforma F1, mas o
calculo dos invariantes na rede da plataforma G1
e equivalente.

Figura 6 Rede GHENeSys do sistema geral.

4.5

Verificacao dos modelos

Partindo da informacao representada no diagrama de classes e das restricoes formuladas em
OCL, se definem alguns requisitos funcionais do
sistema que precisam ser verificados. Os requisitos serao verificados usando os invariantes_de_lugar
das redes de Petri.
A tabela 2 mostra as descricoes em OCL correspondente as operacoes dos navios nos portos,
e sua interpretacao em termos de inequacoes que
representam os invariantes_de_lugar.
A equacao (1) da tabela 2 significa que enquanto os navios estao fazendo a operacao de carregamento nos portos, nao podem fazer o descarregamento. A equacao (2) significa que enquanto
o navio faz operacoes de carga ou descarga nos
portos, e possvel reabastecer o tanque.
A tabela 3 descreve os requisitos que devem
ser verificados nas operacoes dos navios nas plataformas onde nao e possvel reabastecer. Neste caso
so se verifica que as operacoes de carga e descarga

ISSN 2525-8311

Figura 7 (a) Invariantes de lugar da rede que modela as acoes nos portos (figura 5 (b)). (b) Invariantes de lugar da rede que modela as acoes nas plataformas (figura 5 (c)).

Alem dos requisitos formulados em OCL e representados no diagrama de classes, existem outros requisitos do sistema que podem ser verificados usando o calculo dos invariantes. A tabela 4
descreve os invariantes que devem ser verificados
no sistema geral, representado na rede da figura
6.
As equacoes da tabela 4 representam os seguintes requisitos do sistema a equacao 1 significa que os navios podem estar em apenas um dos
seguintes lugares areas de espera, portos, plataformas, ou navegando a equacao 2, 3 e 4 significa
nas plataformas so pode ter um navio de cada vez.
A figura 8 mostra os resultados do calculo dos
invariantes_de_lugar, obtidos pelo sistema GHENeSys, na rede correspondente ao sistema geral,
mostrada na figura 6. A equacao numero 1 da
tabela 4 se verifica com o invariante 4 da figura

1444

XXI Congresso Brasileiro de Autom치tica - CBA2016
UFES, Vit칩ria - ES, 3 a 7 de outubro
Id
1

2
3
4

Invariantes
M (Ni DockW A1) + M (Ni DockW A2)+
M (Ni DockP 1) + M (Ni DockP 2)+ m
M (Ni DockF 1) + M (Ni DockF 2)+
M (Ni DockG1) + M (Ni 1DockG2)+
M (Ni N avegate), i  1...3
M (N1 DockF 1) + M (N2 DockW F 1)+
M (N3 DockF 1)
M (N1 DockF 2) + M (N2 DockW F 2)+
M (N3 DockF 2)
M (N1 DockG1) + M (N2 DockW G1)+
M (N3 DockG1)

Tabela 4 Invariantes do sistema geral.
8 (a cor laranja pertence ao navio N1, a cor azul
ao navio N2, e a cor vermelha ao navio N3). As
restantes equacoes (2, 3, 4) sao verificadas pelas
invariantes (1, 2, 3) da figura 8, respectivamente.

que foi usada uma rede PT classica. Entretanto
o fato de que os invariantes (a base do metodo) foram inseridos na fase inicial (usando OCL) torna
factvel a introducao de redes de alto nvel. Neste
caso uma proposta mais arrojada de analise de
invariantes deve ser tambem tratada.
Finalmente, o uso de um sistema temporizado
abre a possibilidade de nao so fazer o planejamento do sistema de transporte mas o escalonamento do sistema, sincronizando as operacoes de
ancoragem, caga e descarga e verificando o problema com model_checking baseado em redes de
Petri.
Agradecimentos
A autora Arianna Z. Olivera Salmon tem
suporte atraves de bolsas de estudo financiada
pela Agencia Nacional do Petroleo, Gas Natural e
Biocombustveis- ANP -, da Financiadora de Estudos e Projetos - FINEP- e do Ministerio da Ciencia, Tecnologia e Inovacao -MCTI por meio do
Programa de Recursos Humanos da ANP para o
Setor Petroleo e Gas- PRH-ANPMCTI.
Referencias
Baresi, L. and Pezze, M. (2001). Improving uml
with petri nets, Electronic Notes in Theoretical Computer Science 44 107119.

Figura 8 Invariantes de lugar da rede principal (figura 6).

5

Conclusoes

Neste trabalho foi apresentado um metodo de
desing para sistemas reais baseado em UML e redes de Petri. O metodo proposto usa os diagramas
de classes, estados e tempo na representacao inicial dos requisitos. Uma vez sintetizado o modelo
em uma, ou varias redes GHENeSys, passamos a
fase de verificacao. Para este trabalho, a proposta
foi usar a analise dos invariantes da rede de Petri,
na verificacao_formal dos requisitos funcionais e estruturais do sistemas. Assim uma vez construda
a rede GHENeSys, os invariantes devem ser calculados para demonstrar a veracidade ou nao das
propriedades verificadas.
O metodo proposto neste artigo preenche uma
lacuna da maioria dos metodos similares que e ter
um procedimento de analise_dos_requisitos baseado em uma representacao formal. Permite ainda
uma validacao antecipada antes da formalizacao
das especificacoes, tornando a fase de desing e provimento de solucoes mais consistente, baseada em
dados confiaveis. A escalabilidade e ainda um problema, mesmo usando uma rede hierarquica, dado

ISSN 2525-8311

del Foyo, P. M. G. (2009). Verificacao Formal de
Sistemas Discretos Distribudos, PhD thesis,
Escola Politecnica da Universidade de Sao
Paulo.
Frappier, M. and Habrias, H. (2001). Software specification methods an overview using a case
study, Springer-Verlag.
Labbani, O. (2010). A uml and colored petri nets
integrated modeling and analysis approach
using graph transformation, Journal of Object Technology 9(4).
Liu, L., Yu, E. and Mylopoulos, J. (2002). Analyzing security requirements as relationships
among strategic actors, Submitted to the
Symposium on Requirements Engineering for
Information Security (SREIS02), Raleigh,
North Carolina.
Salmon, A. Z. O., del Foyo, P. M. and Silva, J. R.
(2014). Verification of automated systems
using invariants.
Zhao, Y., Fan, Y., Bai, X., Wang, Y., Cai, H. and
Ding, W. (2004). Towards formal verification of UML diagrams based on graph transformation, Proceedings of the IEEE International Conference on E-Commerce Technology for Dynamic E-Business, IEEE Computer Society.

1445