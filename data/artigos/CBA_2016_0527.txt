XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

ARQUITETURA DE HARDWARE BASEADA EM REDES NEURAIS PARA
APROXIMACAO DE UMA FUNCAO NAO LINEAR
Maicon A. Sartin, Alexandre C. R. da Silva


Departmento de Computacao
Universidade do Estado de Mato Grosso - UNEMAT
Colider, MT, Brazil


Departmento de Engenharia Eletrica
Universidade Estadual Paulista - UNESP
Ilha Solteira, SP, Brazil
Emails mapsartin@unemat.br, acrsilva@dee.feis.unesp.br
Abstract The bio-inspired models are a counterpart to tradicional methods mainly in the problems solution
with nonlinear behavior. Artificial neural networks are methods widely investigated by robustness, besides of
the capacity of generalization, pattern recognition and learning. There are several methods and techniques for
prototyping of artificial neural network in reconfigurable devices (FPGA) by its parallelism level. The contributions of this work is in the implementation of a Multilayer artificial neural network with one hidden layer and
hyperbolic tangent for activation function. A nonlinear function approximation serves as application for system
validation. The method employed in the implementation of the activation function is hybrid between peace-wise
linear and combinational. The system makes results comparison in low and high level of abstraction. The results
analysis are performed by means of the performance, used area in FPGA, and errors (absolute and relative).
Keywords

Artificial Neural Networks, Hyperbolic Tangent, FPGA, Floating Point.

Resumo Os modelos bioinspirados sao uma contrapartida aos metodos tradicionais, principalmente na solucao de problemas nao lineares. As redes_neurais artificiais sao metodos amplamente investigados pela sua
robustez, alem da capacidade de generalizacao, reconhecimento_de_padroes e aprendizado. Existem diversos
metodos e tecnicas para a prototipacao de redes_neurais artificiais em dispositivos reconfiguraveis (FPGA) pelo
seu nvel de paralelismo. A contribuicao deste trabalho esta na implementacao de uma RNA Multicamadas
com 4 neuronios, uma camada escondida e funcao de ativacao tangente_hiperbolica. A aplicacao para validacao
do sistema da RNA e a aproximacao de uma funcao nao linear. O metodo empregado na implementacao da
funcao de ativacao e hbrido entre divisao em partes lineares e combinacional. O sistema faz a comparacao dos
resultados em baixo e alto nvel de abstracao. A analise dos resultados sao realizadas atraves do desempenho,
da area utilizada na FPGA e dos erros, absoluto e relativo.
Palavras-chave

.

Introducao

Atualmente, a inteligencia_computacional consiste
de modelos inspirados na natureza para a resolucao_de_problemas reais. A taxonomia divide
a inteligencia_computacional em quatro grandes
grupos, logica_nebulosa, computacao_evolucionaria, redes_neurais artificiais e inteligencia_artificial
(Goldschmidt, 2010). As redes_neurais artificiais
(RNA) sao modelos bioinspirados no cerebro humano para solucionar problemas em que os modelos tradicionais sao ineficientes. RNAs tem como
as principais especialidades a capacidade a generalizacao, o aprendizado_de_maquina e o reconhecimento_de_padroes. Esse modelo adquire dados
do ambiente real e adapta-se conforme seu metodo
de aprendizado e sua organizacao com as camadas,
os neuronios e as funcoes de ativacao, tal aprendizado conclui-se com a inferencia dos dados para
gerar resultados conforme a necessidade da aplicacao alvo.
As RNAs sao amplamente investigadas
e prototipadas em dispositivos reconfiguraveis
(FPGA). A relacao entre RNA e FPGA tem aumentado, principalmente por dispor de desempe-

ISSN 2525-8311

nho associado a um alto nvel de paralelismo, flexibilidade, reuso de componentes de hardware de
propriedade intelectual (IP) e barramentos padronizados.
Uma das principais caractersticas da FPGA
e a facilidade na atualizacao atraves da reconfiguracao do sistema tornando-se mais dinamico, inclusive para o desenvolvimento de novos projetos
com o mesmo dispositivo. Existem tres caractersticas essenciais no desenvolvimento de RNA em
dispositivo reconfiguravel, a representacao dos dados, o tipo de arquitetura e o metodo para funcao
de ativacao nao linear.
A representacao dos dados e dividida em
ponto_fixo (da Silva et al., 2010) e flutuante
(Santos et al., 2011). O uso de ponto_fixo pode
prejudicar a precisao e dificultar o seu reuso. Ja o
ponto_flutuante, determina de forma organizada o
sinal, o expoente e a fracao, facilitando a manutencao e expansao do sistema de forma padronizada.
O tipo de arquitetura do sistema determina o
fluxo de execucao e os atrasos na computacao dos
dados do neuronio e consequentemente na RNA.
Segundo Savich et al. (2007), existem diversos tipos de arquiteturas para computacao dos neuro-

1854

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

nios em FPGA.
Ja os metodos, que frequentemente sao utilizados na implementacao da funcao de ativacao
nao linear em FPGA sao Polinomios com diferentes ordens (Lee and Ko, 2006), mapeamento
por LUT (Meher, 2010), divisao em partes lineares (PWL) (Amin et al., 1997) e Hbrido (Lin
and Wang, 2008). Esses metodos tem a funcao
de efetuar a aproximacao da funcao de ativacao
e evitar a implementacao direta de modelos_matematicos, devido ao alto custo na utilizacao de
recursos computacionais e baixo desempenho.
A implementacao em hardware da RNA MultiLayer Perceptron (MLP) e um dos principais desafios aos pesquisadores da area. Cada neuronio
artificial realiza a computacao dos seus dados de
forma independente, tornando as RNAs estruturas massivamente paralelas e, tal componente, o
mais importante de uma RNA. Em Ferreira and
Barros (2010) os autores fazem a computacao dos
neuronios por meio do produto de matrizes. O
processamento e feito em uma unica entrada com
todos os seus pesos (coluna) e depois por meio
de deslocadores e somadores adquire a sada parcial do neuronio. O uso de recursos embarcados
na FPGA sao evidenciados por Zhang and Chen
(2011) e (Al-Kazzaz and Khalil, 2008) para um
melhor desempenho e reducao de area da FPGA.
Neste trabalho apresenta-se uma arquitetura
de hardware para uma RNA MLP e topologia 12-1 de quatro neuronios. A RNA e dividida em
tres partes principais a unidade de controle (UC),
unidade de processamento (UP) e unidade de armazenamento (UA). A RNA faz uso da padronizacao IEEE Std 754 na computacao do neuronio
e realiza a aproximacao de uma funcao nao linear
tangente_hiperbolica com metodo proprio, na unidade de processamento. Na Secao 2 define-se a
arquitetura do sistema detalhadamente, a metodologia empregada nas implementacoes e os principais componentes desenvolvidos. Os resultados
obtidos e a comparacao entre as implementacoes
de alto e baixo nvel sao apresentadas na Secao 3.
A Secao 4 finaliza o artigo com as conclusoes da
pesquisa.
2

Implementacao em Hardware

A RNA foi desenvolvida em linguagem de programacao de alto nvel, com o Matlab sem toolbox,
para comparacao dos resultados obtidos em hardware. O desenvolvimento auxilia o projetista na
escolha dos componentes a serem utilizados em
seu sistema de baixo nvel. Para o treinamento supervisionado da RNA adotou-se a regra delta em
linguagem de alto nvel e modo offline. No treinamento utilizou-se 256 amostras de entrada, com o
devido valor desejado na sada da rede. O criterio_de_parada usado foi o erro quadratico com limite de 1012 , a convergencia ocorreu com 56.987

ISSN 2525-8311

epocas. A implementacao em hardware (FPGA)
adotou-se os mesmos pesos na RNA em alto nvel
e teve o uso da ferramenta CAD ISE na versao
14.2 da Xilinx.
O sistema implementa uma RNA MLP com
tres camadas, quatro neuronios e funcao de ativacao tangente_hiperbolica em todos. Para validacao do sistema utilizou-se uma funcao nao linear
senoide para fazer a aproximacao pela RNA, conforme a Equacao (1), onde x e a entrada de dados
da RNA.

S(xi ) 

xi
0.03
e

 sin(0.03  xi )

(1)

Para validacao do sistema aplicou-se uma metodologia dividida em tres etapas preparacao dos
dados, execucao do sistema e analise dos resultados. Na preparacao dos dados definiu-se os pesos,
dados de entrada do sistema e da funcao de ativacao respeitando o padrao IEEE Std 754 (32 bits)
para embarcar no hardware. A execucao e a comparacao do sistema realizaram-se em linguagem
de alto e baixo nvel de abstracao. Os resultados obtidos no hardware (FPGA) pela simulacao
funcional foram decodificados para gerar graficos
e tabelas. A analise dos resultados e feita pela
apresentacao dos erros e area utilizada, os dados
foram obtidos pelas distintas implementacoes da
RNA, principalmente na alteracao da funcao de
ativacao do sistema.
A relacao entre os modulos e componentes utilizados na arquitetura do sistema apresenta-se na
Figura 1, com as divisoes das unidades de forma
hierarquica. O sistema esta organizado em tres
partes principais a unidade de controle (UC), unidade de armazenamento (UA) e unidade de processamento (UP). A plataforma destinada a realizacao e validacao do sistema foi a Spartan-3e
(Xilinx). A plataforma de desenvolvimento e relativamente de baixo_custo e contem diversas interfaces com o usuario. Para a implementacao em
hardware (FPGA) usou-se VHDL, com modulos
IP Core do proprio fabricante para a unidade de
ponto_flutuante e blocos de memoria dedicados.
Desta forma, para prototipar o sistema em outra
plataforma basta integrar os modulos e respeitar
suas caractersticas especficas, trazendo portabilidade e expansao ao sistema.
2.1

Unidade de Controle

A unidade de controle faz a administracao do fluxo
de execucao de forma geral e em componentes especficos. O fluxo correto dos dados na RNA nao
admite problemas ocasionados na execucao concorrente das operacoes, por exemplo, a informacao
de sada de uma camada nao pode ser sobrescrita
antes que a proxima camada tenha-a adquirido.
A UC e responsavel pela execucao direcionada do

1855

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

Figura 1 Arvore com a Hierarquia de Nveis do
Sistema.

de processamento. O numero desses componentes
no sistema esta diretamente relacionada a quantidade de entradas em cada neuronio, a quantidade
de neuronios em determinada camada e a quantidade de camadas da RNA. Para cada entrada
em um neuronio contem um elemento de processamento, assim se n e a quantidade de entradas
a QtdeP E  2n1 , e cada neuronio contem apenas uma funcao de ativacao baseada na Tangente
hiperbolica.
2.3.1

Elemento de Processamento

fluxo da RNA atraves de contadores e tres maquinas de estado. Uma para gerenciar a entrada
de dados e todo o processamento do sistema, duas
no controle da funcao de ativacao e elemento de
processamento ou operacoes em ponto_flutuante.

O elemento de processamento restringe-se a um
multiplicador, um somador em ponto_flutuante e
componentes de controle dos dados entre nveis e
modulos, conforme Figura 1.
A insercao de novos elementos de processamento depende da quantidade de entradas associadas ao neuronio. Para ter um maior controle
no elemento de processamento foi necessario criar
uma estrutura que organiza a insercao das entradas e sadas nos modulos de operacoes em ponto
flutuante.

2.2

2.3.2

Unidade de Armazenamento

A unidade de armazenamento consiste de memorias do tipo BRAM embarcada e registradores baseados em area logica da FPGA. A parametrizacao
dos componentes embarcados segue a plataforma
utilizada, geralmente e possvel escolher dentre varios tipos e tecnologias distintas dependendo do
fabricante e famlia da FPGA.
O sistema utilizou dois tipos distintos de memoria BRAM, uma apenas de leitura (ROM) e
outra para escrita dos dados (RAM). As duas tecnologias utilizam memoria de porta simples para
acessar os dados. A memoria do tipo ROM esta
relacionada aos dados de entrada e a funcao de
ativacao. Na plataforma da Xilinx e carregado
um arquivo inicial com extensao do tipo .coe. Os
resultados da RNA sao armazenados em memoria RAM para permitir futuras transferencias com
barramentos. Em todas as memorias utiliza-se
precisao simples (32 bits) nas palavras. Os dados
de sada do sistema sao armazenados em arquivo,
por meio de simulacao funcional, para a leitura e
a comparacao dos resultados no Matlab.
2.3

Unidade de Processamento

A unidade de processamento contem a soma_ponderada entre as entradas e os pesos relacionados ao
neuronio, conforme o padrao IEEE 754 de 32 bits.
Para fazer esse processamento utiliza-se uma unidade de ponto_flutuante baseado em um IP Core
correspondente ao fabricante e com otimizacao de
sntese para area. A unidade de processamento
faz a computacao do neuronio atraves de duas
partes principais, funcao de ativacao e elemento

ISSN 2525-8311

Funcao de Ativacao

A funcao tangente_hiperbolica corresponde a equacao 2. A curva S da funcao e uma caracterstica
e nesse caso contem valores positivos e negativos,
diferente da sigmoide (Logstica) composta apenas
de valores positivos. A variavel x esta relacionada
a sada parcial do neuronio e  a inclinacao da
tangente_hiperbolica, assim a funcao de ativacao
realizara um filtro, conforme sua caracterstica, inserindo a nao linearidade na RNA.

T h(x) 

1  ex
1 + ex

(2)

Pelas dificuldades e grande variedade de tecnicas na implementacao da funcao de ativacao
com comportamento nao linear, faz-se necessario
a implementacao de diversas arquiteturas para obter um limiar entre precisao, desempenho e area
utilizada na FPGA. A arquitetura escolhida foi
a hbrida de partes lineares com combinacional
(HPC), conforme pesquisa realizada em Sartin
and Silva (2013). A implementacao utiliza a quantidade de elementos especficas em cada segmento
e o mapeamento e feito por meio de logica combinacional gerando a fracao de resposta da funcao
de ativacao correspondente a sada da funcao. A
quantidade de entradas e sadas do circuito combinacional esta diretamente relacionado ao segmento. Assim, cada segmento contem uma soma
de produtos (SOP) baseado em algebra booleana
e simplificado pelo algoritmo de Quine-Mccluskey.
A arquitetura para a aproximacao da funcao tangente_hiperbolica e ilustrada pela Figura 2.

1856

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

Figura 2 Implementacao da arquitetura HPC.

3

Resultados

O sistema foi desenvolvido em linguagem de alto
nvel (Matlab), sem a toolbox, e em linguagem de
descricao de hardware (VHDL), nas duas abordagens utilizando a mesma precisao de ponto_flutuante simples (IEEE754). A funcao de ativacao
tangente_hiperbolica foi baseada na tansig do
Matlab e utilizada em todos neuronios da RNA
nas tres abordagens.
A analise dos resultados foi definida baseada
em tres principais partes do sistema a UC, UA
e UP. Em cada parte sera apresentada resultados especficos da implementacao. A UC consiste
principalmente pelas maquinas de estados para organizar a entrada e sada de dados e controle na
execucao do sistema. Uma importante observacao e o tempo de execucao de cada estado da maquina de estados finitos e o tempo total de execucao da RNA. O tempo de execucao em cada
estado correspondente as camadas da RNA estao
diretamente relacionados a UP e ao tempo total
de execucao.
A execucao do sistema e realizada com 128
amostras, na Figura 6 pode-se observar o incio da
segunda amostra ou ciclo de execucao. Em destaque, esta a execucao da primeira amostra que
determina o tempo de execucao em 3.12 us, e com
128 amostras o tempo de execucao chega a aproximadamente 399 us.
Os dados coletados na RNA para analise de
erro do sistema foram adquiridos pela simulacao
funcional. As entradas e os resultados finais da
RNA sao armazenados em memoria dedicada, isso
facilita posteriores implementacoes em tempo_real
na transferencia de dados por um barramento de
comunicacao interligado ao sistema.
As diferencas encontradas na aproximacao da
funcao nao linear foram semelhantes nos dois casos, no hardware e linguagem de alto nvel. A
implementacao da RNA completa com todos os
128 pontos sao apresentadas na Figura 3a, e nas
Figuras 3b e 3c sao reduzidas as quantidades de
pontos para se observar a precisao do sistema de
forma mais compreensvel. Com a mesma linha

ISSN 2525-8311

de pensamento, os resultados na aproximacao da
funcao de ativacao e apresentada pelas Figuras 4a,
4b e 4c.
A analise de erros absoluto, relativo e quadratico foi realizada para as implementacoes em baixo
e alto nveis de abstracoes e apresentadas na Figura 3, conforme as Equacoes 3, 4 e 5. Pelo erro
relativo fica perceptvel os pontos mais ao centro
com os maiores erros de aproximacao, Figura 5c,
devido a proximidade de zero no erro absoluto.
Porem, no erro absoluto mostra que todos os erros permanecem abaixo de 0,002, ou seja, uma
precisao adequada para solucoes de problemas nao
lineares.
Eabs  f (xk )  f(xk )

Erel 

Equad 

(3)

f (xk )  f(xk )
f (xk )

(4)

(f (xk )  f(xk ))2
2

(5)

Nas Tabelas 1 e 2, apresentam-se os resultados finais da RNA, respectivamente, com os erros
(medios e maximos) e os valores de area ocupada
na FPGA. A media dos erros absoluto, relativo
e medio quadratico e computada pela media aritmetica simples e a quantidade de amostras analisadas na entrada da RNA (128) ou da funcao de
ativacao (500). O calculo dos erros absoluto, relativo e medio quadratico foram truncados conforme
a Equacao (6), que corresponde ao erro maximo
possvel para determinada representacao de dados
(Tommiska, 2003). Assim, levou-se em consideracao a fracao (f ), a quantidade de elementos nos
segmentos, e as excecoes Overflow e Underflow,
conforme a Equacao (6) de truncamento. A aproximacao da funcao senoide obteve o erro maximo
de 0, 0051 e o quadratico de 4, 9x105 em Ferreira
and Barros (2010).
EtruncM ax  2(f +1)

(6)

Na Tabela 2 sao apresentados os valores de
area utilizada na FPGA do Sistema da RNA completo e da prototipacao apenas do modulo correspondente a funcao de ativacao com o metodo Hbrido (HPC).
4

Conclusoes

Neste trabalho apresentou-se a implementacao de
um sistema em ponto_flutuante para aproximacao de uma funcao nao linear utilizando RNA.
O sistema foi desenvolvido em baixo e alto nvel
de abstracao para efeito de comparacao, e com

1857

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

(a) 0 a 128 pontos.

(b) 0 a 50 pontos

(c) 40 a 90 pontos

Figura 3 Resultado das implementacoes em baixo e alto nveis de abstracoes na aproximacao da senoide

(a) 0 a 500 pontos.

(b) 20 a 80 pontos

(c) 140 a 160 pontos

Figura 4 Resultado das implementacoes em baixo e alto nveis de abstracoes na funcao de ativacao

(a) Erro Absoluto.

(b) Erro Quadratico

(c) Erro Relativo

Figura 5 Resultado dos erros na aproximacao da senoide

Figura 6 Simulacao da Maquina de Estados da
RNA

grande semelhanca nos resultados na RNA e funcao ativacao. A rede composta de 4 neuronios e
funcao tangente_hiperbolica em todos os neuronios

ISSN 2525-8311

Tabela 1 Erros nas Implementacoes do Hardware
Implem.

Max Abs Med Abs Max Rel Med Rel

Funcao de
Ativacao
Sistema
da RNA

5, 94 
103
6, 25 
102

2, 91 
103
7, 79 
103

1, 66 
102
4, 81 
102

3, 17 
103
1, 02 
101

na FPGA foi adequada em prover alta precisao no
sistema.
O emprego de FPGA para aplicacoes com
RNA e adequado pelo nvel de paralelismo previsto nas abordagens, o tempo de execucao alcancado pela aplicacao foi de aproximadamente 399
microssegundos (us) em 128 entradas. Porem, calculos mais complexos junto ao uso de ponto_flutuante e um desafio ao projetista no desenvolvimento de um sistema digital ou SoC (System On

1858

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

multiplas camadas, Proceedings..., Congresso
Brasileiro de Automatica - CBA, SBA, Bonito, pp. 28382845.

Tabela 2 Area utilizada na FPGA.
Slices

LUT4in

133(3)

243(3)

Protipacao
Funcao de
Ativacao
Sistema
da RNA

BRAM
0

4.567(98) 5.340(57) 1(5)

Multip
20(100)

Chip), pelas inumeras possibilidades na construcao de hardware. O projetista deve analisar as
possibilidades de insercao ou a melhor escolha de
componentes para determinada situacao, alem da
melhor forma de desenvolvimento para unir duas
caractersticas essenciais ao projeto do sistema,
poupar area consumida da FPGA e nao perder
desempenho com isso.
A validacao dos resultados com a analise de
varios tipos de erros mostra a precisao do sistema
da RNA completo e da funcao de ativacao. A prototipacao do sistema em uma plataforma FPGA
com recursos limitados tambem acrescenta ao sistema uma adequada relacao entre area e desempenho.
O sistema foi desenvolvido para proporcionar
a portabilidade ha outras plataformas de hardware, e facilitar a adaptacao de novas variacoes
relacionadas a quantidade de neuronios e de camadas na RNA. A comprovacao da portabilidade
foi realizada na implementacao em outra plataforma FPGA.
Agradecimentos
Os autores gostariam de agradecer o suporte
da UNEMAT (Universidade do Estado de Mato
Grosso), PPGEE (Programa de Pos-Graduacao
em Engenharia Eletrica da UNESP), LPSSD (Laboratorio de Processamento de Sinais e Sistemas
Digitais), FAPEMAT (Fundacao de Amparo a
Pesquisa do Estado de Mato Grosso), CAPES e
CNPQ processo (3090232012-2).
Referencias
Al-Kazzaz, S. and Khalil, R. (2008). FPGA
implementation of artificial neurons, Proceedings..., International Conference on Information and Communication Technologies
From Theory to Applications - ICTTA,
IEEE, Damascus, pp. 16.
Amin, H., Curtis, K. M. and Hayes-Gill, B. R.
(1997). Piecewise linear approximation applied to nonlinear function of a neural
network, IEEE Proceedings Circuits, Devices
and Systems 144(6) 313317.
da Silva, R. M., Nedjah, N. and Mourelle, L.
(2010). Arquitetura de hardware compacta e
eficiente para redes_neurais artificiais do tipo

ISSN 2525-8311

Ferreira, A. P. A. and Barros, E. N. S. (2010). A
high performance full pipelined arquitecture
of MLP neural networks in FPGA, Proceedings..., International Conference on Electronics, Circuits, and Systems - ICECS, IEEE,
Athens, pp. 742745.
Goldschmidt, R. R. (2010). Uma Introducao a
Inteligencia Computacional, IST-Rio, Rio de
Janeiro.
Lee, Y. and Ko, S.-B. (2006). FPGA implementation of a face detector using neural networks,
Proceedings..., Canadian Conference on Electrical and Computer Engineering - CCECE,
IEEE, Ottawa, pp. 19141917.
Lin, C.-W. and Wang, J.-S. (2008). A digital circuit design of hyperbolic tangent sigmoid function for neural networks, Proceedings..., International Symposium on Circuits and Systems - ISCAS, IEEE, Beijing,
pp. 856859.
Meher, P. (2010). An optimized lookup-table for
the evaluation of sigmoid function for artificial neural networks, Proceedings..., VLSI
System on Chip Conference - VLSI-SoC,
IEEEIFIP, Madrid, pp. 9195.
Santos, P., Ouellet-Poulin, D., Shapiro, D. and
Bolic, M. (2011). Artificial neural network
acceleration on FPGA using custom instruction, Proceedings..., Canadian Conference
on Electrical and Computer Engineering CCECE, IEEE Computer Society, Ontario,
pp. 450455.
Sartin, M. A. and Silva, A. C. R. (2013). Approximation of hyperbolic tangent activation function using hybrid methods, Proceedings..., International Workshop on Reconfigurable and
Communication-Centric Systems-on-Chip ReCoSoC, IEEE, Darmstadt, pp. 16.
Savich, A., Moussa, M. and Areibi, S. (2007). The
impact of arithmetic representation on implementing MLP-BP on FPGAs, IEEE Transactions on Neural Networks 18(1) 240252.
Tommiska, M. (2003). Efficient digital implementation of the sigmoid function for reprogrammable logic, IEE Proceedings - Computers
and Digital Techniques 150(6) 403411.
Zhang, J. and Chen, L. (2011). Hardware implementation of neural networks based on
DSP48 slice of Virtex-4 FPGA, Energy Procedia 13 95489555.

1859