Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

MINIMIZACAO DO MAKESPAN EM FLOWSHOP HIBRIDO E FLEXIVEL COM
TEMPO DE SETUP DEPENDENTE DA SEQUENCIA
Neuma Eufrazio Braz Moreira, Sergio Ricardo de Souza, Moacir Felizardo de Franca
Filho


Centro Federal de Educacao Tecnologica de Minas Gerais
Avenida Amazonas 7675,CEP 30510-000
Belo Horizonte, Minas Gerais, Brasil

Emails neumamoreira@dppg.cefetmg.br, sergio@dppg.cefetmg.br, franca@des.cefetmg.br
Abstract This paper presents a study about Hybrid Flexible Flowshops with Sequence Dependent Setups
Time, denoted HFFS-SDST. The Hybrid Flowshop mixes the characteristics of regular flowshops and parallel
machine problems by considering stages with parallel machines instead of having one single machine per stage.
The flexibility is because not all jobs visit all the stages. This article presents an hybrid metaheuristic, involving
GRASP and ILS metaheuristics, for solving this problem. The results show the superiority of the proposed
metaheuristic over the available results in the literature for the same families of instances.
Scheduling, Optimization, Hybrid Flexible Flowshops, Metaheuristics.

Keywords

Resumo Este artigo apresenta um estudo sobre a classe de sequenciamento Flowshop Hbrido Flexvel com
tempos_de_preparacao_dependentes_da_sequencia, denominada HFFS-SDST. O Flowshop Hbrido Flexvel mescla
caractersticas do Flowshop regular e de maquinas_paralelas, considerando que ao inves de maquinas em serie
existem varios estagios em serie com uma ou mais maquinas em paralelo identicas dentro de cada estagio.
A flexibilidade e porque nem todas as tarefas visitam todos os estagios. Para resolver este problema, uma
metaheurstica hbrida envolvendo as metaheursticas GRASP e ILS foi implementada. Os resultados mostram a
superioridade da tecnica desenvolvida sobre os disponveis na literatura para as mesmas famlias de instancias.
Palavras-chave

.

existe uma tendencia recente em desenvolver trabalhos que se apliquem em situacoes reais.
Considerando esta tendencia, este trabalho
apresenta uma variacao do Flowshop, proposta
por Naderi et al. (2010), denominado Flowshop
Hbrido Flexvel (HFFS). No Flowshop classico, o
fluxo de processamento nas maquinas e o mesmo,
ou seja, todas as tarefas seguem a mesma sequencia. Ja no Flowshop Hbrido, ao inves de maquinas em serie, considera-se a existencia de estagios
em serie, sendo que cada estagio possui maquinas_paralelas identicas. Alem destas caractersticas, no problema apresentado por Naderi et al.
(2010) nem todas os estagios obrigatoriamente devem ser executados, e e esta particularidade que
garante a flexibilidade do modelo. Naderi et al.
(2010) ainda considera a existencia de um tempo
de preparacao (setup) de uma maquina para receber uma tarefa, e que este tempo ainda depende
da tarefa que foi processada anteriormente na maquina (Sequence Dependent Setups Time - SDST).
O criterio de otimizacao considerado neste trabalho e o de minimizar o maior tempo de conclusao
das maquinas, denominado makespan (Cmax ).
Considerando que este problema e visto como
NP - Difcil (Naderi et al., 2010), neste trabalho
e proposta uma implementacao hbrida das metaheursticas GRASP  Greedy Randomized Adaptive Search Procedure  e ILS  Iterated Local Search  para resolve-lo. O restante deste artigo esta
organizado da seguinte forma na Secao 2 e apresentado um levantamento bibliografico dos problemas de sequenciamento associados a este trabalho.

Introducao

O sequenciamento_de_tarefas e uma formulacao para tomada de decisoes e otimizacao dos recursos muito utilizada em empresas de manufaturas e prestacao de servicos (Pinedo, 2005). Atraves do sequenciamento, e possvel alocar recursos
e tarefas em um dado perodo de tempo. Portanto, resolver um problema de sequenciamento
consiste em definir uma sequencia de tarefas a serem executadas em um conjunto de maquinas, de
modo a atender um ou mais objetivos, que podem
ser a minimizacao do tempo de conclusao da ultima tarefa, a minimizacao do numero de tarefas
concludas apos as respectivas datas de entrega,
a minimizacao da soma_ponderada de atrasos e
avancos em relacao as datas de entrega, dentre
outros, sempre satisfazendo um conjunto de restricoes operacionais.
Nos problemas de sequenciamento, os recursos
e tarefas podem assumir formas diferentes. Em
uma oficina, por exemplo, os recursos podem ser
maquinas em um aeroporto, os recursos podem
ser as pistas e, em um laboratorio, os recursos
podem ser maquinas e pessoas. Existem varios estudos disponveis na literatura sobre os problemas
de sequenciamento. Dentre as classes de problemas de sequenciamento estudadas, Flowshop simples tem sido muito criticado na literatura, pois os
ambientes operacionais reais raramente possuem
somente uma maquina para cada operacao, conforme aponta Naderi et al. (2010). Portanto,

4286

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

Na Secao 3, o problema abordado e formulado e
exemplificado. A Secao 4 apresenta a representacao computacional do problema, a estrutura de
vizinhanca utilizada, a tecnica de busca local aplicada e o algoritmo proposto. A Secao 5 apresenta
as caractersticas de cada instancia utilizada para
teste e os resultados obtidos para cada uma das
instancias e, por fim, na Secao 6, sao apresentadas
as conclusoes do trabalho e propostas para futuras
pesquisas.
2

tabaco, textil e papel podem ser modelados como
Flowshop Hbrido (Gholami et al., 2009). Um dos
primeiros trabalhos com este modelo foi apresentado por Salvador (1973), que o utilizou para o
sistema de producao em uma industria de fibras
sinteticas. Lina and Liao (2003) tambem apresentaram uma aplicacao do Flowshop Hbrido, para
modelar o sequenciamento da producao de etiquetas autocolantes. Para a solucao deste problema
proposto por Lina and Liao (2003), foram aplicadas heursticas com o objetivo de minimizar o
atraso maximo ponderado.
Ziaeifar et al. (2011) e Yaurima et al.
(2009) apresentaram uma modelagem matematica do problema Flowshop Hbrido para linhas de
montagem de placas de circuito. Os dois trabalhos
tiveram como objetivo a minimizacao do makespan e utilizaram Algoritmos Geneticos. Para resolver o problema HFFS-SDST com o objetivo de
minimizacao do makespan, Kurz and Askin (2004)
faz uso da programacao inteira. Devido a dificuldade de resolver o problema com a programacao
inteira, eles tambem propoem a utilizacao de heursticas baseadas em metodos gulosos e algoritmos
geneticos. Kurz and Askin (2003) utilizam regras
de despacho e Naderi et al. (2010), alem das regras
de despacho, propoem a utilizacao da metaheurstica Iterated Local Search (ILS) para solucionar o
mesmo problema.
Defersha (2010) faz uma revisao sobre os gaps
existentes nas pesquisas sobre Flowshop e propoe
o uso de programacao matematica para resolver
o HFFS. Ruiz et al. (2008), alem de propor uma
modelagem utilizando programacao inteira, tambem propoe o uso de heursticas. Os dois trabalhos
apresentam, como criterio de otimizacao, a minimizacao do makespan. Gholami et al. (2009) e Mirabi et al. (2013) consideraram em seus trabalhos
que nem sempre todas as maquinas estao disponveis em todos os instantes de tempos, pois existe
a possibilidade de quebra. Para resolver este problema, Gholami et al. (2009) propos a utilizacao
de algoritmos_geneticos e Mirabi et al. (2013) a
utilizacao de heursticas.

Revisao Bibliografica

Os modelos de sequenciamento_de_tarefas sao
classificados de acordo com o numero de operacoes necessarias para processar uma tarefa e o numero de maquinas disponveis para cada operacao
(Gholami et al., 2009). Pinedo (2005) apresenta
os problemas de sequenciamento como um tripla
  , em que  descreve o ambiente de maquinas  fornece as caractersticas das tarefas e 
descreve o criterio de avaliacao_de_desempenho, ou
seja, a funcao objetivo.
Em relacao ao ambiente de maquinas, os
modelos de sequenciamento podem ser classificados em maquinas simples, flowshop permutacional, openshop, maquinas_paralelas, flowshop hbrido e jobshop flexvel (Pinedo, 2005) e (Gholami
et al., 2009).
Segundo Ruiz and Maroto (2006), os trabalhos de sequenciamento surgiram na decada de
1950 com o artigo de Johnson (1954). Desde
entao, emergiram diversos estudos na literatura,
sempre existindo, no entanto, um gap entre e teoria e a aplicacao real dos problemas de sequenciamento, pois os pesquisadores simplificam as caractersticas reais que deveriam ser consideradas
(Ruiz et al., 2005), (Ruiz and Maroto, 2006) e
(Zandieh et al., 2010).
O problema de Flowshop e amplamente estudado, devido a sua ampla aplicacao na industria.
O Flowshop consiste em um fluxo de tarefas unidirecional, contnuo e ininterrupto, em que tarefas
devem ser processadas, na mesma sequencia, em
maquinas distintas disponveis em serie. Ruiz et al.
(2005) considerou o Flowshop com tempo de setup
(preparacao) dependente da sequencia e propos a
utilizacao de algoritmos_geneticos para a solucao
do problema, com o objetivo de minimizacao do
makespan (Cmax ).
Gupta and Tunc (1991) define o Flowshop
Hbrido, que e uma variacao do Flowshop, como
um conjunto de estagios em serie, sendo que cada
estagio possui uma ou mais maquinas_paralelas.
De acordo com Gholami et al. (2009), os trabalhos de pesquisa sobre o modelo de sequenciamento Flowshop Hbrido Flexvel surgiram na decada de 1970.
O Flowshop Hbrido e aplicado em muitas situacoes praticas (Yaurima et al., 2009). Processos
industriais como automotivos, qumicos, petroleo,

3

Formulacao do Problema

A formulacao adotada no presente trabalho
para o HFFS-SDST e a mesma proposta por Naderi et al. (2010). Assim, considera-se um conjunto N  1, 2, 3, ..., n de tarefas, que devem ser
executadas em um conjunto M  1, 2, 3, ..., m
de estagios. Para cada estagio i  M , existe um
conjunto de Mi  1, 2, 3, . . . , mi  maquinas identicas. Todas as maquinas em todos os estagios
estao habilitadas para processar todas as tarefas.
Neste formulacao, i representa um dado estagio
j representa uma dada tarefa Pij  representa o
tempo de processamento da tarefa j no estagio
i Sijk representa o tempo de preparacao de uma

4287

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

tarefa j para uma tarefa k dentro de um estagio i Cj representa o instante de tempo de termino de processamento no ultimo estagio da tarefa j Cmax representa o valor maximo de termino de processamento de tarefas ou o tempo de
processamento da ultima tarefa. Pode ser visto
como Cmax  maxj Cj  Fj e o conjunto de estagios que a tarefa j deve visitar, considerando que
1  Fj  m.
O objetivo do problema e a minimizacao do
Cmax e algumas premissas devem ser consideradas (i) todas as tarefas sao independentes e estao
disponveis para serem processadas no instante 0
(zero) no primeiro estagio (ii) todas as maquinas estao disponveis (iii) cada maquina so pode
processar uma tarefa de cada vez e uma tarefa
so pode ser processada em uma maquina por vez
(iv) o processamento de uma tarefa nao pode ser
interrompido (v) a tarefa deve esperar uma maquina ser liberada, caso ela tenha que ser processada nesta maquina.
3.1

Tabela 1 Exemplo de Instancia HFFS-SDST
Linha 1
Linha 2
Linha 3
Linha 4
Linha 5
Linha 6
Linha 7
Linha 8
Linha 9
Linha 10
Linha 11
Linha 12

Exemplo Ilustrativo

n3
m2
m0  1
P00  5
P01  9
P02  0
S000  2
S010  3
S020  1
S100  4
S110  2
S120  4

0
0
m1  2
P10  7
P11  4
P12  3
S001  1
S011  2
S021  1
S101  3
S111  1
S121  1

0
0
0
0
0
0
S002
S012
S022
S102
S112
S122

0
0
0
4
2
3

Figura 1 Representacao da instancia da Tabela 1
pelo Grafico de Gantt.

Para representar o problema HFFS-SDST,
considera-se uma instancia que contem o numero
de tarefas, o numero de estagios, o numero de
maquinas identicas dentro de cada estagio, quais
as tarefas que sao processadas em cada estagio, o
tempo de processamento de cada tarefa dentro de
cada estagio e o tempo de preparacao dentro de
um estagio de uma tarefa j para uma tarefa k. O
tempo de preparacao de uma tarefa pode variar
de acordo com a sequencia.
A Tabela 1 ilustra um exemplo de uma instancia para este problema, considerando todas estas
informacoes. Na linha um, n representa o numero
total de tarefas, que e igual a tres na linha dois,
m representa o numero de estagios, que e igual
a dois na linha tres, coluna dois, m0 representa
o numero de maquinas do estagio 0, que, neste
exemplo, e um na linha dois, coluna tres, m1 e o
numero de maquinas no estagio 1, ou seja, duas
maquinas da linha quatro ate a linha seis e representado o tempo de processamento pij de cada
tarefa em cada estagio. A linha quatro, coluna
dois, (p00 ), por exemplo, representa o tempo de
processamento da tarefa T 0 no estagio 0, que e
igual a cinco unidades de tempo. A linha quatro,
coluna tres, (p10 ) representa o tempo de processamento da tarefa T 0 no estagio 1, que e igual a
sete unidades de tempo.
Considerando que, no problema tratado, nem
todas as tarefas precisam visitar todos os estagios (Flexibilidade), quando o tempo de processamento de uma tarefa em um estagio for igual a
zero, significa que a tarefa nao visita aquele estagio. Este caso pode ser visto na linha seis, coluna
dois (P 02) da Tabela 1, em que a tarefa T 2 nao
visita o estagio 0 (primeiro estagio). O valor Sijk

e o tempo de preparacao da tarefa j para a tarefa k no estagio i. Da linha sete ate a linha nove
sao representados os tempos de preparacao entre
as tarefas dentro do estagio 0 da linha dez ate
a linha doze sao representados os tempos de preparacao entre as tarefas, que sao processadas no
estagio 1. O tempo de preparacao considera o estagio ao inves da maquina, pois, para cada estagio,
as maquinas sao identicas. A linha sete, coluna
dois, representa o tempo de preparacao no estagio
0 da tarefa T 0 para ela mesma, ou seja, neste caso,
nenhuma tarefa foi processada anteriormente a tarefa T 0, mas, mesmo assim, a maquina exige um
tempo de preparacao de duas unidades de tempo
para receber esta tarefa. Ja a linha sete, coluna
tres, indica um tempo de preparacao no estagio 0
da tarefa T 0 para a tarefa T 1 que, neste caso, e
uma unidade de tempo.
A Figura 1 mostra em Grafico de Gantt um
sequenciamento proposto para a instancia apresentada na Tabela 1.Neste exemplo, o estagio 0
possui apenas uma maquina M 0 e o estagio 1 possui duas maquinas M 1 e M 2. A primeira tarefa a
ser sequenciada na maquina M 0 e a T 0. Para receber esta tarefa, sao gastas 2 unidades de tempo
com a preparacao da maquina e o tempo de processamento desta tarefa no primeiro estagio (estagio 0) e de 5 unidades de tempo. Portanto, esta
tarefa sera liberada no estagio 0 no instante 7.
A segunda tarefa a ser sequenciada na maquina
M 0 e a T 1. Ela so podera iniciar o seu processamento apos esta maquina ter liberado a tarefa T 0.
O tempo de preparacao da tarefa T 0 para a T 1
neste estagio e de 1 unidade de tempo. Como esta

4288

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

tarefa gasta 9 unidades de tempo para ser processada neste estagio, ela estara liberada no instante
17. Como pode ser visto na coluna 2 e linha 6
da Tabela 1, a tarefa T 2 nao visita o estagio 0 e,
portanto, ela nao e processada na maquina M 0.
4

(ii) Troca de tarefas na mesma posicao em maquinas_paralelas identicas do mesmo estagio
(Troca Externa).
s  M 0(1, 2, 3, 4)  M 1(5, 6, 7, 8) 7
7 s  M 0(5, 2, 3, 4)  M 1(1, 6, 7, 8)

Metodologia

(iii) Realocacao de tarefas dentro da mesma maquina.

Nesta secao sera descrita como uma solucao
para o HFFS-SDST e representada computacionalmente, as estruturas de vizinhancas utilizadas,
a tecnica de busca local aplicada, a metodologia
para construir a solucao inicial e o algoritmo proposto para solucionar o problema HFFS-SDST.
4.1

s  (1, 2, 3, 4) 7 s  (4, 1, 2, 3)
(iv) Realocacao de tarefas em maquinas_paralelas
identicas de um determinado estagio.
s  M 0(1, 2, 3, 4)M 1(5, 6, 7, 8) 7
7 s  M 0(1, 2, 3, 8, 4)M 1(5, 6, 7)

Representacao Computacional da Solucao

(v) Troca de bloco de tres tarefas na mesma maquina (Troca Interna de Bloco).

A solucao para o problema HFFS-SDST e representada por uma matriz M , em que as linhas
representam as maquinas de todos os estagios e as
colunas a sequencia de processamento das tarefas
dentro de cada maquina pertencente a cada estagio. A Tabela 2 que representa a matriz mostra
que existem tres tarefas (T0,T1 e T2) para serem
processadas e tres maquinas, sendo M0 pertencente ao primeiro estagio e M1 e M2 maquinas
paralelas identicas pertencentes ao segundo estagio.
Tabela 2 Representacao da
Matriz.
M0 T 0
M  M1 T 2
M2 T 0

s  (1, 2, 3, 4, 5, 6) 7 s  (4, 5, 6, 1, 2, 3)
4.3

A tecnica de busca local utilizada neste trabalho e o Metodo de Descida (Best Improvement ).
Este metodo parte de uma solucao inicial e, a cada
passo, todos os seus possveis vizinhos sao analisados. O metodo so move para um outro vizinho
desde que ele represente uma melhoria no valor
corrente da funcao de avaliacao.
Para realizar a busca local, os tipos de movimentos sao embaralhados e um deles e escolhido
aleatoriamente. Somente apos a definicao do tipo
do movimento escolhido que o metodo de descida
e aplicado na solucao corrente.

Solucao em forma de
T1
T1
-1

-1
-1
-1

Nesta solucao, no primeiro estagio, as tarefas T 0, T 1 sao processadas na maquina M0 . Na
maquina M0 , a tarefa T 0 precede a T 1. No segundo estagio, as tarefas T 2 e T 1 sao processadas
na maquina M1 e a tarefa T 0 e processada na maquina M2 . As posicoes preenchidas com o valor
-1 indicam que nao existe nenhuma tarefa a ser
processada na maquina nesta sequencia. A tarefa
T 2 nao aparece na maquina M0 pois nao necessita
ser processada neste estagio.
4.2

Busca Local

4.4

Construcao

O GRASP - Greedy Randomized Adaptive Search Procedure e um metodo iterativo, proposto
por Feo and Resende (1995), que consiste na aplicacao iterativa de duas fases, denominadas Construcao e Refinamento, retornando a melhor das
solucoes obtidas ao longo da busca. O Algoritmo 1
descreve o pseudocodigo do GRASP.
Na fase de Construcao, e gerada uma solucao parcialmente gulosa por meio de uma funcao
adaptativa gulosa, que estima o benefcio de cada
um dos elementos. A aleatoriedade da construcao e controlada por um parametro real   0, 1.
Para   1, tem-se uma solucao totalmente aleatoria para   0, tem-se uma solucao totalmente
gulosa. Apos a construcao da solucao, e aplicado
um metodo de busca local. A fase de construcao
do GRASP e apresentada no Algoritmo 2. A construcao de uma solucao no metodo GRASP consiste em inserir elementos, obedecendo a um valor
calculado pela funcao adaptativa gulosa g() e a
uma regra de selecao que contem um fator aleatorio.

Estrutura de Vizinhanca

A vizinhanca de uma solucao s e o conjunto
de solucoes N (s), de modo que cada solucao s 
N (s) e obtida a partir de um movimento feito na
solucao corrente s. Os tipos de movimentos utilizados para este trabalho foram
(i) Troca de tarefas na mesma maquina (Troca
Interna).
s  (1, 2, 3, 4) 7 s  (4, 2, 3, 1)

4289

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

Algoritmo 1 GRASP
1
2
3
4
5
6
7
8
9
10
11
12
13

Algoritmo 3 Iterated Local Search  ILS

Entrada f (.), g(.), N (.), GRASPmax,s
Sada s
incio
f   
para Iter1 ate GRASPmax faca
Construcao( g(.), k, s)
Buscalocal (f (.), N (.), s)
se (f (s) < f  ) entao
s  s
f   f (s)
fim
fim
s  s 
Retorne s
fim

1
2
3
4
5
6
7
8
9
10

Entrada criterioParada
Sada s
incio
s  GeraSolucaoInicial()
s  BuscaLocal(s )
enquanto criterioParada nao satisfeito faca
s  Perturbacao(s )
s  BuscaLocal(s )
s  CriterioAceitacao(s )
fim
Retorne s
fim

Algoritmo 4 GRASP-ILS
Algoritmo 2 Construcao GRASP
1
2
3
4
5
6
7
8
9
10
11
12

1
2
3
4
5
6
7
8
9
10
11
12
13

Entrada g(.), ,s
Sada s
incio
s  
Inicia a lista C de itens candidatos
Ordene a lista C de acordo com g(.)
enquanto C 6  faca
LRC   lista dos k melhores itens de C
Selecione, aleatoriamente, um item t  LRC
s  s  t
Atualize a lista C de itens candidatos
fim
Retorne s
fim

4.5
Para construir a solucao inicial do problema
tratado neste artigo foi utilizado o Algoritmo 2.
A funcao g(t) utilizada para ordenar cada candidato (tarefa) da lista C e a soma dos tempos
de processamento de cada tarefa em cada estagio. Apos esta ordenacao, todos os candidatos
t que possuem valor de funcao g(t)  g(tmin ) +
 g(tmax )  g(tmin ) sao inseridos na lista Restrita de Candidatos LRC e selecionados aleatoriamente para serem sequenciados em cada maquina.
Assim, a lista C e atualizada ate que nao exista
nenhum candidato para ser selecionado. O valor
utilizado para o parametro  neste trabalho foi
  0, 65. Este valor foi escolhido, pois foram feitos os testes de probabilidade emprica e de Kruskal Wallis com os valores de   0, 15 e   0, 85
e o valor de 0.65 atingiu o valor alvo primeiro com
probabilidade de praticamente 100, na maioria
dos casos e tambem apresentou uma menor variabilidade dos dados.

Entrada , criterioParada
Sada s
incio
s  ConstrucaoGRASP()
s  BuscaLocal(s)
nivel  20
enquanto criterioParada nao satisfeito faca
s  Perturbacao(s , nivel)
s  BuscaLocal(s)
se Cmax (s ) < Cmax (s ) entao
s  s 
fim
fim
Retorne s
fim

Iterated Local Search  ILS

A metaheurstica Iterated Local Search  ILS
e um metodo proposto por (Lourenco et al., 2003)
que gera iterativamente novas solucoes no espaco
de busca, atraves de pertubacoes em uma solucao (otimo local), que passam por um refinamento
atraves da busca local.
O Algoritmo 3 apresenta o pseudocodigo do
ILS. A linha 2 consiste na geracao de uma solucao
inicial. A linha 3 representa a etapa de refinamento da solucao inicial gerada na linha 2. Apos
estes dois passos, o algoritmo executa um laco de
repeticao ate que o criterio_de_parada seja atendido. Neste laco, a solucao corrente passa por um
processo de perturbacao (linha 5) e novamente a
busca local e aplicada (linha 6). Se o criterio de
aceitacao for atendido, a solucao corrente s sera
atualizada com o valor de s (linha 7).
4.6

Algoritmo Proposto

O Algoritmo 4 apresenta o pseudocodigo do
algoritmo proposto, baseado no procedimento hbrido Greedy Randomized Adaptive Search - Iterated Local Search  GRASP - ILS (Lourenco
et al., 2003), apresentado na Secao 4.5, para resolver o HFFS-SDST estatico.
Neste Algoritmo, a etapa de geracao da solucao inicial (linha 2) foi feita com base no procedimento de construcao do GRASP, conforme apresentado na Secao 4.4. O metodo de Busca Local
utilizado (linha 3) foi o metodo de Descida (Best
Improvement ), descrito na secao 4.3.
Das linhas 5 ate 11 sao aplicados procedimentos de
forma iterativa ate que o criterio_de_parada seja

Apos selecionar a tarefa a ser sequenciada,
e necessario escolher a maquina responsavel por
processa-la. Para a escolha da maquina, foi utilizado o criterio guloso, de acordo com a funcao de
avaliacao da maquina, que considera o instante de
disponibilidade da maquina, o tempo de processamento de cada tarefa em cada estagio e o tempo
de preparacao no estagio i da tarefa anterior a
tarefa escolhida para ser processada na maquina.
Portanto, a maquina selecionada para processar a
tarefa escolhida e a que apresenta menor instante
de liberacao.

4290

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

Tabela 3 Famlia de Instancias

Famlia
20x2
20x4
20x8
50x2
50x4
50x8
80x2
80x4
80x8
120x2
120x4
120x8

Qte Inst
80
80
80
80
80
80
80
80
80
80
80
80

Qte Tar
20
20
20
50
50
50
80
80
80
120
120
120

Tabela 4 Exemplo de Calculo do Desvio para 10
instancias da Famlia 20  2

Qte Est
2
4
8
2
4
8
2
4
8
2
4
8

Inst ILS-PILS-TRKILS-ORKMin 1 2 3
1-20x2
634
682
652 6340,000,080,03
2-20x2
652
549
650 5490,190,000,18
3-20x2
581
625
592 5810,000,080,02
4-20x2
581
628
586 5810,000,080,01
5-20x2
491
471
488 4710,040,000,05
6-20x2
350
296
354 2960,010,020,00
7-20x2
487
350
483 3500,010,040,00
8-20x2
436
231
436 2310,000,120,02
9-20x2
457
381
470 3810,000,050,06
10-20x2
368
355
372 3550,000,140,03

instancia, considerando o valor mnimo e o valor
encontrado por cada algoritmo.
A Tabela 4 apresenta um exemplo do calculo
do valor mnimo de Cmax , considerando os tres algoritmos e o calculo do desvio para a famlia de
80 instancias com 20 tarefas e 2 estagios (20  2).
A primeira linha desta Tabela, por exemplo, representa uma instancia que teve os valores mnimos de Cmax iguais a 634, 682 e 652 para os
algoritmos ILS-P, ILS-TRK e ILS-ORK, respectivamente. Portanto, o menor valor de Cmax foi
de 634, obtido pelo Cmax . Para se obter o desvio
de cada um dos algoritmos em relacao ao menor
valor encontrado, e feito o calculo

atendido. Na linha 6 e aplicado o procedimento
de perturbacao da solucao corrente, que consiste
em realizar 20 vezes os movimentos de troca interna, troca externa, realocacao interna (nvel de
perturbacao). Na linha 7 e aplicado novamente
o procedimento de busca local. Apos a aplicacao
da perturbacao e busca local, se a nova solucao
for melhor que a solucao corrente, entao a solucao
corrente e atualizada. O criterio_de_parada adotado foi o numero de 100 iteracoes sem melhora.
5

Resultados Computacionais

O algoritmo GRASP - ILS proposto foi implementado na linguagem C++, utilizando o Code
Blocks 12.1, e testado em um computador Intel
(R) Core(TM) i7-3632QM CPU @ 2.2 GHz, Memoria RAM de 8 GB, com um sistema operacional
de Windows 8 64 bits.
Para testar o algoritmo foram utilizadas 960
instancias, disponibilizadas por Naderi et al.
(2010), pertencentes a 12 famlias diferentes. A
Tabela 3 demonstra as caractersticas de cada famlia. A primeira coluna identifica a instancia,
com dimensao mn, em que m representa a quantidade de tarefas e n a quantidade de estagios.
A segunda, terceira e quarta colunas informam
a quantidade de instancias por famlia, a quantidade de tarefas e a quantidade de estagios, respectivamente. A quantidade de maquinas dentro
de cada estagio e o setup utilizado variam de instancia para instancia. O algoritmo foi executado
30 vezes para cada problema teste, e toda vez que
o algoritmo ficava 100 iteracoes sem melhorar a
solucao corrente, a execucao era interrompida. O
parametro  utilizado para a construcao GRASP
foi de   0, 65.
Os resultados do algoritmo proposto foram
comparados com os resultados disponibilizados
por Naderi et al. (2010). Este autor apresenta
tres variacoes do algoritmo ILS (ILS-P, ILS-TRK
e ILS-ORK) e, para cada instancia, e calculado
o desvio de cada algoritmo em relacao ao menor
valor de Cmax encontrado por algum destes tres
algoritmos. O desvio de cada famlia de instancia e fornecido pela media dos desvios de cada

1  100

ILSP (1)  M in
M in

(1)

A media dos desvios de cada instancia fornece
o desvio da famlia. Assim, para o conjunto de
instancias 20  2 apresentado na Tabela 4, o desvio medio foi de 11, 53 , 5, 30 e 14, 30 para
os algoritmos ILS-P, ILS-TRK e ILS-ORK, respectivamente. O menor valor de Cmax e o Cmax
medio gerado para cada instancia pelo algoritmo
proposto neste trabalho e comparado com o menor valor de Cmax encontrado para cada instancia,
considerando os tres algoritmos de Naderi et al.
(2010).
A Tabela 5 e a Figura 2 apresentam o comparativo dos desvios do algoritmo proposto (nomeado como Alg.Prop) para cada famlia de instancia com os desvios dos algoritmos de Naderi
et al. (2010). Como pode ser observado, o desvio
do algoritmo proposto e menor em 83 dos casos que os desvios dos tres algoritmos propostos
por Naderi et al. (2010). Isto implica que os valores de Cmax foram menores que os apresentados
por Naderi et al. (2010). Nesta Tabela, a coluna
T (s) apresenta a media em segundos da execucao
do algoritmo para cada famlia de instancia.
Na Tabela 6, a coluna SUPapresenta o total
de instancias que tiveram os resultados melhorados. A coluna NS(ate 3) apresenta a quantidade de instancias que nao tiveram os resultados
melhorados, ficando o desvio em ate 3. Este
desvio 3 foi escolhido para apresentar as instancias que nao superaram os resultados da literatura

4291

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

Figura 2 Analise dos Desvios das Famlias de Instancias.
Tabela 6 Numero de resultados melhorados por famlia de instancias usando o Algoritmo GRASP-ILS.
Famlia
20x2
20x4
20x8
50x2
50x4
50x8
80x2
80x4
80x8
120x2
120x4
120x8
Total
Total

SUP
6
54
78
68
57
79
47
46
76
45
31
36
623
65

NS (ate 3)
12
5
0
4
10
1
17
12
4
16
17
14
112
12

NS (> 3)
62
21
2
8
13
0
16
22
0
19
32
30
225
23

1
11,53
12,36
4,61
11,17
4,26
1,02
7,48
2,96
0,87
12,48
1,71
0,68
5,93

2
5,30
8,49
16,17
6,06
12,34
14,76
3,60
15,27
16,28
2,83
13,91
18,79
11,15

3
14,30
14,92
6,27
12,45
5,11
1,21
8,21
4,34
0,95
11,35
2,10
0,83
6,84

Alg.Prop
11,38
-1,74
-28,48
-15,05
-4,16
-16,50
-1,09
-1,97
-11,51
0,02
-0,59
0,78
-5,74

 SUP
8
68
98
85
71
99
59
58
95
56
39
45
65

med
11,38
-1,74
-28,48
-15,05
-4,16
-16,50
-1,09
-1,97
-11,51
0,02
-0,59
0,78
-6

T(s)
0,14
0,41
1,36
0,84
2,86
22,82
3,30
9,60
39,73
24,49
28,36
157,55
24,29

da Sequencia (HFFS-SDST), que tem, como funcao de otimizacao, a minimizacao do makespan.
Para solucionar este problema, foi utilizada a metaheurstica GRASP-ILS, sendo que, para a etapa
de construcao da solucao inicial, foi aplicado o
GRASP.
Este artigo buscou estudar situacoes reais,
pois considera um problema em que existem tarefas que devem ser processadas em um conjunto
de estagios dispostos em serie, e que cada estagio
possui uma ou mais maquinas_paralelas identicas.
Alem disso, nem todas as tarefas necessitam visitar todos os estagios e o tempo de setup e dependente da sequencia. Para testar o algoritmo foram
utilizadas 960 instancias disponibilizadas por Naderi et al. (2010), envolvendo 20, 50, 80 e 120 tarefas para 2, 4,e 8 estagios. O algoritmo proposto
neste trabalho conseguiu melhorar 65  dos resultados de Naderi et al. (2010).
Avaliando os resultados obtidos com suas respectivas analises e possvel afirmar que as tecnicas
desenvolvidas neste trabalho contribuem de forma
significativa para os estudos de sequenciamento de
tarefas.

Tabela 5 Desvios percentuais obtidos pelo Algoritmo Proposto
Famlia
20x2
20x4
20x8
50x2
50x4
50x8
80x2
80x4
80x8
120x2
120x4
120x8
Media

TOT
80
80
80
80
80
80
80
80
80
80
80
80
960
100

T(s)
0,14
0,41
1,36
0,84
2,86
22,82
3,30
9,60
39,73
24,49
28,36
157,55
24,29

mas que ficaram bem proximas de superar. A coluna NS(> 3) demonstra a quantidade de instancias que nao tiveram os resultados melhorados
com desvio acima de 3. Por esta tabela, e possvel perceber que, das 960 instancias testadas, o
algoritmo proposto neste artigo conseguiu melhorar os resultados de 65 das instancias. Das 35
nao melhoradas, 12 ficaram com um desvio de
ate 3 e 23 com um desvio acima de 3 em
relacao aos de Naderi et al. (2010).

Agradecimentos
6

Conclusoes
Os autores agradecem ao CEFET-MG, a CAPES, a FAPEMIG e ao CNPq pelo apoio ao desenvolvimento do trabalho.

Este artigo tratou do Problema de Flowshop
Hbrido Flexvel com Tempo de Setup Dependente

4292

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

Ruiz, R. and Maroto, C. (2006). A genetic algorithm for hybrid flow shops with sequence
dependent setup times and machine eligibility, European Journal of Operational Research 169 781800.

Referencias
Defersha, F. M. (2010). A comprehensive mathematical model for hybrid flexible flow shop lot
streaming problem, International Journal of
Industrial Engineering Computations 2 470
482.

Ruiz, R., Maroto, C. and Alcaraz, J. (2005). Solving the flow shop scheduling problem with
sequence dependent setup times using advanced metaheuristics, European Journal of Operational Research 165 3454.

Feo, T. and Resende, M. (1995). Greedy randomized adaptive search, Journal of Global Optimization 3 109133.

Ruiz, R., Serifoglu, F. S. and Urlings, T. (2008).
Modeling realistic hybrid flexible flow shop
scheduling problems, Computers  Operations Research 35 11511175.

Gholami, M., M.Zandieh and A.Alem-Tabriz
(2009). Scheduling hybrid flow shop with
sequence-dependent setup times and machines with random breakdowns, Int J Adv Manuf Technol 42 189201.

Salvador, S. M. (1973). A solution to a special
class of flow shop scheduling problems., Symposium on the theory of scheduling and its
applications pp. p.8391.

Gupta, J. N. D. and Tunc, E. A. (1991). chedules
for a two-stage hybrid flow shop scheduling
with parallel machines at the second stage,
International Journal of Production Research
29 14891502.

Yaurima, V., Burtseva, L. and Tchernykh, A.
(2009). Hybrid flow shop with unrelated machines, sequence-dependent setup time availability constraints and limited buffers, Computers  Industrial Engineering 56 1452
1463.

Johnson, S. (1954). Optimal two-and three-stage
production schedules with setup times included., Naval Research Logistics Quarterly
1 6168.

Zandieh, M., Mozaffari, E. and Gholami, M.
(2010). A robust genetic algorithm for scheduling realistic hybrid flexible flow line problems, J Intell Manuf 21 731743.

Kurz, M. E. and Askin, R. G. (2003). Comparing
scheduling rules for flexible flowlines, Journal
of Production Economics pp. 85(3)37188.

Ziaeifar, A., Tavakkoli-Moghaddam, R. and Pichka, K. (2011). Solving a new mathematical model for a hybrid flow shop scheduling problem with a processor assignment by
a genetic algorithm, Int J Adv Manuf Technol
61 339349.

Kurz, M. E. and Askin, R. G. (2004). Scheduling
flexible flowlines with sequence-dependent setup times, European Journal of Operational
Research pp. 59(1)6682.
Lina, H.-T. and Liao, C.-J. (2003). A case study
in a two-stage hybrid flow shop with setup
time and dedicated machines, International
Journal of Productiction Economics 86 133
143.
Lourenco, H., Martin, O. and Stutzle, T. (2003).
Iterated local search, in F. Glover and G. Kochenberger (eds), Handbook of Metaheuristics, Kluwer Academic Publishers, Boston,
pp. 321353.
Mirabi, M., Ghomi, S. M. T. F. and Jolai, F.
(2013). A two-stage hybrid flow shop scheduling problem in machine breakdown condition, J Intell Manuf 24 193199.
Naderi, B., Ruiz, R. and Zandieh, M. (2010). Algorithms for arealistic variant of flow shop
scheduling, Computers  OperationsResearch pp. 236246.
Pinedo, M. L. (2005). Scheduling Theory, Algorithms, and Systems.

4293