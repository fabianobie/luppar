Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

DESENVOLVIMENTO DE SUPERVISÓRIOS PARA MONITORAÇÃO DE PROCESSOS
SIMULADOS
THIAGO M. BARROS,
Instituto Federal de Educação, Ciência e Tecnologia do Rio Grande do Norte
Campus Currais Novos, 773, Currais NovosRN  CEP59380-000
E-mails thiago.medeiros@ifrn.edu.br

ADRIÃO D. D. NETO, JORGE D. MELO, MÁRCIA M. L. DUARTE, VANJA M. F. BEZERRA
Departamento de Engenharia de Computação e Automação, Universidade do Rio Grande do Norte
Campus Universitário, sn, NatalRN - CEP 59072
Departamento de Engenharia Química, Universidade do Rio Grande do Norte
Campus Universitário, sn, NatalRN - CEP 59072
E-mails adriao@dca.ufrn.br, jdelo@dca.ufrn.br, marcia@eq.ufrn.br,
vanja@eq.ufrn.br
Abstract The need to develop an architecture that promotes the monitoring of simulation software through supervisory, adding
intelligent modules and devices such as CLPs according to the need of the problem, was the driving force of this work. In this
study were developed two versions of supervisory (in C + + Builder and Elipse E3), using as communication between the supervisory and simulation software the OLE Automation, which, with the use of the database, promoted an easy maintainable and scalable architecture. Adding value to the work, was developed an intelligent module for the inference of the output stream composition of the simulated distillation column. This module was developed in a data analysis software, which also uses the Automation
for communication with the supervisory.
Keywords OLE Automation, simulation, distillation column, SCADA
Resumo A necessidade de desenvolver uma arquitetura que promovesse a monitoração de softwares de simulação através de
supervisórios, agregando módulos inteligentes e equipamentos como CLPs de acordo com necessidade do problema, foi a força
motriz desse trabalho. No presente estudo foram desenvolvidas duas versões de supervisório (em C++ Builder e Elipse E3), utilizando como comunicação entre o supervisório e o software de simulação o OLE Automation, o qual, junto ao uso de banco_de_dados promoveu uma arquitetura de fácil manutenção e escalável. Agregando valor ao trabalho, foi desenvolvido um módulo inteligente para a inferência da composição da stream de saída da coluna_de_destilação simulada. Este módulo foi desenvolvido em um
software de análise de dados, o qual também utiliza o Automation para a comunicação com o supervisório
Palavras-chave 

1

Introdução

Na camada de supervisão é possível encontrar
desde sistemas mais simples, apenas com interfaces
homem-máquina (IHM) locais, até ilhas de supervisão
equipadas com computadores poderosos e com os
sistemas SCADA. O termo SCADA (Supervisory
Control And Data Acquisition) na automação é utilizado para denominar sistemas de supervisão, controle
e aquisição_de_dados compostos por um ou mais
computadores monitorando e controlando um processo (Viana, 2008).
O processo monitorado e controlado pelo
SCADA não, necessariamente, é um processo físico
real, podendo ser também uma simulação de uma
planta industrial em ambientes híbridos (Martins,
2008).
De acordo com Garcia (1997), pode-se definir
que simulação é a obtenção da resposta temporal das

ISBN 978-85-8001-069-5

variáveis de interesse (variáveis dependentes) de um
modelo, quando se excita suas variáveis de entrada
com sinais desejados e se definem os valores das
condições iniciais das variáveis dependentes.
Simulação também pode ser definida como o
processo de projetar o modelo de um sistema real e
conduzir experimentos com este modelo com o propósito de entender o comportamento do sistema eou
avaliar várias estratégias de operação do sistema
(Shannon, 1998).
Softwares de simulação como Unisim e o Hysys
já obtiveram na academia e na indústria resultados
comprovados de sua eficiência na simulação em colunas_de_destilação (Soos  Smejkal, 2001).
A necessidade de que softwares implementados
em diferentes linguagens de programação (no nosso
caso o supervisório e o software de simulação) compartilhem dados entre si  de modo que cada um
cumpra seu papel específico - e gerem um único sistema com um propósito maior é um fato constante. De
acordo com Nakamura (2011), a essa comunicação
3177

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

entre processos se dá o nome de IPC (Interprocess
Communication), o qual denota um conjunto de chamadas de sistema que permite um processo do modo
usuário possa
 Sincronizar-se com outros processos
 Enviar mensagens para outros processos ou
receber mensagens deles
 Compartilhar pedaços da memória com outros processos.
O COM é um IPC que trabalha no estilo clienteservidor. A partir do COM foi desenvolvido o Ole
Automation, o qual torna possível que uma aplicação
manipule objetos implementados em outra aplicação,
ou exponha objetos que, por sua vez, possam ser manipulados (Microsoft, 2009).
Para o controle ou supervisão em plantas de processos químicos é imprescindível obter medições
online de variáveis que muitas vezes são compostos
químicos que estão diretamente relacionados com a
qualidade dos produtos finais e, por esse motivo, são
de grande interesse econômico. De maneira geral, os
sistemas de inferência são construídos para realizar
estimativas das variáveis primárias a partir das variáveis secundárias de fácil mensuração, tais como temperaturas, pressões, níveis e vazões (Rebouças, 2009).
As Redes Neurais Artificiais vem ganhando cada
vez mais espaço nessa área e se consolidando como
uma das principais técnicas de inferência de variáveis
na Indústria. Uma Rede Neural é um processador
maciçamente paralelamente distribuído constituído de
unidades de processamento simples, que têm a propensão natural para armazenar conhecimento experimental e torná-lo disponível para o uso (Haykin,
2007).
O objetivo deste trabalho é construir sistemas
supervisórios, a fim de monitorar, e futuramente controlar, plantas simuladas em um software de simulação do processo de destilação de uma coluna acadêmica. Além disso, tem o intuito de construir uma arquitetura, a fim de agregar novos módulos como inferência de variáveis usando redes_neurais, para agregação de valor ao sistema.
2 Proposta de Implementação
Em suma, o supervisório desenvolvido irá realizar a comunicação com a simulação desenvolvida no
Unisim através do Ole Automation, que utilizará um
banco_de_dados para armazenar as variáveis de processo e através de módulos inteligentes realizará inferências e pré-processamento dos dados, como visto na
Figura 1.
2.1 Coluna de Destilação Simulada Selecionada
Como planta_didática para o desenvolvimento do
supervisório, foi selecionada a planta debutdyn (Figura 2).
ISBN 978-85-8001-069-5

Figura 1 Visão geral da arquitetura desenvolvida
PIC-101

VLV-104

TEE-100
VLV-105

VLV-101

LIC-102

E-100
PIC-100
TEE-101

FIC-100
P-100

FEED 2

FEED 1

Butanes

1
2
3
4
6
7
8
9
10
11
12
13
14
15

VLV-103

VLV-100

Q-100

Main-TS

TIC-100
Reboiler Duty

C5+

Boilup
LIC-101
To Reboiler

Figura 2 Coluna de Destilação Simulada Selecionada

A planta debutdyn é um modelo geral para
uma coluna_de_destilação usando mais detalhes do
que apenas o módulo do condensador.
O controle_de_pressão da coluna é obtido
principalmente manipulando o excesso de vapor em
torno do condensador. O PIC-101 controla o excesso
da pressão acumulada liberando-o de forma controlada. A pressão do prato de topo é controlada pelo PIC100, que essencialmente mantém uma constante queda de pressão entre o prato de topo e o do acumulador.
A vazão de refluxo está sobre o controle de
fluxo, com o nível do acumulador sendo controlado
pela vazão do produto. Há o controle_de_temperatura
no fundo da coluna, e o controle_de_nível para o vaso.
2.2 Comunicação entre Supervisórios e Programa de
Simulação
Em ambas as versões do supervisório foi utilizado o Automation para realização da comunicação
entre o software de simulação e o supervisório. A
opção do Automation frente ao DDE  também tecnologia da Microsoft para comunicação entre processos
do Windows - é de recomendação da própria Microsoft (Microsoft, 2009), a qual descreve que as biblio-

3178

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

tecas OLE e DDEML (Dynamic Data Exchange Management Library)
 Oferecem toda a funcionalidade de mensagens DDE.
 O uso de bibliotecas reduzirá o tempo de desenvolvimento do aplicativo. Uma exceção a
essa regra pode ocorrer quando um aplicativo requer apenas um subconjunto muito limitado da biblioteca OLE ou DDEML.
 As bibliotecas irão incorporar refinamentos
futuros. Eles provavelmente incluem melhor
desempenho por meio do uso de um novo
mecanismo IPC em vez de usar mensagens
DDE.

De forma sucinta, a modelagem foi expressa
em três tabelas (Figura 5), sendo elas componente,
variavel e historicovariavel. Respectivamente representam os componentes que compõem a simulação
como, por exemplo, coluna, controladores, reboilers
os atributos de interesse que compõem os componentes, tais como temperaturas, pressões e os valores
numéricos em um determinado momento dos atributos durante a simulação.

instancia o software de simulação
hy  feval(actxserver, Hysys.Application)
 abre uma planta
sc  invoke(hy.SimulationCases, Open,
Etccdebutdynplantadebutdynss.hsc)
 recupera algum controlador
fic100  hy.Flowsheet.Flowsheets.Item(COL1).Operation.Item(FIC100)

Figura 5 Modelagem do Banco de Dados

2.4 Supervisórios Desenvolvidos
Figura 3Exemplo de Código em Matlab utilizando OLE

Automation é capaz de realizar a comunicação de
forma simples e eficiente entre o software de simulação e o supervisório, como visto na Figura 3. Entretanto, como visto no manual, a grande dificuldade é
encontrar o caminho que deve ser realizado pelo
software de simulação, a fim de encontrar o objeto
desejado. Para resolução desse problema, o software
Unisim disponibiliza uma espécie de histórico de
variáveis denominado DataBook (Figura 4), no qual
você deve configurar quais são as variáveis de interesse, um identificador da mesma e o estilo de acesso
(leitura, escrita, leituraescrita).

Figura 4 DataBook com as variáveis de Interesses

2.3 Banco de Dados
No supervisório desenvolvido foi projetado
um módulo de armazenamento de dados das variáveis
de interesses de cada simulação. Os dados foram salvos no Banco de Dados Postgres 9, tornando eficiente o seu armazenamento e o acesso em qualquer ponto
do sistema, além de facilitar a utilização de tais dados
por outros softwares que tenham suporte  banco de
dados, como, por exemplo, softwares de análise_estatística e mineração_de_dados.

ISBN 978-85-8001-069-5

Foram desenvolvidas duas versões do sistema
supervisório a primeira utilizando o C++ Builder e a
segunda utilizando o Elipse E3.
2.4.1 Versão em C++ Builder
De forma sucinta, podemos visualizar a estrutura
do software desenvolvido no Diagrama de Classes na
Figura 6.
O controle sobre a comunicação entre o supervisório e o software de simulação é realizado pela classe ControllerHysys, que utiliza o objeto Automation
UnisimDesign.Application ou Hysys.Application para
recuperar e enviar dados. A comunicação com o banco_de_dados Postgres é realizada através do ODBC.
Na tela inicial do software (Figura 8) encontramos as principais funcionalidades do sistema.
Na Seção 1 temos as abas Hysys e Configurar
Hysys. A primeira contém as ações do supervisório e
a segunda serve para configurar parâmetros do supervisório, como o período de aquisição_de_dados, e cadastrar novas variáveis e componentes no supervisório.
Na Seção 2 temos as ações que podem ser realizadas no supervisórios, as quais consistem respectivamente (de acordo com a ordem dos botões da esquerda para direita)
 Conectar a simulação definida no campo
Simulação
 Atualizar manualmente os dados na Seção 5
 Solicitar que o programa Unisim simule a
planta conectada
 Salvar as variáveis definidas na Seção 5 no
banco_de_dados

3179

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.




Adicionar uma variável selecionada na Seção
4 na simulação
Remover uma variável selecionada na Seção
5 da simulação.

Figura 8 Tela Inicial do Supervisório em C++ Builder

2.4.2 Versão em Elipse E3
Figura 6 Diagrama de Classes C++ Builder

Na Seção 3 são listados todos os componentes
cadastrados no banco_de_dados. Ao realizar o evento
duplo clique sobre um componente são listadas na
Seção 4 as variáveis associada ao mesmo.
Na Seção 4 são listadas as variáveis previamente
selecionadas do componente da seção 3. Ao realizar o
evento duplo clique sobre alguma das variáveis é exibido o gráfico com o histórico dos valores salvos no
banco_de_dados. Na mesma tela, caso a variável seja
cadastrada como editável, a mesma poderá ter seu
valor alterado no supervisório e, consequentemente,
no software de simulação de forma automática.
Na Seção 5 são listadas as variáveis adicionadas
para serem monitoradas na simulação. Ao realizar o
evento duplo clique sobre alguma delas é exibido o
gráfico em tempo_real da mesma.

O ambiente_de_desenvolvimento e a forma
como os componentes interagem no Elipse E3 é diferente daquela encontrada no ambiente C++
BUILDER. O Elipse E3 é um ambiente_de_desenvolvimento voltado principalmente a eventos que utiliza
o conceitos de associações entre atributos de objetos
como principal forma de interação entre os mesmos.
Essa mudança de paradigma de desenvolvimento
trouxe algumas dificuldades iniciais para a sua concepção. Uma vez que não foram mais utilizados os
conceitos da programação orientada a objeto (POO),
a arquitetura do sistema fora modificada. Entretanto,
o uso da UML através dos diagramas de classes e
sequência ainda foram utilizados para melhor entendimento do sistema.
Na versão implementada no Elipse E3 (Figura 10) foi utilizado o banco_de_dados com o mesmo
intuito da versão em C++ Builder armazenamento do
histórico de variáveis selecionadas, armazenamento
dos caminhos para acessar componentes e propriedades no software de simulação e outras informações
adicionais. O banco_de_dados usado foi o Access
2007, uma vez que o Elipse E3 possui componentes
que facilitam o desenvolvimento do supervisório,
como os E3Chart e o E3Browser, entretanto esses
componentes só são suportados pelos bancos de dados Oracle, SQLServer e Access.

Figura 7 Diagrama de Sequência para Requisição de Dados entre
Supervisório e Simulação

Na Figura 7 mostra de forma simplificada
como é realizada a interface entre supervisório e simulação. No primeiro momento o usuário requisita ao
supervisório os dados das variáveis de seu interesse.
Logo após é solicitado ao Banco de Dados os caminhos para acessá-las. Uma vez processados os caminhos, as mesmas são repassadas para o Ole Automation e só assim os dados serão retornados ao Supervisório em tempo_real.
ISBN 978-85-8001-069-5

Figura 9 Diagrama de Classes Elipse E3

3180

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.


O Elipse E3 dá suporte ao desenvolvimento de
scripts em VBScript. Este, por sua vez, tem a capacidade de instanciação de poderosos objetos disponibilizados pela plataforma Windows, entre eles o ScriptControl. Este objeto possui a capacidade de interpretar comandos imbuídos em strings.
No Diagrama de Classes a Figura 9 apresenta a
classe ControlUnisim sendo uma instância do XControls que pode ser adicionado a qualquer novo projeto
do supervisório. O mesmo é o responsável pela realização da comunicação com o software de simulação
através do Automation. O ControlUnisim também
utiliza um temporizador, a fim de realizar requisições
periódicas de informações ao software de simulação,
as quais podem ser salvas na tabela de histórico no
banco_de_dados. É também no ControlUnisim que é
requisitada a rede_neural implementada para realizar a
inferência da composição molar do n-butane da saída
da coluna.

Figura 10 Tela Elipse E3

Na Seção 1 (Figura 10) encontram-se os
botões das ações que podem ser realizadas no sistema. Estas ações são
 Início volta  configuração inicial das telas
de cada frames
 Gráficos Exibe a tela de gráfico
 Config Exibe a tela de configuração do supervisório
 Unisim é realizado a conexão do objeto UnisimDesign.Application e salvo em uma
Tag interna
 Conect é realizado a consulta no banco de
dados de todos os componentes e propriedades cadastrados, a fim de realizar a instanciação do link entre cada objUnisim e um elemento no software de simulação
 Simular é habilitado o temporizador, o qual
ativará a ação periódica de recuperar as propriedades que devem ser monitoradas, salvar
os valores em histórico e realizar inferências
da composição de saída usando RNA

ISBN 978-85-8001-069-5








Salvar habilita na simulação a ação de que
as variáveis que estejam previamente selecionadas para serem salvas em histórico tenham seus valores registrados
Matlab conecta ao Matlab e salva a instância em uma tag interna do supervisório
Inferir habilita a inferência da saída da
composição da coluna
Add Sim adiciona a propriedade selecionada em "Propriedades Cadastradas"
Rem Sim remove da simulação a propriedade selecionada
Add Hist adiciona a propriedade selecionada para ser Salva no histórico
Rem Hist remover uma propriedade selecionada das variáveis que serão salvas no histórico.

2.5 Inferência de Variável
Foi utilizada a técnica de rede neurais Perceptron de Múltiplas Camadas (MLP) que realiza a
inferência da composição molar do n-butane da stream de saída.
Para o treinamento da rede_neural foram
gerados 18.149 pontos, utilizando o sinal PRS
(pseudo-random sequence), variando em mais ou menos 20 (Zanata, 2005) o valor dos sepoints de
todos os controladores em relação ao seu valor em
regime.
O tempo de duração de cada valor do sinal PSR
ficou entre 5 a 15 unidades de tempo. A planta foi
colocada em modo de simulação_em_tempo_real e a
taxa de amostragem dos dados foi de 8s. Os dados
recuperados foram normalizados de -1 a 1.
Como entradas da rede_neural tem-se
 Vazão Molar do Feed 1 e 2
 Temperatura do Feed 1 e 2
 Vazão de Refluxo
 Temperatura do Refluxo
 Temperatura da coluna nos pratos 1, 12, 13,
14 e 15
A saída desejada da rede_neural foi a fração Molar do n-Butane.
Uma vez que estamos tratando de um problema
de uma planta dinâmica, foi selecionada a rede_neural
perceptron_de_múltiplas_camadas (Haykin, 2007) com
dois regressores na saída e dois regressores de entrada, ou seja, um modelo de 2 ordem. Para a quantidade de neurônios e camadas ocultas foram realizados
testes e selecionada a rede com o menor erro. Para
função de treinamento foi escolhida LevenbergMarquardt backpropagation.
Como critério de avaliação foi utilizado o MSE e
MAE. O primeiro representa o erro médio quadrado.
O segundo representa a média dos erros absolutos.

3181

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

Tabela 1 Erros de Treinamento da RNA

Agradecimentos

REDE

41201

41101

41301

41101
01

412020
1

MSE

0.0227

0.0117

0.0609

0.0302

MAE

0.1227

0.0858

0.2113

0.089
2
0.242
4

0.1395

A rede_neural após ser treinada foi armazenada junto aos parâmetros de normalização da entrada
e saída.

Figura 11 Inferência da fração Molar do n-Butane utilizando RNA

Como visto na Figura 11 os primeiros instantes da inferência possuem um valor de erro alto,
uma vez que os valores iniciais dos regressores são
inicializados em zero. Após a rede ser alimentada
com os valores reais da planta simulada, a inferência
rapidamente consegue inferir de maneira correta o
valor da composição.
3 Conclusão
O trabalho realizado promoveu o desenvolvimento de duas versões de supervisórios sobre uma
coluna_de_destilação simulada, cujo objetivo foi o de
criar uma arquitetura capaz de aglutinar ferramentas
já desenvolvidas e bem aceitas na academia e no mercado - como simuladores de colunas_de_destilação e
softwares matemáticos para análise de dados - gerando um ambiente seguro e controlado, o qual possa
realizar testes e validar novas estratégias de controle e
inferência de variáveis (as quais seriam impraticáveis
de ser concebidas em um ambiente real), evitando
problemas como a segurança de equipamentos e de
vidas humanas.
O uso do Automation, para realizar a comunicação entre os diferentes processos, junto ao uso do
banco_de_dados se mostrou uma estratégia atrativa
para tornar o sistema mais flexível e escalável. Entretanto, devem ser realizados testes de performance
sobre colunas mais complexas com um grande número de variáveis, a fim de verificar o desempenho e
robustez da arquitetura.

ISBN 978-85-8001-069-5

Agradecimentos
aos
projetos
CSIMDREDIC e a FINEP pelo suporte financeiro e
material do projeto.
Referências Bibliográficas
Garcia, C., 1997. Modelagem e Simulação. s.l.edusp.
Haykin, S., 2007. Redes Neurais - Princípios e
Prática. s.l.BOOKMAN.
Martins, Daniel Lopes Ramalho, Leonardo Sávio
Guanabara  Costa, B. Xavier  Rodrigues, Igor
de Oliveira  Dória Neto, A. D.  Melo, Jorge
Dantas
de . Implementação de um
Demultiplexador Aplicado ao Ambiente
Foundation Fieldbus. In Congresso Brasileiro
de Automática, 2008, Juiz de Fora. XVII
Congresso Brasileiro de Automática, 2008. v. 01.
p. 01-06.
Microsoft, s.d. ODBC--Visão geral de Open
Database Connectivity. Online
Disponível
em
httpsupport.microsoft.comkb110093
Acesso em 26 11 2009
Nakamura, E., s.d. Online
Disponível
em
httpwww.lsd.ic.unicamp.brmc514sitesdefaul
tfilesComunicaC3A7C3A3o20entre
20processos.pdf
Acesso em 27 junho 2011.
Rebouças, D. L., 2009. Sistema de Inferência Neural
e Processamento Estatístico Multivariável
Aplicado a Indústria do Petróleo. Natal(RN)
Universidade Federal do Rio Grande do Norte.
Shannon, R. E., 1998. Introduction to the Art and
Science
of
Simulation.
s.l.Industrial
Engineering, Texas AM University.
Soos, M.  Smejkal, Q., 2001. Comparison of
computer simulation of reactive distillation using
ASPEN PLUS and HYSYS software. Chemical
Engineering and Processing, p. 413418.
Viana, D. W. d. S., 2008. Sistema SCADA
Supervisório. RJ IFF.
Zanata, D. R. (2005). Desenvolvimento de Sensor
Virtual Empregando Redes Neurais para
Medição da Composição em uma Coluna de
Destilação. Dissertação de Mestrado . São Paulo
Escola Politécnica da Universidade de São
Paulo.

3182