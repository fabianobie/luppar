Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

DESLAB UM PROGRAMA DE COMPUTACAO CIENTIFICA PARA ANALISE E
SINTESE DE SISTEMAS A EVENTOS DISCRETOS
Leonardo B. Clavijo, Joao C. Basilio, Lilian Kawakami Carvalho


Universidade Federal do Rio de Janeiro
COPPE - Programa de Engenharia Eletrica
21949-900, Rio de Janeiro, R.J., Brasil
Emails lbermeoc@ufrj.br, basilio@poli.ufrj.br, lilian.carvalho@poli.ufrj.br
Abstract In this paper we propose a scientific computing program called deslab, written in python, for the
development of algorithms for analysis and synthesis of discrete event system (DES) modeled as automata. The
main objective of deslab is to provide a unified tool that integrates automata, graph algorithms, and numerical
calculations. deslab also allows the definition of symbolic variables of type automaton and incorporates concise
instructions to manipulate, operate, analyze and visualize these variables, with a syntax and an abstraction level
close to the notation used in DES theory. Using the proposed set of instructions and basic control structures of
python language, deslab can be easily extended, giving rise to new functions and toolboxes, according to the
users needs.
Discrete event systems, automaton, scientific computation.

Keywords

Resumo Nesse artigo propomos um programa de computacao_cientfica, escrito na linguagem python, para
o desenvolvimento de algoritmos para analise e sntese de sistemas_a_eventos_discretos (SEDs) descritos por
automatos, o qual denominamos deslab. O objetivo central do deslab e fornecer uma ferramenta unificada
que integre automatos, algoritmos de grafos e calculo numerico. O deslab permite definir variaveis simbolicas
de tipo automato e incorpora instrucoes concisas para manipular, operar, analisar e visualizar essas variaveis,
usando uma sintaxe e nvel de abstracao proximos da notacao matematica usual utilizada na teoria de SEDs.
Com o o conjunto de instrucoes propostas e estruturas basicas de controle da linguagem python, o deslab pode
ser facilmente estendido, formando novas funcoes e pacotes, de acordo com as necessidades dos usuarios.
Palavras-chave

.

Introducao

Varios programas computacionais foram desenvolvidos pela comunidade de pesquisadores de controle de SEDs (veja Akesson et al. (2006) e referencias). Dentre esses programas, os mais importantes (levando-se em conta o fato de ainda
serem mantidos) sao o desuma, o ctct, o supremica, o ides e a biblioteca libfaudes. Apesar
do conceito de codigo fonte aberto ser aceito como
um dos paradigmas principais da computacao_cientfica moderna, somente o ides e a biblioteca
libfaudes sao de codigo fonte aberto os demais
programas sao de uso livre, mas de codigo fonte
fechado.
O desuma (Lafortune et al., 2006) e um programa desenvolvido na Universidade de Michigan.
Consiste na integracao da biblioteca umdes com
a interface grafica para visualizar SEDs chamada
giddes, desenvolvida na Universidade Mount Allison. O umdes e um conjunto de programas feitos
em c que processam arquivos de texto de entrada
e sada usando linhas de comando. Inclui uma
variedade de funcoes para fazer operacoes e manipulacoes em SEDs modelados por automatos, algumas operacoes de grafos, diagnose_de_falhas, verificacao, controle_supervisorio centralizado (com
observacao parcial e total) e modular. O umdes tem sido usado por mais de uma decada por
muitos pesquisadores, alcancando um alto grau de
maturidade e depuracao nos algoritmos. Contudo,

ISBN 978-85-8001-069-5

o desuma possui os seguintes problemas (i) a
entrada de sistemas com algum nvel de complexidade e ardua pelas limitacoes da interface giddes (ii) por ser de codigo fechado nao permite
a implementacao de novos codigos para testes de
algoritmos ja existentes ou que estejam sendo desenvolvidos.
O programa ctct foi desenvolvido pelo grupo
de Wonham (2012), na universidade de Toronto.
O programa inclui operacoes entre automatos,
algumas operacoes de grafos e, principalmente,
sntese de supervisores. O desenvolvimento desse
programa tem sido contnuo e atualmente incorpora bibliotecas para sistemas de grande porte baseadas em diagramas de decisao binarios (BDDs)
(Feng e Wonham, 2006). Apesar da maturidade
do programa, sua usabilidade e muito restrita uma
vez que e, essencialmente, um menu de comandos
que processam automatos descritos em arquivos
de texto. Um outro problema e a impossibilidade
de se usar etiquetas simbolicas para eventos e estados.
O supremica (Akesson et al., 2006) e um projeto que tem como alvos principais romper o fosso
entre a teoria-RW e as aplicacoes industriais e,
ao mesmo tempo, ser amigavel. O supremica
e capaz de sintetizar supervisores maximamente
permissivos sem bloqueio e inclui algoritmos que
exploram a modularidade do sistema tanto em verificacao quanto em sntese de controladores. Os
algoritmos usados pelo supremica representam

2531

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

o estado da arte em calculo para controle_supervisorio. Uma caracterstica importante do programa e a geracao automatica de codigo para diferentes linguagens (Java bytecode, Ansi C, ABB
control builder). A interface grafica do programa
fornece uma alta usabilidade para resolver problemas em controle_supervisorio, mas se apresenta
deficiente para pesquisa ou desenvolvimento de
novos algoritmos.
O ides (Rudie, 2012) e um programa desenvolvido na Universidade de Queens. O programa,
na sua versao mais atual, e resultado do estudo
realizado por Grigorov e Rudie (2007) que usaram metodos de ciencia do conhecimento para
responder as seguintes questoes que processos
mentais realizam os pesquisadores, ao resolverem
um problema de SEDs? e quais informacoes
sao mais significativas para serem disponibilizadas
aos usuarios?. Como resposta a essas perguntas,
desenvolveu-se o ides, cuja interface e muito bem
concebida, especialmente para a entrada grafica de
automatos. O programa inclui operacoes basicas
de automatos, sntese de supervisores com observacao total e parcial, e sntese de supervisores modulares. Uma caracterstica importante do
programa e a inclusao de uma metodologia modular, usando templates para abstrair SEDs complexos, e, dessa forma, capturar o aspecto modular de um problema de controle_supervisorio desde
a modelagem da planta. Contudo, ele nao esta
projetado para acrescentar novos algoritmos e um
algoritmo tem que ser executado manualmente.
A biblioteca libfaudes (Moor et al., 2008),
desenvolvida na Universidade de ErlangenNuremberg, e uma implementacao em c++, projetada para a analise e a sntese de SEDs. A
biblioteca inclui algoritmos para operacoes com
automatos e, especialmente, para controle_supervisorio centralizado, modular e hierarquico. Alem
dessas caractersticas, novos modulos para sntese
de controle com BDDs e diagnose foram acrescentados a biblioteca. Ao nvel do usuario, a biblioteca inteira esta disponibilizada para programar em c++. Para minimizar o esforco de programacao, foi desenvolvida uma interface para a
linguagem lua. Embora essa interface tenha tornado mais facil a execucao de calculos, o processo
de desenvolvimento de programas associados a novos algoritmos e ainda complexo.
A comunidade da teoria da computacao desenvolveu varios programas para manipulacao
simbolica de linguagens formais. As ferramentas de codigo aberto disponveis relacionadas com
o trabalho descrito neste artigo sao o grail, o
vaucanson e o fado. O grail (DCS  University of Ontario, 2012) e uma plataforma de computacao simbolica (desenvolvida em c++) para
automatos, expressoes regulares e outros objetos da teoria de linguagens formais (Raymond e
Wood, 1994). Usando esta biblioteca, Reiser et al.

ISBN 978-85-8001-069-5

(2006) desenvolveram uma versao para controle
supervisorio. A biblioteca vaucanson (EPITA
 Research and Development Laboratory, 2012)
(desenvolvida em c++) oferece um nvel de abstracao matematica proximo do encontrado na teoria de automatos e linguagens formais, e simultaneamente fornece uma elevada capacidade computacional. O fado (Almeida et al., 2009) (desenvolvido em python) e uma biblioteca para a
manipulacao simbolica de automatos e outros modelos de computacao, cuja maior finalidade e facilitar o desenvolvimento e teste de novos algoritmos
propostos, compartilhando, desta maneira, alguns
objetivos do trabalho descrito nesse artigo.
Nesse artigo propomos um programa de computacao_cientfica, escrito na linguagem python,
para o desenvolvimento de algoritmos para analise
e sntese de SEDs descritos por automatos, o qual
denominamos deslab. O objetivo central do deslab e fornecer uma ferramenta para facilitar o desenvolvimento de novos algoritmos propostos em
SEDs, usando uma sintaxe simples e proxima da
teoria matematica de SEDs. O programa segue a
filosofia de ferramentas bem sucedidas que apareceram em outras areas cientficas1 , as quais funcionan sobre linguagens de scripting. A proposta do
deslab e fornecer uma ferramenta unificada que
integra automatos, algoritmos de grafos e calculo
numerico. O objeto computacional base sobre o
qual se estrutura o deslab e o automato finito.
Sobre esse objeto agem um conjunto de instrucoes
concisas para manipular, operar, analisar e visualizar SEDs. Com o conjunto de instrucoes propostas e as estruturas basicas de controle da linguagem python, o deslab pode ser facilmente estendido, de maneira que novas bibliotecas e funcoes
podem ser criadas a medida que aparecam novos
resultados e necessidades dos usuarios.
Este artigo esta estruturado da seguinte
forma. A secao 2 apresenta as descricoes da arquitetura funcional do deslab e das classes que
compoem um objeto automato. Na secao 3 e introduzido o programa na perspectiva do usuario
como sao definidos os automatos, as operacoes
fundamentais includas no programa e a definicao
de novas funcoes. Na secao 4 sao apresentados
exemplos mais avancados do uso do programa no
desenvolvimento de toolboxes para controle_supervisorio e diagnose_de_falhas. Comentarios finais
sao apresentados na secao 5.
2

Estrutura do DESLAB

O deslab e um programa de computacao_cientfica de codigo fonte aberto, escrito na linguagem python (versao 2.7), para desenvolvimento
1 Por exemplo, as ferramentas desenvolvidas em matlab
e mathematica para controle, algebra simbolica, processamento_de_sinais, entre outras.

2532

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

de algoritmos, analise e sntese de SEDs descritos
por automatos.
No projeto inicial do deslab, os seguintes
quesitos foram considerados (i) necessidade de
interacao com programas de linguagens formais
como vaucanson (ii) integracao de bibliotecas
matematicas e de analise de grafos como numpy
e networkx (iii) visualizacao de automatos
usando latex, graphviz e outros programas de
visualizacao cientfica de redes_complexas (iv) capacidade de importacao e exportacao (em diversos
formatos) para graficos, grafos, automatos e dados
em geral.
A escolha do python para o desenvolvimento
do deslab foi feita com base nas seguintes caractersticas que essa linguagem possui (i) tipos abstratos de dados ser livre e poder ser executada em
diversos sistemas_operacionais (ii) potencia para
o desenvolvimento de aplicacoes cientficas (iii)
contnua tendencia de se tornar, de fato, a linguagem de scripting da computacao_cientfica (Perez
et al., 2011).
2.1

Estrutura de um automato no deslab

De uma maneira geral, as ferramentas especializadas de computacao_cientfica giram em torno de
objetos matematicos fundamentais dependentes
do contexto de estudo. Do ponto de vista da programacao orientada a objetos, a implementacao de
um objeto matematico e uma classe e as operacoes
que ele define sao os metodos da classe. Os componentes da classe sao as propriedades da classe.
O objeto computacional fundamental do deslab e o automato finito (determinstico ou nao
determinstico) definido pela sextupla
G  (X, , , , X0 , Xm ),

(1)

em que X denota o espaco_de_estados,  o conjunto de eventos,   X    2X e a funcao
parcial de transicao de estados,   X  2X e a
funcao dos eventos ativos, X0 e o conjunto de estados iniciais do sistema e Xm  X o conjunto
dos estados marcados.
O automato no deslab (Fig. 1) e implementado pela classe fsa, a qual e uma entidade complexa formada por varias classes. As principais
classes sao explicadas a seguir.
Classe Fsamath. Essa classe implementa
um automato nao determinstico (do qual o
automato determinstico e um caso particular)
possuindo as propriedades X, Sigma, delta,
Gamma, X0 and Xm que correspondem com cada
uma das componentes da tupla da expressao (1),
conforme mostrado na classe Fsamath da Figura 1. As propriedades X, Sigma, X0, Xm. sao
definidas como conjuntos (dados tipo set) dentro
do deslab e as propriedades delta e Gamma sao
funcoes implementadas utilizando estruturas de
dados eficientes chamadas dicionarios. Conforme

ISBN 978-85-8001-069-5

Automato G (instancia de fsa)
Fsamath
X

Sigma

X



delta


Sigcon 7 c

Gamma


X0

Xm

X0

Xm

Sigobs 7 o

Estrutura matematica de G

Graph

Graphic
2

3

2

b

1

4

5

Estrutura de transicoes

d, e

3

a, b, c

1

c

4

e

d

d

5

Estrutura grafica

Figura 1 Automato o objeto fundamental no
deslab, e suas classes.
sera visto mais adiante, essas funcoes podem ser
invocadas de forma similar a notacao matematica.
Essa classe tambem possui outras propriedades
matematicas tais como Sigcon e Sigobs que representam o conjunto de eventos controlaveis e o
conjunto de eventos observaveis, respectivamente.
Classe Graph. Alguns algoritmos importantes usados no analise de SEDspor exemplo, verificar a diagnosticabilidadesao eficientemente implementados como algoritmos de grafos. O deslab explora a perspectiva dual de
automato e grafo. Por essa razao, a estrutura de
transicoes de um automato no deslab esta definida como uma classe de tipo MultiDiGraph do
pacote networkx. Sobre essa classe e possvel
realizar todo tipo de operacoes de grafos. Por
exemplo, podem encontrar-se os componentes fortemente conexos, os autovalores da matriz de incidencia, os caminhos mais curtos, entre muitas
operacoes.
Classe Graphic. Dependendo do contexto de pesquisa, a representacao grafica dos
automatos varia por exemplo, em diagnose e
usual desenhar automatos com estados retangulares. Um outro ponto importante se refere
a representacao de transicoes nos automatos.
Para melhorar a visualizacao, quando houver
varias transicoes entre dois estados, essas serao
substitudas por uma unica transicao rotulada
por varios eventos no exemplo apresentado na
d,e
Figura 1 a transicao (2  3) do automato representado na classe Graphic, substitui as transicoes
d
e
(2  3) e (2  3). De forma similar, as
transicoes rotuladas por eventos nao observaveis,
nao controlaveis ou associados a perdas intermitentes de observacao, sao representadas com setas
especiais. Assim, por diversas razoes e necessario
que exista dentro da estrutura do automato uma
componente que especifique, de maneira flexvel,
a parte grafica e que, inclusive, possa evoluir de
acordo com os requisitos dos pesquisadores.

2533

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

clusive fornecendo compatibilidade com o formato
do automato do programa ides) e formatos de
texto plano. A estrutura do deslab e as facilidades da linguagem python no processamento de
arquivos, permitem acrescentar rapidamente novos formatos de conversao, caso seja necessario.
3
trabalho futuro

O deslab funciona por meio de comandos em
um shell interativo ou atraves de scripts de programacao. Os codigos apresentados nessa secao
ilustram a funcionalidade do deslab e, para facilitar seu acompanhamento, serao usadas as seguintes convencoes (i) um script e representado
como uma lista numerada e com fundo de cor 
(ii) os comandos executados no shell interativo
apresentam-se sem numeracao e com fundo de cor
. Nesse ultimo caso, um comando de entrada
do usuario segue ao smbolo >>>, enquanto o resultado desse comando e mostrado sem nenhum
smbolo.

pdf
ps
jpg,..

Figura 2 Arquitetura do deslab.
2.2

Arquitetura do deslab

A arquitetura funcional do deslab (Figura 2)
fornece, para o caso especial de SEDs descritos por automatos, capacidades similares a outros entornos de computacao_cientfica tais como
programacao, analise e calculo, visualizacao, simulacao e importacao e exportacao de arquivos.
A nvel de programacao, o usuario interage
usando comandos em um shell interativo (como
em matlab ou maple) ou atraves de scripts em
um entorno de python (por exemplo, spyder,
eric, DrPython, entre muitos outros). Uma vez
carregado o modulo deslab em python (o que e
feito escrevendo a linha from deslab import*),
o usuario pode, imediatamente, definir automatos
que agem como variaveis simples.
O calculo e a analise dos automatos sao feitos
utilizando algoritmos programados diretamente
em python e os calculos que envolvem grafos sao
feitos usando o pacote networkx. E possvel
gerar automaticamente o codigo em c++ para
usar o programa vaucanson como plataforma de
calculo, caso seja necessario utilizar computacao
de alto_desempenho.
Um dos alvos principais na fase de projeto
do deslab foi fornecer uma visualizacao de alta
qualidade que fosse capaz de interpretar rotulos
em codigo latex fornecidos pelo usuario. Para
consegui-lo, a visualizacao de automatos no programa e realizada da seguinte forma quando um
metodo grafico e invocado (draw ou animate),
um outro metodo da classe Graphic se encarrega
de gerar a descricao grafica do automato na linguagem dot para, assim, calcular o layout do
automato mediante o programa graphviz. Com
o resultado desse calculo, e gerado o codigo latex
necessario para renderizar notacao matematica
real e tambem uma sada vetorizada de alta qualidade grafica em formato pdf. Alguns dos tipos
de sada que podem ser especificados sao apresentacao em beamer, relatorio, grafica simples em
preto e branco e tabela.
Os automatos podem ser exportados em
varios formatos graficos (por exemplo, pdf, eps,
gif, png), em formatos descritivos como XML (in-

ISBN 978-85-8001-069-5

O DESLAB em acao

3.1

Definicao do automato

O exemplo a seguir ilustra a forma de definir um
tipo de variavel associada com um automato no
deslab.
Exemplo 1 Considere um automato G1 
(X, , , , X0 , Xm ) em que X  q1 , q2 , q3 ,  
1 , 1 , e, (q1 , 1 )  q2 , (q2 , 1 )  (q2 , e) 
q3 , (q2 , 1 )  q2 , (q3 , 1 )  q1 , X0  q1  e
Xm  q1 , q3 . O tipo de variavel automato e
definido usando as instrucoes mostradas na Listagem 1.
0
1
2
3
4
5
6
7
8
9
10
11

from deslab import*
syms(q1 q2 q3 a1 b1 e f)
table  (a1,alpha1),(b1,beta1),
(q1,q1),(q2,q2),(q3,q3)
 automaton definition
X  q1,q2,q3
Sigma  a1,b1,e
X0  q1
Xm  q1,q3
T (q1,b1,q2),(q2,b1,q3),(q2,e,q3),(q3,a1,q1),(q2,a1,q2)
G1  fsa(X,Sigma,T,X0,Xm,table,nameG1 -- example 1)
draw(G1,beamer)

Listagem 1 Definicao de um automato no deslab.
Na linha 1 da Listagem 1 definem-se os rotulos
de programacao e na 2 linha define-se uma tabela
que associa cada rotulo de programacao com a
correspondente componente grafica. Note que o
evento 1 na variavel table esta associado com
um par de rotulos da forma 1 7 (a1,alpha1).
A primeira componente e o rotulo de programacao
e contem uma string com um nome de variavel
valido que sera usado na interface textual interativa e na representacao interna da estrutura de dados. A segunda componente especifica, atraves de
codigo latex, o smbolo que sera renderizado na
sada grafica. Caso nao seja definida uma tabela

2534

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

de associacao, os rotulos de programacao serao
usados na interface textual e grafica.
Os conjuntos X,S,X0 e Xm sao definidos por
meio de listas. As transicoes entre estados sao
especificadas por uma lista das triplas que representam cada transicao. Essa notacao procura ser economica para o usuario e nao corresponde a representacao interna do automato no
deslab. A instrucao fsa constroi um objeto do
tipo automato, denotado pela variavel G1, cuja
representacao interna e proxima da formulada na
expressao (1).
O metodo draw, usado na ultima linha, gera
transparencias de Beamer semelhantes aquela
mostrada na Figura 3.
G1  example 1

q1
1

q2

1

1

1 , e

q3

LCALab. de Controle e Automacao ()

DESLab Software Package

April 20, 2012

11

Figura 3 Diagrama de transicao de estado de G1 ,
usando o metodo draw em modo apresentacao.
Dependendo do segundo argumento, pode
ainda gerar figuras simples (Fig.4), relatorios e arquivos de imagens.
As propriedades matematicas do automato
G1 sao acessveis usando a notacao na Tabela 1.
Smbolo

Sintaxe

Tipo de objeto

G1
G1
X
G1.X

G1.Sigma
(q1 , 1 ) G1.delta(q1,a1)
(q1 )
G1.Gamma(q1)
X0
G1.X0
Xm
G1.Xm
Tabela 1 Sintaxe para o acesso
matematicas do objeto fsa.

fsa
conjunto
conjunto
funcao
funcao
conjunto
conjunto
das propriedades

Por exemplo, a obtencao dos conjuntos X e 
para o automato do exemplo 1 e feita digitando-se
os seguintes comandos
>>> G1.X
set(q3, q2, q1)
>>>G1.Sigma
set(b1, e, a1)

De forma similar, podemos calcular as funcoes
(q2 ), (q2 , 1 ) e   (q1 , 1 e1 )2 , com as seguintes
instrucoes
2 

e a funcao de transicao estendida para sequencias.

ISBN 978-85-8001-069-5

>>> G1.Gamma(q2)
set(a1, e, b1)
>>> G1.delta(q1,b1)
q2
>>> G1.delta(q1,b1,e,a1)
q1

E possvel ainda realizar operacoes de conjuntos a partir das componentes matematicas do
automato, usando a sintaxe de python. Por
exemplo, C  (q1 )  (q2 ) e escrito
>>> C  G1.Gamma(q1)  G1.Gamma(q2)
set(b1)

3.2

Operacoes no deslab

Apos termos definido variaveis de tipo automato,
o passo seguinte e manipular essas variaveis por
meio de operacoes definidas para esses elementos.
A tabela 2 mostra as operacoes de automatos disponveis e a sintaxe usada para executa-las. Essas operacoes disponveis sao de tipo matematico
(tabela 2(a)), de comparacao de linguagens e
automatos (tabela 2(b)), de manipulacao da estrutura do automato (tabela 2(c)), e de entrada-sada
(tabela 2(d)). O exemplo a seguir mostra que e
possvel definir novos automatos como resultado
de operacoes entre automatos previamente definidos.
Exemplo 2 Considere um automato G2 
(X, , 2 , 2 , X0 , Xm,2 ) em que X,  e X0 , sao
definidas como no exemplo 1 e Xm,2  q2 , q3 ,
2 (q1 , 1 )  q2 , 2 (q2 , e)  q3 , 2 (q3 , a1 )  q3 .
Usando o deslab o automato H  G1 k G2 e
obtido digitando-se as seguintes instrucoes
>>>
>>>
>>>
>>>
>>>

Xm2  q2,q3
T2  (q1,b1,q2),(q2,e,q3),(q3,a1,q3)
G2  fsa(X,S,T2,X0,Xm2)
H  G1G2
draw (H, figure)

A ultima linha chama o metodo draw para
gerar a Figura 4 que representa o diagrama de
transicao de estados do automato H obtido.
(q1 , q1 )

1

(q2 , q2 )

e

(q3 , q3 )

1

(q1 , q3 )

Figura 4 Diagrama de transicao de estados de
H  G1 k G2 , usando draw em modo figura.
3.3

Programacao de funcoes usando o python

Assim como o deslab, os outros programas para
manipulacao de automatos listados na introducao
tambem permitem definir automatos e operacoes
entre eles. Contudo, a estrutura do deslab permite ir mais alem, isto e, desenvolver rapidamente
novas funcoes usando os seguintes recursos da linguagem python
 Tipos de dados como listas, enuplas, conjuntos, multiconjuntos e rotinas para manipular
strings.

2535

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.
(a) Operacoes matematicas sobre automatos
Definicao

Notacao em SEDs

Sintaxe

Composicao paralela
Producto
Uniao
Concatenacao
Trim
Parte Acessvel
Parte CoAcessvel
Fechado em prefixo
Projecao inversa
Dif. de linguagens
Complementar
Observador
Projecao
Fecho de Kleene
Completude a 
Automato com o mnimo
numero de estados

G1 k G2
G1  G2
Lm (G1 )  Lm (G2 )
Lm (G1 )Lm (G2 )
T rim(G1 )
Ac(G1 )
CoAc(G1 )
Lm (G1 )
P  1 L(G1 )
Lm (G1 )  Lm (G2 )
Lm (G1 )C
Obs(G1 )
P (L(G))

Lm (G1 ) , 
L(G1 )  
Lm (Gmin )  Lm (G1 )

G1G2
G1G2
G1+G2
G1*G2
trim(G1)
ac(G1)
coac(G1)
pclosure(G1)
invproj(G1)
G1-G2
G1
obs(G1)
proj(G1)
kleeneclos(arg)
complete(G1)
statemin(G1)

(b) Funcoes de comparacao de linguagens e automatos.
Definicao

Notacao em SEDs

Sintaxe

Inclusao
Ling. vazia
Equivalencia de aut.
Teste de completude
Isomorfismo entre aut.

Lm (G1 )  Lm (G2 )?
Lm (G1 )  ?
G1  G2 ?
L(G1 )   ?


G1<G2,G2>G1
islangempty(G1)
G1G2
islangcomplete(G1)
areisomorph(G1,G2)

(c) Funcoes de manipulacao da estrutura de automato.
Acao

Sintaxe
a

Acrescentar x  y em G1
a
Apagar x  y em G1
Acrescentar estado x em G1
Apagar estado x em G1
Acrescentar evento e em G1
Apagar evento a em G1
Renomear eventos de E 0  E em G1
Renomear estados de X 0  X em G1
Redefinir Xm , con , obs
e propriedades graficas

G1.addtransition(x,a,y)
G1.deltransition(x,a,y)
G1.addstate(x)
G1.delstate(x)
G1.addevent(e)
G1.delevent(a)
G1.renevents(E,mapping)
G1.renstates(E,mapping)
G1.set(propertyvalue)

1
2
3
4
5
6
7
8

def islive(G)
 code block is defined by indentation
live  True
for x in G.X
  xi  X,
if G.Gamma(x)  set() if  xi s.t. (xi )  ,
live  False
 then L(G) is not live
break  we do not need more counter-examples
return live

Listagem 2 Funcao implementada no deslab
para verificar se uma linguagem L(G) e viva.
Note que funcao islive(G) na Listagem 2
e definida atraves da instrucao def seguida pelo
nome da funcao (islive) e o argumento de entrada (G). Note que o recuo de linha define os
blocos de codigo (veja as linhas 2,5 e 6). A funcao
finaliza com a instrucao return que especifica que
a variavel booleana live (que contem o resultado
do teste) e a variavel de sada. Observe que o ciclo
for da linha 4 esta definido de forma semelhante
a expressao matematica x  X.
Para determinar se as linguagens geradas pelos automatos G1 e H dos exemplos 1 e 2 sao vivas,
podemos invocar a nova funcao islive da forma
seguinte
>>> islive(G1)
True
>>> islive(H)
False

3.4

(d) Funcoes de entrada sada
Acao

Sintaxe

Diagrama de transicao do automato G1
Animacao da sequencia de entrada s
Salvar automato G1
Carregar automato G1

draw(G1,mode)
animate(G1,s)
save(G1,format)
load(G1,format)

Tabela 2 Instrucoes fundamentais do programa
deslab
 Operadores logico-matematicos e estruturas de
controle_de_fluxo basicas de todas as linguagens de programacao, tais como while,
if-elif-else, for, break, continue.
 A sintaxe simples, parecida com pseudocodigo,
em que os blocos de codigo sao definidos pelo
recuo de linha. Um aspecto bem importante da
sintaxe do python, que facilita escrever algoritmos da teoria de SEDs, e a capacidade para
definir dados e ciclos de controle por meio de
propriedades descritivas.
No exemplo a seguir, combinaremos os recursos do
python com as instrucoes fornecidas pelo deslab, para escrever uma nova funcao.
Exemplo 3 Considere o automato determinstico G  (X, , , , X0 , Xm ). A linguagem
gerada por G, denotada por L(G), e viva se

ISBN 978-85-8001-069-5

(x) 6 , para todo x  X. O codigo de
python que verifica se uma linguagem gerada
por um automato e ou nao viva e apresentado na
Listagem 2

Algoritmos de grafos usando o networkx

Uma outra capacidade do deslab e a exploracao
e a analise de grafos e a disponibilidade de algoritmos combinatorios. Essa capacidade e fornecida
pelo pacote networkx (Hagberg et al., 2012).
Uma vez que a estrutura de transicoes de um
objeto automato no deslab esta construda
sobre o networkx, toda a potencia de calculo
sobre grafos desse pacote esta disponvel para o
usuario. A tabela 3 apresenta somente algumas
das funcoes do networkx que foram acrescentadas ao deslab.
Operacao em g

Sintaxe

Acessar o grafo g do automato G
Componentes fortemente conexos
Estados com auto lacos
Grafo condensado
Ciclos simples
Busca em profundidade
Matriz de adjacencia
Caminho mais curto
pelo algoritmo de Bellman-Ford

g  G.Graph
strconncomps(g)
selfloopnodes(g)
condensation(g)
simplecycles(g)
dfstree(g,source)
adjmatrix(g)
bellmanford(g,source)

Tabela 3 Alguns dos algoritmos de grafos fornecidos atraves de networkx.
Com os novos recursos fornecidos pelo
networkx , e possivel obter os ciclos do
automato denotado pela variavel G1, do exemplo 1. Para isso, usamos a estrutura de grafo de
G1, acessvel atraves do campo G1.Graph.

2536

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.
>>> cycles  simplecycles(G1.Graph)
q3, q1, q2, q3, q2, q2

A linha de sada apresenta os dois ciclos do
automato G1 , conforme esperado.

1
2
3
4
5
6
7

4

Criacao de toolboxes

8
9
10

Nessa secao apresentamos a possibilidade de desenvolver, com relativa facilidade e curva de
aprendizagem rapida, novas toolboxes para SEDs
atraves do deslab . Foi com essa intencao que
a estrutura e a sintaxe desse pacote foram planejadas desde sua concepcao inicial. Os exemplos
a seguir ilustram o potencial desse pacote no desenvolvimento de novos algoritmos para SEDs e,
por conseguinte, no desenvolvimento de novos toolboxes. A seguir apresentamos dois exemplos que
ilustram a implementacao de funcoes com base em
algoritmos existentes.
Exemplo 4 Considere os automatos G e H, tais
que K  Lm (H), K  L(H) e L(H)  L(G),
em que Lm (H), L(H) e L(G) representam as
linguagens marcada e gerada por H, e a linguagem gerada por G, respectivamente. A linguagem
K  L(G) e dita controlavel em relacao de
L(G) e uc (Cassandras e Lafortune, 2008), se
Kuc  L(G)  K, em que uc e o conjunto
de eventos nao controlaveis. A linguagem controlavel suprema K C pode ser encontrada usando
o algoritmo a seguir.
Algoritmo 1 (Cassandras e Lafortune, 2008)
 Passo 1 Construa o automato H0  H  G 
(Y0 , , 0 , 0 , (y0 , x0 ), Y0,m ). Defina k  0.
 Passo 2 Apague os estados (y, x)  Yk que violam a restricao no conjunto de eventos ativos
0 (y, x)  (x)  uc , e suas transicoes.
 Passo 3 Faca k  k + 1 e calcule
Hk  trim(Hk1 )  (Yk , , k , k , (y0 , x0 ), Yk,m ).

 Passo 4 Repita os passos (2) e (3) ate obter
um ponto_fixo (Hk  Hk1 ) ou o automato que
representa a linguagem vazia.
A implementacao do Algoritmo 1 e a funcao
supcontrollable(H,G) mostrada na listagem 3.
O passo 2 do algoritmo e executado no ciclo
for(linha 9). Os passos 3 e 4 sao executados no
ciclo while (linha 6). Finalmente, ao sair do ciclo while a linguagem K C ja foi encontrada.
Exemplo 5 Nesse exemplo sera implementado
um algoritmo de verificacao em tempo polinomial
da propriedade de diagnosticabilidade de um SED
considerando uma possvel falha. O algoritmo
utilizado foi proposto em Moreira et al. (2011).
Considere um automato determinstico G que
modela um SED e suponha que o conjunto  seja
 uo em que o e
particionado da forma   o 
uo sao os eventos observaveis e nao observaveis,

ISBN 978-85-8001-069-5

11
12
13
14
15
16

def supcontrollable(H,G)
Sigmauc  G.Sigma - G.Sigcon  obtaining uc
Hlast  fsa()
  Step 1
Hk  H  G
while (Hk <> Hlast)  (Hk  fsa())    Step 4
Hlast  Hk
  Step 2
for (y,x) in Hk.X
Gxactiveuc  G.Gamma(x)  Sigmauc
if not (H0.Gamma((y,x)) > Gxactiveuc) 
Hk  Hk.deletestate((y,x))
  Step 3
Hk  trim(Hk)
 End of Step 4, we reach a fixed point or a fsa()
return Hk

Listagem 3 Implementacao do Algoritmo 1 no
deslab.
respectivamente. Seja f  uo o evento de falha.
Algoritmo 2 (Moreira et al., 2011)
 Passo 1 A partir do automato G construa o
automato de nao falha GN da forma seguinte
 Passo 1.1 Obtenha o automato GN 1 apagando as transicoes de G rotuladas pelo
evento f .
 Passo 1.2 Obtenha o automato de nao falha, GN  Ac(GN 1 ). Note que GN 
(XN , N , N , N , xo,N ) com N    f .
 Passo 2 Calcule o automato de falha do sistema GY , da forma seguinte
 Passo 2.1 Defina Al  (Xl , f , l , xo,l ), em
que Xl  N, Y , f  f , l (N, f ) 
Y , l (Y, f )  Y  e xo,l  N 
 Passo 2.2 Calcule Gl  G k Al e marque todos os estados cuja segunda componente seja
Y.
 Passo 2.3 Obtenha o automato de falha
GY  CoAc(Gl ).
 Passo 3Renomeie os eventos nao observaveis
do automato GN de acordo com a funcao R 
(, R )    uo .
 Passo 4 Calcule o automato verificador GV 
GN k GY  (XV , R  , fV , V , x0,V ). Marque todos os estados da forma (xN , (xY , Y )).
 Passo 5 Verifique a existencia de um componente fortemente conexo (CF C) C nao trivial
em GV satisfazendo a seguinte condicao
xV , (xV  Xm,V  C)  ((xV )   6 ).
Se a resposta e sim, entao a linguagem L(G)
nao e diagnosticavel, caso contrario e diagnosticavel.
A implementacao do Algoritmo 2 e mostrada
na Listagem 4.
No passo 2.1, usa-se a
funcao labelfailaut para construir o automato
Al 3 . No passo 5 (linhas 24,25), usam-se as
funcoes selfloopnodes e strconncomps do pacote networkx para encontrar os CFC nao triviais. O contraexemplo da diagnosticabilidade e
3 Esse automato usa-se rotinariamente em diagnose de
falhas e por essa razao existe uma funcao pre-definida para
constru-lo, como parte da toolbox de diagnose.

2537

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

procurado no ciclo for da linha 29 e, caso seja
encontrado, o algoritmo retorna False.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34

def verifydiagnosability(G,sigmaf)
Sigmauo  G.Sigma - G.Sigobs
 Step 1.1
GN1  G.delevent(sigmaf)
 Step 1.2
GN  ac(GN1)
 Step 2.1
Al  labelfailaut(sigmaf)
 Step 2.2
Gl  GAl
Xml  (x,l) for (x,l) in Gl.X if lY
Gl  Gl.set(XmXml)
 Step 2.3
GY  coac(Gl)
 Step 3
R  (event,event+R) for event in Sigmauo
GN  renevents(GN,R)
 Step 4
GV  GNGY
XmV  (xN,(xY,l)) for (xN,(xY,l)) in GV.X if lY
GV  GV.set(XmXmV)
 Step 5
 We need to find the non trivial SCCs
SCC  strconncomps(GV.Graph)
C1  selfloopnodes(GV.Graph)
SCCNT  C for C in SCC if (len(C)>1)  (C in C1)
 we are searching for a counter-example
diagnosable  True
for C in SCCNT
for xV in (set(C)  GV.Xm)
if (GV.gamma(xV)  G.Sigma) <> set()
diagnosable  False
break
return diagnosable

Listagem 4 Implementacao no deslab do Algoritmo 2.
5

Conclusoes

Neste artigo foi apresentado o programa deslab.
As maiores contribuicoes que esse programa oferece sao (i) uma estrutura de automato que define variaveis interativas vivas (ii) uma sintaxe
simples e expressiva que permite escrever algoritmos complexos de SEDs com poucas linhas de
codigo (iii) integracao unificada de automatos,
grafos e calculo numerico (iv) visualizacao de alta
qualidade integrada com o latex.
Agradecimentos
Os autores agradecem ao CNPq pelo apoio financeiro.
Referencias
Akesson, K., Fabian, M., Flordal, H. e Malik, R.
(2006). Supremica - a tool for verification and
synthesis of discrete event systems, Proceedings
of the 8th International Workshop on Discrete
Event Systems, Ann Arbor, MI, pp. 384385.
Almeida, A., Almeida, M., Reis, R., Alves, J. e Moreira, N. (2009). fado and guitar Tools for Automata Manipulation and Visualization, CIAA
2009 Fourteenth International Conference on
Implementation and Application of Automata,
Sydney, Australia, pp. 6574.

DCS  University of Ontario (2012). The Grail+
Project, Website.
httpwww.csd.uwo.ca
Researchgrail. Visitado em 03032012.
EPITA  Research and Development Laboratory
(2012).
The Vaucanson Project, Website.
httpwww.lrde.epita.frcgi-bin
twikiviewVaucansonWebHome. Visitado em
01032012.
Feng, L. e Wonham, W. M. (2006). tct A computation tool for supervisory control systems, Proceedings of the 8th International Workshop on Discrete Event Systems, Ann Arbor, MI, pp. 388
389.
Grigorov, L. e Rudie, K. (2007). Problem solving in
control of discrete-event systems, Proceedings of
the European Control Conference, Kos, Greece,
pp. 55005507.
Hagberg, A. A., Schult, D. A. e Swart, P. J. (2012).
Networkx, Website. httpnetworkx.lanl.
govindex.html. Visitado em 30032012.
Lafortune, S., Ricker, L. e Genc, S. (2006). desuma A
Tool Integrating giddes and umdes, Proceedings
of the 8th International Workshop on Discrete
Event Systems, Ann Arbor, MI, pp. 392393.
Moor, T., Schmidt, K. e Perk, S. (2008). libFAUDES
 An Open Source c++ Library for Discrete
Event Systems, Proceedings of the 8th International Workshop on Discrete Event Systems, Goteborg, Sweden, pp. 125130.
Moreira, M. V., Jesus, T. C. e Basilio, J. C. (2011).
Polynomial time verification of decentralized diagnosability of discrete event systems, IEEE
Transactions on Automatic Control 56(7) 1679
1684.
Perez, F., Granger, B. E. e Hunter, J. D. (2011).
Python An ecosystem for scientific computing,
Computing in Science Engineering 13(2) 1321.
Raymond, D. e Wood, D. (1994). A c++ library for
automata and expressions, Journal of Symbolic
Computation 17 341350.
Reiser, C., da Cunha, A. E. C. e Cury, J. E. R. (2006).
The environment grail for supervisory control
of discrete event systems, Proceedings of the 8th
International Workshop on Discrete Event Systems, pp. 390  391.
Rudie, K. (2012). K. Rudie Home Page, Website.
httpwww.ece.queensu.caPeople
K-Rudie. Visitado em 01012012.
Wonham, W. M. (2012). W. M. Wonham Home
Page, Website. httpwww.control.utoronto.
caDES. Visitado em 01012012.

Cassandras, C. G. e Lafortune, S. (2008). Introduction
to Discrete Event Systems, Springer.

ISBN 978-85-8001-069-5

2538