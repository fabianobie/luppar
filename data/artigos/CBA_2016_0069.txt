XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

USING THE TEACHING-LEARNING BASED OPTIMIZATION ALGORITHM IN
TROUBLESHOOTING OPTIMIZATION PROBLEMS
Leonardo Ramos Rodrigues, Takashi Yoneyama, Roberto Kawakami Harrop Galvao


Electronics Division
Institute of Aeronautics and Space - IAE
Sao Jose dos Campos, Sao Paulo, Brazil


Electronic Engineering Department
Aeronautics Institute of Technology - ITA
Sao Jose dos Campos, Sao Paulo, Brazil
Emails leonardolrr@iae.cta.br, takashi@ita.br, kawakami@ita.br
Abstract A troubleshooting model describes the failure modes, the repair actions and the diagnostic questions available to fix a failed component or system. A troubleshooting strategy is a sequence of repair actions
and diagnostic questions that must be carried out in order to fix the failed system. In this paper, an optimization method to find a troubleshooting strategy that minimizes the expected cost of repair (ECR) is presented.
Each action and question has an associated cost. Cluster costs are used to model the common preparation work
shared by subsets of actions and questions. The proposed method uses the Teaching-Learning Based Optimization (TLBO) algorithm, which is a novel population oriented meta-heuristic that simulates the teaching-learning
process observed in a classroom. Numerical experiments are carried out in order to illustrate the application of
the proposed method in three different troubleshooting models with different complexity levels.
Keywords

TLBO, Combinatorial Optimization, Troubleshooting.

Resumo Um modelo de solucao de problemas descreve os modos de falha, as acoes de reparo e as questoes de
diagnostico disponveis para consertar o componente ou sistema falhado. Uma estrategia de solucao de problemas
e uma sequencia de acoes de reparo e questoes de diagnostico que devem ser realizadas para consertar o sistema
falhado. Neste artigo, um metodo de otimizacao para encontrar uma estrategia de solucao de problemas que
minimize o custo esperado de reparo (CER) e apresentado. Cada acao de reparo e questao de diagnostico
possui um custo associado. Custos de grupo sao usados para modelar as tarefas de preparacao que algumas
acoes de reparo e questoes de diagnostico tem em comum. O metodo proposto usa o algoritmo de Otimizacao
Baseada em Ensino-Aprendizagem (OBEP), que se trata de uma meta-heurstica baseada em populacao que
simula o processo de ensino-aprendizagem observado em salas de aula. Experimentos numericos sao realizados
para ilustrar a aplicacao do metodo proposto em tres modelos que possuem diferentes nveis de complexidade.
Palavras-chave

.

Introduction

The problem of identifying the faulty component in a complex system has become a topic
of great interest for academy researchers and industry practitioners due to its potential benefits
(Ln, 2014). In order to identify the root cause of
a complex system failure, a maintenance investigation is commonly required. Troubleshooting is
the process responsible for identifying and repairing the faulty component.
A troubleshooting problem can be solved in
polynomial time under quite restrictive assumptions (Ln, 2014). When these assumptions are not
valid, the problem becomes NP-hard (Vomlelova,
2003). In these situations, an alternative to find
good solutions in an acceptable time is to use
meta-heuristic algorithms. Many papers using different algorithms to solve troubleshooting problems can be found in the literature (Langseth and
Jensen, 2001), (Jensen et al., 2001), (Vomlelova
and Vomlel, 2003), (Ottosen, 2011), (Vianna
et al., 2016).
In this paper, an optimization method to solve
a troubleshooting problem in order to minimize

ISSN 2525-8311

the expected cost of repair (ECR) is presented.
The proposed method uses the Teaching-Learning
Based Optimization (TLBO) algorithm, which is a
novel population oriented meta-heuristic that simulates the teaching-learning process observed in a
classroom (Rao et al., 2011).
Although many papers have been recently
published on applications of the TLBO algorithm, there are only a few reports concerning the use of TLBO in combinatorial problems (Baykasoglu et al., 2014), (Dokeroglu, 2015),
(Patil, 2016). Therefore, the proposed application
to troubleshooting may also be regarded as a contribution to the TBLO literature.
The remaining sections of this paper are organized as follows. Section 2 describes the troubleshooting problem under consideration. Section
3 presents the basic principles of the TLBO algorithm. Section 4 presents the proposed method to
solve the troubleshooting problem. Section 5 illustrates the application of the proposed method in
three different troubleshooting models. Concluding remarks are presented in section 6.

213

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

2

Problem Description

In the troubleshooting optimization problem considered in this paper, a probabilistic troubleshooting model of a component or system is given.
The troubleshooting model describes the failure
modes, the repair actions and the diagnostic questions available to fix the component or system.
The costs associated to each repair action and diagnostic question are also provided.
Some actions and questions may share a common initialization or preparation work. For instance, it may be necessary to disassemble part of
the system in order to perform some of the actions
and questions. In order to model these situations,
the troubleshooting model also contains clusters,
which are subsets of actions and questions of the
model. To perform an action or question belonging to a cluster, the cost of the cluster is incurred.
Once the cost of the cluster is paid, any actions
and questions belonging to that cluster can be performed (Langseth and Jensen, 2001).
Assuming that the system is failed, the problem consists in finding a sequence of actions and
questions to fix the faulty system in order to minimize the expected cost of repair (ECR). Each
sequence of actions and questions carried out to
solve a troubleshooting problem is called a troubleshooting strategy, which will be denoted by S.
Figure 1 shows an example of a troubleshooting
model containing all the basic elements Failure
modes (F1 , F2 , F3 and F4 ), repair actions (A1 ,
A2 and A3 ), a diagnostic question (Q1 ), the associated costs (C(A1 ), C(Q1 ), C(A2 ) and C(A3 ))
and a cluster cost (C(K1 )).
Failure modes are the ways in which the system might fail. In this paper, it is assumed that
there is one and only one failure mode present
in the system. Actions have two possible outcomes either the system is fixed after the action
has been performed, or it remains failed. Questions do not fix the system, but isolate a subset
of failure modes. Some failure modes may require
more than one action to be performed in order to
fix the system.
For instance, consider the troubleshooting
model shown in Figure 1. In order to fix a failure
caused by failure mode F1 , it is sufficient to perform action A1 . However, in order to fix a failure

Figure 1 Example of a troubleshooting model

ISSN 2525-8311

caused by failure mode F4 , both actions A2 and
A3 must be performed. The execution of question
Q1 makes it possible to know whether the failure
mode which caused the system failure belongs to
F1 ,F2  or not. When question Q1 or action A2
are performed, the cost of cluster K1 , denoted by
C(K1 ), is incurred.
A troubleshooting strategy S is evaluated by
its Expected Cost of Repair (ECR), which is defined according to Equation (1)
ECR(S) 

Nf
X

pi  Ci (S)

(1)

i1

where Nf is the number of failure modes, pi is
the probability associated with failure mode i and
Ci (S) is the cost to fix a failure caused by failure
mode Fi using troubleshooting strategy S, calculated according to Equation (2)
Ci (S)



Na
X

C(Aj )  j (S) +

j1

+

Nq
X

C(Qv )  v (S) +

(2)

v1

+

Nk
X

C(Kz )  z (S)

z1

where Na , Nq and Nk are the number of actions, questions and clusters in the troubleshooting model, respectively. The terms C(Aj ), with
j  1, . . . Na , C(Qv ), with v  1, . . . Nq  and
C(Kz ), with z  1, . . . Nk  are costs associated
to each action, question and cluster, respectively.
Moreover, j (S), v (S) and z (S) are binary variables that assume value 1 if the associated action,
question or cluster cost is incurred and zero otherwise.
For instance, consider that the system described by the troubleshooting model presented
in Figure 1 is failed due to failure mode F4 .
Also, consider that troubleshooting strategy S 
A2 , Q1 , A1 , A3  is used to fix the system. In this
example, the first step is to perform action A2 .
Costs C(A2 ) and C(K1 ) are then incurred. The
system is still failed, so the next step is to perform question Q1 . Cost C(Q1 ) is incurred. Since
cluster K1 was already activated by action A2 , no
additional cost is incurred in this step. The execution of question Q1 provides the information
that the failure mode which caused the system
failure belongs to F3 ,F4 . Following the sequence
of troubleshooting strategy S, the next step would
be to perform action A1 . However, action A1 can
fix a failure caused by failure mode F1 only, and
it is known that the failure mode which caused
the system failure belongs to F3 ,F4 . For this
reason, action A1 is skipped and the next step
becomes to perform action A3 , which fixes the

214

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

system, with cost C(A3 ). The total cost associated to this troubleshooting strategy to fix a failure caused by failure mode F4 is then given by
C4 (S)  C(A2 ) + C(K1 ) + C(Q1 ) + C(A3 ).
3

Teaching-Learning Based Optimization
Algorithm

The TLBO algorithm has been recently proposed
in the literature as a novel population oriented
meta-heuristic based on the teaching-learning process observed in a classroom (Rao et al., 2011).
This algorithm simulates the influence of a teacher
on the output of a group of students in a class.
The TLBO algorithm is divided into two main
parts the Teacher Phase and the Student Phase,
which is also known as the Learner Phase (Rao
and Patel, 2013). During the Teacher Phase,
students learn from the teacher, while in the
Learner Phase students learn through the interaction among themselves.
There is a solution X associated with each
student, which corresponds to a possible solution
to the optimization problem under consideration.
Also, there is a result f (X) associated with each
solution (or student), which can be obtained by
evaluating the solution X using the objective function f . In the troubleshooting problem considered
in this paper, a solution X corresponds to a troubleshooting strategy S and the result f (X) corresponds to ECR(S).
The student with the best solution in the population is considered as the Teacher. The steps for
implementing the TLBO algorithm are presented
in Figure 2 (Rao et al., 2011). The Teacher Phase
and the Student Phase are described in the next
sections.
3.1

Teacher Phase

In this phase, the algorithm simulates the learning
of the students from the teacher (best solution).
During this phase, the teacher makes an effort to
increase the mean result of the class.
Consider a group of n students. Let Mi be
the mean solution of the students and Ti be the
teacher at iteration i. The teacher Ti will make
an effort to move Mi to its own level. Knowledge
is gained based on the quality of the teacher and
the quality of students in the class. The difference Di between the solution of the teacher, XT i ,
and the mean solution of the students, Mi , can be
expressed according to Equation (3)
Di  ri (XT i  TF  Mi )

(3)

where ri is a random number in the range 0, 1 for
iteration i and TF is a teaching factor for iteration
i, which is randomly set to either 1 or 2 according
to Equation (4)
TF  round(1 + rand(0,1))

ISSN 2525-8311

(4)

Figure 2 TLBO algorithm
Based on the difference Di , the existing solution of student k in iteration i, Xki , with k 
1,2, . . . ,n, is updated in the teacher phase according to Equation (5)
?
Xki
 Xki + Di

(5)

?
where Xki
is the updated value of Xki .
?
?
If f (Xki
) is better than f (Xki ), Xki
is ac?
cepted and replaces Xki . Otherwise, Xki is discarded.

3.2

Student Phase

In this phase, the algorithm simulates the learning of the students through interaction with one
another. During this phase, students gain knowledge by discussing with other students who have
more knowledge (Rao and Patel, 2013).
Consider a pair of students y and z. Let Xyi
and Xzi be the solutions of students y and z at
iteration i, respectively. If f (Xyi ) is better than
f (Xzi ), the solution of student z is updated ac?
cording to Equation (6). Then, Xzi
will replace
?
Xzi if f (Xzi
) is better than f (Xzi ).
Similarly, if f (Xzi ) is better than f (Xyi ),
the solution of student y is updated according to
?
?
Equation (7). Then, Xyi
will replace Xyi if f (Xyi
)
is better than f (Xyi ).
?
Xzi
 Xzi + ri (Xyi  Xzi )
?
Xyi  Xyi + ri (Xzi  Xyi )

(6)
(7)

215

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

At the end of each iteration, the stop criteria are checked. Different stop criteria may be
adopted. Some of the most commonly adopted
stop criteria are the maximum number of iterations, the maximum number of successive iterations without any improvement and the maximum
simulation time.
In this paper, the the maximum number of
iterations is adopted as the stop criterion, as
in other applications of TLBO in combinatorial
problems (Baykasoglu et al., 2014), (Patil, 2016).

4

Proposed Optimization Method

In this section, the representation used to express the solution of each student is presented.
The solution representation adopted in this paper is based on the priority vectors concept used
by Baykasoglu et al. (2014).
Let Xk  xk (1),xk (2), . . . ,xk (Na +Nq ) be a
real-number vector that represents the solution of
student k, where xk (j) denotes the priority value
of the j-th activity (action or question) in the solution of student k. Each priority value xk is initialized using Equation (8)
xk  LB + rand0,1(U B  LB)

(8)

where rand0,1 is a random value uniformly distributed between zero and one, LB is the lower
bound for the initial value of xk and U B is the
upper bound for the initial value of xk .
In order to evaluate the solution, the priority
vector must be converted into a troubleshooting
strategy S. This conversion is made by sorting
the actions and questions in decreasing order of
the priority values in vector Xk . Once the troubleshooting strategy S is obtained, the result of
the student, ECR(S), is calculated using Equation (1).
To illustrate the conversion of a priority vector to a troubleshooting strategy, consider a troubleshooting model containing 4 actions and 2
questions. The priority vector of student k, Xk ,
is presented in Table 1. The largest value of Xk
(8.40) is associated to question Q1 , which will be
the first activity to be performed in the solution
of student k. Following a decreasing order of priority, the troubleshooting strategy S of student k
will be S  Q1 , A1 , Q2 , A4 , A3 , A2 .
Table 1 Conversion of a priority vector to a troubleshooting strategy
j
AQ
xk (j)

1
A1
5.47

ISSN 2525-8311

2
A2
1.38

3
A3
1.49

4
A4
2.57

5
Q1
8.40

6
Q2
3.54

5

Numerical Experiments

This section presents the results obtained in numerical experiments carried out to illustrate the
application of the proposed method in three different troubleshooting models. Table 2 summarizes
the main characteristics of each model used in the
experiments, which are similar to those employed
in a previous work involving the use of a simulated_annealing strategy for optimization (Vianna
et al., 2016). The topology of Models 1, 2 and 3
are shown in Figures 3, 4 and 5, respectively.
Table 2 Main characteristics of troubleshooting
models
Failures
Actions
Questions
Clusters

Model 1
6
5
2
2

Model 2
10
10
4
4

Model 3
15
16
6
6

Table 3 presents the probability associated
with each failure mode in each troubleshooting
model. Table 4 shows the costs associated with
each action, question and cluster.
5.1

Parameter Settings

The performance of meta-heuristic algorithms is
highly dependent on parameter values. For the
TLBO algorithm, the parameters to be defined
are the population size, P S, and maximum number of generations, GN . In the absence of a
mathematical model to determine the optimal values for the algorithm parameters, they are commonly determined empirically. In this paper, a
design of experiments (DOE) approach was used
to find out good settings for the parameters. The
DOE is an investigative method used to evaluate the effect of multiple factors upon a process
(Montgomery, 2005).
Troubleshooting model 2 was used in the DOE
approach because it has an intermediate complexity level. Five different possible values were considered for GN  100, 200, 300, 400 and 500. Four
different values were considered for P S 15, 30, 45
and 60. A full factorial experimental layout was
used. For each combination, 30 runs were carried
out.
In order to determine which parameter effects
are significant, a statistical analysis of variance
(ANOVA) was carried out. The results are presented in Table 5. Each of the main effects and
interactions are considered significant at the level
of 5. In this table, df are the degrees of freedom, SS is the sum of squares, M S is the mean
square, F is the F-test statistics and p is the probability value used to test the null hypothesis that
a parameter effect is not significant.

216

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

Table 3 Failure modes probabilities for each model
Model 1
Model 2
Model 3

F1
10
1
1

F2
5
5
5

F3
20
10
10

F4
30
15
15

F5
15
8
2

F6
20
4
4

F7
13
13

F8
17
14

F9
16
1

F10
11
11

F11
2

F12
7

F13
10

F14
1

F15
4

Table 4 Actions, questions and clusters costs
i
C(Ai )
C(Qi )
C(Ki )

1
10
5
10

2
20
10
40

3
30
30
20

4
40
10
50

5
50
30
10

6
40
20
30

7
35
-

8
5
-

9
20
-

10
15
-

11
20
-

12
30
-

13
70
-

14
10
-

15
20
-

16
15
-

Table 5 ANOVA results
Source
GN
PS
Error
Total

Figure 3 Troubleshooting model 1

Figure 4 Troubleshooting model 2

SS
11.37
34.07
8.95
54.39

df
4
3
12
19

MS
2.84
11.36
0.75

F
3.81
15.22

p
0.0318
0.0002

Tables 6 and 7 show the average ECR computed for each value of GN and P S, respectively.
On the basis of these results, the final values for
GN and P S were chosen as 300 and 60, respectively.
Table 8 shows the results for all troubleshooting models using the chosen values for GN and
P S. For each model, 30 runs were carried out.
In this table, BKS is the Best Known Solution
for each model. For troubleshooting models 1 and
2, an exhaustive search was carried out in order
to find the optimal solution. For troubleshooting model 3, however, performing an exhaustive
search would be unfeasible due to the number of
possible solutions. Although the BKS for model
3 is not guaranteed to be the optimal solution, extensive simulations were carried out with model 3
in order to provide confidence that its BKS is a
high quality solution.
Table 6 Average ECR for each GN value
GN
Avg. ECR

100
203.1

200
202.8

300
201.3

400
201.6

500
201.5

Table 7 Average ECR for each P S value
PS
Avg. ECR

15
204.1

6

Figure 5 Troubleshooting model 3

ISSN 2525-8311

30
202.1

45
201.0

60
200.9

Conclusions

A method for solving troubleshooting optimization problems based on the TLBO algorithm was
proposed.

217

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

the quadratic assignment problem, Computers  Industrial Engineering 85 86101.

Table 8 Simulation results
Best
Worst
Avg.
Std. dev.
BKS

Model 1
78.50
80.50
78.62
0.45
78.50(opt.)

Model 2
199.00
214.95
200.84
3.37
199.00(opt.)

Model 3
206.10
232.10
213.39
6.83
206.10

The gaps between the average solution obtained with the proposed method and the BKS
for models 1 and 2 were small 0.15 and 0.92,
respectively. For troubleshooting model 3 the
gap was larger, 3.54. However, this result was
achieved after 36,000 function evaluations only.
Considering the whole search space of 1.1241021
possible solutions for troubleshooting model 3, it
represents a very small portion of the search space.
The proposed method may be used to update
the recommended troubleshooting strategy for a
system based on failure data history collected from
the field. The best troubleshooting strategy in
terms of ECR is highly dependent on the probability associated with each failure mode. Many
factors may affect these probabilities during system lifetime such as changes in the operational
pattern, maintenance interventions and environmental issues. Detecting those changes and update the recommended troubleshooting strategy
accordingly can bring benefits in terms of repair
cost and system availability.
In this paper, the TLBO algorithm was used
in its basic version. Some changes in the basic
TLBO algorithm can be made in order to improve
its performance. One possible suggestion for future research is to develop algorithms to generate
the initial population in order to cover a larger
portion of the search space, instead of using a random population generation. Another suggestion
for future investigation is to set the population
size as a function of the model complexity.
Acknowledgments
This work was supported by FAPESP (grant
201117610-0) and CNPq (research fellowships
3037142014-0, 3034502013-4).
References
Baykasoglu, A., Hamzadayi, A. and Kose, S. Y.
(2014). Testing the performance of teaching
learning based optimization (TLBO) algorithm on combinatorial problems Flow shop
and job shop scheduling cases, Information
Sciences 276 204218.

Jensen, F. V., Kjrulff, U., Kristiansen, B.,
Langseth, H., Skaanning, C., Vomlel, J.
and Vomlelova, M. (2001). The SACSO
methodology for troubleshooting complex
systems, Artificial Intelligence for Engineering Design, Analysis and Manufacturing
15(4) 321333.
Langseth, H. and Jensen, F. V. (2001). Heuristics
for two extensions of basic troubleshooting,
Frontiers in Artificial Intelligence and Applications 66 8089.
Ln, V. (2014). Decision-theoretic troubleshooting Hardness of approximation, International Journal of Approximate Reasoning
55 977988.
Montgomery, D. C. (2005). Design and Analysis
of Experiments, 6th edn, John Wiley  Sons,
Inc.
Ottosen, T. J. (2011). Solutions and Heuristics
for Troubleshooting with Dependent Actions
and Conditional Costs, PhD thesis, Aalborg
University.
Patil, A. B. (2016). Teaching learning based optimization Application and variation, Proceedings of the International Conference on
Computing, communication and Energy Systems, Sangli, pp. 15.
Rao, R. V. and Patel, V. (2013).
An improved teaching-learning-based optimization
algorithm for solving unconstrained optimization problems, Scientia Iranica 20 710
720.
Rao, R. V., Vakharia, D. P. and Savsani, V. J.
(2011). Teaching-learning-based optimizationa novel method for constrained mechanical design optimization problems, ComputerAided Design 43 303315.
Vianna, W. O. L., Rodrigues, L. R., Yoneyama,
T. and Mattos, D. I. (2016). Troubleshooting
optimization using multi-start simulated_annealing, 10th Annual IEEE Systems Conference, Orlando, FL, USA, 18-21 April 2016.
Vomlelova, M. (2003). Complexity of decisiontheoretic troubleshooting,
International
Journal of Intelligent Systems 18(2) 267
277.
Vomlelova, M. and Vomlel, J. (2003). Troubleshooting NP-hardness and solution methods, Soft Computing 7(5) 357368.

Dokeroglu, T. (2015).
Hybrid teachinglearning-based optimization algorithms for

ISSN 2525-8311

218