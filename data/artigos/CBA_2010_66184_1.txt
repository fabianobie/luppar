XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

MODELAGEM E VERIFICAÇÃO DE SISTEMAS OPERACIONAIS DE TEMPO-REAL PARA
SISTEMAS CRÍTICOS EMBARCADOS
RHENZO LOSSO, EMILIA VILLANI, OSAMU SAOTOME, LUIS C. S. GÓES
Instituto Tecnológico de Aeronautica
R. Marechal do Ar Eduardo Gomes, 050  CTA  São José dos Campos- São Paulo  Brasil
E-mails rhenzo@gmail.com, evillani@ita.br, osaotome@ita.br, goes@ita.br
Abstract
 This paper presents the modeling and verification, through simulation, of a Real-Time Operating System (RTOS),
using timed automata and the tool UPPAAL. The proposal is building a model and estimates the execution time for a certain
Hardware platform. These times should be used to verify Real-Time requirement in critical aerospace systems.
Keywords
 Timed Automata, Real-Time Systems, Operating Systems, UPPAAL
Resumo
 Este artigo apresenta a modelagem e verificação via simulação de um sistema operacional de Tempo-Real, utilizando
autômatos_temporizados e a ferramenta UPPAAL. A proposta consiste em construir um modelo e estimar os tempos de execução
para uma determinada plataforma de hardware. Estes tempos devem ser utilizados para verificar requisitos de Tempo-Real em
sistemas críticos aeroespaciais.
Palavras-chave
 .

obtida é que cada sistema tem seu ponto forte e seu
ponto fraco dentre as características testadas, não
havendo uma distinção na qualidade do RTOS por
este ser Open Source ou proprietário. Porém, o fato
de uma aplicação ser executada sob um RTOS não
garante que os tempos de respostas não sejam ultrapassados, se esta aplicação não é codificada corretamente.
Este trabalho está organizado da seguinte forma. A
Seção 2 apresenta uma revisão bibliográfica e discute
alguns trabalhos relacionados. A Seção 3 apresenta a
ferramenta UPPAAL (Behrmann, 2004), utilizada
neste trabalho. A Seção 4 apresenta o estudo de caso
desenvolvido, que consiste na modelagem de um
sistema operacional de Tempo-Real e no cálculo dos
tempos de resposta de algumas funções, tomando-se
como base a arquitetura do microprocessador 8051
da Atmel. A Seção 5 apresenta os resultados das simulações, por fim na seção 6 têm-se as conclusões e
trabalhos futuros.

1 Introdução
Este trabalho aborda a modelagem e verificação
de sistemas_operacionais utilizados em aplicações
embarcadas de Tempo-Real. A principal motivação é
a verificação de requisitos de Tempo-Real em sistemas críticos aeronáuticos e aeroespaciais. Sistemas
críticos são aqueles onde a manifestação de uma falha pode ter resultados catastróficos, como a perda de
vidas humanas. Para estes sistemas, justifica-se o
investimento intensivo em verificação e validação,
tais os requeridos por técnicas de verificação formal,
como model_checking, que tenta cobrir todas as possíveis situações nas quais o sistema poderá se encontrar.
Neste contexto, este trabalho considera os casos em
que a implementação da aplicação inclui a utilização
de um sistema operacional de Tempo-Real. Neste
caso, o problema de verificação de requisitos de tempo pode ser dividido em duas etapas distintas. A primeira etapa consiste na determinação do tempo requerido pelo sistema operacional para executar processos e tarefas básicas. Esta etapa é abordada neste
artigo e depende da configuração do sistema operacional e do hardware no qual ele será embarcado. A
segunda etapa consiste na modelagem do aplicativo
desenvolvido e no uso dos resultados obtidos na primeira etapa para determinar se os requisitos de tempo
da aplicação são obedecidos ou não.
Atualmente, existem diversos sistemas_operacionais
de Tempo-Real, também denominados RTOS (do
termo em inglês Real Time Operational System).
Alguns destes sistemas são open source e gratuitos
enquanto outros são proprietários e comercializados.
Em um trabalho recente, Tan (2009) compara diversos RTOS em relação a algumas características como
API de programação, desempenho, etc. A conclusão

2 Trabalhos Relacionados
O uso de sistemas_operacionais de Tempo-Real
para garantir requisitos de tempo em aplicações críticas tem sido objeto de diversos trabalhos científicos.
Liu et al. (2003) descreve a aplicação de um RTOS
em robôs autônomos para garantir a concorrência
entre processos e respostas ordenadas. Barboza et al.
(2008), aborda o problema de verificação e validação
do protocolo IEEE 802.11. Ele apresenta a modelagem e verificação deste protocolo usando autômatos
temporizados e a ferramenta UPPAAL. A modelagem inclui o comportamento do RTOS utilizado, com
o objetivo de se obter tempos de resposta máximos e
mínimos através de um modelo comportamental e
simulação.

4787

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

para sistema operacional controlar os processos, é
formado pelos campos IDprocess e status do processo (livre para ser escalonavél, bloqueado e
terminado).
O modelo aborda a operação de semáforos para sincronização e controle_de_processos (Tanenbaum,
1992). O sistema operacional modelado apenas realiza o incremento  decremento da variável do semáforo e a liberação  bloqueio de processos. Não foi levado em consideração na modelagem o caso em que
os processos controlados pelo RTOS entram em deadlock por erros na sua codificação interna. Por isso
parte-se do pressuposto que as aplicações estão codificadas corretamente e o sistema operacional não tem
que detectar e intervir em deadlocks gerados por erros de codificação internos as aplicações.
Na modelagem do RTOS em autômatos_temporizados, o tempo demandado para as operações foi inserido por meio de fórmulas associadas s invariantes e
s condições de guardas. Essas fórmulas foram calculadas com base no código assembly do microcontrolador e na lógica de complexidade de algoritmo. A
Tabela 1 apresenta as fórmulas usadas e seus respectivos códigos assembly para o microcontrolador
8051. É importante salientar que estes são códigos
propostos e usados como exemplo neste estudo de
caso visto que para um calculo real e apurado seria
necessário o assembly total gerado por um compilador.

Jersak et al (2004) apresenta uma proposta de abordagem de verificação baseada em composição para
verificação de sistemas_complexos, partindo desde
uma simples tarefa até a integração de componentes
heterogêneos. Esta abordagem é aplicada para um
sistema_embarcado genérico, onde a influência do
RTOS é considerada. Neste caso, a modelagem e a
determinação dos tempos de resposta do RTOS são
realizados de forma simplificada. Já em Waszniowski
et al. (2009), um estudo do comportamento de um
sistema crítico é realizado, incluindo a modelagem
com autômatos_temporizados de uma abstração do
sistema operacional de Tempo-Real OSEKVDX.
Em Belarbi et al. (2004) uma modelagem das operações do sistema operacional VxWorks é realizada
utilizando a linguagem IF (Bozga et al., 2001) dos
autômatos_temporizados. Neste trabalho, é proposto
um novo método para verificação temporal de aplicações multitarefa em Tempo-Real. Partes dos RTOS
também são modeladas de maneira isolada, como em
Gerdsmeier e Oliver (2001), em que o comportamento e as políticas de escalonamento, como EDF (Earliest Deadline First) e ICPP (Immediate Ceiling Priority Protocol), são modeladas utilizando autômatos
temporizados para uma aplicação de controle_e_monitoramento de uma Mina.
3 O UPPAAL
A modelagem em autômatos_temporizados (Alur
e Dill, 1994) pode ser realizada com auxílio das ferramentas computacionais, dentre várias ferramentas
escolheu-se o software UPPAAL. Esta ferramenta foi
desenvolvida em conjunto pela Universidade Uppsala
na Suécia e pela Universidade de Aalborg, na Dinamarca. Ela é composta por três módulos. O primeiro
permite a modelagem do sistema por meio de uma
interface_gráfica amigável. O segundo módulo tem
disponível recursos para verificação do sistema via
simulação. O terceiro módulo permite a verificação
de propriedades do modelo utilizando a linguagem
CTL (Computational Tree Logic) para especificação
das propriedades. Quando uma propriedade é falsa, a
ferramenta fornece o caminho percorrido para atingir
um estado onde a propriedade não é verdadeira.

Tabela 1 Tabela com conteúdo (assembly e descrição) dos estados
do modelo proposto.

Estado do
autômato

Código Assembly

Ciclos

Descrição

Overhead
MOVX @DPTR
(Load  Save MOV A,Rn
reg SO e Load 
Save reg proc)

2
1

Escolhendo
MOV DPTR,bcpini-2
Processo para a
+
CPU (Choose L1 INC DPTR
proc to CPU)
INC DPTR
MOVX A,@DPTR
CJNE A, 01h, L1

2
+
2
2
2
2

Criação
no
BCP (Creation on BCP)

2
+
2
2
2
2
+
1
2
1
2

Um registrador
é
transferido
para
o
acumulador
e então é
salvo
na
memória
Procura o
próximo
processo
livre (status
 01h) no
BCP e o
envia
a
CPU
Acha um
espaço
vazio
no
BCP
e
então cria o
processo
com status
de escalonavel (status  01h ).

4 Estudo de Caso
O estudo de caso desenvolvido envolve a modelagem de um sistema operacional genérico embarcado no microprocessador 8051 da Atmel.
O modelo proposto é composto pelos seguintes autômatos CPU (Figura 1), controlador de interrupções
(Figura 2) e sistema operacional (Figura 3).
São feitas as seguintes considerações. O algoritmo de
escalonamento utilizado é do tipo round-robin (Tanenbaum, 1992). Supõe-se que todas as memórias
trabalham nas mesmas velocidades, tanto para escrita
como para leitura. O BCP (Bloco de Controle de
Processos), que contém as informações necessárias
4788

MOV DPTR,bcpini-2
+
L3 INC DPTR
INC DPTR
MOVX A,@DPTR
CJNE A,00h, L3
+
MOV A,procid
MOVX @DPTR
MOV A,01h
MOVX @DPTR

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Estado do
autômato

Código Assembly

Ciclos

Descrição

MOV DPTR,bcpini-2
+
L4 INC DPTR
INC DPTR
MOVX A,@DPTR
CJNE A,procid,L4
+
MOV A,00h
MOVX @DPTR
Requisição de MOV DPTR,bcpini-2
paginação.
+
(Blocking proc) L5 INC DPTR
INC DPTR
MOVX A,@DPTR
CJNE A,procid,L5
+
MOV A,03h
MOVX @DPTR

2
+
2
2
2
2
+
1
2
2
+
2
2
2
2
+
1
2

Libera
o
espaço no
BCP usado
pelo processo (status  00h ).

Liberação do
Processo
depois
da
paginação.
(Interrup pag
done)

MOV DPTR,bcpini-2
+
L6INC DPTR
INC DPTR
MOVX A,@DPTR
CJNE A,procid, L6
+
MOV A,01h
MOVX @DPTR

2
+
2
2
2
2
+
1
2

Bloqueio de
semáforo.
(Operação-P)
(Refresh
semaphore,
stop on sem
e Dec sem)

MOV DPTR,varsem
MOVX A,@DPTR
CJNE A,00h, L8

2
2
2

DEC A
MOVX @DPTR
MOV DPTR,bcpini-2
+
L7INC DPTR
INC DPTR
MOVX A,@DPTR
CJNE A,procid, L7
+
MOV A,02h
MOVX @DPTR

1
2
2
+
2
2
2
2
+
1
2

L8 DEC A
MOVX @DPTR
MOVX A,@DPTR
INC A
MOVX
@DPTR,A
CJNE A,00h, L9

1
2
2
1
2
2

MOV DPTR,bcpini-2
+
INC DPTR
INC DPTR
MOVX A,@DPTR
CJNE A,procid, L7
+
MOV A,01h
MOVX @DPTR

2
+
2
2
2
2
+
1
2

Remover do
BCP (Remove on BCP)

Liberação de
semáforo.
(Operação-V)
(Go in sem e
Find
next
proc block)

O controlador de interrupções, mostrado na Figura 1,
realiza a comunicação entre os autômatos do sistema
operacional (Figura 3) e da CPU (Figura 2). Dentre
as possíveis interrupções modeladas, têm-se as interrupções de quantum, criaçãoremoção de processo,
paginação  fim de paginação e bloqueio  desbloqueio de semáforo.
O modelo proposto para o sistema operacional de
tempo-real com as operações básicas é apresentado
na Figura 3.

Bloqueia o
processo
(status

03h) e cria
uma requisição
de
paginação
com tempo
entre 5 e 10
microssegundos.
O processo
é procurado
no
BCP,
liberado
(status

01h).
e
colocado
novo para
ser escalonado pelo
CPU.
O sistema
carrega o
valor
do
semáforo e
decrementa-o quando
ele é maior
que zero.
Também
atualiza o
status
do
processo
(status

02h).

Figura 1. Modelo do controlador de interrupções.

Figura 2. Modelo do comportamento da CPU.

O estado inicial do modelo do sistema operacional é
dado pelo duplo círculo em cinza que representa o
sistema operacional livre de qualquer tarefa. Logo
após receber a requisição de tratamento de interrupção, o sistema deve realizar a troca de contexto (overhead administrativo, representado pelos estados em
vermelho) entre o programa que estava sendo executado e o contexto do sistema operacional.
Uma vez realizada a troca de contexto, é definido
qual a interrupção a ser tratada, e quais estados com
suas respectivas instruções assembly, apresentadas
pela tabela 1, para aquela dada interrupção são executadas. Para cada tipo de operação uma cor foi associada. Dentre elas temos verde-água (criação  remoção de processo), rosa choque (paginação  fim de
paginação) e rosa claro (bloqueio  desbloqueio de
semáforo).
Após cada operação, o sistema faz a escolha do processo a ser enviado  CPU (estado na cor azul marinho). A única exceção é quando um processo que
requer um bloqueio de semáforo e o semáforo é maior que zero. Este processo atualiza a variável de semáforo e o processo volta imediatamente para o
CPU.

Atualiza o
valor
do
semáforo e
vai procurar o próximo processo
na
fila
(se
houver)
para
ser
liberado
(status

01h)..

L9 NOP

4789

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Figura 3. Modelo do RTOS.

Após o processo ser escolhido, existe novamente a
troca de contexto, agora realizada entre o sistema
operacional e o processo escolhido. Por último,
existe o estado (na cor verde) no qual é realizada a
análise dos tempos de cada operação, completando
o ciclo e liberando o sistema de qualquer tarefa até
a geração de uma próxima interrupção.
Os estados na cor preta são estados utilizados para
troca de sinais entre os autômatos CPU, controlador
de interrupções e sistema operacional. Esses estados têm uma característica especial, a de executar
uma ação sem a passagem do tempo.

paração de resultados dos tempos de resposta. Dentre essas variações, variou-se  quantidade de registradores da arquitetura e a granularidade (i.e a variável cyc no modelo, que representa o período entre
as oscilações) do oscilador. Estas variações impactam no tempo de respostas das operações e na troca
de contexto (overhead administrativo).
A Tabela 2 apresenta os resultados obtidos durante
as verificações do modelo para dois instantes no
primeiro, o oscilador tem uma granularidade de 1
s e no segundo instante, o oscilador tem 2 s.
Ressalta-se que os resultados podem ser diferentes,
 medida que os códigos assembly podem variar
dependendo do compilador, da programação de alto
nível realizada e do objeto compilado. Além disso,
não foram levados em conta fatores como pipeline,
hazards no pipeline, entre outros fatores, que podem alterar o valor do pior tempo de execução de
uma tarefa (Worst Time Execution Case).

5 Resultados Obtidos
O modelo proposto foi analisado por meio de
simulação, utilizando o software UPPAAL, para
obtenção de dados de desempenho. Foram variados
alguns parâmetros entre as verificações para com4790

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Operações
Overhead
Criação de
Processo
Quantum
Requisição
de Paginação
Fim de
Paginação
Bloqueio de
Semáforo
Desbloqueio de
Semáforo
Fim de
processo

N de processo permitidos no BCP  10 (BCPproc  10)
1 s de ciclo (cyc  1)
2 s de ciclo (cyc  2)
10 registradores
20 registradores
10 registradores
20 registradores
(nreg  10)
(nreg  20)
(nreg  10)
(nreg  20)
Tempo
Tempo
Tempo
Tempo
Tempo
Tempo
Tempo
Tempo
Max (s)
Min (s)
Max (s)
Min (s)
Max (s)
Min (s)
Max (s)
Min (s)

65
292

61
148

125
412

121
268

130
584

122
296

250
824

242
536

212
307

132
222

332
427

252
342

424
614

264
444

664
854

504
684

297

145

417

265

594

290

834

530

306

226

426

346

612

452

852

692

304

152

424

272

608

304

848

554

297

217

417

337

594

434

834

674

Referências Bibliográficas
Alur, R. and Dill, D. (1994) A Theory of Timed
Automata. Theoretical Computer Science, Vol
126, Issue 2, pp. 183  235.
Barboza, F. J. R. Andrade, A. M. S. Silva, F.A
and Lima. G. (2008) Specification and
Verification of the IEEE 802.11 Medium
Access Control and an Analysis of its
Applicability to Real-Time Systems. Electronic
Notes in Theoretical Computer Science, No
195, pp. 3-20.
Behrmann, G. David, A. and Larsen, K. (2004) A
Tutorial on Uppaal. LNCS, Formal Methods
for the Design of Real-Time Systems (revised
lectures), Italy.
Berlabi, M Babau, J.P and Schwarz, J. J. (2004)
Temporal
Verificantion
of
Real-time
Multitasking Application properties Based on
Communicating
Timed
Automata.
Proceedings of the Eighth IEEE International
Symposium on Distributed Simulation and
Real-Time Applications (DS-RT04).
Bozga, M. and Graf. S. (2001) Automated
Validation of Distributed Software using the IF
environment. IEEE International Symposium
on Network Computing and Application (NCA
2001), Electronic Notes in Theoretical
Computer Science 55, No 3, Cambridge, pp. 810.
Gerdsmeier, T. and Cardell-Oliver R. (2001)
Analysis of Scheduling Behaviour using
Generic Timed Automata. The Australian
Theory Symposium (CATS). Electronic Notes
in Theoretical Computer Science, Vol
42.pp.143-157.
Jersak, M Richter, K and Ernst R. (2004) Intervalbased Analysis in Embedded System Design.
Mathematics and Computers in Simulation. No
66, pp.231-242.

6. Conclusão
Este trabalho apresenta uma proposta de modelagem_de_sistemas_operacionais de tempo-real utilizando autômatos_temporizados, partes da teoria de
complexidade de algoritmo e a ferramenta
UPPAAL. A proposta permite a definição dos
tempos para execução de cada operação, a partir
dos códigos assembly associados a cada estado
definido no modelo do sistema operacional. Os
resultados levam em consideração a arquitetura de
hardware utilizada. A fórmula utilizada nos cálculos irá sofrer transformações cada vez que houver
uma alteração na arquitetura, já que mudando o
microprocessador, o conjunto de instruções também
é alterado.
Neste trabalho, os tempos foram obtidos por meio
de simulação. A continuidade deste trabalho prevê
a especificação de propriedades para determinação
do pior tempo de execução de uma tarefa por meio
dos recursos de model_checking do UPPAAL.
Agradecimentos
Os autores agradecem o apoio financeiro do
Projeto Pró-Defesa (CAPES) em Segurança de Vôo
e Aeronavegabilidade Continuada e do Projeto
FINEPCTAINPE Sistemas Inerciais para Aplicação Aeroespacial (SIA).

4791

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Liu, X Yuan, K Wang, W and Zou W. (2003) A
Control Architecture of Autonomous Robots
and its Realization using Multiple DSP devices
and RTOS Based Platform. Intemational
Conference on Rohotics, Intelligent Systems
and Signal Processing. Proceedings of the
2003 IEEE.
Tan, S. and Anh, T. N. B. (2009) Real-time
operating system (RTOS) for small (16-bit)
Microcontroller. The 13th IEEE International
Symposium
on
Consumer
Electronics
(ISCE2009).
Tanenbaum, A.S. (1992) Modern Operating
Systems. Prentice-Hall International. 2 Ed,
Rio de Janeiro - RJ
Waszniowski, L Krakora J and Hanzalek Z.
(2009) Case study on distributed and fault
tolerant system modeling based on timed
automata. The Journal of Systems and
Software. No 82, pp.1768-1694.

4792