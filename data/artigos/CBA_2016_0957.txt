XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

INFLUENCIA DE SOFTWARES E SISTEMAS OPERACIONAIS NA SIMULACAO
DE MODELOS DINANICOS NAO LINEARES
Felipe Lulli Milani, Wilson Rocha Lacerda Junior, Samir Angelo Milani Martins,
Erivelton Geraldo Nepomuceno


GCOM - Grupo de Controle e Modelagem, Departamento de Engenharia Eletrica
Universidade Federal de Sao Joao del-Rei, Praca Frei Orlando 170 - Centro, 36307-352
Sao Joao del-Rei, Minas Gerais, Brasil
Emails felipelulli@hotmail.com, wilsonrljr@outlook.com, martins@ufsj.edu.br,
nepomuceno@ufsj.edu.br
Abstract This paper presents an analysis of the influence of softwares and operating systems and its respective hardware in the simulation of nonlinear dynamical systems. Furthermore, different mathematical equivalence
of polynomial model of the Chuas circuit were chosen and simulated to highlight the inaccuracy of the results
of each form of implementation of the analyzed model. The main results of the paper shows that equivalent
mathematical models have different results when simulated in mathematical software, also with distinction when
applied on different operating systems.
Keywords

Chuas circuit, nonlinear dynamic, chaos, IEEE 754

Resumo Este artigo apresenta uma analise da influencia de softwares e sistemas_operacionais e seus respectivos hardwares na simulacao_de_sistemas_dinamicos nao lineares. Alem disso, diferentes equivalencias matematicas
do modelo polinomial do circuito de Chua foram escolhidas e simuladas para destacar a imprecisao dos resultados
apresentados em cada forma de implementacao do modelo analisado. Os principais resultados obtidos nesse artigo
mostram que modelos_matematicos equivalentes, possuem resultados distintos quando simulados em softwares
matematicos, havendo tambem distincao quando aplicados em sistemas_operacionais diferentes.
Palavras-chave



Introducao

O advento da computacao numerica permitiu um
grande avanco para a analise de sistemas_dinamicos e, por meio de simulacoes computacionais,
pode-se verificar o comportamento desse conjunto,
principalmente na area de sistemas_dinamicos nao
lineares, onde existem pesquisas relacionadas a
sistemas_caoticos (Monteiro, 2006 Lozi and Valrose, 2012 Martins et al., 2013).
Caculos realizados em computadores levaram
pesquisadores a identificarem suspeitas sobre esses sistemas_dinamicos nao lineares, passando pela
descoberta de Lorenz (Lorenz, 1963) e pelo circuito de Chua (Chua et al., 1993), com a finalidade de contribuir para a compreensao de como
esses sistemas sao analisados pelos computadores.
O aumento no estudo de sistemas_caoticos
deve-se a Lorenz, gracas a teoria do caos. A principal caracterstica desses sistemas e a dificuldade
em se fazer previsoes a longo prazo, pelo simples
motivo de que, havendo uma pequena alteracao
na condicao inicial do sistema, as trajetorias divergem completamente ao longo do tempo.
Para a analise desses sistemas_caoticos utilizase simulacoes de modelos_matematicos. Como essas simulacoes sao feitas em computadores, devese verificar como os calculos sao processados pelo
computador. Esses calculos sao feitos a partir da
norma IEEE 754 Ponto Flutuante, criada para
padronizar o calculo numerico nos computadores. A norma propoe um metodo para compu-

ISSN 2525-8311

tacao com ponto_flutuante que gera o mesmo resultado, independente se o processamento e feito
em hardware, software ou uma combinacao de ambos. Os resultados dos calculos serao identicos, independentes da implementacao, dado os mesmos
valores de entrada (IEEE Standard for floatingpoint arithmetic, 2008). Porem, como constatado por Rahman et al. (2014) e Lozi and Valrose
(2012), esses calculos podem conter erros inesperados, como erros de arredondamento e limitacao
dos numeros computacionais em relacao aos numeros reais, fazendo com que haja divergencia entre a trajetoria calculada e a verdadeira.
A simulacao_de_sistemas_nao_lineares vem
sendo amplamente estudada na area e um grande
numero de pesquisadores acreditam precipitadamente nos resultados obtidos. Na engenharia, alguns dos softwares utilizados para realizar essas
simulacoes sao o Matlab e Scilab, que fazem calculos no computador utilizando-se da aritmetica
de ponto_flutuante, estabelecida pela norma IEEE
754. Porem, como apresentado em Lozi and Valrose (2012), no simples caso de um sistema_dinamicos discreto (mapa de Henon), ha duvidas
quanto a natureza dos resultados computacionais
longas pseudo-orbitas instaveis ou atratores estranhos ?. Alem disso, se tratando da simulacao de
sistemas_nao_lineares e caractersitco o acumulo de
erros, como destacado por Liao and Wang (2014),
Bunimovich (2014), Galias (2013), Nepomuceno
and Martins (2016).
O objetivo desse artigo e apresentar um es-

3330

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

tudo sobre a influencia do software e do sistema
operacional utilizado, na simulacao de modelos
com dinamica nao-linear. Verificar o quao modelos matematicamente equivalentes sao diferentes
do ponto de vista computacional, quando simulados em diferentes softwares e sistemas_operacionais.
O artigo esta estruturado da seguinte forma
a presente secao apresentou uma breve introducao
historica sobre o tema a ser trabalhado no restante
deste artigo. Na secao 2 sao levantados os conceitos preliminares, suficientes para o entendimento
do trabalho. Na secao 3 apresenta os metodos utilizados para se chegar aos resultados apresentados
na secao 4. A secao 5 trata da conclusao do trabalho e propostas de possveis trabalhos futuros.
2
2.1

Conceitos Preliminares

O circuito de Chua

O circuito de Chua e um dos sistemas mais conhecidos e estudados quando se trata de dinamica_nao_linear e caos (Aguirre, 2007). Esse
circuito e constitudo por uma unica resistencia
nao linear e quatro componentes de circuitos lineares dois capacitores, um resistor e um indutor (Dedieu et al., 1993). Essa resistencia negativa, conhecida como diodo de Chua, e o elemento
que confere energia ao sistema, permitindo, assim, manter o circuito oscilando autonomamente
(Aguirre, 2007).

Figura 1 Circuito de Chua.
1997).

Fonte (Correa,

O comportamento do circuito e descrito pelas
equacoes apresentadas abaixo (Aguirre, 2007)

dC1

C1 dt
C2 ddtC2

 diL
L dt

C1
 C2 
 id (C1 )
R
C1 C2

+ iL
R
 C2 ,

(1)

sendo C i a tensao sobre o capacitor Ci e iL a
corrente no indutor.
A corrente que circula pelo diodo de Chua e
definida por


m0 C1 +Bp (m0 m1 ), C1  < Bp
iC1  m1 C1 ,
C1   Bp


m0 C1 +Bp (m1 m0 ), C1 > +Bp ,
(2)
em que Bp ,m0 e m1 o ponto de ruptura
e as inclinacoes da funcao linear por partes,respectivamente. Em (Aguirre, 2007) foi apresentado um modelo NAR com dinamica equivalente a do modelo 2. Este modelo sera posteriormente apresentado e utilizado no contexto deste
trabalho.
2.2

Identificacao de Sistemas e o Modelo Polinomial do circuito de Chua

A Identificacao de Sistemas e a area do conhecimento que estuda maneiras de modelar e analisar
sistemas, na tentativa de encontrar algum padrao
nas observacoes (Billings, 2013 Ljung, 1987). Em
muitos casos e prefervel usar tecnicas de identificacao para se obter modelos que descrevem o comportamento de um sistema (Aguirre, 2007).
As principais etapas do processo de identificacao_de_sistemas consiste em (Aguirre, 2007) i)
testes dinamicos e coleta de dados ii) escolha da
representacao matematica a ser usada iii) determinacao da estrutura do modelo iv) estimacao de
parametros e v) validacao do modelo.
Um modelo NARX (nonlinear autoregressive
model with exogenous variables) polinomial pode
ser definido por (Martins and Aguirre, 2014)

A curva caracterstica desse elemento e apresentada na figura 2.

y(k)

 F  y(k  1), ..., y(k  ny )
u(k  d), ..., u(k  nu ) + e(k),
(3)

em que ny , nu , d, u(k) e y(k) sao os atrasos em
y, em u, o tempo_morto, o sinal de entrada e o sinal de sada no instante k, respectivamente e e(k)
representa rudo e possveis incertezas.
2.3

Figura 2 Curva caracterstica do Diodo de Chua.
Fonte (Valerio, 2014).

ISSN 2525-8311

Norma IEEE 754 Ponto Flutuante

O padrao IEEE 754 foi definido pelo Instituto de
Engenheiros Eletricistas e Eletronicos, com a finalidade de padronizar as operacoes e representacoes
de numeros binarios com aritmetica de ponto_flutuante.

3331

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

Essa norma foi criada pela necessidade da unificacao dos calculos em computadores, pois antes
desse padrao utilizavam-se maneiras de calcular
numeros com pontos flutuantes desenvolvidos pelas suas fabricantes e isso criava uma incompatibilidade entre essas maquinas.

y1 (k)



3.523y1 (k  1)  4.2897y1 (k  2)
0.2588y1 (k  4)1.7784y1 (k  1)3
+2.0652y1 (k  3)+6.1761y1 (k  1)2
y1 (k  2) + 0.1623y1 (k  1)y1 (k  2)
y1 (k  4)  2.7381y1 (k  1)2 y1 (k  3)
5.5369y1 (k  1)(k  2)2
+0.1031y1 (k  2)3 + 0.4623y1 (k  4)3

z


Para a representacao dos numeros com ponto
flutuante a norma criou padroes para computadores que utilizam 32 bits e 64 bits. Para o formato
simples de 32 bits, utiliza-se o primeiro bit para
bit de sinal, 8 bits para o expoente e 23 bits para a
mantissa. O computador que possui 64 bits, tem o
primeiro bit para bit de sinal, 10 bits para o expoente e 53 bits para a mantissa. Consequentemente
por possuir maior numero de bits os computadores
que utilizam 64 bits tem maior precisao utilizando
calculos com ponto_flutuante.

0.5247y1 (k  2)2 y1 (k  4)
1.8965y1 (k  1)y1 (k  3)2
+5.4255y1 (k  1)y1 (k  2)y1 (k  3)
+ 0.7258y1 (k  2)y1 (k  4)2

z

1.7684y1 (k  3)y1 (k  4)2
+ 1.18y1 (k  3)2 y1 (k  4) .

z


3

Metodologia

Para execucao da metologia a seguir proposta,
foram utilizados dois notebooks o primeiro,
Hewlett-Packard(HP) - Pavilion G42, equipado
com Intel core I5 450M, 2GB de memoria ram
DDR3 e o segundo sendo um notebook Samsung
Chronos, equipado com processador Intel core I5
2450M e 8GB de memoria ram DDR3. Os softwares utilizados foram Scilab, versao 5.5.2 (tanto
para Windows, quanto para Linux) e Matlab, versao R2012b (para Windows) e R2012a (para Linux). Os sistemas_operacionais utilizados foram
Windows 7 Home Premium para ambos os computadores - 64bits, Linux Fedora 22 no primeiro computador apresentado e Linux Ubuntu 15.10 para
o segundo.
As simulacoes foram feitas com intervalos de
0 a 1000 amostras, porem para melhor visualizacao, as Figuras foram inseridos entre 500 a 1000
iteracoes, que equivalem ao intervalo de tempo de
3,6 a 7,2 do modelo simulado.
O modelo NAR (Nonlinear Autoregressive
model) polinomial para o circuito de Chua utilizado nas analises e o mesmo modelo apresentado
em (Aguirre, 2007)

ISSN 2525-8311

(4)

Escolheram-se duas equivalencias matematicas do modelo 4, compondo um total de tres
modelos matematicamente equivalentes. Assim,
pretende-se verificar como se da o resultado da simulacao destas equivalencias matematicas em diferentes softwares e sistemas_operacionais, bem
como verificar situacoes em que a simulacao dos
modelos nao e mais confiavel. As alteracoes realizadas para se obter as equivalencias matematicas
estao destacadas, para evidenciar o quao simples
foram essas alteracoes.

y2 (k)



3.523y2 (k  1)  4.2897y2 (k  2)
0.2588y2 (k  4)1.7784y2 (k  1)
y2 (k  1)y2 (k  1) + 2.0652y2 (k  3)
+6.1761y2 (k  1)y2 (k  1)y2 (k  2)
+0.1623y2 (k  1)y2 (k  2)y2 (k  4)
2.7381y2 (k  1)2 y2 (k  3)
5.5369y2 (k  1)(k  2)2
+0.1031y2 (k  2)3 + 0.4623y2 (k  4)3
0.5247y2 (k  2)2 y2 (k  4)
1.8965y2 (k  1)y2 (k  3)2
+5.4255y2 (k  1)y2 (k  2)y2 (k  3)
+0.7258y2 (k  2)y2 (k  4)2
1.7684y2 (k  3)y2 (k  4)2
+1.18y2 (k  3)2 y2 (k  4).
(5)

3332

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

y3 (k)



3.523y3 (k  1)  4.2897y3 (k  2)
0.2588y3 (k  4)  1.7784y3 (k  1)3
+2.0652y3 (k  3) + 6.1761y3 (k  1)2
y3 (k  2) + 0.1623y3 (k  1)y3 (k  2)
y3 (k  4)  2.7381y3 (k  1)2
y3 (k  3)  5.5369y3 (k  1)
(k  2)2 + 0.1031y3 (k  2)3
+0.4623y3 (k  4)y3 (k  4)y3 (k  4)
z



apesar das series_temporais divergirem rapidamente quando calculadas em diferentes softwares e sistemas_operacionais, os atrator permanecem com sua imagem. Ressalta-se que em alguns
casos, atratores sao utilizados como ferramentas
para validacao de modelos_matematicos Pereira
et al. (2014). Aqui e mostrado que isto pode ser
um problema, uma vez que nao se sabe, a priori,
quais das series geradas mais se aproxima da orbita verdadeira.

0.5247y3 (k  2)2 y3 (k  4)
1.8965y3 (k  1)y3 (k  3)2
+5.4255y3 (k  1)y3 (k  2)y3 (k  3)
+0.7258y3 (k  2)y3 (k  4)y3 (k  4)

z

1.7684y3 (k  3)y3 (k  4)2
+1.18y3 (k  3)y3 (k  3)y3 (k  4) . (6)

z


4

Resultados

Foram feitas simulacoes do modelo y1 (k), utilizando softwares e sistemas_operacionais diferentes.
Pode-se ver o resultado na figura 3. Foi realizada
as simulacoes das tres equivalencias (y1 ,y2 ,y3 ) em
todos os softwares e sistemas_operacionais. Os resultados podem ser analisados na Figura 4. Os
atratores dupla volta do modelo 4 y1 (k), foram
simulados no notebook HP, utilizando todos os
softwares e sistemas_operacionais disponveis podendo ser analisado na Figura 5. Observa-se que,

ISSN 2525-8311

Todos os Softwares
4

3

2

1

y(k)

Como pode ser observado, as Equacoes (4),
(5) e (6) sao matematicamente equivalentes.
Neste trabalho sera verificada a possvel equivalencia computacional destes modelos, quando simulados em diferentes softwares e sistemas_operacionais. Ademais, espera-se comparar, dadas as
possveis diferencas, quais delas estao mais proximas do valor esperado, de acordo com o que sera
proposto a seguir.
A fim de estabalecer um criterio de confiabilidade dos dados obtidos nos resultados, foi proposto um ndice de dispersao baseado no desvio
padrao. Considerando a media aritimetica dos resultados como a esperanca matematica, calculouse o desvio padrao dos resultados e estabeleceu-se
uma condicao de parada que define o maximo de
iteracoes a serem realizadas na simulacao de forma
que a resposta do sistema nao apresente um erro
superior a 10 em relacao ao valor esperado.
Com os modelos equivalentes citados, foram
realizadas simulacoes de acordo com os metodos
a seguir simulacoes realizadas no mesmo Sistema Operacional simulacoes realizadas em diferentes Sistemas Operacionais simulacoes realizadas em diferentes Hardwares em diferentes
Softwares (Matlab e Scilab)

0

1

2

3

4
500

550

600

650

700

750
Tempo

800

850

900

950

1000

Figura 3 Simulacao do modelo y1 (k) nos diferentes softwares e sistemas_operacionais. Cor Verde
- Simulacao do modelo y1 (k) no Matlab e no Linux, Cor Azul - Simulacao do modelo y1 (k) no
Matlab e no Windows, Cor Vermelha - Simulacao
do modelo y1 (k) no Scilab e no Linux, Cor Preta
- Simulacao do modelo y1 (k) no Scilab e no Windows

3333

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

Matlab Linux

2

1

1

0

1

2

2

3

3
700
800
Tempo

900

4
500

1000

3

0

1

600

3.5

Desvio Padrão

3

2

y(k)

y(k)

4

3

4
500

4

Matlab Windows

4

600

700
800
Tempo

900

1000

2.5
2
1.5
1
0.5

Scilab Windows
4

3

3

2

2

1

1
y(k)

y(k)

Scilab Linux
4

0

1

2

2

3

3
600

700
800
Tempo

900

4
500

1000

0

600

700
800
Tempo

900

1000

Figura 4 Simulacao das tres equivalencias matematicas em todos os softwares e sistemas_operacionais. Cor Vermelha - Primeira equivalencia,
modelo y1 (k), Cor Azul - Segunda equivalencia,
modelo y2 (k), Cor Preta - Terceira equivalencia,
modelo y3 (k).

Atratores
4

3

2

1

y(k4)

100

200

300

400

500

600

700

800

900

1000

N. de Iterações

0

1

4
500

0

0

1

2

Figura 6 Simulacao do desvio padrao de todas as
equivalencias em todos os softwares. Cor Verde Desvio padrao no Matlab e no Linux, Cor Vermelha - Desvio padrao no Matlab e no Windows, Cor
Azul - Desvio padrao no Scilab e no Linux, Cor
Preta - Desvio padrao no Scilab e no Windows
Como se trata do calculo do desvio padrao,
espera-se que, em simulacoes com resultados computacionalmente equivalentes, o desvio padrao
seja nulo. Contudo, como pode ser observado na
Figura 6, os resuldados obtidos nao sao computacionalmente equivalentes. Para o Matlab executado em Windows e Linux, erros maiores que 10
em relacao ao maior valor apresentado nos resultados acontecem a partir da 816 iteracoes, que equivalem a 9, 79 segundos. Ja no Scilab, executado
em Linux Fedora, o erro acima de 10 acontece a
partir de 817 iteracoes (9, 80 segundos) e no Scilab Windows a partir de 795 iteracoes, equivalente
a 9, 54 segundos).
E importante ressaltar que as simulacoes nao
apresentaram diferencas quando realizadas em
hardwares diferentes. Alem disso, seriam necessarias simulacoes do modelo com todas as equivalencias matematicas possveis para uma melhor
aproximacao do valor esperado para, consequentemente, estabelecer qual delas seria a mais confiavel.

3

5
4
4

3

2

1

0
y(k)

1

2

3

Figura 5 Simulacao do Atrator utilizando o modelo y1 (k) usando todos os softwares e sistemas
operacionais. Cor verde - y1 (k) no Matlab e no
Linux, Cor Vermelha - y1 (k) no Matlab e no Windows, Cor Azul - y1 (k) no Scilab e no Linux, Cor
Preta - y1 (k) no Scilab e no Windows.

O grafico da Figura 6 mostra a relacao do desvio padrao pelo tempo dos resultados obtidos nos
quatro softwares utilizados.

ISSN 2525-8311

Conclusoes

4

Este trabalho apresentou uma analise da influencia de softwares, hardwares e sistemas_operacionais na simulacao_de_sistemas_dinamicos nao lineares. Para tal analise, foram utilizados os softwares Scilab e Matlab, executados em dois hardwares
diferentes e dois sistemas_operacionais diferentes
para simular diferentes equivalencias matematicas
de um modelo NAR do circuito de Chua. Alem
disto, propos-se um ndice para verificar a confiabilidade das simulacoes dado um erro maximo pre
estabelecido.
Os resultados obtidos mostraram que a
mesma equivalencia matematica de um modelo
pode apresentar diferentes resultados, alterandose apenas o software ou o sistema operacional uti-

3334

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

lizado para executar a simulacao. Foi constatado
que o software Scilab apresenta diferentes valores
para uma mesma equivalencia matematica de um
modelo, se este e simulado em sistemas_operacionais diferentes.
Alem disso, foi identificado que diferentes representacoes matematicas, mas equivalente entre
si, tambem influenciam na resposta obtida computacionalmente. Tanto o software Scilab quanto
o Matlab se mostraram passveis desta questao,
apresentando diferencas nos resultados em todos
os sistemas_operacionais e hardwares testados.
Contudo, uma mesma equivalencia matematica
executada em um mesmo software e sistema operacional, alterando-se apenas o hardware, apresentou o mesmo resultado.
Trabalhos futuros devem incluir mais softwares utilizados para simulacoes de sistemas_nao_lineares, bem como outros sistemas_operacionais
e hardwares. Pretende-se, tambem, investigar a
causa matematica das divergencias apresentadas
neste trabalho, a luz da norma IEEE 754 que versa
sobre aritmetica de pontos flutuantes.

Galias, Z. (2013). The dangers of rounding error
for simulations and analysis of nonlinear circuits and systems - and how to avoid them,
IEEE Circuits and Magazine .

Agradecimentos

Martins, S. A. M. and Aguirre, L. A. (2014). Narx
modelling of the bouc-wen model, Anais
do XX Congresso Brasileiro de Automatica
pp. 20512057.

Os autores agradecem a UFSJ e as agencias CAPES, CNPq e FAPEMIG pelo apoio.
Referencias
Aguirre, L. A. (2007). Introducao a identificacao
de sistemas  Tecnicas lineares e nao lineares
aplicadas a sistemas reais, Editora UFMG.

IEEE Standard for floating-point arithmetic
(2008). IEEE Std 754-2008.
Liao, S. and Wang, P. (2014). On the mathematically reliable long-term simulation of chaotic
solutions of Lorenz equation in the interval
0,10000, Science China Physics, Mechanics
and Astronomy 57(2) 330335.
Ljung, L. (1987). System identification theory
for the user, Prentice-Hall information and
system sciences series, Prentice-Hall.
Lorenz, E. (1963). Deterministic nonperiodic flow,
J Atmospheric Science .
Lozi, R. and Valrose, P. (2012). Can we trust in
numerical computations of chaotic solutions
of dynamical systems ?, Proceedings in Chaos
pp. 141.

Martins, S. A. M., Nepomuceno, E. G. and Barroso, M. F. S. (2013). Improved structure
detection for polynomial narx models using a
multiobjective error reduction ratio, Journal
of Control, Automation and Electrical Systems 24(6) 764772.

Billings, S. A. (2013). Nonlinear system identification NARMAX methods in the time, frequency, and spatio-temporal domains, Wiley.

Monteiro, L. H. A. (2006). Sistemas dinamicos,
Editora Livraria da Fsica.

Bunimovich, L. A. (2014). Short- and long-term
forecast for chaotic and random systems (50
years after lorenzs paper), 27(9) R51R60.

Nepomuceno, E. G. and Martins, S. A. M. (2016).
A lower bound error for free-run simulation
of the polynomial narmax, Systems Science
and Control Engineering .

Chua, L. O., Wu, C. W., Huang, A. and Zhong,
G.-Q. (1993). A universal circuit for studying
and generating chaos-part 1 Strange attractors, IEEE Transactions on Circuits and
Systems-IFundamental Theory and Applications 40(10).

Pereira, L. O., Sansao, J. P. H., Cardoso, A. S. V.
and Mozelli, L. A. (2014). Plataforma didatica e experimental para investigacoes do circuito_de_chua, Anais do XX Congresso Brasileiro de Automatica .

Correa, M. V. (1997). Identificacao de sistemas_dinamicos nao-lineares utilizando modelos_narmax racionais  aplicacoes a sistemas reais,
Masters thesis, Universidade Federal de Minas Gerais.

Rahman, A., Islam, A. T. M. S., Khalid, M.,
Abdullah-Al-Kafi and Rahman, M. (2014).
Optimized hardware architecture for implementing IEEE 754 standard double precision
floating point adder  subtractor, pp. 147
152.

Dedieu, H., Kennedy, M. P. and Hasler, M. (1993).
Chaos shift keying - Modulation and demodulation of a chaotic carrier using selfsynchronizing chua circuits, Ieee Transactions on Circuits and Systems Ii-Analog and
Digital Signal Processing 40(10) 634642.

ISSN 2525-8311

Valerio, L. R. (2014). Dinamica nao-linear e caos
o circuito_de_chua, Trabalho de Conclusao de
Curso. Universidade Federal de Alfenas.

3335