Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

VERIFICATION OF AUTOMATED SYSTEMS USING INVARIANTS
Arianna Z. Olivera Salmon, Pedro M. G. del Foyo, Jose R. Silva


Design Lab, Department of Mechatronics and Mechanical Systems Engineering, University of Sao
Paulo
Av. Professor Mello Moraes, 2231, CEP 05508-970
Sao PauloSP, Brazil


Mechanical Engineering Department, Federal University of Pernambuco,
Av. Academico Helio Ramos sn, CEP 50670-901
RecifePE, Brazil
Emails arianna@usp.br, pedro.foyo@ufpe.br, reinaldo@usp.br

Abstract Nowadays, Petri net and this extensions has been used for modeling and verification of complex
systems, used as a sound description language. Algorithms derived from this modeling framework can facilitate
the analysis and verification of properties. Methods of verification based in invariants are among the most
computacionally efficient and allow the verification of other important properties. This work proposes the use of
invariants for the verification of desirable properties for an automatic system in the early design phase. Therefore
invariants are used to validate requirements assuming they are elicited using UML Diagrams and modeled also
in Petri Nets.
Keywords

Invariants, Verification, Petri net.

Resumo A Rede de Petri e suas extensoes sao amplamente usadas na modelagem, analise e verificacao
de sistemas_complexos, devido fundamentalmente a expressividade da linguagem de descricao e aos algoritmos
derivados deste formalismo, que facilitam a analise e verificacao de propriedades. Os metodos de verificacao
baseados no calculo de invariantes sao considerados entre os algoritmos computacionalmente mais eficientes. Neste
trabalho mostraremos mais uma vertente para o uso de invariantes na verificacao de propriedade desejaveis em
sistemas automatizados. Neste caso, os invariantes serao usados para validar requisitos ainda na fase preliminar
do processo de design, assumindo que estes requisitos sejam representados em UML e modelados tambem em
redes de Petri.
Palavras-chave

.

such as Petri Nets and associated to invariants 1 .
Therefore it is a challenge and also a goal to introduce invariant analysis in the early phases of
the design process to provide correctness and also
traceability. Specially when dealing with automated systems this approach would be advisable,
since it is imperative to guarantee correctness of
behavior to such systems since the begining of design.
Those are only some of the reasons why property analysis of discrete systems - specially invariant analysis - has received much attention in the
last three decades with the appearance of general proposals (Murata, 1989), (Silva, 1998), disregarding its insertion in the design process. The
computation complexity the invariant method has
attracted more attention due to its efficiency and
lead to proposals relaying on schematic approach
and providing algorithms to a next design phase
whth a formal modeling already done. Thus, invariant analysis is normally attached to the design
phase, that is, it is not present in the requirement
analysis and specification phase.
The main goal of the approach presented in
this work is just to provide support for the early
phase of project development, mainly the require-

Introduction

The raising demand for complex systems inspired
recent developments in formal methods and computer tools to support applications in this domain.
However, the challenge to treat large and complex
systems still persist as a need to improve some
analytical approaches based on property analysis
and verification. Discrete systems approach is a
promising path for the development and application of such methods.
A well known formal representation for discrete system is the schematic approach based on
Petri Nets. One of the reasons for the success
of Petri Nets is the expressive and simple way
it treats (simple or complex) problems and the
formal approach to concurrency, besides a sound
property analysis, based on graph theory. One
of these properties is invariant analysis, which is
present is several knowledge fields, ranging from
software engineering to physics or biology. In this
work we will explore the vision of invariants close
to software engineering.
In fact, invariants are properties that appear
in the whole design process. If a project of a discrete target admit a dynamic behavior, it could
as well be described by a discrete representation

1 In other fields invariants could also be associate to formal descriptions based on differential equations as well.

3511

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

ments analysis. We assume that requirements
are already elicited and represented in a classic
languagenotation as UML (Unified Modeling Language). The relationship between the system and
its context environment would be described in Object Constraint Language (OCL), which is very important to detach invariants. Prospective results
are illustrated by a case study based on a evaporation system (Machado et al., 2007).
The paper is organized in the following way
Section 2 describe some formal definitions concerning invariants in Petri Nets representation.
Section 3 presents the main analysis methods existing in the literature based on classics Petri Nets
(PlaceTransition). Sections 4 and 5 present the
proposal of the authors and a case study. Section
6 has some final considerations and oint to further
work.
2

the transitions belonging to the transition invariant and zeros everywhere else. The integers denote how many times the corresponding transition
must fire in order to go back to the initial marking. They can be derived from the state equation
as
Ay  0
(3)
Transition invariant can be physically interpreted as a firing sequence of transitions that do
not modify the marking of the net. Therefore, the
existence of transition invariants in the Petri net
denotes some cyclic behaviour.
As with place invariants, any linear combination of transition invariants is also a transition
invariant for the Petri net.
3

Invariants are fundamental algebraic characteristics of Petri nets, and are used in various situations, such as checking (the necessary condition
of) liveness, boundedness, the presence of loops
and so on (Murata, 1989). There are sets of places
and transitions which behaviour do not change
during execution. The identification and interpretation of each of these sets is important, because they reflect certain properties of the net that
might be of interest to the modeling system.
Place and transition invariants are important
issues for analysing Petri nets since they allow
for the nets structure to be investigated independently of any dynamic process (Lautenbach,
1987). Another advantage of the invariants is
that its analysis can be performed on local subnets without considering the whole system, i.e.,
the analysis of invariants can furthermore be inserted into a hierarchical structured net 2 . Therefore invariants can be calculated in any abstraction level. Some works consider that invariants are
not much affected by refinements on the net. Besides, the calculation of invariants is consistent in
the whole net, except by the dimension of the vector, which is proportional to the number of places
or transitions.
Invariants are also used for model validation
and verification. In addition, the invariant gives
us a mathematical tool for analysing other properties of the net. Currently, the calculation of
invariants has low computational cost, compared
with other methods of analysis, like the method
of reachability tree.
Two formal presentations have been extensively used for structural analysis graph theory
and linear algebra. Clearly,the main goal is to develop techniques that can be easily implemented

Invariants in Petri nets Definitions

Invariants are one of the structural properties of
Petri nets that depend only on its topological
structure and not on the nets initial marking.
There are two kinds of invariants place invariants and transition invariants.
Definicao 1 Place invariants are sets of places
whose token distribution remains always constant.These invariants represent a conservative
component of the net. They are represented by
an n-column vector x, where n is the number of
places of the Petri net. The non-zero entries correspond to the places that belong to the particular place invariant and the zeros to the remaining
places. Place invariants are a non-negative integer solutions of the homogeneous equation
AT x  0

(1)

Considering the state equation of a net system, that means to have an integer vector solution
x that satisfies the equation
M T x  M0T x

Analysis of invariants in Petri nets

(2)

Where M0 is an initial marking and M belongs to R(M0 ).
Equation 2 means that the possibly weighted
sum of the tokens in the places of the invariant
remains constant in all markings and this sum is
determined by the initial marking of the Petri net.
Definicao 2 Transition invariants denote a sequence of transitions which firing can reproduce
the initial marking in the sequence. These invariants represent the repetitive components of the
net and are represented by an m-column vector y
(where m is the number of transitions) that contains integers in the positions corresponding to

2 The project ISOIEC 15.909 is developing a unification
of Petri nets, where the basic nets are the PlaceTransition
(PT), coloured nets, and asymmetric nets and where hierarchical nets are considered extensions.

3512

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

on a computer. This has motivated the development of methods and techniques to optimize
the analysis of the structural properties of Petri
nets. Techniques that have been considered efficient are those based on linear-algebra, because of
their simplicity to obtaining invariants as a initial
step for studying the structural properties of Petri
nets.
For instance, many works have been developed to analyse properties of Petri nets using Linear Programing techniques. One of the main advantages of using this method is that the computational complexity of linear programming problems
is polynomial (Silva et al., 1998).
There are other works, such as (Bouyekhf and
Moudni, 2005), that considers some structural aspects of general Petri nets and tries to improve
the link between Petri nets and linear algebraic
techniques.
Regardeless the method used for analysis,
Petri nets has been used on many phases of software development (Denaro and Pezze, 2004), due
to its suitability to represent and understand the
behaviour of systems. Properties of Petri nets
can be used to the representation and verification
of requirements. Specifically, invariants are the
properties of Petri nets most used on the elicitation and analysis of requirements, which allows to
analyse and validate the system in the early phase
of project. Invariants represent properties of the
systems that are satisfied in all reachable states of
the system, enabling the verification from several
dynamic properties.
Verification using invariants is very similar to
the use of invariants in programming verification
the designer must find a set of equations that denotes the desired properties and test if they hold
in any reachable state.
4

tween models, specially for dynamic semantics related to the system behaviour (Engels et al., 2002).
Petri nets can be attached to the analysis and verification object modeling systems in a very suitable
way.
There are several proposals to deal with UML
using Petri nets extensions as a formal intermediate model. In (Zhao et al., 2004) it is presented
some technical transformation of graphs, which
can be used to translate UML diagrams into Petri
nets. Other approaches (Yao and Shatz, 2006),
(Doll et al., 2004), are using the information of
some diagrams such as the sequence diagrams and
activity diagrams to transform them on a Petri net
and thereafter do a consistency checking.
The various diagrams which form the UML
model are rather correlated, and some relationships among diagrams reflect the grammar rules
and semantics of UML itself. Therefore, when
transforming a UML model into a Petri net model,
not only the static structure and dynamic semantic of every single diagram need to be transformed,
but also the relationships among them. In (Zhao
et al., 2004) three layers representing the relationship among UML diagrams were identified the relationship among different contextual instances of
the same UML diagram the relationship among
different diagrams from the same view of a system and the relationship among various diagrams
from different views of a system. This third layer
describes the relationship between the diagrams
of static structure view and the diagrams of dynamic behaviour view. According to Zhao et al.
(Zhao et al., 2004), the third layer of relationship
is rarely considered in the available works on verification and transformation of UML models. In
this paper our goal is verify models that integrate
diagrams with static and dynamic views, thus contributing to the third relationship level.
The first step of our approach will be to elicit
and represent the requirements of a system using
UML class and statechart diagrams (or any other
state diagram). UML has a high power graphic
expression, but despite this, there are properties
and restrictions of systems that are very complex
or impossible to be adequately expressed in a diagram. Even though UML has extension mechanisms such as stereotypes, tagged values and predefined constraints, those could be enough. For
this reason, we will use OCL to formulate some
of the system requirements, primarily those representing invariants.
When the UML modelling is done, the resulting models will be transformed into Petri net. The
transformation will be based on a method proposed by (Baresi and Pezze, 2001). Finally, a Petri
net will be built using the GHENeSys environment
3
. We illustrate the proposed approach through a

Modeling systems using UML and
Petri nets

UML is a suitable language for modeling systems, which has been successfully used in different
projects of system design. Recent research shows
that UML has became the standard for the analysis and design of object-oriented systems in 2004
Allan Zeichick (Zeichick, 2004) published the result of an inquire among developers showning that
about 23 of software development organizations
were using UML, with 82 predicting they would
use it in future (totally or partially). According to
Gartner Inc., UML is now used by more than 10
million IT professionals. The existence of a standard notation set has released pent-up demands
and created an industry (Watson, 2008).
UML provides a broad set of diagrams to
model every aspect of an object-oriented application design in sufficient detail, but lacks any
mechanism to rigorously check consistency be-

3 GHENeSys (General Hierarchical Enhanced Net System) is a general environment proposed to unify classic,

3513

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

case study.
4.1

Describing the case study

Figure 1 shows a Evaporator System which consists of two tanks (one of them is heated and
mixed), a condenser, level sensors and onoff
valves, as stated in (Machado et al., 2007). In
the normal operation mode the system works as
follows.
 Tank1 is filled with two solutions by opening
valves V1 and V2.
 The mixer starts working in order to promote
the dilution.

Figure 1 Evaporator System

 After two time units, the heated device is
switched on for 20 time units to increase temperature solution. During this period part of
the liquid is evaporated and cooled by the
condenser. At that point the required liquid concentration has been reached and the
heater is switched off.
 When Tank1 is full valves V1 e V2 are closed
.
 The remaining liquid is drained to tank2 by
opening valve V3.
 The mixing device is switched off when tank1
is empty and V3 is closed.
 The solution stays in tank2 for postprocessing, to stay liquid, for 32 time units
and then valve V4 is open to empty tank2.

Figure 2 Class diagram of Plant

Throughout normal operation mode, the system may malfunction. During evaporation, the
condenser may fail the steam cannot be cooled
and the pressure inside the condenser rises. Therefore, the heater must be switched off to avoid the
condenser explosion. By doing so, the temperature of tank1 decreases and the solution may become solid and cannot be drained in tank2. Hence,
valve V3 must be opened early enough, but after
opening first valve V4, for preventing tank2 overflow.
4.2

UML diagrams

The plant and the controller of the system will
be modeled separately. Figures 2 and 3 show the
class diagrams of the plant and the controller respectively.
Figures 4 and 5 show the statechart diagrams
of the plant and the controller respectively.

Figure 3 Class diagram of Controller
4.3

Transforming UML semantics diagrams in
Petri nets

According to (Baresi and Pezze, 2001) the
statechart diagrams were transformed into a

high level and extensions of PetriNets, including objectoriented nets.

3514

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

and the controller respectively. The model was
edited using the GHENeSys environment (Salmon
et al., 2011).

Figure 6 Petri net model of the Plant
Figure 4 Statechart diagram of Plant(a)Tank1,
(b)Tank2, (c)Condenser

Figure 7 Petri net model of the Controller
Figure 5 Statechart diagram of Controller
5
GHENeSys net (del Foyo, 2009). For this work
the time constraints of the system were disregarded. Some states of statechart diagrams and
their corresponding places into the GHENeSys net
are summarized on table 1.

Verifying the system requirements

Representation and verification of requirements
using invariants is an approach that has been
widely discussed. The verification method based
on invariants has some advantages compared with
other methods of verification like the model_checking.
Model checking is a technique for verifying
systems which automatically check the validity of
a property of a modeled system. It has a number
of advantages over traditional approaches based
on simulation, testing, and deductive reasoning.
However, model_checking is limited by the state
explosion problem, which occurs in large systems.
In such cases, as state variables in the system
increases, the size of its state space grows exponentially. The main challenge in model_checking
is therfore to deal with the state space explosion
problem during the state space generation.
Invariants are used for the analysis of some
structural properties of Petri nets, as well as for
the verification of system requirements. Unlike

Input signals of the controller
State
Place
Tank1 FullTank2 Full
T1FT2F
Tank1 EmptyTank2 Empty
T1ET2E
Output signals of the controller
OnHeaterOffHeater
HOn HOff
OnMixerOffMixer
MOnMOff
openV1V2
V1V2opened
closeV1V2
V1V2closed
openV3V4
V3V4opened
closeV3V4
V3V4closed
Malf
malf

Table 1 Correspondence between the states of
statechart diagrams and their respective places in
the Petri nets.
Figures 6 and 7 show the nets of the plant

3515

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

model_checking, in the invariant-based verification
there is no need to compute all reachable states
of the system, which makes the method computationally efficient. However the verification using invariants is limited by the amount of properties that can be verified. On the other hand,
despite the fact that using invariant make it possible to check several structural properties of the
net, invariant analysis allows only to decide partially about some properties, like as deadlock, i.e.,
it finds only necessary or just sufficient conditions.

5.1

Setting the invariant

In the following we define the requirement of the
Evaporator systems, shown in figure 1, which will
be verified using Petri net invariants. To do so, we
consider the information presented in the class diagrams shown in Figures 2 and 3, besides some additional specifications described in OCL. System
specifications can be written as a sum of elements
of the marking vector
r
X

On the other hand, invariants can also be used
in system specification (Yamalidou et al., 1996) to
express dynamic aspects, with the advantage of
being a schematic representation, that is, suitable
to a set of different artefacts and applications. So,
the analysis and verification of requirements using
invariants can be done before the system is modeled (in design phase), with a low computational
cost . This is the main advantage the invariantbased verification in this early phase.

pi  k

(4)

i1

Equation 4 means that the sum of tokens in
the places p1 , ..., pr of the Petri net can never
exceed the number k. This number k will depend on the initial marking of the net (M0 ) with
k  m(M0 ).
In this paper it was just verified those requirements considered the most important for the system, however these properties are not the only one
that could be verified using the proposed method.
Table 2 shows specifications in OCL concerning the Plant, whereas in table 3 the invariants of
the Plant are defined, corresponding to each specification described in table 2.

If the properties that need to be checked cannot be represented by invariants, then verification
using model_checking is more suitable.
This section shows the use of invariants in the
property verification of systems modeled in Petri
nets. The invariants are used both in the representation and verification of system requirements
as presented in (Salmon and Silva, 2012).

Id
1

2

In (Salmon and Silva, 2012) invariants were
defined before the construction of a Petri net
model. In fact they were used in the construction of the Petri net model. Thus, the existence
of the desired invariants were ensured in the whole
design process. In this method, the amount of requirements that can be verified is limited. Therefore, in this paper we propose a variation on the
method presented in (Salmon and Silva, 2012) Invariants continue to be defined before net modeling, as was shown in class diagrams of figures 2
and 3, but it will not be regarded in the synthesis
of the Petri net. Instead, the requirements to be
verified will be represented as formal rules, transformed into a set of inequalities which represent
the invariants place.

3

context CPalnt inv
OCL specification
(Condenser.SteamProd) implies
not ((Condenser.NoSteamProd)
and (Condenser.Error))
(Tank1.Full) or (Tank1.Empty)
or (Tank1.Filling) or (Tank1.Overflow) )
(Tank2.Full) or (Tank2.Empty)
or (Tank2.Filling) or (Tank2.Overflow) )

Table 2 OCL specification corresponding to the
Plant
Id
1
2
3

Invariants
M (SteamP rod) + M (N oSteamP rod)
+M (Error)  1
M (T 1F ) + M (T 1E) + M (T 1F illing)
+M (T 1Overf low)  1
M (T 2F ) + M (T 2E) + M (T 2F illing)
+M (T 2Overf low)  1

Table 3 Definition of the inequalities that represent invariants of place for the Plant
Table 4 shows specifications in OCL for the
Controller, and in table 5 the invariants of the
Controller are defined, corresponding to each
specification described in table 4.

To verify the existence of desired invariants
we use an algorithm to calculate the invariant,
which is based on linear algebra methods. The
proposed algorithm obtain the set of vectors that
represent the basic solution. This means that any
linear combination of these vectors is also a solution of the homogeneous system shown in equation
1. Thus we can obtain all possible invariants.

5.2

Computing the invariants

To verify the accuracy of the equations described
in tables 3 and 5 we first compute the invariants,
thereafter we verify that the sets of places of each
inequality belong to some vector in the solution
set of Petri net place invariants.

Following we will verify some of the desirable
requirements in the evaporation system shown in
figure 1.

3516

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

Id
1
2
3
4
5
6

context CControler inv
OCL specification
((Tank1.Empty) or (Tank2.Empty))
implies (not(V1V2.open))
(Tank1.Full) implies (Mixer.On)
(Tank1.full) implies (V1V2.close)
(Mixer.off) implies
( (V3.close) and (Tank1.Empty))
(Tank2.full) implies (V4.open)
( (Tank1.Empty) and (Tank2.Empty)
and (malf.false) ) implies (alarm.off)

Table 4 OCL specification corresponding to the
Controller
Id
1
2
3
4
5
6

Invariants
M (T 1E) + M (T 2E) + M (V 1V 2open)  2
M (auxT 1F ) + M (M on)  1
M (auxT 1F ) + M (V 1V 2closed)  1
M (T 1E) + M (V 3closed) + M (M of f )  3
M (T 2F ) + M (V aopen)  1
M (T 1E) + M (T 2E) + M (N ormalF un)+
M (Alarmof f )  4

Figure 9 Invariants of Petri net corresponding to
the Plant

Table 5 Definition of the inequalities that represent invariants of place for the Controller
Invariants were calculated by GHENeSys system, which provides a set of invariants that represent the basic solution i.e. the generator set of
all possible invariants (Salmon et al., 2011). Thus,
any invariant of the net can be obtained as a linear
combination of the vectors of the generator set.
Using the invariants of the generator set obtained by GHENeSys system, we calculate the invariants shown in the figures 9 and 11, which correspond to the invariants of the plant and controller respectively. These set of invariants coincide with the equations defined in tables 3 and
5, therefore this demonstrate that the equations
described in these tables are true. Thus, it is possible to verify that the system meets the desired
requirements.
Note that equation 1 of table 3 is a subset
of equations that form the invariant 1 of Figure
9, and so the rest of the invariants respectively.
A similar relation occur for the equations of the
table 5 and figure 11
The invariants places that we want to verify
are coloured in orange in the figures 9 and 11.

Figure 10 Incidence matrix and invariants of the
Controller obtained by GHENeSys system.

Figure 11 Invariants of Petri net corresponding
to the Controller
6

Conclusion

In this work we have used requirements represented by class and state diagrams characteristic
of UML as a start point to insert property analysis
- and specifically invariant analysis - in the design
process of automated systems, where the holding
of the invariant property is assured since the very
beginning of the process up to the end. The introduction of requirements is made using OCL as

Figure 8 Incidence matrix and invariants of the
Plant obtained by GHENeSys system.

3517

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

a complement of the UML representation.
The proposed method is promising and can
lead to a consistent way to design (discrete) automated systems. A comparison is made with model
checking showing that if timed system is the target the proposed approach can still provide good
guidance with a good computational performance.
However, model_checking allow the verification of
a bigger and diversified set of properties specially
to real time systems. Thus, the idea here is not to
compete with model_checking but just show that
for a class of system good results could be obtained
with less effort.
However, the great advantage or the proposal
is to be use invariants since the very beginning of
the process, introducing it in requirements analysis. In this work we used the canonical representation based on UML complemented by OCL. In
further work it would be a good idea to explore
object-oriented representations with a structured
semantic such as the one used in the KAOS system. In such case the synthesis of a Petri net
could be not so easy, but on the other hand the
use of invariants could fit even better in the design
process.

uml diagrams, Integrated Design and Process
Technology .
Lautenbach, K. (1987). Linear algebraic techniques for placetransition nets, SpringerVerlag pp. 142167.
Machado, J. M., Campos, J. C., Soares, F., Leao,
C. P. and da Silva, J. C. L. F. (2007). Simulation and formal verification of industrial
systems controllers, Proceedings of the 19th
International Congress of Mechanical Engineering, ABCM, Brasilia, Brazil.
Murata, T. (1989). Petri nets properties, analysis, and applications, IEEE 77 541580.
Salmon, A. Z. O., Miralles, J. A., del Foyo, P.
M. G. and Silva, J. R. (2011). Towards a
unified view of modelling and design with
GHENeSys., Proceedings of the 21st International Congress of Mechanical Engineering .
Salmon, A. Z. O. and Silva, J. R. (2012). Usando
invariantes na analise_de_requisitos. CBA
Congresso Brasileiro de Automatica. Campina GrandePB - Brasil .
Silva, J. R. (1998). Interactive design of integrated
systems, Intelligent Systems for Manufacturing.

Acknowledgments
The authors Arianna Z. Olivera Salmon and P. M.
G. del Foyo, would like to thank the Brazilian research funding agencies CAPES and CNPq which
partially support this research through scholarship programs.
References

Silva, M., Terue, E. and Colom, J. M. (1998). Linear algebraic and linear programming techniques for the analysis of placetransition net
systems, in S. B. . Heidelberg (ed.), Lectures
on Petri Nets I Basic Models, Vol. 1491 of
Lecture Notes in Computer Science, pp. 309
373.

Baresi, L. and Pezze, M. (2001). Improving UML
with Petri nets, Electronic Notes in Theoretical Computer Science 44 107119.

Watson, A. (2008). UML vs. DSLs A false dichotomy, Technical Report 08-08-03, Object
Managemet Group.

Bouyekhf, R. and Moudni, A. E. (2005). On the
analysis of some structural properties of Petri
nets, IEEE Transactions on Systems, Man
and Cybernetics, Part A 35 784 794.

Yamalidou, E., Moody, J., Lemmon, M. and
Antsaklis, P. (1996). Feedback control of
petri nets based on place invariants, pp. 15
28.

del Foyo, P. M. G. (2009). Verificacao Formal de
Sistemas Discretos Distribudos, PhD thesis,
Escola Politecnica da Universidade de Sao
Paulo.

Yao, S. and Shatz, S. M. (2006). Consistency
checking of UML dynamic models based
on Petri net techniques., Proceedings of the
15th International Conference on Computer,
IEEE Computer Society, IEEE, Washington
DC, USA, pp. 289297.

Denaro, G. and Pezze, M. (2004). Petri nets and
software engineering, Lecture Notes in Computer Science 309 439466.

Zeichick, A. (2004). UML adoption making strong
progress, SD Times .

Doll, L. M., de Souza, J. U. F. and Stadzisz, P. C.
(2004). Verificacao e validacao de sistemas
orientados a objetos usando redes de Petri, I
Workshop de Computacao - WORKCOMPSUL, Palhoca, SC, Brasil.

Zhao, Y., Fan, Y., Bai, X., Wang, Y., Cai, H. and
Ding, W. (2004). Towards formal verification of UML diagrams based on graph transformation, Proceedings of the IEEE International Conference on E-Commerce Technology for Dynamic E-Business, IEEE Computer Society.

Engels, G., Hausmann, J., Heckel, R. and Sauer,
S. (2002). Testing the consistency of dynamic

3518