XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

MODELAGEM E VERIFICACAO DE PROGRAMAS EM DIAGRAMA LADDER
PARA CONTROLADORES LOGICOS PROGRAMAVEIS
Mateus F. de Souza, Jean-Marie Farines, Max H. de Queiroz


Departamento de Automacao e Sistemas - DAS, Universidade Federal de Santa Catarina - UFSC
88040-900, Florianopolis, SC, Brasil
Emails msouza, farines, max@das.ufsc.br
Abstract To solve the problems associated with verification of complex industrial systems, such as those
developed for PLCs, it is required formal verification and modeling techniques, as a way to prove that the
program complies with the expected specifications. This paper proposes a modeling and verification method
for PLC programs written in Ladder Diagram language. This approach follows the model driven engineering
paradigm in order to translate user models into verification model. The programs verification, inserted in the
formal verification chain, uses the model-checking. The validation of the proposal is made by the modeling and
properties verification of a pneumatic automation system.
PLC, Ladder Diagram, Formal Verification, Model-checking, MDE, TINA.

Keywords

Resumo Para resolver os problemas associados a verificacao de sistemas_industriais complexos, como os
desenvolvidos para CLPs, sao necessarias tecnicas de modelagem e verificacao_formal, como forma de provar que
o programa esta de acordo com as especificacoes esperadas. Neste artigo e proposto um metodo de modelagem e
verificacao de programas de CLP escritos na linguagem Diagrama Ladder. Esta abordagem segue o paradigma
da engenharia dirigida a modelos e consiste em transformar modelos proximos ao usuario em um modelo de
verificacao. A verificacao dos programas, inseridos na cadeia de verificacao_formal, utiliza o model-checking. A
validacao da proposta e feita atraves da modelagem e verificacao das propriedades de um sistema de automacao
pneumatica.
Palavras-chave

.

todo de modelagem e verificacao de programas de
CLP escritos na linguagem LD. Esta abordagem
segue o paradigma da engenharia dirigida a modelos e consiste em transformar modelos proximos
do usuario em um modelo proximo da verificacao. Neste trabalho e proposto uma transformacao dividida em duas etapas. A primeira e a transformacao da linguagem LD para uma linguagem
intermediaria, denominada FIACRE (Berthomieu
et al., 2008), que esta integrada no ambiente de
desenvolvimento do projeto Topcased (Farail and
Gaufillet, 2005). A segunda e a transformacao
de FIACRE em uma linguagem para aplicar a
verificacao (sistema de transicao temporizado TTS). A verificacao dos programas em LD, inseridos na cadeia de verificacao_formal, utiliza o
model-checking sobre a traducao em TTS. A validacao da proposta sera feita atraves da modelagem e verificacao de um sistema de automacao
pneumatica.
Na secao 2 sao descritos os conceitos relacionados a engenharia dirigida a modelos, com a
apresentacao da transformacao de modelos, a cadeia de verificacao_formal proposta neste trabalho
e a linguagem intermediaria FIACRE. Na secao 3
e descrita a cadeia de verificacao de programas de
CLPs, onde sao apresentadas as regras de transformacao de programas em LD para FIACRE e
a transformacao de FIACRE para TTS. Na secao
4 e apresentada a verificacao de propriedades em
programas de CLP. O estudo de caso para um sistema de automacao pneumatica e apresentado na
secao 5.

Introducao

A diversidade das linguagens de programacao de
CLPs (controladores_logicos_programaveis), utilizadas por diferentes fornecedores, juntamente com
sua crescente complexidade, levou o IEC (International Electrotechnical Commission) a aprovar
um conjunto de normas para padronizar a configuracao, programacao e utilizacao de CLPs. Um
dos componentes dessa norma, o IEC 61131-3
(IEC, 2003), define a forma como o usuario pode
programar o CLP, e inclui cinco linguagens de programacao (Tisserant et al., 2007). Dentre elas, a
mais usada pelos tecnicos e engenheiros de processo e o Diagrama Ladder (LD - Ladder Diagram), baseado nos diagramas logicos de contatos
eletricos de reles.
Tradicionalmente, a verificacao de programas
feitos em LD depende de testes em tempo de execucao e simulacoes baseadas na experiencia do
projetista. No entanto, simulacoes e testes podem
ser usados apenas para um numero limitado de
cenarios, embora o numero destes cenarios possa
crescer rapidamente a medida que o numero de
variaveis de entrada aumente. Ja os metodos de
verificacao baseados em uma representacao formal
do programa, tal como a verificacao por modelchecking (Clarke et al., 1999), podem apresentar
uma solucao interessante pela exaustividade deste
tipo de abordagem, pela existencia de ferramentas automaticas de verificacao e pela garantia de
correcao da programacao (Moon, 1994).
O objetivo deste trabalho e propor um me-

4801

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

2

Engenharia dirigida a modelos

Nesta secao e apresentada a engenharia dirigida
a modelos, utilizada nas transformacoes de modelos da cadeia de verificacao_formal. O termo MDE
(Model Driven Engineering) e normalmente usado
para descrever formas de desenvolvimento de sistemas em que modelos abstratos sao criados e sistematicamente transformados em implementacoes
concretas. O MDE e uma abordagem recente na
comunidade de desenvolvimento de software em
que os modelos sao considerados como as principais entidades de todo o ciclo de vida do software
(OMG, 2006).
2.1

Figura 1 Visao geral da estrutura para a transformacao de modelos.
de linguagens de modelagem proprias de usuarios,
permitem, por transformacoes sucessivas, utilizar
as ferramentas de verificacao_formal. No contexto
deste trabalho, denomina-se por cadeia de verificacao, a sequencia de transformacoes e ferramentas
necessarias para realizar o processo de verificacao
formal de um sistema descrito em uma linguagem
de usuario. A utilizacao de uma linguagem intermediaria na cadeia de verificacao e necessaria
para poder unificar os diversos tipos de entrada
nas sadas para as ferramentas de verificacao do
projeto Topcased.
A Fig. 2 representa a cadeia de verificacao para CLPs utilizando a abordagem modelchecking apresentada neste trabalho. Os programas em LD sao editados no PLCOpen Editor
(PLCOpen, 2008), ferramenta software_livre mantida pela norma IEC. A sada gerada pelo editor de linguagens de CLP da norma e um arquivo
XML descrevendo os programas em LD. Este arquivo gerado serve de entrada para o tradutor
LD-FIACRE. A sada deste tradutor sera um arquivo na linguagem FIACRE que servira de base
para a proxima etapa de traducao FIACRE-TTS.
A transformacao FIACRE-TTS ja foi realizada e
permite que a ferramenta TINA (Time Petri Net
Analyzer ) (TINA, 2009) possa receber o TTS e,
junto com a logica LTL (Linear Temporal Logic),
logica temporal utilizada na verificacao_formal de
modelos, representando as propriedades a serem
verificadas, para realizar a etapa de verificacao
atraves do model-checking. Nesta Fig. 2, o foco
do trabalho esta nos dois blocos grifados, ou seja,
no tradutor LD-FIACRE e na transformacao da
representacao das propriedades para a logica temporal LTL.
Para a transformacao de modelos deste trabalho, devem ser especificados os elementos da transformacao dos programas na linguagem LD para
FIACRE, como a definicao dos metamodelos que
serao utilizados, neste caso, o metamodelo de entrada do LD (descrevendo apenas a sintaxe do LD)
e o metamodelo de sada do FIACRE. Estes metamodelos necessitam estar em conformidade com
a linguagem de transformacao. Tambem sao necessarios os modelos de entrada, atraves dos programas escritos em LD e editados na ferramenta

Transformacao de modelos

De acordo com a MDE, a transformacao de modelos pode ocorrer entre nveis iguais e diferentes
de abstracao, como tambem pode ocorrer entre
mesmos domnios e domnios diferentes. A transformacao e a geracao automatica de um modelo
destino a partir de um modelo origem. Essa transformacao e definida por um conjunto de regras,
que juntas, descrevem como um modelo em uma
linguagem de entrada pode ser transformado em
um ou mais modelos de sada. Para que aconteca
a transformacao entre os modelos, e preciso definir
as regras de transformacao do modelo que representa o transformador. Essas regras sao baseadas
nas estruturas dos elementos dos metamodelos de
origem e de destino. O modelo de transformacao
recebe como entrada o modelo origem e o transforma no modelo destino (MDA, 2003).
A Fig. 1 ilustra, de forma geral, a estrutura
base para a transformacao de modelos. O modelo de entrada Ma deve estar conforme o seu
metamodelo de entrada MMa. O mesmo ocorre
com o modelo de sada Mb, conforme ao metamodelo MMb, e o modelo de transformacao Mt,
conforme o metamodelo MMt. Todos estes metamodelos, por sua vez, devem estar conforme um
meta-metamodelo MMM. Para garantir que uma
transformacao de um modelo em outro seja correta, e necessario que os metamodelos de entrada,
de sada e de transformacao, tenham o mesmo
meta-metamodelo. Desse modo, sera gerado, a
partir do modelo de entrada Ma, um modelo de
sada Mb, de acordo com as regras de transformacao escritas no modelo de transformacao Mt.
2.2

Cadeia de verificacao_formal

Este trabalho esta inserido no contexto do projeto
Topcased (Toolkit in OPen-source for Critical Application and SystEms Development), ambiente de
desenvolvimento com um conjunto de ferramentas de engenharia de sistemas para o desenvolvimento de sistemas crticos de tempo_real (Farail
and Gaufillet, 2005). No ambiente Topcased foram propostas cadeias de verificacao, que a partir

4802

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

As portas e canais de comunicacao fazem
parte da interface de um processo FIACRE. Elas
sao responsaveis pela comunicacao e podem ser
utilizadas para a troca de dados. Os canais sao
usados para definir um conjunto de tipos de dados aceitos por uma porta. Os processos podem
ser vistos como um conjunto finito de portas (utilizadas para efetuar a sincronizacao de comportamento com outros elementos do sistema), de parametros, de estados para o controle interno dos
processos, de variaveis locais e de transicoes atomicas.
As portas permitem a sincronizacao pura ou
a passagem de valores, em que os operadores  ?
e  ! determinam o sentido da comunicacao, ou
seja, se a transicao envia ou recebe um dado. O
componente compreende a composicao paralela de
processos ou de outros componentes, e sao construdos a partir da instanciacao de outros elementos do sistema, especificando as suas interconexoes
e fornecendo uma relacao de prioridades entre elas.
A comunicacao sncrona, presente em FIACRE, e
resultado da composicao paralela de um conjunto
de instancias (Saad, 2008).

Figura 2 Cadeia de verificacao utilizando modelchecking.
PLCOpen Editor, salvos no formato XML. Alem
disso, e necessario o modelo de transformacao,
atraves de uma linguagem de transformacao, com
as regras que mapeiam os elementos do metamodelo LD nos elementos do metamodelo FIACRE,
que possibilitam a descricao dos aspectos dinamicos da linguagem LD. O modelo de transformacao
baseado nas regras de traducao de LD para FIACRE e tratado na secao 3. A transformacao da
representacao das propriedades em logica temporal LTL e apresentada na secao 4.
2.3

3

Linguagem intermediaria de verificacao FIACRE

A cadeia de verificacao de programas
em LD para CLP

Nesta secao e apresentada a cadeia de verificacao que permite transformar um programa na
linguagem de usuario LD em uma especificacao
no modelo TTS que servira de linguagem de entrada para a ferramenta de verificacao por modelchecking.

A linguagem FIACRE (Formato Intermediario
para Arquiteturas de Componentes Distribudos
Embarcados) foi concebida para ser uma linguagem intermediaria formal entre as linguagens de
modelagem de alto nvel e as ferramentas de verificacao que trabalham com linguagens baseadas em
formalismos matematicos. FIACRE e um modelo
formal para representar tanto os aspectos comportamentais como temporais do sistema, em particular os sistemas_distribudos e embarcados. Foi
concebido no ambito de projetos relacionados com
o MDE, portanto e projetado tanto como uma
linguagem destino da ferramenta de transformacao de modelo, como uma linguagem origem de
compiladores com o objetivo final de verificacao
(Berthomieu et al., 2008).
FIACRE e uma linguagem orientada a processos, que sao construdos por um conjunto de
estados, uma lista de transicoes entre estes estados formadas por construcoes classicas (atribuicoes de variaveis, construcoes if-then-else, while,
composicoes sequenciais), nao determinsticas e
para comunicacao atraves de portas. Os componentes descrevem a composicao destes processos.
Um componente e construdo como uma composicao paralela de outros componentes ou processos
que podem se comunicar atraves de portas ou variaveis compartilhadas. As prioridades e as restricoes temporais sao associadas a comunicacao.

3.1

Transformacao de programas em LD para
FIACRE

Nesta subsecao e apresentada a modelagem dos
diversos elementos dos programas na linguagem
LD. Estes modelos servem como base para a definicao das regras de transformacao para FIACRE.
A Fig. 3 ilustra uma visao geral do modelo de
um programa em LD, em um CLP e sua relacao
com o ambiente_externo (planta). No modelo adotado neste trabalho, a parte do programa de CLP
que contem temporizacoes (blocos funcionais com
tempo) sera modelada de forma concorrente com
o ciclo de execucao (leitura, execucao e escrita dos
dados). O restante do programa (elementos basicos, sem tempo) faz parte do modelo do ciclo de
execucao. O CLP e ligado atraves de uma interface de entradasada, com um ambiente_externo,
que corresponde geralmente a uma planta industrial que deve ser controlada. Nas subsecoes seguintes serao descritos os elementos que compoem
um programa de CLP e na secao 5 sera apresentado o ambiente_externo atraves de um exemplo.

4803

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

o proximo rung. No fim do processo do ciclo de
execucao, ocorre a escrita dos dados provenientes
do programa atraves do envio de uma mensagem
com o valor da variavel (dado saida) e ocorre na
transicao com o smbolo  !. Apos a escrita dos dados, atraves da transicao temporizada reinicio,
volta para o estado inicial. Em FIACRE o ciclo
de execucao e apresentado da seguinte forma

Figura 3 Visao geral do modelo comportamental
de um programa em LD.
3.1.1

from inicio select leitura ?dadoentradato rung1
 ac
ao to rung1 end
...
from rungn select escrita !dadosaidato fim
 ac
ao to fim end
from fim reinicio to inicio

Ciclo de execucao

O comportamento do ciclo de execucao e formado
basicamente por tres etapas. Primeiro, as variaveis de entrada, oriundas da planta, sao lidas e
seus valores sao armazenados na memoria. Entao, ocorre a etapa de execucao do programa, calculando os valores de sada, que tambem sao armazenados na memoria, para utilizacao no ciclo
seguinte eou controle da planta. O ciclo de execucao do programa LD e assumido ser periodico,
adotado de acordo com a restricao da ferramenta
utilizada. A Fig. 4 caracteriza o modelo do comportamento geral de um ciclo de execucao, atraves
de automatos, baseado no modelo apresentado por
Mokadem et al. (2005). O sistema comeca de um
estado inicial, a seguir ocorre a transicao de leitura de um dado de entrada. Apos a leitura dos
dados, ocorrem as transicoes de execucao do programa, onde estao as logicas de controle, com os
elementos basicos (rungs com contatos e bobinas),
representadas pelo pontilhado. Finalizando a execucao, ocorre a transicao de escrita do dado de
sada. Depois de atualizados os dados, volta-se ao
estado inicial, atraves da transicao de reinicio.

Na etapa de execucao do programa, entre a
leitura e a escrita, ocorre o detalhamento dos
rungs do LD, podendo ocorrer a subdivisao em
varios estados, de acordo com o numeros de rungs.
Esta etapa e descrita na subsecao seguinte.
3.1.2

Elementos basicos

Um LD e composto de rungs (degraus) formando
uma escada, onde os elementos estao conectados.
Os elementos basicos que compoem um rung do
LD sao constitudos por contatos simples estaticos, bobinas simples momentaneas, bobinas especiais com retencao (set e reset) e tambem contatos especiais sensveis a bordas (subida e descida).
Para a modelagem dos rungs, os contatos sao representados por uma logica de entrada e as bobinas por uma variavel de sada. A Fig. 5 ilustra
os elementos basicos em um rung do programa
no LD, com destaque para a logica de entrada,
atraves dos contatos (a, b e c), ligados a uma bobina (variavel sada). Um rung tera sempre uma
logica de contatos como entrada que sera armazenada em uma variavel de sada. Cada estado
representa um rung do LD, onde i representa o
rung atual, i+1 representa o proximo rung e a
transicao corresponde a passagem de um estado
para outro, levando em conta a logica entre as variaveis.

Figura 4 Visao geral do modelo comportamental
do ciclo de execucao do LD.
Em FIACRE, no processo ciclo de execucao, a
leitura dos dados e feita atraves do recebimento de
uma mensagem com o valor da variavel e ocorre
na transicao atraves do smbolo  ?. De acordo
com a linguagem, e utilizada a instrucao select,
pois quando nao ha leitura de nenhum valor, o
programa segue para o proximo rung (linha do
LD onde os elementos estao conectados) sem nenhuma acao especfica, para que nao fique preso
nessa etapa esperando um dado. De acordo com
a sintaxe FIACRE, a partir do estado de incio,
pode ocorrer a transicao leitura (que representa
a comunicacao e dado entrada e a variavel de
entrada que deve ser lida) e vai para o proximo
rung, ou a transicao acao, que apenas segue para

Figura 5 Elementos basicos em rung do LD.
Em FIACRE, a transicao que atribui a logica
de entrada para uma variavel, ocorre de forma instantanea. A acao deve ser declarada no componente com o intervalo 0,0. A logica de controle
composta pelos operadores logicos and e or, em
LD e definida pelo posicionamento dos elementos,
em FIACRE, e descrita textualmente. De acordo
com a sintaxe FIACRE, para o caso de elementos
basicos, ocorre
from rungi ac
aovariavelsaida logicaentrada
to rungi+1

4804

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

3.1.3

sem alguma operacao, atraves das transicoes instantaneas denominadas acao 2 e 3 (definidas no
componente com o intervalo 0,0 ). De acordo
com a sintaxe FIACRE ocorre

Blocos funcionais

Para o caso de programas em LD que tenham blocos funcionais (temporizadores e contadores) nos
rungs (Fig. 6), e preciso uma etapa de atualizacao das variaveis de entrada e sada dos blocos.
Isto e feito atraves do sincronismo entre o ciclo de
execucao e o bloco funcional, com o envio de mensagem (! ) do valor de entrada do bloco (IN ) para
o processo do bloco funcional. Tambem e necessaria a etapa de sincronizacao para o recebimento
(? ) do valor de sada do bloco (Q), de acordo com
o processo do bloco funcional, para utilizacao no
ciclo de execucao.
A modelagem proposta e dividida em duas
partes a primeira delas durante o ciclo de execucao para a atualizacao das variaveis de entrada
e sada do bloco funcional. A segunda parte e referente ao funcionamento de fato do bloco (por
exemplo, bloco temporizador TON - Timer ondelay), que na modelagem e representada de forma
paralela ao ciclo de execucao. Um rung com bloco
funcional, no ciclo de execucao, e modelado com
transicoes para permitir a execucao paralela dos
blocos com a logica de ativacao atribuda a variavel de entrada do bloco, e a outra com o valor
da variavel de sada do bloco atribuda para uma
variavel do programa. Entre estas duas transicoes ocorre a atualizacao dos dados do bloco com
o processo do bloco funcional. A Fig. 7 ilustra
parte do modelo do ciclo de execucao de um programa em LD que contem um bloco funcional.
A variavel IN representa a variavel de entrada
do bloco e a variavel Q representa a variavel de
sada. A logica entrada e normalmente representada por uma logica de controle para ativacao
e variavel saida representa uma bobina do programa LD.

from rung1 ac
ao1IN logicaentradato rung12
from rung12 select timer1 !IN to rung13
 ac
ao2 to rung13 end
from rung13 select timer2 ?Q to rung14
 ac
ao3 to rung14 end
from rung14 ac
ao4variavelsaida Q to rung2

Para modelagem do bloco temporizador TON
sao necessarios quatro estados. O primeiro e o
estado idle que esta associado a transicao que
recebe o valor da variavel IN e testa se esta ativa.
Senao estiver ativa, permanece no mesmo estado e
mantem a sada Q desativada. O segundo estado e
o running que esta associado com a condicao de
IN estar ativa, com as opcoes de zerar o temporizador, voltando para idle, caso a entrada IN seja
desativada antes do tempo, ou contar o tempo ate
o valor determinado na variavel PT, atraves da
transicao timeout, para depois ativar Q e ir para
o estado tambem chamado de timeout. A seguir,
e disparada a transicao com a atualizacao de Q,
atraves do envio de mensagem para o processo ciclo de execucao, e vai para o estado active. No
estado active, tem a condicao para desativar a
sada Q do temporizador caso IN for desativada,
para que fique no estado inicial novamente. A
modelagem do bloco TON foi baseada no modelo
apresentado em Mokadem (2006), com a diferenca
que na modelagem deste trabalho nao e considerado o compartilhamento de memoria entre as variaveis, precisando ocorrer a transicao para atualizacao dos dados. Esse processo e executado em
paralelo ao ciclo de execucao, sincronizando os valores de entrada e sada do bloco. A Fig. 8 representa o comportamento do processo bloco TON,
onde os smbolos  ? (recebimento de mensagem)
e  ! (envio de mensagem) representam a comunicacao com o modelo ciclo de execucao.

Figura 6 Bloco funcional em um rung do LD.

Figura 7 Comportamento dos rungs do LD no
ciclo de execucao com bloco funcional.
Em FIACRE, o envio da variavel que representa a entrada do bloco funcional (!IN ) e feita
atraves da transicao timer1 e o recebimento da
variavel que representa a sada do bloco (?Q) e
atraves de timer2. E necessaria tambem a possibilidade de seguir o andamento normal dos rungs

Figura 8 Comportamento do processo bloco temporizador TON.
Em FIACRE, a transicao timer1 representa
a comunicacao com o processo do ciclo de execucao e recebe a mensagem com o valor de IN. O

4805

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

comando select e utilizado para simbolizar as opcoes de zerar o temporizador desativando a sada
Q, ou permanecendo no estado atraves da instrucao loop (usada para nao resetar a temporizacao),
ou ainda ativar o disparo do tempo, atraves da
transicao timeout. A atualizacao de Q ocorre atraves do envio de mensagem para o processo ciclo de
execucao, pela transicao timer2. A transicao timeout e temporizada, representando a contagem
do tempo, e e especificada pelo port no componente principal. Em FIACRE e representado da
seguinte forma

um verificador de modelo para uma versao de EstadoEvento LTL. No caso de nao satisfazer a propriedade, o SELT e capaz de gerar uma sequencia
legvel de contra-exemplo em uma ou mais formas utilizaveis pelo simulador do TINA, a fim de
executa-lo passo a passo (Berthomieu and Vernadat, 2006).
Para expressar as propriedades a serem verificadas atraves de formulas de logica no SELT, e
utilizado um subconjunto da logica temporal LTL.
Estas formulas sao construdas a partir de um conjunto de variaveis proposicionais e operadores logicos usuais como os seguintes, de acordo com a
sintaxe utilizada no SELT implicacao (), negacao (-), conjuncao (), disjuncao () e constantes
(true e false). Alem desses, o subconjunto tambem possui operadores temporais um estado futuro (3) e todos os estados futuros (). Para utilizacao da logica e necessario um refinamento das
propriedades nas formulas, substituindo as variaveis proposicionais pelos nomes dos estados definidos nos modelos das propriedades a serem verificadas (Saad, 2008).

process ton ...
from idle timer1 ?INif IN then to running
else to idle end
from running select
timer1 ?INif not IN then Qfalseto idle
else loop end
timeoutQ trueto timeout end
from timeout timer2 !Qto active
from active timer1 ?INif not IN then Qfalseto idle
else to active end

3.2

Transformacao de FIACRE para TTS e a
ferramenta TINA

O compilador FIACRETTS, pertencente a cadeia de verificacao, foi desenvolvida inicialmente
por Saad (2008) como front-end da ferramenta
TINA. O formalismo Sistema de Transicoes Temporizadas TTS e uma generalizacao do sistema
de transicoes de base atraves da associacao de intervalos com tempos mnimos e maximos para as
transicoes.
A Fig. 9 ilustra como ocorre a verificacao no
ambiente TINA a partir de um modelo FIACRE.
Apos a traducao do modelo, de FIACRE para
TTS, o TINA e utilizado para construir uma abstracao adequada do grafo de alcancabilidade com
um sistema de transicao Kripke (utilizado para
a descricao de sistemas concorrentes ou reativos,
que representam sistemas com comportamento infinito). Este grafo e confrontado com as propriedades formuladas em LTL pelo model-checker SELT,
que pertence ao ambiente TINA (Berthomieu and
Vernadat, 2006).

4

Verificacao de propriedades em
programas de CLP

A verificacao_formal e a tecnica que permite confrontar um algoritmo ou um sistema representado
por um modelo formal com um conjunto especificado de propriedades desejadas. Para verificar, e
necessario uma modelagem formal do comportamento operacional do sistema, uma especificacao
formal dos requisitos ou das propriedades previstas para o sistema, e finalmente um conjunto de
criterios que permitem decidir se o sistema se comporta em conformidade com as propriedades esperadas. A abordagem de verificacao mais utilizada
e o model-checking (Clarke et al., 1999).
As propriedades a serem verificadas sobre
os sistemas podem ser separadas em propriedades gerais e especficas (Frey and Litz, 2000)
(Moon, 1994). As propriedades como acessibilidade, limitacao, ausencia de deadlock, vivacidade,
justica (quando o numero de vezes que uma acao e
executada enquanto a outra nao, e finito), e seguranca sao consideradas como propriedades gerais
por se aplicar a todos os sistemas. As propriedades especficas tem a sua origem nos requisitos
especificados muitas vezes no contexto das aplicacoes pelos engenheiros das empresas usuarias. Por
exemplo, no estudo de caso apresentado a seguir,
o diagrama trajeto-passo e uma das formas de expressar os requisitos na area de aplicacoes pneumaticas. Geralmente, estas propriedades especficas necessitam da participacao do engenheiro de
empresa para que seja possvel expressar as propriedades de forma semi-automatica com formulas de
logica temporal. Entretanto, em algumas areas de
aplicacao, existem formas de descrever as propri-

Figura 9 Verificacao utilizando o ambiente TINA.
O TINA e uma ferramenta para edicao e analise de redes de Petri e TPN (rede de Petri temporal), e tem suporte para ferramentas de verificacao, alem de ser capaz de editar e analisar outras
extensoes, como o TTS. A ferramenta de verificacao que integra o TINA e o SELT, para verificar
propriedades especficas. A ferramenta SELT e

4806

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

edades que permitem uma traducao automatica.
As propriedades especficas a serem verificadas sao diretamente associadas a aplicacao a ser
tratada e se apresentam de diversas formas, com
diversos graus de rigor na sua representacao. A
forma mais comum de um usuario descrever propriedades e atraves do uso da linguagem natural
com toda as eventuais ambiguidades, contradicoes
e redundancias que esta comporta. A extracao
de formulas de logica temporal a partir de frases
em linguagem natural e facilitada pelo uso de palavras tais como sempre, no futuro, infinitas
vezes, ate que permitem expressar relacoes de
ordem entre eventos ou estados ou como entao,
nunca, e, ou entre outras para expressar proposicoes logicas.
Em alguns domnios de aplicacao, a expressao das propriedades pelos usuarios e organizada
na forma de tabelas que relacionam as causas ou
a composicao de um conjunto destas com seus
efeitos sobre a atividade do sistema. Matrizes de
causa-efeito que podem envolver ainda condicoes
e ordenamentos sobre causas permitem descrever
os comportamentos desejados e requisitos sobre o
sistemas e facilitar a extracao semi-automatica de
propriedades em direcao a formulas logicas.
Uma outra forma de expressar as propriedades desejadas se baseia em representacoes graficas
do comportamento desejado da aplicacao. O diagrama trajeto-passo utilizado em aplicacoes pneumaticas e que estara em uso no estudo de caso
deste artigo e um exemplo deste tipo de representacao. As relacoes de dependencia e a ordem
temporal obtidas a partir deste tipo de diagrama
podem ser facilmente transformadas em formulas
da logica temporal utilizada.
Alem da expressao das propriedades numa logica temporal, a verificacao por model-checking,
necessita uma representacao do comportamento
do sistema a ser verificado. O sistema global a
ser verificado e o resultado da composicao do controlador CLP e da planta que ele visa controlar,
conforme representado na Fig. 3.
Neste trabalho, o sistema global e representado na forma de um sistema de transicao temporizado TTS, resultado da traducao via a linguagem intermediaria FIACRE da composicao do
programa em LD do CLP com a representacao
da planta as propriedades sao expressas na forma
de formulas da logica temporal LTL. Por sua vez
a ferramenta TINASELT permite verificar por
model-checking, as propriedades em LTL sobre o
sistema descrito em TTS.
5

posto e descrito em Belan and De Negri (2005).
Este modulo e destinado a movimentacao de caixas e sua atividade e descrita a seguir. Uma caixa
e pega proximo a mesa (cilindro com guias 3A2
avancado) pela ventosa (3A3 ) e solta na outra
ponta do cilindro 3A1 em uma posicao elevada (cilindro 3A2 recuado). O modulo, quando ativado,
deve pegar a caixa, movimenta-la, deixando-a na
posicao programada e retornar para a posicao inicial. A ativacao do modulo deve ser executada
pelo comando Mod3Ini  a variavel Mod3Fim indica o fim da execucao da atividade do modulo.
A modelagem da planta referente ao Modulo
3, consiste em representar dois cilindros (3A1 e
3A2 ) e uma ventosa (3A3 ) na forma de automatos. Os cilindros possuem quatro estados recuado, avancar, avancado e recuar. Neste artigo,
sera apresentado apenas o modelo do cilindro 3A1
(Fig. 10) o clindro 3A2 e a ventosa 3A3 foram
modelados de forma similar.
O programa em LD do CLP proposto em Belan and De Negri (2005) interfaceia a planta que
ele controla atraves da leitura de sensores do tipo
chave de fim de curso (por exemplo 3S1 ) e de comandos enviados aos elementos desta (por exemplo Mod3Ini ).
Este programa em LD transformado na linguagem intermediaria FIACRE, sera composto
com o codigo FIACRE da planta obtido a partir
dos automatos representando seu comportamento.
O sistema global, resultado desta composicao e
compilado para obter um modelo em TTS do sistema que servira de entrada para a ferramenta de
verificacao.
O diagrama trajeto-passo (Fig. 11) mostra
o comportamento desejado dos diversos elementos da planta (cilindros, ventosa) e de sua relacao
entre si e com os sinais de comando oriundos do
CLP e com os sinais dos sensores. A partir deste
diagrama, foi possvel obter o modelo das propriedades desejadas e escreve-las na forma de formulas de logica temporal. O diagrama trajeto-passo
neste exemplo e dividido em tres partes, uma para
cada elemento, sendo que cada nvel corresponde
a um estado deste elemento. Os sinais entre cada
uma das partes do diagrama representam as relacoes de precedencia exigidas entre cada elemento
e suas relacoes com os comandos do CLP.

Estudo de caso Sistema de automacao
pneumatica
Figura 10 Comportamento do cilindro 3A1.

A planta a ser controlada pelo CLP e um dos modulos (Modulo 3) de uma bancada didatica de um
Sistema de Automacao Pneumatica (SAP), pro-

A seguir e apresentada a verificacao por
TINASELT de algumas das propriedades extra-

4807

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

em construcao, utilizando a ferramenta TINA foi
possvel verificar programas de CLP atraves da
abordagem model-checking. A utilizacao da linguagem intermediaria FIACRE deve-se ao fato de
ja estar implementada nas transformacoes finais
da cadeia de verificacao, para diversos tipos de linguagens de entrada dentro do ambiente Topcased.
A utilizacao de um exemplo real de modelagem e
verificacao de um sistema de automacao pneumatica permitiu uma primeira validacao da proposta
apresentada. Outros exemplos de sistemas com
temporizacao foram implementados e serao apresentados em trabalhos futuros.

Figura 11 Diagrama trajeto-passo do Modulo 3
do SAP.
das do diagrama trajeto-passo. Por exemplo, da
leitura deste constata-se que e necessario verificar as relacoes de precedencia entre a ativacao do
cilindro 1 (3A1) ou do clindro 2 (3A2) e o acionamento da ventosa (3A3). A propriedade a
ventosa so podera ser acionada, apos o avanco do
cilindro 2 se expressa como

Agradecimentos
Os autores agradecem a CAPES e o CNPq que os apoiaram.
Referencias

(avancarcilindro2 > <> acionarventosa)

Belan, H. C. and De Negri, V. J. (2005). Bancada Didatica
SAP - Sistemas de Automacao Pneumatica Manual
de Utilizacao dos Modulos, UFSC, Florianopolis, Brasil. Disponvel em httpwww.laship.ufsc.br.
Berthomieu, B., Bodeveix, J., Filali, M., Garavel, H., Lang,
F., Peres, F., Saad, R., Stoecker, J. and Vernadat,
F. (2008). The Syntax and Semantics of FIACRE,
France.
Berthomieu, B. and Vernadat, F. (2006). Reseaux de Petri temporels methodes danalyse et verification avec
TINA, Systemes temps reel pp. 2558.
Clarke, E., Grumberg, O. and Peled, D. (1999). Model
checking, Springer.
Farail, P. and Gaufillet, P. (2005). Topcased un environnement de developpement open source pour les systemes
embarques, Genie logiciel(1995) (73) 1620.
Frey, G. and Litz, L. (2000). Formal methods in PLC programming, IEEE International Conference on Systems Man and Cybernetics, Vol. 4, Nashville, USA,
pp. 24312436.
IEC (2003). IEC 61131-3, 2nd Ed. Programmable Controllers - Programming Languages.
MDA (2003). The Model-Driven Architecture - Guide Version 1.0.1.
Mokadem, H. (2006). Verification des proprietes temporisees des automates programmables industriels,
These, Ecole Normale Superieure de Cachan, Cachan,
France.
Mokadem, H., Berard, B., Gourcuff, V., Roussel, J. and
De Smet, O. (2005). Verification of a timed multitask
system with Uppaal, ETFA, Vol. 5, pp. 347354.
Moon, I. (1994). Modeling programmable logic controllers
for logic verification, IEEE control systems magazine
14(2) 5359.
OMG (2006). Object Management Group, Inc. Meta Object Facility (MOF) 2.0 Core Specification.
PLCOpen (2008). PLCOpen for efficiency in automation,
Disponvel em httpwww.plcopen.org.
Saad, R. T. (2008). Elementos para a construcao de uma
cadeia de verificacao para o projeto topcased, Masters thesis, Universidade Federal de Santa Catarina,
Florianopolis, Brasil.
TINA (2009). The toolbox TINA Home Page, Disponvel
em httpwww.laas.frtina.
Tisserant, E., Bessard, L. and de Sousa, M. (2007). An
open source IEC 61131-3 integrated development environment, Industrial Informatics, 2007 5th IEEE International Conference on, Vol. 1, Citeseer.

O resultado verdadeiro (TRUE) do verificador
TINASELT confirma a ordem de precedencia assim descrita conforme apresentada no diagrama
trajeto-passo.
Outra propriedade importante a ser verificada consiste em evitar a colisao dos elementos da
planta, ou seja, no caso dos cilindros, em nao telos estendidos ao mesmo tempo. A propriedade o
cilindro 1 e o cilindro 2 nunca deverao estar avancados ao mesmo tempo se traduz pela formula
logica
-(cilindro1avancado  cilindro2avancado)

O resultado TRUE da verificacao permite afirmar
que nao havera colisao fsica dos dois cilindros.
Propriedades como o cilindro 2 e a ventosa
podem estar ativos ao mesmo tempo sao tambem verificaveis a partir de sua negacao como na
formula
-(cilindro2avancado  ventosaacionada)

O resultado FALSE do verificador confirma que a
premissa anterior e verdadeira.
Diversas outras propriedades oriundas do diagrama trajeto-passo foram expressas em formulas
de logica temporal e verificadas usando a ferramenta TINASELT. Desta analise das propriedades conclui-se que o programa em LD do CLP encontrado na referencia Belan and De Negri (2005)
garante o comportamento esperado da planta descrito no diagrama trajeto-passo associado e a operacao correta e sem danos dos elementos desta.
6

Conclusoes

Foi apresentado neste trabalho um metodo de modelagem e verificacao de CLPs utilizando a engenharia dirigida a modelos aplicada na transformacao de um modelo de programa na linguagem LD
para FIACRE. Atraves da insercao da linguagem
LD, na entrada da cadeia de verificacao_formal

4808