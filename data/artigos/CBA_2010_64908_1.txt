A NICHED GENETIC ALGORITHM FOR CLASSIFICATION RULES DISCOVERY IN REAL DATABASES
MARCONI A. PEREIRA1 2, JOÃO A. DE VASCONCELOS2
1

Departamento de Computação, CEFETMG
Av. Amazonas, 7675, 30510-000, Belo Horizonte, Brazil
E-mail marconi@decom.cefetmg.br
2

Laboratório de Computação Evolucionária, Departamento de Engenharia Elétrica, UFMG
Av. Antonio Carlos, 6627, 31270-010, Belo Horizonte, MG, Brasil
E-mail jvasconcelos@ufmg.br

Abstract This paper presents a Niched Genetic Algorithm (NGAE) that uses Elitism and other techniques that makes it efficient for classification rule mining problems using real databases. This implementation was compared to other classical tools of
classification. The results obtained with NGAE were similar to those obtained with the classical tools. A great advantage of the
proposed Niched Genetic Algorithm is that it can work efficiently with real databases that have a large volume of data. This is
because the proposed implementation doesnt need to load all data at once. The classical implementations of classification tools
usually work with a small volume of data. This paper brings too, as a new contribution a SQL modeling to implement and evaluate the individuals.
Keywords Association Rules, Data Mining, Dissolved Gas Analysis (DGA)
Resumo Este trabalho apresenta um Algoritmo Genético (NGAE) baseado em técnicas de Nicho e que usa Elitismo, além de
outras técnicas que faz com que seja eficiente para problemas de mineração de regras de classificação, utilizando bases de dados
reais. Esta implementação foi comparada a outras ferramentas clássicas de classificação e o resultado apresentado foi semelhante
aos instrumentos clássicos. Uma grande vantagem da proposta desse novo algoritmo é que ele pode trabalhar eficientemente com
bases de dados reais que possuem um grande volume de dados. Isso ocorre porque a execução proposta não precisa carregar para
a memória principal todos os dados de uma única vez. As implementações clássicas de ferramentas de classificação geralmente
trabalham com um pequeno volume de dados. Este artigo traz também, como uma nova contribuição, uma modelagem utilizando SQL, a fim de implementar e avaliar os indivíduos.
Palavras-chave .

1 Introduction
Mining Rules is one task of the process of Knowledge
Discovery Databases (KDD) (Fayyad et al, 1996) and
have been studied because of the large amount of practical applications, which could use the generated information. For example
 Commercial applications to know more about
their costumers
 Industrial applications to prevent faults in its
equipments
 Educational applications to know in which kind
of situation students fail.

2 Related Works
In (Dehuri et al, 2008) is shown a Multi-objective Genetic
Algorithm with Elitism for the generation and classification (evaluation) of rules (individuals) from a database. In
this work, the calculation of the objective functions takes
into account the accuracy, specificity and sensitivity.
These values are used to find the rules that maximize the
number of true positives and minimize the number of
false positives extracted from databases. The results
showed that the rules have a high accuracy for the databases used in the tests.
In (Srinivasa et al, 2007) is described a model of
SAMGA (Self-Adaptative Migration Model Genetic Algorithm), where the chances of mutation, crossover and
selection of each individual are dynamically adjusted to
the size of the population. This algorithm is used to extract rules for classification of patterns. According to
Srinivasa et al, Genetic Algorithms used in the classification can be divided into two classes, depending on how
the rules will be codified in the population of individuals
 Michigan Approach Each individual in the population is a simple rule
 Pittsburg Approach Each individual encodes a
set of prediction rules

The task of Mining Rules consists of discovery rules
to classify or to associate data. Evolutionary tools are
applied with success in this kind of problem (Goldberg,
1989). In this paper, a Niched Genetic Algorithm
(NGAE) with Elitism especially designed for real databases are shown. In particular, this algorithm is applied in
a Dissolved Gas Analysis (DGA) problem to diagnose
incipient faults in power transformers (Morais Rolim,
2006).
The DGA problem was modeled as an optimization
problem and the implemented tool was compared with
three other tools Decision Tree, Support Vector Machine
(SVM) and Radial Basis Function (RBF). The results
showed that the NGAE obtained a satisfactory performance. Also, this paper shows, as a new contribution, a

824

Each rule can be represented by a string of binary
characters.
The Michigan approach is used in SAMGA. It was
compared with a simple Genetic Algorithm and the results showed the superiority of SAMGA.
In (Sikora Piramuthu, 2007) a framework for the selection of rules in a genetic algorithm is applied to data
mining based on selecting best individuals for a given
domain. The algorithm considers each individual as a
rule. The fitness function is calculated by counting the
number of patterns that match with each rule. This counting considers both positive and negative responses. Each
individual has, in addition to the attributes, a sequence of
bits to say whether the attribute is considered or not by
the rule. The Genetic Algorithm receives the training data
to generate the rules for classification. To evaluate the
quality of the rules, they were applied to the test data. The
proposed framework was compared with a simple Genetic Algorithm. The results showed that the framework
performance was better, giving greater accuracy and
reducing the execution time.
In (Tan et al, 2005) is shown a distributed coevolutionary algorithm for extracting data classification
rules. The algorithm was validated using the databases
available in the UCI Machine Learning. The results
showed high accuracy and a decrease of the processing
time as the number of processing cores increases.

Table 2 - Example of Confusion Matrix
Classif.
Normal Electrical Faults Thermal Fault
Actual
Normal
40
2
5
Electrical Fault
6
16
2
Thermal Fault
4
2
23

In this example the number of correct classifications
is in the principal diagonal 40 normal, 16 electrical faults
and 23 thermal faults. The other values are wrong classifications. For example, 6 transformers have been classified as normal but they had electrical fault.
The quality of the classifier of each class can be
measured using some metrics Accuracy, Sensitivity and
Specificity, where
,

Accuracy (A)
Sensitivity (A)

,

Specificity (A)

.

In the example given in Table 2, we have for class
Normal
TP  40,
FN  2 + 5  7,
FP  6 + 4  10,
TN  16 + 2 + 2 + 23  43.

3 The Problem Modeling
The chosen problem in this work is to find the characteristics of power transformers when they could present a
failure. One of the main techniques to find pending failures in this equipment is to analyze the gases dissolved in
the mineral oil used to insulate the transformer (Morais
Rolim, 2006). This oil is exposed to heat so that gases are
produced. The analysis of the concentration of these
gases identifies the conditions in which failures can happen.
Thus, the DGA problem consists of finding rules that
identify power transformers that are normal and others
that may present an impending failure.
A classical way to measure the effectiveness of a
classifier is to produce a confusion matrix of the results
(Table 1).

Accuracy (Normal)
Sensitivity (Normal)

,
,

Specificity (Normal)
Similarly the accuracy, sensitivity and specificity can
be calculated for the other classes Electrical Fault and
Thermal Fault.
To find the best set of classification rules the problem was modeled in 2 steps find the set of rules that
identify items of all classes and maximize the following
function for each class

Table 1 - Confusion Matrix
Predictive
Positive
Actual
Positive
True Positive (TP)
Negative
False Positive (FP)

f(X)Accuracy(X)*Sensitivity(X)*Specificity(X)

Negative
False Negative (FN)
True Negative (TN)

4

(1)

The Niched Genetic Algorithm

To maximize the function (1) and therefore finding the
best set of rules that identifies power transformers of all
classes was used an algorithm based on the Niched Genetic Algorithm. This algorithm works with individuals
that are selection predicate (SQL WHERE-clauses). Thus,
it can discover a set of rules that classify the transformers
of the database. In Figure 1 is shown the flowchart describing how to classify power transformers. A training
set (70 selected randomly of the total data) is used in
order to find the best rules to classify the power trans-

Considering a database with 100 power transformers,
47 being normal, 24 with electrical faults and 29 with
thermal ones, a possible classification can generate the
following confusion matrix (Table 2)

825

formers. The best rules founded are validated using the
test set, composed of all the others 30 of data.

In this classification problem, the rules are like the
following
if F1 > x1  F2 < x2  F3 > x3  F4 > x4  F5 < x5 than ClassA

where x1, x2, x3, x4 and x5 are real values generated
randomly in the interval xmini xmaxi.. Also, xmini
and xmaxi are respectively the minimum and maximum
values in the database for the attribute Fi, i  1, 2, 3, 4,
5. The symbols greater than > and less than < are
generated randomly as follows
r  floor(2*rand()) If r  0 use >, else use <.
The sixth individuals attribute concerns about the
class of the individual and is generated based on the existing classes of the database. In the studied DGA problem
there are three possible values
 Class  A
 Class  B
 Class  C

Figure 1 - Flowchart of the algorithm proposed.

To generate one of these values, the following idea is
used
s  floor(3*rand()) if s  0 use Class  A if s  1
use Class  B otherwise, use Class  C.

The pseudocode of the tool is shown in Algorithm 1.
This algorithm receives the training set and returns the
best rules of each class. The validation using the test set is
made using the rules (SQL WHERE-clauses) that will be
shown below.

As stated previously, the individual was modeled as a
SQL WHERE-clause. For the given example above, the
individual is

Algorithm 1. Pseudocode of Niched Genetic Algorithm
1. Generate initial population
2. while number of generations < maxgen do
3.
for each individual of population do
4.
Look for the individuals fitness in the cache memory
5.
if (memory cache dont have this fitness )
6.
Access the database and calculate the fitness
7.
Store the fitness in the cache
8.
end if
9.
end for
10. if (number of generations > 1)
11.
Apply elitism
12. end if
13. for each niche do
14.
Select the best individuals of this niche
15. end for
Apply the following genetic operations selection, cross16.
over and mutation
17. Increment de generation count
18. end while
19. return the best individuals.

4.1

F1 > x1 AND F2 < x2 AND F3 > x3 AND F4 > x4 AND F5 <
x5 AND Class  A.

This individual is coded in this work as shown in
Figure 2.

Figure 2 - Database individual

The individuals are composed of six chromosomes
where the first five, can be disabled during the execution
of the algorithm. The last one, regarding to the class, is
never disabled. Thus, this individual can represent, after
crossovers and  or mutations, a rule with a reduced number of conditions. An example of an individual with fewer
conditions is given in Figure 3.

The Individual Definition

The individual was modeled as a SQL WHERE-clause.
All the tables of data are structured as
chromatography(F1, F2, F3, F4, F5, Class)

Figure 3 - Individual with conditions Disabled

where F1, F2, F3, F4 and F5 are respectively the gas concentrations of H2, CH4, C2H2, C2H4 and C2H6, and Class
indentifies the classification of the electrical transformer
status A  Normal, B  Electrical Fault and C  Thermal
Fault.

The correspondent rule of Figure 3 is
if F1 > x1 AND F3 > x3 AND F5 < x5 than Class  A

826

4.2 The Fitness Evaluation



The calculation of the fitness function is totally based on
SQL queries to be held in the database.
In this paper, the queries are shown using relational
algebra and SQL-99. The relational algebra elements used
are shown in Table 3.
The calculation of fitness function refers to only one
individual and can be divided into
 Calculation of the confusion matrix coefficients
 Fitness function evaluation, using equation (1).



InotClass is the negative of the class coded in
individual I. Considering the example in Figure
3, InotClass is Class <> A
IwithoutClass is the set of conditions coded in
individual I, without the class. Considering the
example in Figure 3, IwithoutClass is F1 > x1
AND F3 > x3 AND F5 < x5.

Using SQL-99, this query can be expressed as
SELECT COUNT (*) FROM (
SELECT *
FROM (
(SELECT * FROM R)
EXCEPT
(SELECT * FROM R WHERE IwithoutClass)
) as TrueNegative
WHERE InotClass) AS Uni

Table 3 - Relational Algebra operators
Element
Description
F<function> < list of Function aggregate. This operator applies a
function (count, max, min, etc.) in the list of
attributes>
attributes. This list can refer to all attributes,
using the word all.
 <predicate of selection> Selection. This operator applies the logic
(R)
predicate of selection<predicate> in the relation R.

Set Difference (represented by minus   
signal) is used in the Relations. For example,
A  B results in a set that have the elements of
A that are not in B.

The False Positive value is calculated by counting
the number of items classified by the individual that dont
belong to its class. Considering the example in Figure 3,
the calculation of the False Positive consists in counting
the number of items that satisfies the conditions F1 > x1
AND F3 > x3 AND F5 < x5 and dont belong to the
class A, that is Class <> A. The query that identifies
this quantity is

Considering that the relation R (F1, F2, F3, F4, F5,
Class) contains the gas concentration and the class of
each electrical transformer and I is the set of conditions
given by the individual of the Genetic Algorithm, the
calculation of the confusion matrix values and the calculation of the performance are shown below.

F countall (IwithoutClass AND InotClass (R))
Using SQL-99, this query can be expressed as

A) Calculation of the Confusion Matrix Values

SELECT COUNT (*)
FROM R
WHERE IwithoutClass AND InotClass

The value of True Positives is the number of tuples covered by the individual and belonging to its class. This
number of tuples is obtained by the following query using
relational algebra

The False Negative value is the number of items not
obtained by the individual and that belongs to its class.
The query that identify this quantity is

F countall (I(R)),

F countall (IClass - IwithoutClass(R)),

where I is the set of conditions of an individual of the
Niched Genetic Algorithm and R is the relation (table)
that contains the information about the electrical transformers.
Using SQL-99, this query can be expressed as

where IClass is the class of the individual. In the example
given in Figure 3, this value is Class  A.
Using SQL-99, this query can be expressed as
SELECT COUNT (*) FROM (
(SELECT * FROM R WHERE IClass)
EXCEPT
(SELECT * FROM R WHERE IwithoutClass)) AS UNI

SELECT COUNT (*)
FROM R
WHERE I

The True Negative value is calculated by counting
the actual number of items that are not covered by the
individual and dont belonging to its class. The query that
identifies this quantity is

B) Fitness Evaluation
After the calculation of the four values that constitute the
confusion matrix, the fitness function is calculated using
the formula (1)

F countall (InotClass(R - IwithoutClass(R))),

F(I,X)  Accuracy(I,X)*Sensitivity(I,X)*Specificity(I,X),

where

where F(I, X) is the fitness function of the individual I
that identify items of the class X.
827

individuals generated could belong to other niche (class)
(see previews section for more details).
To guarantee that the best individuals of each niche
(class) will be selected to the next generation, the Elitism
Technique was applied. In this work the 10 best individuals are selected, where approximately 3 come from
each class. Formally the calculation of the number of
individuals of each class is

4.3 Mutation
The mutation operator implemented in this work is Bit by
Bit (Vasconcelos et al, 2001) where each gene has the
same probability to be changed. The mutation can change
the relational operator, the numerical value of the gas
concentration, the class or simply change the activity of
the individual. Considering the example of Figure 3, a
possible result of the mutation operation in this individual
is (Figure 4)

(2)

4.6 Improvements for Individuals Evaluation
As seen previously, the calculation of the fitness function
for each individual is made based on SQL queries executed in databases. As these queries demand disk access,
which is time consuming, a simple cache memory to store
the fitness of some individuals was implemented. This
cache memory consists in a Hash table where the key is
the individual and the value stored is the value of the fitness function. The use of this cache reduced the execution
time of the experiments of this paper by approximately
80. This is easy to understand considering that genetic
algorithm uses many times the fitness of the individuals,
for example, in its operations of selection, in the roulette
wheel and elitism technique.
Another technique to improve the quality and reduce
the time to discover good rules is to consider the proportion of each gas and not its real value.
Each concentration is calculated as

Figure 4 - Individual after mutation operation

In the mutation process the individual has changed
one gene, where the condition F1 > X1 transformed to
F1 < X1 and the class was changed from Class  A
to Class  C.
The probabilities of change in the individual selected
for mutation were chosen as follows
 For each chromosome
o There are 50 chance to occur a change
 If the mutation is to be realized, each relational operator, the numeric value Xi, and
the activity index has 33 of chance of
changing
 Moreover, the individual can have its class
changed with probability of 25
4.4 Crossover

(3)

The crossover operation used in this work is the Uniform
Crossover (Vasconcelos et al, 2001), where all genes
have the same probability to be changed. A couple of
individuals always generate two others. The algorithm is
implemented as follows
 Select two (father and mother) individuals
of the same niche (class), using roulette wheel
 Generate two other individuals where the first
has the same symbols and conditions activity of
the father and the second has the same symbols and conditions activity of the mother
 The new number in each condition is generated
using crossover of real number (Goldberg,
1989)
 For each chromosome, there are 25 of chance
of changing its activity.

where i is the index of the gas concentration, n  5 and i
 1, 2, 3, 4, 5.
For example, considering a power transformer with
the following concentration of gases
H2  10, CH4  9, C2H2  14, C2H4  10, and C2H6  1.

The relative proportions of the gases are
H2  0.227, CH4  0.205, C2H2  0.318, C2H4  0.227, and
C2H6  0.023

In this example, 3 decimal digits were used. Its important to emphasize that using a low precision can compromise the performance of the algorithm. In this paper,
the database type double precision was used. This type
has 15 decimal digits allowing higher quality of results.
Using proportional gas concentration values, instead
of using the absolute ones, the results quality was improved around 15 in our tests.

4.5 Niches and Elitism
To obtain a set of rules, where each class of the problem
has a correspondent rule of classification, the niche technique was used. In this DGA problem, where there are 3
classes of power transformers, each class was used to
identify one niche. More specifically, each individual is
shared in niches using its class (the last item of the individual). Thus, the crossover operations are applied in
individuals of the same niche, despite the fact that the

828

5 Experiment and Results

anced databases. The standard deviation () was calculated to help the results comparison, since they are very
close. The proposed NGAE presented in this analysis the
smallest standard deviation for balanced databases. This
means that the proposed tool has performed well to all
classes of the databases showing its robustness.

The implemented algorithm was tested using three different databases, labeled as BASE 1, BASE 2 and BASE 3
respectively with 224, 51 and 149 samples. The performance was compared with the results obtained by the Support Vector Machine (SVM), Radial Basis Function Neural Network (RBF) and Decision Tree (J48). All these
three tools used are from Weka API. The experiment was
repeated 3 times for each technique using each base. The
presented results in this paper are the average of these 3
results. All the obtained results are shown below

Table 7 - Actual index for each class in a balanced base

BASE 1

Table 4 - Actual global index of each tool in unbalanced base
BASE 1 (224)
BASE 2 (51)
BASE 3 (149)

J48
66
84
42

RBF
68
89
33

SVM
70
75
39

BASE 2

NGAE
69
77
42

BASE 3

Table 5 - Actual global index of each tool measured in a balanced base
BASE 1 (252)
BASE 2 (66)
BASE 3 (366)

J48
65
72
80

RBF
67
91
68

SVM
69
87
68

NGAE
72
85
82

BASE 1

BASE 2

BASE 3

RBF
68
55
82
13.503
80
93
95
8.145
80
14
5
40.951

SVM
62
65
82
10.786
61
64
100
21.703
25
82
9
38.371

RBF
67
50
84
17.000
80
93
100
10.149
59
67
78
9.539

SVM
61
62
84
13.000
60
100
100
23.094
57
64
82
12.897

NGAE
75
72
68
3.512
91
90
75
8.963
88
71
86
9.292

This paper proposed a new evolutionary algorithm to be
applied in classifications problems. This algorithm uses
niche technique, elitism, cache memory, and model the
individual as SQL WHERE-clause. In order to evaluate
the performance of the design algorithm, a classification
problem (DGA to diagnose incipient faults in power
transformers) was used. Classical classifications algorithms, like Neural Networks, decision tree and Support
Vector Machine, were used in order to compare the obtained results. The results show that the proposed algorithm is competitive and robust, since it presented the best
results in many cases.
References
Dehuri, S. Patnaik, S. Ghosh, A. Mall, R. (2008) Application of
elitist multi-objective genetic algorithm for classification rule
generation. Applied Soft Computing, Vol. 8, No. 1, pp. 477487.
Fayyad, U. M. Piatetsky-Shapiro, G. Smyth, P. Uthurusamy, R. (edt.)
(1996). Advances In Knowledge Discovery and Data Mining.
AAAIMIT Press, California.
Goldberg, D. E. (1989). Genetic Algorithms in Search, Optimization
and Machine Learning. Addison Wesley.
Morais, D.R. Rolim, J.G. (2006). A hybrid tool for detection of
incipient faults in transformers based on the dissolved gas analysis
of insulating oil. IEEE Transactions on Power Delivery, Vol. 21,
No. 2, pp. 673- 680.
Srinivasa, K. G. Venugopal, K. R. Patnaik, L. M. (2007). A selfadaptive migration model genetic algorithm for data mining
applications. Information Sciences Vol. 177, No. 20, pp. 4295
4313.
Sikora, R. Piramuthu, S. (2007) Framework for efficient feature
selection in genetic algorithm based data mining. European Journal
of Operational Research, Vol. 180, No. 2, pp. 723737.
Tan, K. C. Yu, Q. Lee, T. H. (2005). A Distributed Evolutionary
Classifier for Knowledge Discovery in Data Mining. IEEE
Transactions on Systems, Man, And Cybernetics  Part C
Applications and Reviews, Vol. 35, No. 2, pp. 131-142.
Vasconcelos, J. A. Ramírez, J. A. Takahashi, R. H. C. e Saldanha, R.
R. (2001). Improvements in Genetic Algorithms. IEEE
Transactions on Magnetics. Vol. 37, No. 5, pp. 3414-3417.

Table 6 - Actual index for each class in unbalanced base
J48
77
47
73
16.289
67
86
100
16.563
100
20
7
50.362

J48
77
40
77
21.362
60
64
93
18.009
100
70
69
17.616

6 Conclusion

The global index is an average of the result obtained
in each class. For example, the J48, in BASE 1, classified
correctly 77 as class A, 47 as B and 73 as C (see
Table 6). In this case, the global index is (77+47+73)3 
66.
The databases used are unbalanced, that is, the number of power transformers of each class is not similar. For
example, the database named BASE 3 has 122 power
transformers of class A, 10 of class B and 17 of class C.
This situation forces the algorithm to find better rules to
the predominant class and worse rules to the other
classes.

A (84)
B (62)
C (78)

A (15)
B (22)
C (14)

A (122)
B (10)
C (17)


A (84)
B (84)
C (84)

A (22)
B (22)
C (22)

A (122)
B (122)
C (122)


NGAE
67
72
67
2.887
78
94
60
17.010
100
20
7
50.362

To solve this problem, the database can be balanced
generating copies of the elements of the classes with low
instances, so that all the classes will have a similar number of instances. The balanced database originated from
BASE 3 will have 122 power transformers of class A,
122 of class B and 122 of class C. Table 4 and Table 6
shows the results obtained using unbalanced databases.
Table 5 and Table 7 shows the results obtained using bal-

829