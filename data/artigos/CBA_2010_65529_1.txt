FERRAMENTA PARA PROGRAMAÇÃO CLPS EM ALTO NÍVEL
TIAGO GAMELEIRA, FELIPE COUTO, RAIMUNDO MOURA,LUIZ AFFONSO GUEDES

 Departamento de Engenharia de Computação e Automação
Universidade Federal do Rio Grande do Norte (UFRN)
Natal  RN  Brasil
 Departamento de Informática e Estatística
Universidade Federal do Piauí (UFPI)
Teresina  PI  Brasil
E-mails gameleira@dca.ufrn.br,felipecouto@dca.ufrn.br,
rsm@ufpi.br, affonso@dca.ufrn.br

Abstract Industrial automation is the use of the theory of control systems of machines and processes. Although there is different types of industries such as steel, chemicals, oil, automotive, manufacturing, etc.., Which require different applications, the
basic controls are the same. In the oilfield, the use of Programmable Logic Controllers (PLC) in industrial automation has found
barriers to learning and maintaining the language most used by the CLPs, the Ladder. Despite of large PLC manufacturers support the five languages defined by IEC61131 standard, the great majority of medium and small PLC manufacturers do not support for programming neither Sequential Function Chart (SFC) nor Structured Text (ST). From this reality, the motivation of this
work is define an Integrated Development Environment (IDE), named as SFCST Editor, which permits to use both SFC and
ST languages. One direct outcome is to enlarge the number of qualified technicians in development and maintenance of PLC
systems. The SFCST Editor follows the international standard IEC 61131-3 and is in accordance with the recommendation of
the PLCopen (TC-6 specification XML 2.0).
Keywords
 Industrial Automation, PLC, SFC, PLCopen, Ladder Diagram
Resumo
 Automação industrial consiste no uso da teoria de sistemas_de_controles de máquinas e processos. Apesar de existir
diversos tipos de indústrias, tais como aço, química, petróleo, automotiva, manufatura, etc., que exigem aplicações diferentes,
os controles básicos são os mesmos. No campo petrolífero, o uso de Controladores Lógicos Programáveis (CLP) na automação
industrial tem encontrado barreiras na aprendizagem e manutenção da linguagem mais utilizada pelos CLPs, o Ladder. Apesar
dos ambientes de grande porte incluir recursos contemplando as cinco linguagens definidas pelo padrão internacional IEC61131,
a grande maioria dos fornecedores de equipamentos de pequeno e médio porte não oferece suporte para programação em Diagramas de Funções Sequenciais (do inglês Sequential Function Chart  SFC) nem texto estruturado (do inglês Structured Text
 ST). Diante desta realidade, a motivação deste trabalho é apresentar um ambiente de programação, denomidado Editor
SFCST, que utiliza uma combinação das linguagens SFC e ST, cuja consequência direta é ampliar o público capacitado em
programação de CLPs. O Editor SFCST é compatível com o formato TC6 XML 2.0 definido pela organização PLCopen.
Palavras-chave
 

1 Introdução
Com o aparecimento da informática industrial, muitos esforços têm sido realizados para desenvolver notações e semânticas usadas para classificar e descrever diferentes tipos de sistemas, sobretudo na fase de modelagem. Tais esforços fornecem a infra-estrutura necessária para a solução de problemas reais de engenharia e a
construção de sistemas práticos que visam, principalmente, o aumento da produtividade, qualidade e segurança
de processos.
Os sistemas_de_automação_industrial têm sido representados através de uma estrutura hierárquica de camadas, conhecida na literatura como pirâmide de automação. A Figura 1 mostra uma adaptação da versão apresentada em Seixas(2000), onde o nível 0 é composto por sensores e atuadores. No nível 1, os Controladores Lógico Programados (CLP) são os equipamentos comumente usados no controle_de_processos e no nível 2 da pirâmide, os sistemas de supervisão são geralmente implementados através de sistemas SCADA (Supervisory Control And Data Acquisition), com suporte para interface homem - máquina (IHM). O nível 3 corresponde aos sistemas MES (Manufacturing Execution Systems) e destina-se a aumentar a dinâmica dos sistemas de planejamento da produção e, finalmente, o nível 4 corresponde aos sistemas ERP (Enterprise Resource Planning), destinados ao planejamento dos recursos da empresa.
Este trabalho está focado no nível 1 e o objetivo principal é apresentar um ambiente de programação, denomidado Editor SFCST, que permite usar uma combinação das linguagens SFC (Sequential Function Chart)
e ST(Structured Text), vez que a maioria dos fabricantes de equipamentos de pequeno e médio porte não oferece

2974

suporte para programação em SFC nem ST1. É importante ressaltar que grande parte do mercado de automação
no Brasil se enquadra justamente nesta categoria. Dessa forma, a maioria dos CLPs ainda é programada através
de métodos convencionais no estilo tentativa e erro e, na prática, usualmente não existe documentação escrita
para essas soluções. Consequentemente, o número de profissionais habilitados para realizar o processo de desenvolvimento e manutenção dos programas de controle é muito pequeno. Portanto, a principal contribuição
deste trabalho é ampliar o público capacitado em programação de CLPs.
O Editor SFCST é compatível com o formato TC6 XML 2.0, que é um padrão especificado pela organização PLCopen para representação de aplicações (software) para automação de máquinas e processos_industriais,
visando a interoperabilidade entre ambientes de programação e equipamentos CLP aderentes  norma IEC
61131. No entanto, como a PLCopen não descreve um formato para troca de dados entre o CLP e o ambiente de
programação, tem-se discutido e adotado formatos baseados no referido padrão tanto para configurar o ambiente
de acordo com informações específicas de cada equipamento, quanto para mostrar as mensagens de erros retornadas pelo compilador e carregador implementados pelo fabricante. Esse trabalho foi realizado através de projeto de pesquisa da Petrobras (Unidade Bahia) em convênio com a Universidade Federal do Rio Grande do Norte
(UFRN) e Universidade Federal da Bahia (UFBA), com a participação da HI-Tecnologia
(HTTPwww.hitecnologia.com.br).
Na literatura existe o projeto Beremiz (HTTPwww.beremiz.org) que disponibiliza um framework para automação. O projeto Beremiz apresenta uma ambiente que permite ao programador do CLP escrever programas
em uma das cinco linguagens do padrão IEC-61131-3 e em conformidade com o formato PLCopen XML. Porém, neste projeto não existe a integração com CLPs reais e, portanto, os problemas associados com a comunicação entre o CLP e o ambiente de programação não são relacionados.
Este artigo está assim organizado na Seção 2 discute-se brevemente os padrões usados na programação de
CLPs, em especial o padrão TC6-XML 2.0 da PLCopen e usado no Editor SFCST como representação intermediária entre a descrição do processo_industrial e código executado pelo CLP. Na Seção 3 apresenta-se a estrutura dos diagramas SFC e os detalhes da IDE desenvolvida. Por fim, na Seção 4, conclui este trabalho destacando as considerações finais e as propostas futuras.

Figura 1. Pirâmide de automação_de_sistemas

2 Padrões Usados na Programação de CLPs
A forma básica de programação de CLP era realizada a partir de uma linguagem oriunda do diagrama de relés (do inglês Ladder Diagram  LD). De inicio, resultou numa popularização dos CLPs no ambiente industrial,
mas posteriormente provocou a dependência por técnicos especializados em Ladder. Dessa forma, linguagens,
métodos e padrões de mais alto nível têm sido proposto nos meios acadêmicos e profissionais através de organizações como a International Electrotechnical Commission (IEC) e PLCopen (www.plcopen.org), na tentativa de
maximizar a eficiência para modelagem, construção e manutenção de sistemas_de_automação.
O padrão IEC 61131-3 define elementos básicos de programação, regras sintáticas e semânticas para linguagens gráficas como Diagramas Ladder, Diagramas de Blocos de Funções e Diagramas de Funções Sequenciais e linguagens textuais como Lista de Instrução e Texto Estruturado, assim como as áreas de aplicação e os
mecanismos e testes, através dos quais os fabricantes podem expandir ou adaptar o conjunto básico para as suas
próprias implementações de controladores_programáveis. O padrão é largamente aceito pela comunidade de usuários e fabricantes de CLPs para programação e configuração de dispositivos_de_controle industrial. Marcos
Faustino(2005),traça um panorama dos CLPs e tecnologias associadas em momentos anteriores e posteriores 
publicação da norma e discute aspectos relativos  sua adoção. A literatura dedicada exclusivamente a esta norma é bastante vasta. Referência como Lewis(1998), Lewis(2007), Karl-Heinz et al. (2001) podem ser consultados para maiores informações.
Cada vez mais, faz-se necessário o desenvolvimento de aplicações voltadas para o usuário, seguindo padrões de usabilidade, com interfaces gráficas amigáveis, com interoperabilidade e com portabilidade. Entre os
1
Ao longo deste trabalho usa-se a tradução Diagrama de Funções Sequenciais com o mesmo significado da sigla SFC (Sequential Function
Chart) e Texto Estruturado como a sigla ST (Structured Text).

2975

requisitos essenciais para a programação de controladores, conforme a norma IEC 61131, estão a qualidade,
desempenho, robustez, segurança e o uso de padrões.
Com o objetivo de alcançar esses requisitos foi desenvolvido um tradutor para converter uma linguagem de
alto nível (combinação das linguagens SFC e ST) em uma linguagem intermediária, compatível com o formato
TC6-XML 2.0 especificado pela PLCopen (httpwww.plcopen.org). A Figura 2 apresenta a estrutura básica do
tradutor. Note que a partir do formato TC6-XML é possível gerar linguagens de máquina para equipamentos de
diferentes fabricantes.

Figura 2. Tradutor de linguagem alto-nível para código executável

A linguagem XML (eXtended Markup Language) foi apresentada pelo W3C (World Wide Web Consortium)
em 1998 para descrever diversos tipos de dados e tem sido usada para transferir informações entre plataformas
distintas. Normalmente, as ferramentas para programação de CLPs reservam uma área para importaçãoexportação de projetos armazenados em uma base de dados. O formato utilizado para o armazenamento destes projetos geralmente é uma representação textual no qual sua estrutura é dependente do fabricante da ferramenta. Entretanto, o Comitê Técnico da PLCopen definiu uma interface padrão para suportar a transferência de
informações entre ferramentas de programação de CLPs dos diversos fornecedores, denominada TC6-XML.
Desde então, os fabricantes de CLPs estão fazendo um esforço para acrescentar a interface TC6-XML da PLCopen s suas ferramentas de desenvolvimento.
Esta interface possibilita a transferência de informações entre as ferramentas de programação de CLPs e,
neste sentido, as soluções apresentadas podem ser reutilizadas para aumentar a eficiência do desenvolvimento de
novos programas de controle dos CLPs, além de possibilitar a independência dos usuários em adquirir CLPs
sempre de um mesmo fabricante, vez que seus programas de controle podem ser reutilizáveis por outros CLPs,
desde que seja compatível com o formato TC6-XML.
Os formatos da interface são especificados através do XML composto por elementos equivalentes s linguagens do padrão IEC 61131-3. Com relação s linguagens gráficas, os elementos XML são correspondentes tanto
aos elementos comuns das linguagens (por exemplo, etapas e transições) como aos próprios atributos gráficos de
cada uma delas, tais como a altura e largura dos objetos ou as posições x e y destes na tela.
3 Ferramentas Para Programação de CLPs
A idéia de desenvolver uma linguagem para programação de CLPs utilizando uma abstração de alto nível,
para permitir aos especialistas no processo desenvolver aplicações, com baixo_custo de aprendizado, não é nova.
Na área de automação_industrial da Petrobras, ela surgiu por volta dos anos 90, dada a necessidade de automatizar a partida de plataformas de produção_de_petróleo, um processo especializado altamente dependente da expertise de especialistas, mas com pouco conhecimento em linguagens de baixo nível do tipo Ladder.
O uso dos diagramas SFC na Petrobras para a programação de CLPs foi proposto por nosso grupo de pesquisa através do projeto 060307 (ver COUTO, 2009). SFC é uma das linguagens gráficas definidas pelo padrão
IEC 61131 utilizada para programação de CLPs, onde a estrutura básica do SFC tem suas origens no padrão
francês Grafcet (ver IEC60848, 2002). Um diagrama SFC é composto de etapas e transições, interligadas através
de conexões orientadas. Cada etapa pode ter uma um mais de ações. Cada ação possui um qualificador que determina quando a ação deve ser iniciada ou finalizada, por exemplo, se o qualificador for do tipo pulso (qualificador P), a ação será executada apenas uma vez quando a etapa for ativada se o qualificador for do tipo nãoarmazenada (qualificador N), a ação será executada repetidamente enquanto a etapa estiver ativa se o qualificador for do tipo timeDelayed (qualificador D), a ação será executada após t unidades de tempo que a etapa se
tornar ativa. Cada transição é associada com uma condição lógica, avaliada para verdadeiro ou falso. A Figura 3
mostra um exemplo de diagrama SFC. A etapa e0 representa a etapa inicial e não possui nenhuma ação associada a transição t1 é associada com a condição I1  I2, ou seja, duas chaves que representam entradas para o
sistema. Assim, se o sistema estiver na etapa e0 e as chaves I1 e I2 forem ativadas, o sistema evolui para a etapa
e1 a etapa e1 possui a ação O1, que significa uma saída para o sistema, por exemplo, uma lâmpada, um motor
ou um atuador qualquer a transição t2 possui a condição 1, que significa sempre verdadeiro. Assim, quando o
sistema chegar  etapa e1, após a execução da ação O1, ele evoluirá automaticamente para a etapa e0.
2976

Figura 3. Diagrama SFC Exemplo

Os principais elementos que constituem o SFC são descritos, em detalhes, no livro de Aplicando a Norma
IEC 61131 na Automação de Processos de Fonseca et al. (2008).
3.1 Ambiente Gráfico Editor SFCST
Esse trabalho foi realizado através de projeto de pesquisa da Petrobras em convênio com a Universidade
Federal do Rio Grande do Norte (UFRN) e Universidade Federal da Bahia (UFBA), com a participação da HITecnologia, fabricante do CLP ZAP 900. O Editor SFCST consiste em um ambiente gráfico de alto nível para
programação de CLPs em poços petrolíferos. Ele é usado para especificar projetos de controle industrial utilizando os diagramas SFC. As ações das etapas e as condições associadas s transições são descritas usando a
sintaxe da linguagem ST (Texto Estruturado). O uso da ferramenta tem como objetivo aumentar a eficiência no
desenvolvimento e manutenção dos programas de controle dos poços de petróleo automatizados, além de melhorar os procedimentos de testes e validações das funcionalidades requeridas pelas aplicações. O Editor SFCST
foi implementado de acordo com a estrutura mostrada na Figura 4.

Figura 4. Estrutura geral do Editor SFCST

O Editor SFCST foi implementado na linguagem Java (2006) usando a biblioteca NetBeans Visual Library
(2008). Ele está dividido em dois módulos da seguinte forma
 Módulo para especificação da estrutura geral do programa de controle dos poços de petróleo através do
SFCST do padrão IEC 61131-3. Neste módulo é possível construir e editar os objetos do diagrama (etapas, transições, conexões, etc.)
 Módulo de teste e validação dos diagramas gerados através de uma animação gráfica do diagrama SFC,
indicando a etapa ativa ou as etapas ativas em um determinado momento. O módulo permite que o usuário faça uma pausa na animação para observarmonitorar o valor de variáveis e dos canais de entrada_e_saída do CLP. Dessa forma, o usuário pode verificar o comportamento do processo de controle em determinado instante de tempo.
O Editor SFCST suporta a criação, configuração e depuração de controle_de_processos_industriais. A Figura
5 apresenta a tela principal com destaque para as áreas do ambiente desenvolvido.

2977

Figura 5. Editor SFCST Tela principal

3.1.1 Programação em ST
A programação das ações de uma etapa e as condições lógicas das transições de um diagrama SFC é feita
usando a linguagem ST. Dentro de uma etapa é possível escrever comandos de atribuição, decisão e repetição
para criar lógicas de controle para descrever as ações desejadas. Para cada ação é possível atribuir um qualificador que modifica o comportamento da execução da ação. A tela de programação ST da ação de uma etapa é apresentada na Figura 6. Observe que o qualificador usado foi N Non stored, que significa que a ação será executada repetidamente enquanto a etapa estiver ativa. Note também a mensagem de erro Identificador não
declarado (token ALARME) apresentada na parte inferior da janela. O editor de ações possui sintaxe highlight
para o código ST, além de um parser para verificação da estrutura do código.

Figura 6. Editor SFCST Ambiente de programação ST

3.1.2 Depurador
O ambiente de depuração permite testar e validar o controle, através do controle das variáveis do CLP e de
animação gráfica das etapas e transições ativas em um determinado instante. Com isso, pode-se observar o comportamento do controle e encontrar possíveis erros ou identificar melhorias. A execução do depurador só é possível com o uso de um CLP real. O código SFCST é compilado e carregado para o CLP definido na criação do
projeto. Tanto o compilador quando o carregador foi fornecido pelo fabricante do CLP em questão.
A Figura 7 apresenta o processo de depuração, onde a etapa ativa é apresentada na cor verde. Em projetos
que envolvem concorrência, é possível ter mais de uma etapa ativa. Na evolução da execução do controle, quando uma transição habilitada for disparada, o depurador atualiza o ambiente, desabilitando a etapa anterior e apresentando a nova etapa ativa na cor verde. A ativação e desativação das transições ocorrem de acordo com a execução das ações da etapa atual e com a avaliação das condições associadas com as possíveis transições. Observe
na área de menu os botões parar, pausa e executar, que permitem paradas na execução da aplicação para
observar o comportamento dos identificadores, bem como visualizar o fluxo de execução da aplicação.
2978

Figura 7. Editor SFCST Processo de depuração

3.1.3 Definição de Variáveis
O Editor SFCST possui uma tela para definição e visualização dos identificadores usados na aplicação. A
Figura 8 apresenta a janela para cadastrar, visualizar, editar e remover os diversos tipos de variáveis, incluindo
entradas, saídas e vetores (arrays). Cada identificador pode ser associado a um endereço pré-definido, usado em
ambientes de supervisão. Além disso, o identificador pode ser associado a endereços retentivos ou não. Endereços retentivos mantêm os valores armazenados em memória do tipo não volátil, ou seja, quando o CLP é desligado, os valores não são perdidos.

Figura 8. Editor SFCST Lista de identificadores

Outra funcionalidade do Editor SFCST é visualizar os blocos funcionais pré-estabelecidos pelo fabricante
do CLP. A Figura 9 mostra a tela de blocos funcionais onde é possível visualizar as entradas, as saída e os comentários fornecidos pela empresa fabricante do CLP para cada bloco funcional, na figura em questão, mostrase o bloco HITMR que opera como um temporizador.
É importante destacar que a PLCopen não descreve um formato para troca de dados entre o CLP e o ambiente de programação. Logo, tem-se discutido e adotado formatos baseados no referido padrão tanto para configurar o ambiente de acordo com informações específicas de cada equipamento, quanto para mostrar as mensagens de erros retornadas pelo compilador e carregador implementados pelo fabricante. Essa definição de formatos para troca de dados entre o CLP e o ambiente representa um diferencial de nosso trabalho em relação aos
demais.

2979

Figura 9. Editor SFCST Blocos funcionais

3.1.4 Pré-Parser das Ações
Para facilitar a programação das ações das etapas, foi criado um pré-parser para checar a corretude do código ST escrito. O processo consiste em uma pré-análise do texto estruturado. Como existe a possibilidade de
declarações de identificadores globais, a ordem de definição das ações das etapas é importante, uma vez que
uma etapa pode usar um identificador declarado em outra etapa. Sempre que for solicitada a verificação, uma
pré-compilação é executada e, se a etapa contiver algum erro, ela será apresentada no editor SFCST na cor laranja. Para evitar inconsistências entre as declarações de identificadores feitas em uma etapa e o uso em outras
etapas, foi criado um pré-parser global no ambiente para analisar todas as etapas e transições do projeto. Por
fim, sempre que um projeto é aberto ele é analisado e as etapas e transições com erros eou inconsistências são
mostradas na cor laranja, como apresentado na Figura 10.

Figura 10. Editor SFCST Função pré-parser

4 Conclusão
Este trabalho apresentou um ambiente para programação de CLP, denominado Editor SFCST, que permite
usar uma combinação das linguagens SFC e ST do padrão IEC-61131-3, cuja consequência direta é ampliar o
público capacitado em programação de CLPs. O Editor SFCST é compatível com o formato PLCopen XML
que é usado para representação de aplicações para automação de máquinas e processos_industriais, visando a
interoperabilidade entre ambientes de programação e equipamentos CLP aderentes  norma IEC 61131.
2980

Esse trabalho foi realizado através de projeto de pesquisa da Petrobras em convênio com a Universidade
Federal do Rio Grande do Norte (UFRN) e Universidade Federal da Bahia (UFBA), com a participação da HITecnologia. O ambiente tem sido usado no contexto do Projeto de Automação de Poços da Petrobras na Bahia, e
alguns exemplos de diagramas SFC foram compilados e carregados diretamente no CLP ZAP 900 fabricado pela
HI Tecnologia. Adicionalmente, como o SFC faz parte de um padrão internacional, qualquer equipamento CLP
compatível com o padrão poderá executar os projetos desenvolvidos utilizando esta linguagem.
Os trabalhos futuros incluem escrever o programa de controle através do Editor SFCST, compilar e carregar o programa no CLP ZAP 900 da HI Tecnologia e realizar os testes de funcionalidades em um ambiente
real e validar o arquivo de saída do nosso ambiente em outros CLPs reais, que sejam compatíveis com o formato
PLCopen XML.

Referências Bibliográficas
COUTO 09 Felipe Couto, Raimundo Moura, Luiz Affonso Guedes  Jes Cerqueira (2009), Programação de
CLPs Utilizando Linguagens de Alto Nível, Rel. Técnico, UFRNUFBAPETROBRAS UN - BA.
FAUSTINO 05 Marcos Roberto Faustino (2005). Norma IEC61131-3 Aspectos Históricos, Técnicos e um
Exemplo de Aplicação. Dissertação de Mestrado, Escola Politécnica, USP, São Paulo, SP.
FONSECA 08 Marcos de Oliveira Fonseca, Constantino Seixas Filho  João Aristides Bottura Filho (2008),
Aplicando a Norma IEC 61131 na Automação de Processos, ISA América do Sul.
IEC 02 IEC60848(2002). International Eletrotechnical Commission. Grafcet Specification Language for Sequential Function Charts.
JAVA 06 Java (2006). Java Technology. httpjava.sun.com.
KARL-HEINZ 01 John Karl-Heinz and Tiegelkamp Michael(2001). IEC 61131-3 Programming Industrial
Automation Systems. Springer-Verlag Berlin and Heidelberg GmbH Co. K HarCdr edition.
LEWIS 98 R. Lewis(1998). Programming Industrial Control Systems Using IEC 1131- 3. Institution of Engineering and Technology 2Rev Ed edition.
LEWIS 07 R. Lewis (2007). Iec 61131-3, a Standard for PLC Software.
httpwww.searcheng.co.ukselectioncontrolArticlesIEC61131main.htm.
LIB 08 Visual Library (2008). Netbeans Visual Library API. httpgraph.netbeans.org
MORENO 07 Ramón Piedrafita Moreno, Víctor Larraga Egido, and José Luis Villarroel Salcedo (2007). Internet Visualization of PLCs Programs. In Proc. of 5th IEEE International Conference on Industrial Informatics (INDIN07), Vienna, Austria.
SEIXAS 00 Constantino Seixas Filho(2000). A Automação nos Anos 2000 - Uma Análise das Novas Fronteiras da Automação. CONAI2000  ATAN Sistemas.

2981