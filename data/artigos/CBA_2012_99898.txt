Anais do XIX Congresso Brasileiro de AutomÃ¡tica, CBA 2012.

ANALISE E IMPLEMENTACAO DE UMA RNA COM FPU EM DISPOSITIVO
RECONFIGURAVEL
Maicon A. Sartin , Alexandre C. R. da Silva


UNEMAT - Universidade do Estado de Mato Grosso
Departamento de Computacao
Colider, MT, Brasil


UNESP - Universidade Estadual Paulista
Departamento Engenharia Eletrica
Ilha Solteira, SP, Brasil

Emails mapsartin@gmail.com , acrsilva@dee.feis.unesp.br
Abstract The progress of the fabrication of integrated circuits has increased processing capacity intra-chip,
which allows greater convergence of various media in a single IC. The recongurable computing has been widely
used in the implementation of various applications, and provide high performance computing beyond the level
of parallelism. Often, due to the projects time constraints, techniques that employ recongurable devices can
be adopted, so called FPGA. This paper presents a hardware architecture for an RNA in two layers using the
XNOR function. The user interacts with the system through switches, LEDs, 7 segment displays and VGA
interface. In the design of the system it was used VHDL and various IP Cores of oating-points units were
used for comparison. An analysis of various characteristics of the system, in dierent scenarios, were discussed
to aid the choice of platforms and IP Cores in the development of RNA in recongurable device. Satisfactory
results are obtained in the processing time of the RNA with the free IP core (Havoc), reaching a two times higher
performance compared to other IP.
Keywords

FPGA, ANN, Recongurable Computing, Floating Point Unit.

Resumo A evolucao da tecnologia de fabricacao de circuitos integrados tem aumentado a capacidade
de processamento intra-chip, o que permite uma maior convergencia de varias mdias em um unico CI. A
computacao_reconguravel tem sido muito utilizada na implementacao de diversas aplicacoes, e proporciona
um alto_desempenho computacional alem do nvel de paralelismo. Frequentemente, devido a restricao de
tempo de projeto, adotam-se tecnicas que empregam dispositivos reconguraveis, os denominados FPGA. Neste
trabalho apresenta-se uma arquitetura de hardware para uma RNA de duas camadas utilizando-se a funcao
XNOR. O usuario interage com o sistema atraves de chaves, leds, displays de 7 segmentos e interface VGA. No
desenvolvimento do sistema utilizou-se a VHDL e diversos IP Cores de unidades de ponto utuante para efeito de
comparacao. Analise de varias caratersticas do sistema, em diferentes cenarios, foram discutidas para auxiliar
a escolha de plataformas e IP Cores no desenvolvimento de RNA em dispositivo reconguravel. Resultados
satisfatorios sao obtidos no tempo de processamento da RNA com o IP Core Livre (Havoc), alcancando um
desempenho duas vezes maior comparado aos outros IP.
Palavras-chave

.

Introducao

A utilizacao de dispositivos reconguraveis em
FPGA(Field Programmable Gate Arrays) tem
aumentado, principalmente por dispor de desempenho associado a um alto nvel de paralelismo
e exibilidade. Esses dispositivos estao sendo
empregados em aceleradores por hardware, em
uma vasta abrangencia de aplicacoes como processamento_de_sinais e imagens (Rakvic et al., 2009),
compressao_de_dados (Rigler, 2007), criptograa
(Borkar et al., 2011), bioinformatica (Gu et al.,
2008), entre outros. Para facilitar e agilizar o
desenvolvimento de projetos, as atuais ferramentas CAD (Computer-Aided Design) incorporam
em seus ambientes as linguagens para a descricao
de hardware em alto nvel de abstracao. Tais
caractersticas tem permitido o desenvolvimento
de projetos para aplicacao de RNA (Rede Neural
Articial).
Geralmente as RNA sao utilizadas quando
nao existem modelos_matematicos para a re-

ISBN 978-85-8001-069-5

solucao de um determinado problema, devido
a sua complexidade ou quando necessita-se de
aplicacoes em tempo_real (Minussi, 2007). A
organizacao de uma RNA e bem denida em
camadas, neuronios, pesos e funcao de ativacao.
Trata-se de uma estrutura massivamente paralela
adequada para ser implementada em FPGA
(Ferreira e Barros, 2010) (Ali e Mohammed, 2010),
cuja principal caracterstica e o paralelismo de
grao pequeno.
Na arquitetura do hardware para implementar a RNA em FPGA, utilizou-se diversos
conceitos de IP (Intellectual Property) Cores,
como a Unidade de Ponto Flutuante (FPU) para
o calculo dos neuronios, alem de divisores de
frequencias, multiplexadores e registradores para
os dispositivos de ES. A RNA desenvolvida e baseada no modelo de McCulloch-Pitts (Mcculloch
e Pitts, 1943) com duas entradas, duas camadas
e tres neuronios. Esta rede e nao-recorrente
e com funcao de ativacao degrau bipolar. O
treinamento da rede nao foi prototipado, porem

5121

Anais do XIX Congresso Brasileiro de AutomÃ¡tica, CBA 2012.

os calculos dos pesos foram feitos e adicionados
ao projeto. Atualizando-se os pesos pode-se obter
novas funcionalidades para a RNA, diferente da
XNOR.
Em aplicacoes que envolvem RNAs em
projetos com FPGA, frequentemente as FPU sao
desenvolvidas de forma customizada em ponto
xo (Imen et al., 2012) (Bahoura e Park, 2011)
(Nedjah et al., 2010). Nessa abordagem o uso
da RNA ca restrito ao projeto, dicultando
o seu reuso e prejudicando a precisao com o
truncamento realizado na otimizacao da FPU.
Geralmente a customizacao e feita com diferentes
representacoes de numeros e caminhos de calculos
dicultando a compreensao (Damak et al., 2008)
(Lee e Ko, 2006).
Neste trabalho apresenta-se uma arquitetura
de hardware para uma RNA utilizando-se a funcao
XNOR e o usuario interage com o sistema por
meio de dispositivos de ES. Uma analise de area
e desempenho do FPGA foi realizada com varios
cenarios distintos para vericar a melhor escolha
no uso de FPU. As principais contribuicoes deste
trabalho estao na analise especca de varios
requisitos de um sistema com RNA e FPU em
dispositivo reconguravel, a utilizacao de distintas
plataformas e IP Cores, e o uso de dispositivos
de ES dispostos nas plataformas FPGA. Essa
analise podera auxiliar de forma adequada o
projetista na escolha dos componentes a serem
utilizados em seu sistema. O restante desse
trabalho esta organizado da seguinte forma A
Secao 2 caracteriza o sistema de forma mais
detalhada, permite vericar os nveis denidos na
organizacao, a estrutura dos componentes desenvolvidos com suas interconexoes, e os cenarios
avaliados. Os resultados de area utilizada na
FPGA e de desempenho nos distintos cenarios sao
apresentados na Secao 3, incluindo caractersticas
de otimizacao. A Secao 4 naliza o artigo com
a discussao das contribuicoes alcancadas e os
trabalhos futuros.
2

Estudo de Caso

O projeto foi construdo e prototipado nas
plataformas FPGAs Spartan 3E-500(Nexys 2)
e Cyclone II, desenvolvido em VHDL (VHSIC
Hardware Description Language) com as ferramentas gratuitas da Xilinx (ISE 13.1) e Altera
(Quartus 11.1) respectivamente.
O coregen
(Xilinx, 2011a) e o plugin Megafunctions (Altera,
2011) foram usados para a concepcao dos IP
Cores nas duas unidades de ponto utuante,
adicao e multiplicacao, para fazer os calculos
das somas ponderadas nos neuronios. Outro IP
Core analisado foi o Havoc (Guillermo, 2010)
(Guilhermo et al., 2004), usado para as duas
plataformas independente de fabricante. Alem do
desenvolvimento do sistema da RNA, a substitui-

ISBN 978-85-8001-069-5

cao dos IP Cores foi realizada para uma analise
de area e desempenho nas diferentes plataformas,
e varios outros componentes integram a estrutura
do sistema.
A alimentacao do sistema e feita por meio de
seis chaves, quatro para os sinais de entrada x1,x2
da RNA, que podem assumir valores +1 e -1, duas
para cada entrada para representar o sinal e duas
para os sinais de load e reset que sao responsaveis
pelas transicoes da maquina de estados. O usuario
dispoe de seis leds como indicadores das entradas,
e as sadas da RNA podem ser acompanhadas
pelos displays de 7 segmentos e pela interface
VGA.
A metologia bottom-up em conjunto com
a descricao estrutural foram utilizadas para
melhor legibilidade do projeto, para aumentar o
paralelismo e facilitar o reuso dos componentes.
Apresenta-se na Figura 1 a organizacao do sistema
implementado em FPGA, conforme a sua divisao
por nveis. Nessa organizacao e possvel vericar
todos os blocos existentes no sistema e a forma
como sao instanciados.

Figura 1 Organizacao do Projeto
Nas unidades de ponto utuante foram realizados os calculos de cada neuronio, a ponderacao
dos pesos com as entradas e o somatorio para
gerar a sada parcial de dada neuronio. Para cada
sada parcial e executada a funcao de ativacao
degrau bipolar e determinado um novo resultado
em ponto utuante. A funcao de ativacao segue a
regra

+1 se x > 0
f(x) 
1 se x < 0
Se for o ultimo neuronio, a sada da funcao
degrau bipolar tem-se o resultado da RNA na
representacao binaria com 2 bits. Cada funcao
de ativacao e determinada por um processo e
habilitado com um CE (Chip Enable), tornando
mais facil a substituicao desta funcao. Alem
desta, outras funcoes sao populares na literatura,
como a sigmoide, tangente_hiperbolica e rampa.
A sigmoide e a mais popular dentre todas as
funcoes, a implementacao por meio de uma

5122

Anais do XIX Congresso Brasileiro de AutomÃ¡tica, CBA 2012.

tabela de valores (Look-Up Tables) ou por
equacao polinomial sao os dois principais metodos
adotados. A Look-up Table e mais simples e
exige pouca porcentagem de area chip, cerca de
1 (Imen et al., 2012). Semelhante a degrau
bipolar, a rampa e frequentemente utilizada pela
sua facilidade de implementacao e por encontrar
razoavel precisao com pequenas taxas de erros
(Damak et al., 2008).

toprna
muxvga

topneuronio
SW(30)

result(10)

tx1(310)
tx1(310)
ce

clock

result(10)

R

CEVGA

G

reset

B

clk

HS

seletor

VS

clk

U1

U3

divclk25

Resultado
ledld

clk25

clock

ledrst

2.1

Estrutura Geral

As plataformas de hardwares utilizadas foram as
de menor custo. A Spartan 3-E disponibiliza
pouca area de chip (slices) do FPGA, cerca de
4 vezes menos quando comparado aos Elementos
Logicos (LE) disponveis na Cyclone II. Os Slices
e os LEs por serem de plataformas e fabricantes
distintos contem diferencas principalmente nos
tipos de LUT (Look-Up Table), na quantidade
entradas e de Flip-Flops empregados nessas
estruturas logicas (Slices e LE). Um exemplo e
que na Cyclone possui LE de dois modos, o
normal e o aritmetico. Ja na Spartan existem
Slices que podem representar funcoes de memoria
e logica, e outro tipo para efetuar apenas
funcao logica. Independente da plataforma ou
fabricante, a utilizacao de VHDL com descricao
comportamental internamente nos modulos, torna
o sistema portavel e exvel.
A vista de topo da estrutura do sistema, com
as caractersticas de controle e das interfaces de
ES dos componentes esta ilustrada na Figura
2. Essa estrutura esta em nvel de logica de
transferencia de registradores (RTL). As entradas
clock e reset sao propagadas por todo o circuito,
as chaves sao armazenadas nos registradores que
sao convertidos para seus respectivos numeros
em ponto utuante.
O load inicializa a
maquina de estados da entidade denominada
topo para controlar o armazenamento correto dos
registradores. Em seguida a execucao da RNA
e os multiplexadores sao habilitados para exibir
a sada da RNA no monitor e nos displays de 7
segmentos.
A interface VGA e o display de 7 segmentos
sao responsaveis por apresentar os resultados
para o usuario.
Deniram-se divisores de
frequencia e multiplexadores para alternar entre a
apresentacao pelos displays de 7 segmentos e por
meio de texto na interface VGA. O multiplexador
para o display de 7 segmentos foi utilizado apenas
na plataforma Nexys2, na DEII contem um
barramento de dados para cada display tornando
desnecessario o multiplexador, porem mantevese uma estrutura semelhante para nao alterar a
analise.
O bloco Top Neuronio corresponde a implementacao das camadas da RNA, a execucao dos
neuronios e da funcao de ativacao sao executados

ISBN 978-85-8001-069-5

leds(30)

U4

load

divclk
newclk

clk
reset

reset

muxd7seg
result(10)

seletor

CED7S

SD7SEG(60)
anodos(30)

clk

U2

U5

Figura 2 Estrutura RTL do nvel topo do projeto
em paralelo. Os pesos sinapticos estao denidos
nesse bloco e processa os neuronios (identicos)
modicando-se apenas em seus respectivos pesos
na instanciacao. Internamente cada neuronio
contem a soma_ponderada, onde cada tipo de
operacao possui a sua propria unidade de ponto
utuante com o processamento realizado em
paralelo.
2.2

Cenarios

Na implementacao da RNA em FPGA geralmente
customiza-se a unidade de ponto utuante para
menor consumo de area e um maior desempenho.
A reutilizacao de um projeto customizado obriga
ao estudo do componente para poder utiliza-lo,
isso demanda maior tempo de projeto e muitas
vezes deve ser adaptado a nova realidade.
Nesse trabalho foram empregadas unidades
de ponto utuante padronizadas pela IEEE-754
de precisao simples (32 bits). Essas unidades
estao disponveis e podem ser utilizadas pelas
ferramentas dos proprios fabricantes de FPGA ou
por IP Cores livres. As FPU apresentadas sao
todas gratuitas e possveis de ser empregadas em
qualquer sistema que disponha das plataformas
denidas neste trabalho.
Na utilizacao das
ferramentas CAD dos fabricantes Altera e Xilinx
e possvel denir diversos tipos de parametrizacao
para as unidades de ponto utuante.
Os cenarios avaliados utilizam 4 tipos de IP
Cores para ponto utuante, um da Altera, um da
Xilinx, dois IP Cores Livres o Havoc e o FPU100
(Jidan, 2011).
A FPU100 e uma unidade de ponto utuante
com os tipos de operacoes aritmeticas basicas e
a raiz quadrada. O pacote em VHDL contem
sinais de controle e excecao, e diversas caractersticas que podem ser parametrizadas como as
operacoes aritmeticas, o tipo de implementacao

5123

Anais do XIX Congresso Brasileiro de AutomÃ¡tica, CBA 2012.

(com ciclo simples ou pipeline) e o tipo de
arredondamento pode ser denido por sinais no
proprio codigo fonte. Porem, nao foi possvel
fazer o mapeamento na plataforma da Xilinx,
pois ocorreu um Overmapped, mesmo retirando os
componentes de divisao e raiz quadrada. Assim,
apenas adicionaram-se os valores de area para
comparacao com os outros cenarios, ja que os
valores de temporizacao sao coletados apos a etapa
de Place and Route.
O IP Core Havoc opera com o padrao IEEE754 de precisao simples (32bits) e possui dois tipos
de operacao, a adicao e multiplicacao. Na adicao
a implementacao tem suporte a ciclo simples e
pipeline de 6 estagios, ja a multiplicacao opera
em ciclo simples e pipeline de 4 estagios. A
Havoc foi o unico IP Core a ser prototipado nas
duas plataformas e cada tipo de operacao contem
modulos separados como na Altera e Xilinx.
A ferramenta Coregen da Xilinx gera o
seu IP Core de ponto utuante e pode ser
parametrizado conforme o padrao IEEE-754 com
precisao simples, dupla ou customizada, onde
dene-se a quantidade de bits para cada elemento
da FPU (Sinal, Expoente e Mantissa).
O
uso de multiplicadores, a exigencia de latencia
ao sistema, os sinais de excecao, controle e
handshaking sao caractersticas possveis de serem
includas na construcao de uma unidade de
ponto utuante. Cada FPU contem um tipo
de operacao, com excecao da adicao e subtracao
que podem ser agrupadas em uma mesma
unidade. A prototipacao da FPU com operacao
de multiplicacao e a opcao de uso completo
de multiplicadores 18x18, nao foi possvel na
plataforma Spartan 3-E, pelo fato da quantidade
desses modulos serem limitados e insucientes,
em uma plataforma mais robusta o uso de
multiplicadores dedicados pode reduzir a area
de uso pela FPU e aumentar o desempenho do
sistema.
A Altera tem uma grande biblioteca chamada
Megafunctions e um plugin associado para
facilitar a utilizacao de funcionalidades dessa
biblioteca. A construcao da FPU segue o padrao
IEEE-754 e a parametrizacao tem a opcao de
precisao simples, dupla ou simples extendida
(customizada), alem disso, o desenvolvedor pode
selecionar um tipo de otimizacao de area ou
velocidade, escolheu-se o padrao, velocidade. A
adicao de portos de controle e excecoes e viavel
em qualquer tipo de operacao escolhida. Os
tipos de operacoes de ponto utuante possveis
para os dois fabricantes sao semelhantes, as
principais sao as basicas adicao, subtracao,
multiplicacao e divisao e as especcas raiz
quadrada, comparacao, conversao, entre outras.
Alem da variacao de IP Cores, analisou-se
duas funcionalidades para gerenciar com maior
qualidade o caminho do sinal de clock. Nesse

ISBN 978-85-8001-069-5

controle e inserido buers globais no sinal
de entrada de clock externo e varias outras
caractersticas para melhorar a propagacao do
sinal de clock em toda a FPGA. Para cada
fabricante analisado contem um tipo de unidade
de controle de clock, o DCM (Digital Clock
Manager ) na Xilinx e o ALTCLKCTRL na Altera.
Esses controladores tambem podem ser inseridos
na sada de um PLL (Phase Locked Loop) para
ter uma melhor qualidade no sinal em altas
frequencias, nesse trabalho foram implementados
apenas os controles digitais, nao utilizou-se PLLs.
As unidades de controle de clock visam
melhorar principalmente os problemas de jitter,
skew e metastability no FPGA. Os problemas
de jitter e skew sao imperfeicoes ou rudos,
que deformam ou adicionam atrasos ao sinal
de clock, e podem causar problemas em todos
os componentes ligados a este (Xilinx, 2006).
A metastability ocorre em sistemas sncronos,
provoca instabilidade no sistema por nao haver
tempo suciente para o setup time e hold time
do registrador, isto causa inconsistencia nos dados
de sada dos registradores prejudicando o sistema
(Stephenson et al., 2009). O ALTCLKCTRL
(Altera, 2012) pode ser parametrizado conforme
o modo de operacao, determinando a habilitacao
de clock global, regional e externo. Para a
Cyclone II permite-se apenas a opcao global e
externo, sendo o ultimo para o uso em conjunto
com o PLL. Ja o DCM (Xilinx, 2011b), contem
3 unidades importantes o DLL (Delay-Locked
Loop), DFS (Digital Frequency Synthesizer ) e o
PS (Phase Shift). Dessa forma, o DCM possibilita
a habilitacao do clock, adiciona buer global e de
entrada, alem de trazer a opcao de sada para
multiplos clock com divisao ou multiplicacao ao
clock externo ou referencia.
Diante disso, na Tabela 1 apresenta-se 15
cenarios analisados nesse trabalho, variando as
unidades de ponto utuante, controle de clock
e o tipo de implementacao (ciclo simples(CS)
ou pipeline) no IP Core Havoc.
Todos os
cenarios obedeceram o padrao IEEE-754 de
precisao simples, com excecao dos cenarios 8
e 9 que customizaram-se a precisao em ponto
utuante para 24 bits, dependendo da aplicacao
essa precisao tem baixa taxa de erro, conforme
(Lee e Ko, 2006). Os nove primeiros cenarios
foram prototipados na plataforma Spartan 3E e o restante na Cyclone II. Entretanto, nas
duas plataformas utilizou-se clock externo ao
FPGA com frequencia de 50MHz em todas as
comparacoes analisadas.
3

Resultados

O diagrama de tempo do sistema e apresentado
na Figura 3, demonstra a funcionalidade da RNA
e os principais sinais do sistema. A entrada de

5124

Anais do XIX Congresso Brasileiro de AutomÃ¡tica, CBA 2012.





SaÃ­das Parciais Pesos

683ns

Figura 3 Diagrama de Tempo

No
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

Tabela 1 Cenarios Analisados
Cenarios
Xilinx+Coregen(S DCM)
Xilinx+Coregen(C DCM)
Xilinx+Havoc+CS(S DCM)
Xilinx+Havoc+CS(C DCM)
Xilinx+FPU100(S DCM)
Xilinx+Havoc+Pipeline(S DCM)
Xilinx+Havoc+Pipeline(C DCM)
Xilinx+Coregen(24 bits)(S DCM)
Xilinx+Coregen(24 bits)(C DCM)
Altera+Megafunctions(S CTRLCLK)
Altera+Megafunctions(C CTRLCLK)
Altera+Havoc+CS(S CTRLCLK)
Altera+Havoc+CS(C CTRLCLK)
Altera+Havoc+Pipeline(S CTRLCLK)
Altera+Havoc+Pipeline(C CTRLCLK)

dados pelas chaves sao convertidas para ponto
utuante e armazenadas nos registradores OPA
e OPB, os pesos do primeiro neuronio e as
sadas parciais tambem podem ser observadas na
marcacao. O sinal de resultado na sada do
neuronio tambem contem um registrador, para
manter os dados por mais tempo sem perdas,
antes de serem transferidos aos outros nveis e
dispositivos externos.
As sadas parciais SA e SB sao os resultados
dos neuronios da primeira camada e apos a
realizacao da funcao degrau bipolar obtem-se as
sadas SC e SD. A sada parcial SS e o resultado
do neuronio da ultima camada, o sinal resultado
esta apos a funcao degrau bipolar e naliza o
sistema.
No diagrama de tempo e apresentado tres
transicoes nas entradas da RNA demonstrandose a simulacao do sistema implementado. Na
segunda transicao, Figura 3, o tempo de execucao
da RNA e marcado em aproximadamente 683
nanosegundos, esse tempo foi concedido no
primeiro cenario da Tabela 1. No cenario 6 o

ISBN 978-85-8001-069-5

tempo de execucao do sistema cou em cerca
de 330 nanosegundos, mostrando a eciencia do
pipeline no desempenho global do sistema. Ja
o cenario 8, que opera com precisao reduzida,
teve uma resposta de 665 nanosegundos um
pouco menor que a versao com 32 bits. Com
a plataforma Cyclone II, o cenario 10 obteve
o tempo de execucao em 1330 nanosegundos
e o cenario 14 com o Havoc chegou a 660
nanosegundos, menos da metade do valor da
altera.
Nas Tabelas 2, 3 e 4 apresenta-se varias informacoes dos cenarios prototipados na plataforma
Spartan 3-E e Cyclone II, os dados estao divididos
em dois grupos, em area consumida na FPGA
(5 primeiras linhas) e parametros na analise de
otimizacao (4 ultimas linhas). Salienta-se que
nao houve modicacoes no tipo de otimizacao
por esforco nas ferramentas de sntese dos dois
fabricantes, mantendo-se o padrao normal. As
FPUs para as operacoes de calculos em ponto
utuante nos neuronios, ocupam uma parte
consideravel da area do FPGA da Spartan 3-E
dependendo do IP Core utilizado, comprometendo
o seu uso nesta plataforma. Porem, percebese que o IP Core Havoc foge um pouco essa
suposicao mostrando-se economico em relacao a
area utilizada da FPGA.
Nos cenarios de 1 a 5, ca claro que a area
consumida (Slices) do IP Core Havoc e menor
em relacao aos outros cenarios, chegando a 112
menor que a FPU100 e 49 menor que o da Xilinx,
conforme representado na Tabela 2. A reducao da
precisao da FPU em 8 e 9, apresentada na Tabela
3, diminui a area consumida em 28 nas LUTs
e FlipFlops, e 11 para os Slices em relacao a
versao completa.
O IP Core da Xilinx, cenario 1, obteve a maior
frequencia no caminho do sinal de clock dentre os
cenarios de 1 a 7, chegando a ser quase 3 vezes
mais rapido em relacao a frequencia do Havoc.
Vale ressaltar, que a caracterstica de frequencia
maxima esta relacionada ao desempenho em que

5125

Anais do XIX Congresso Brasileiro de AutomÃ¡tica, CBA 2012.

Spartan 3-E
Slices
Slices FF
4-input LUT
MULTI18X18s
IOBs
Limite de Perodo(ns)
Clock Skew(ns)
Slack-Worst Case(ns)
FanOut(Worst Case)
Freq. Max.(MHz)

Tabela 2 Cenarios Analisados - Spartan
Cenarios
1
2
3
4.654(99) 4.654(99) 2.565(55)
8.430(90) 8.429(90) 1.564(16)
8.334(89) 8.334(89) 4.120(44)
0(0)
0(0)
10(50)
31(13)
31(13)
31(13)
7
7
18
0,089
0,089
0,084
0,081
0,117
0,028
4.527
4.519
1.153
144,530
112,575
55,642

3-E
4
2.356(50)
1.483(15)
3.777(40)
10(50)
31(13)
19
0,083
0,050
1.091
52,770

Tabela 3 Cenarios Analisados - Spartan 3-E
Cenarios
Spartan 3-E
6
7
8
Slices
2.614(56) 2.611(56) 4.133(88)
Slices FF
1.588(17) 1.587(17) 5.809(62)
4-input LUT
4.515(48) 4.513(48) 5.703(61)
MULTI18X18s
10(50)
10(50)
0(0)
IOBs
31(13)
31(13)
31(13)
Limite de Perodo(ns)
19
19
7
Clock Skew(ns)
0,082
0,086
0,089
Slack-Worst Case(ns)
0,132
0,012
0,083
FanOut(Worst Case)
4.527
4.519
1.153
Freq. Max.(MHz)
50,332
52,665
144,571

o sistema pode atuar em determinados caminhos
e nao do sistema completo.
Na insercao do DCM nos cenarios 2 e 4 da
Tabela 2 a area consumida cou praticamente
a mesma dos cenarios 1 e 3, o DCM foi
parametrizado com dois clocks de sada com
buer, ou seja dois DCM, um na mesma
frequencia da plataforma (50 MHz) e outro
dividido por 2, para eliminar o modulo divisor
de clock de 25 MHz. Esse clock esta na sada
do DCM interconectado ao divisor de clock lento
(60Hz), para diminuir o seu contador, e tambem
utilizado como referencia ao clock do VGA com
resolucao de 640x480.
Na analise dos dados atribuiu-se diferentes
valores para a limitacao de perodo de clock em
cada cenario, esses numeros foram encontrados
aumentado essa limitacao ate nao ter mais
problemas de metastability no sistema.
Nos
dados de slack (Worst Case) em todos os cenarios
esse valor ca proximo ao zero mostrando que
a implementacao do cenario esta no limite de
perodo de tempo sustentavel. A inclusao do DCM
nao prejudica o custo em area da FPGA e viabiliza
melhorias em qualidade no sistema. Nesse estudo
de caso pode-se retirar o divisor de frequencia e
reduzir o consumo de slices em 5, cenarios 3 para
4, alem disso, nota-se uma suave reducao ao clock
skew e no FanOut maximo, isso pode ser visto de

ISBN 978-85-8001-069-5

5
7.575(162)
1.680(18)
14.554(156)
4(20)
63(27)
-

9
4.128(88)
5.804(62)
5.697(61)
0(0)
31(13)
7
0,089
0,083
1.091
87,589

forma semelhante em todos os cenarios com e sem
DCM para a plataforma da Xilinx.
Na prototipacao com a plataforma Cyclone
II, Tabela 4, o comportamento do IP Core
Havoc alterou-se de maneira satisfatoria em area
consumida e desempenho. O numero de elementos
logicos (LE) consumida nos cenarios 6 e 8 sao
muito distintos, o IP Core Havoc e 6 vezes menor
que o da Altera e a frequencia e aproximadamente
65 maior. A utilizacao do ALTCTRLCLK
nao apresentou mudancas relevantes nos cenarios
analisados, com excessao da melhoria no clock
skew dos cenarios 6 e 7. A Cyclone II, com os
cenarios 5 e 6, o numero de LUTs de 4 entradas e
menor que na Xilinx, devido a maior utilizacao de
LUTs de 2 e 3 entradas nesses cenarios, isso pode
ser observado em uma analise mais detalhada
do relatorio de recursos. Vale ressaltar, que
a plataforma da Xilinx so contem LUTs de 4
entradas (Xilinx, 2009), ja em relacao aos Slices
e LE a area utilizada nos dois fabricantes e a
frequencia alcancada sao semelhantes.
Diante dos resultados encontrados nos diversos cenarios apresentados para esse sistema,
a melhor escolha e dos cenarios utilizando o
IP Core Havoc nas duas plataformas obtevese excelentes resultados principalmente de area
usada na FPGA. O cenario 12 com a plataforma
Cyclone II obteve a menor area consumida e a

5126

Anais do XIX Congresso Brasileiro de AutomÃ¡tica, CBA 2012.

Cyclone II
LE
Registers
4-input LUT
MULTI 9-bits
IOBs
Limite de Perodo(ns)
Clock Skew(ns)
Slack-Worst Case(ns)
Fan-out
Freq. Max.(MHz)

Tabela 4 Cenarios Analisados - Cyclone II
Cenarios
10
11
12
13
4.671(25) 4.838(25) 763(4) 763(4)
3.107(17) 3.107(17) 64(1)
64(1)
982(5)
982(5)
359(2) 359(2)
0(0)
0(0)
0(0)
0(0)
34(11)
34(11)
34(11) 34(11)
7
7
4
4
-0,047
-0,004
0,000
0,002
0,627
0,562
0,136
0,152
3.198
3.198
59
59
156,91
155,33
258,80
259,88

maior frequencia em um determinado caminho
dentre todos os outros cenarios. Para a plataforma
Spartan 3-E o cenario 6 com pipeline foi duas
vezes mais rapido em tempo de execucao que o IP
Core da Xilinx. A frequencia maxima encontrada
em cada cenario e correspondente a um caminho
especco e o tempo de execucao e a validacao
do processamento de todo o sistema. O mesmo
estudo de caso foi desenvolvido em software, com
processador Celeron 2.2 GHz (Linux Fedora com
GCC), e obteve o resultado em 2 milissegundos,
mesmo com uma RNA simples, a diferenca de
desempenho entre a implementacao em hardware
e software e extremamente alta, provando o
paralelismo encontrado nas RNA. O emprego do
IP Core Havoc economizou o uso de recursos
de area da FPGA em 49 na Spartan e 21
na Cyclone comparado aos IP Cores dos seus
respectivos fabricantes.
Em (Nichols, 2003),
utilizou-se 16 bits de ponto xo para a XOR RNA
e sem o padrao IEEE-754, a area utilizada foi de
2478 slices na plataforma xcv2000e, semelhante ao
Havoc com precisao de 32 bits em ponto utuante.
Em (Ferreira e Barros, 2010), a implementacao
de uma RNA MLP (MultiLayer Perceptrons) com
6 neuronios, para aplicacao de uma senoide teve
um consumo de 4.591 ALUTs, equivalente a duas
LUTs comuns de 4 entradas.
4

Conclusoes

A computacao_reconguravel e as redes_neurais
articiais sao duas areas em crescente ascensao e
promissoras para pesquisas cientcas, pela grande
abrangencia de aplicacoes, com exibilidade e
paralelismo nas implementacoes. Neste trabalho
foi prototipado e validado uma arquitetura de
hardware para uma RNA que utiliza-se de varios
tipos de interfaces como chaves, led, display de 7
segmentos e VGA.
O sistema utilizou unidades de ponto utuante para os calculos dos neuronios e varios componentes de controle que foram implementados
em hardware empregando FPGA. A organizacao

ISBN 978-85-8001-069-5

14
2.088(11)
720(4)
864(5)
0(0)
34(11)
15
-0,002
0,004
684
66,68

15
2.082(11)
720(4)
864(5)
0(0)
34(11)
16
-0,001
0,519
684
64,6

do sistema utilizou-se de metodologia padrao de
projeto, com intuito de facilitar a manutencao e o
reuso de componentes. A prototipacao do sistema
empregou diferentes FPU e unidades de controle
de clock, organizados em distintos cenarios. Em
cada cenario apresentou-se varias informacoes de
area consumida e otimizacao para a FPGA.
No diagrama de tempo do estudo de caso, a
RNA processa e mostra os resultados em cerca de
683 nanosegundos com o IP Core da Xilinx e 330
nanosegundos com o Havoc. Ja a Altera obteve
resultado de 1330 nanosegundos e o Havoc com
660 nanosegundos. Os resultados apresentados
em todos os cenarios foram divididos em duas
plataformas de hardware, demonstrou-se que nas
duas plataformas de hardware o IP Core Havoc e
a melhor escolha dentre os analisados.
Agradecimentos
Os autores agradecem o apoio da UNEMAT
(Universidade do Estado de Mato Grosso), a
CAPES (Coordenacao de Aperfeicoamento de
Pessoal de Nvel Superior), ao Programa de PosGraduacao em Engenharia Eletrica da UNESP,
ao CNPQ (Conselho Nacional de Desenvolvimento
Cientco e Tecnologico) processo (30725520093) e a Xilinx pela disponibilizacao da plataforma.
Referencias
Ali, H. K. e Mohammed, E. Z. (2010). Design
articial neural network using fpga, IJCSNS
10(8) 8892.
Altera (2011).
Floating-Point Megafunctions
User
Guide,
Disponvel
em
<httpwww.altera.com>.
Acessado
em 29112011.
Altera (2012). Clock Control Block (ALTCLKCTRL) Megafunction User Guide, Disponvel
em <httpwww.altera.com>. Acessado
em 07032012.

5127

Anais do XIX Congresso Brasileiro de AutomÃ¡tica, CBA 2012.

Bahoura, M. e Park, C.-W. (2011).
Fpgaimplementation of high-speed mlp neural
network, ICECS 11, Proceedings of the
18th IEEE International Conference on
Electronics, Circuits, and Systems, pp. 426
429.
Borkar, A., Kshirsagar, R. e Vyawahare, M.
(2011). Fpga implementation of aes algorithm, Vol. 3, Proceedings of the 3rd International Conference on Electronics Computer
Technology (ICECT), pp. 401405.
Damak, A., Krid, M. e Masmoudi, D. S. (2008).
Neural network based edge detection with
pulse mode operations and oating point
format precision, DTIS 2008, Proceedings of
the 3rd International Conference on Design
and Technology of Integrated Systems in
Nanoscale Era, pp. 15.
Ferreira, A. P. A. e Barros, E. N. S. (2010). A
high performance full pipelined arquitecture
of mlp neural networks in fpga, ICECS 10,
Proceedings of the 17th IEEE International
Conference on Electronics, Circuits, and
Systems, pp. 742745.
Gu, Y., VanCourt, T. e Herbordt, M. C. (2008).
Explicit design of fpga-based coprocessors for
short-range force computations in molecular dynamics simulations, Parallel Comput.
34(4-5) 261277.
Guilhermo, M., Hinojosa, P., Avila, A. e NolazcoFIores, J. (2004). A fully synthesizable singleprecision, oating-point addersubstractor
and multiplier in vhdl for general and
educational use, Vol. 1, Proceedings of the
Fifth IEEE International Caracas Conference
on Devices, Circuits and Systems, pp. 319
323.
Guillermo, M. (2010). Floating Point Adder
and Multiplier  Overview, Disponvel em
<httpopencores.org>.
Acessado em
01022012.

Mcculloch, W. S. e Pitts, W. (1943). A logical
calculus of the ideas immanent in nervous
activity, Vol. 5, Bulletin of Mathematical
Biophysic, pp. 115133.
Minussi, C. R. (2007). Redes neurais Introducao
e principais conceitos. Programa de PosGraduacao em Engenharia Eletrica, UNESP
- Ilha Solteira, SP.
Nedjah, N., da Silva, R. M. e de Macedo Mourelle,
L. (2010). Arquitetura de hardware compacta e eciente para redes_neurais articiais
do tipo multiplas camadas, XVIII Congresso
Brasileiro de Automatica, pp. 28382845.
Nichols, K. R. (2003). A recongurable computing
architecture for implementing articial neural networks on fpga, MSC Thesis University
of Guelp.
Rakvic, R. N., Ngo, H., Broussard, R. P. e Ives,
R. W. (2009). Fpga or cell for an image
processing application, Proceedings of the
2009 International Conference on Advances
in Computing, Control, and Telecommunication Technologies, ACT 09, IEEE Computer
Society, Washington, DC, USA, pp. 271274.
Rigler, S. (2007). Fpga implementation of a
face detector using neural networks, CCECE
07, Proceedings of the Canadian Conference
on Electrical and Computer Engineering,
pp. 12351238.
Stephenson, J., Chen, D., Fung, R. e Chromczak,
J. (2009). Understanding Metastability in
FPGAs, Altera. White Paper.
Xilinx (2006). Using Digital Clock Managers
(DCMs) in Spartan-3 FPGAs, Disponvel
em <httpwww.xilinx.com>. Acessado
em 31012012.
Xilinx
(2009).
Spartan-3E
FPGA
Family
Data Sheet, Disponvel em
<httpwww.xilinx.com>.
Acessado
em 31012012.

Imen, K., Benjemma, A. e Masmoudi, M. S.
(2012). Implementations approches of neural
networks lane following system, International
Journal of Computer Applications 40(17) 7
10.

Xilinx (2011a).
LogiCORE IP FloatingPoint Operator v5.0, Disponvel em
<httpwww.xilinx.com>. Acessado em
05072011.

Jidan, A.-E. (2011). FPU  Overview, Disponvel
em <httpopencores.org>. Acessado em
01022012.

Xilinx (2011b).
Spartan-3E FPGA Starter
Kit Board User Guide, Disponvel em
<httpwww.xilinx.com>. Acessado em
05072011.

Lee, Y. e Ko, S.-B. (2006).
Fpga implementation of a face detector using neural
networks, ICECS 06, Proceedings of the
13th IEEE International Conference on
Electronics, Circuits, and Systems, Stevens
Point, Wisconsin, USA, pp. 13401343.

ISBN 978-85-8001-069-5

5128