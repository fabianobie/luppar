Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

DESENVO LVIMENTO DE INTERFACE EMBARCADA CO M ACESSO  NUVEM
FABIO C. M ÂNGIA, RODRIGO M. A. A LMEIDA
IESTI, Universidade Federal de Itajubá
CEP 37500-903, Itajubá, Minas Gerais, Brasil
E-mails fabiomangia@gmail.com, rodrigomax@unifei.edu.br
Abstract T his article presents the development of a embedded system for accessing data in the cloud. A review of
the concepts of cloud computing is presented as well as the API used. We opted for the use of simpler hardware components due to ease of access and development. For the software, it was used a model based in a cooperative system. T his
allowed the execution of various tasks simultaneously without affecting the code complexity. T he final system showed a
good ability of communication and data transmission, as well as a simple interface for use as a data collector.
Ke ywords Embedded Systems, Arduino, Cloud computing.
Re sumo Este artigo apresenta o desenvolvimento de um sistema_embarcado para acesso a dados na nuvem. É apresentada uma revisão dos conceitos de computação_na_nuvem bem como da API utilizada. Optou-se na utilização de
componentes de hardware mais simples devido a facilidade no desenvolvimento e acesso. Para o software foi utilizada
uma modelagem baseada em sistemas_cooperativos visando perm itir a execução de várias tarefas simultâneas sem impactar na complexidade de código. O sistema final apresentou uma boa capacidade de comunicação e envio dos dados, bem
como uma interface simples para utilização como coletor de dados.
Palavras-chave  .

2 Conceituação

1 Introdução
2.1 Smartapps

Um sistema_embarcado possui uma interação
contínua com o ambiente no qual se encontra. Robôs,
sensores_inteligentes, controladores de processo são
exemplos deste tipo de equipamento. É esperado que
funcionem por longos períodos de tempo, processando repetidamente novas informações e gerando uma
ação correspondente e adequada (Kaelbling, 1993).
Já a computação_em_nuvem é um conceito computacional que visa permitir um acesso descentralizado e perene a uma série de dados, informações ou
serviços (Mell 2011). Esta capacidade exige uma conexão com a internet para ser utilizada.
O desenvolvimento de um sistema_embarcado
com acesso  nuvem pode trazer várias vantagens o
baixo consumo, robustez e confiabilidade, típicos
destes sistemas, com a capacidade de transmissão e
disponibilização de informação de modo mais rápido e
simples. Além disso as rotinas que demandem processamento mais intensamente podem ser feitas pelos
computadores na nuvem, deixando o equipamento
embarcado focado em garantir seu bom funcionamento.
Este trabalho tem então como objetivo reunir estes dois conceitos num equipamento embarcado. Para
tal objetivo o equipamento desenvolvido será conectado  plataforma oferecida pela empresa Smartapps e
consequentemente ao banco_de_dados disponibilizado pela plataforma, onde os dados coletados pelo
equipamento serão armazenados.

Smartapps é o nome dado a plataforma desenvolvida pela empresa de mesmo nome (Smartapps,
2013) e que tem com objetivo desenvolver um ambiente online para instalação e gerenciamento de aplicações, similar a um sistema operacional, de forma comunicativa e associativa. Isto permite que diversas
aplicações diferentes sejam reunidas de modo simplificado, como a junção de um banco_de_dados online
sobre tráfego rodoviário e um sistema de apoio a informação de rotas para um motorista. Esta plataforma
possui uma infraestrutura flexível e que oferece acesso as suas informações, protocolos e serviços para
qualquer dispositivo com acesso  internet, consequentemente reduzindo a necessidade de grandes
arquiteturas e equipes de profissionais dentro das
empresas especializados em gerenciar todas as informações armazenadas.
Com intuito de facilitar o desenvolvimento de
aplicações que utilizam a plataforma Smartapps, é
disponibilizada uma API (Application Programming
Interface) para acesso aos aplicativos desenvolvidos.
Essa API é desenvolvida em PHP e composta por
diversas funções acessíveis através de requisições e
respostas HTTP. A API é utilizada de uma forma invisível para o usuário, de modo que um site de terceiro
pode disponibilizar informações contidas na Smartapps de modo transparente.

1616

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

2.2 Proposta do equipamento

zação de teclado maior pode ser inviabilizada se o
microcontrolador não possuir terminais disponíveis
em quantidade suficiente.
Uma alternativa comum é a multiplexação das
chaves, o que aumenta a quantidade de chaves que
podem ser lidas com uma mesma quantidade de terminais de entrada. Este ganho, no entanto, aumenta a
complexidade para o software e o custo, em termos de
tempo de computação.
Entre os modelos existentes o mais eficiente para
o teclado é o arranjo em formato matricial. Com esta
configuração podemos, com N terminais, ler até (N2)2
chaves.
A figura 2 apresenta este arranjo, onde cada chave pode ser identificada de modo único por sua posição (linha e coluna). Os terminais ligados s linhas
serão configurados como entrada. Já os terminais
ligados s colunas serão configurados como saídas,
fornecendo energia para as chaves. A leitura é realizada por um processo conhecido como varredura
liga-se uma coluna por vez e verifica-se quais chaves
daquela coluna estão ligadas. Para minimizar o gasto
com memória cada botão é armazenado em um bit diferente de uma variável inteira de 16 bits, representando
as 16 chaves.

Visando facilitar a conexão entre os dispositivos
eletrônicos e a nuvem, foi desenvolvido neste trabalho um equipamento dedicado para esta finalidade o
Smartbox.
O Smartbox é um sistema_embarcado com uma interface simples e uma conexão sem fio com a nuvem.
Os dados selecionados pelo usuário no equipamento
são enviados a um servidor da Smartapps . A ideia
principal é desenvolver um equipamento que possa
ser base para desenvolvimento de futuros sistemas
embarcados que façam acesso a dados na nuvem.
Neste trabalho, a primeira versão projetada foi
utilizada uma empresa do ramo alimentício de ItajubáMG (padaria Morro Chic). A proposta específica para
a empresa é aquisitar e enviar para o servidor as
quantidades e os produtos produzidos na padaria,
automatizando a tomada dos dados e permitindo o
acesso mais rápido a estas informações.
O envio de dados  nuvem é feito utilizando o
protocolo HTML, através dos métodos GETS e PUTS.
Os dados são salvos em um banco_de_dados MySQL.
O desenvolvimento do produto, tanto do hardware
quanto do software, bem como a conexão com o servidor é descrito na seção 3.
3 Desenvolvimento
A plataforma escolhida para o projeto foi o Arduino pela facilidade em encontrar referência, pela
simplicidade de programação e por possuir já o
hardware necessário  venda, não sendo necessário
desenvolvê-lo. Escolheu-se a versão Arduino Mega
2560, figura 1, por dois motivos a quantidade de portas disponíveis e o espaço de memória disponível.

Figura 2 - Esquemático e Imagem do teclado matricial

O LCD utilizado é uma versão de 2012 do
LCD2004 - um módulo de exibição LCD de caracteres.
Possui quatro linhas por 20 colunas de caracteres,
compatível com o HD44780.
A figura 3 apresenta o verso do display. Nota-se
um circuito impresso de cor preta que faz a transformação do sinal paralelo para uma interface serial I2C
(NXP Semiconductors, 2012). Esta placa foi desenvolvida pela SaintSmart e auxilia na redução da quantidade de terminais e cabos necessários para o gerenciamento do LCD.

Figura 1 - Arduino Mega2560 R3  Visão Frontal

Para acionamento de todos os periféricos são necessários 18 pinos digitais. Dada a necessidade de
espaço para armazenamento para o programa desenvolvido, é preciso que a plataforma tenha pelo menos
4kB de memória RAM. Apenas as versões Mega
2560, Mega ADK, e Due da plataforma Arduino atingem este requisito.
3.1 Hardware
Para cada teclabotão que é colocado no projeto,
é necessário um terminal do microcontrolador. A utili-

Figura 3 - LCD2004 Verso

1617

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

Todos os componentes foram montados em uma
caixa feita de acrílico branco cortado a laser. A fixação
do Arduino é realizada por três parafusos . Mais oito
parafusos são utilizados para fixar a tampa e o fundo
s laterais da caixa.
O teclado de membrana foi colado a parede externa do case e o display encaixado em um furo com
suas exatas dimensões.
O modelo desta caixa foi obtido da Solarbotics(2013). Houve uma necessidade de adaptar-se o
tamanho das peças para que acomodasse adequadamente os componentes utilizados. A figura 6 mostra o
desenho final para a fabricação.

Foi utilizado também o WiFi Shield, figura 4, permitindo que o Arduino se conecte  internet sem a
necessidade de fios. O shield opera com uma tensão
de 5V sendo fornecida pelo próprio Arduino.

Figura 4 - WiFi Shield

A comunicação com a internet é feita através do
protocolo 802.11bg com dois tipos de encriptação
possíveis WEP ou WPA2 (Gast, 2002). O shield precisa apenas do SSID da rede para acessá-la. A conexão com o Arduino é feita através da porta SPI. O
software Arduino possui uma biblioteca completa
para a utilização dos novos recursos adicionados
pelo shield.
As conexões entre os dispositivos foram definidas seguindo a ordem de restrição dos componentes
utilizados. Primeiro temos os pinos necessários para o
shield Wifi que não podem ser substituídos devido s
restrições físicas do conector utilizado e dos pinos
disponíveis. O display utilizado possui uma comunicação I2C devendo ser conectado aos terminais 20 e
21 do Arduino, SDA e SCL, respectivamente. Para
conexão em outros pinos é necessário simular uma
comunicação serial por software. Por último foram
definidas as interfaces com o teclado matricial os
terminais 40, 41, 42 e 43 para as colunas e 30, 31, 32, 33
para as linhas. A escolha destes se deu principalmente pela proximidade física dos terminais com o cabo
do teclado que apresenta pouca flexibilidade, o que
impede que os pinos fiquem muito distantes ou que o
cabo tenha que fazer curvas bruscas. A figura 5 mostra a localização dos pinos utilizados na placa do Arduino.

Figura 6 - Desenho Mecânico do Smartbox

3.2 Software
O software foi desenvolvido utilizando uma técnica de programação chamada cooperative multitasking (Almeida 2014). Esta abordagem apresentada foi
escolhida por aumentar a robustez do sistema.
Para o Smartbox, o software pode ser representado pelo diagrama_de_blocos da figura 7. Cada bloco
reúne um conjunto de estados possíveis.

Figura 7 - Diagrama de Blocos

O bloco Início, vide figura 8, é responsável pela
inicialização do sistema configuração do display,
configuração do WiFi e autenticação com a Smartapps. Este é o único bloco onde os estados não são
numerados, já que eles não podem ser reexecutados
uma vez que o sistema já esteja em funcionamento.

Figura 5 - Interfaces do Arduino utilizadas no projeto

1618

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

A figura 11 ilustra a tela apresentada para o usuário quando o bloco 1 está em execução. A lista de
opções pode ser navegada com as teclas A e B, havendo mais itens que suportado pela tela, eles são
atualizados de acordo com o estado do sistema.

Figura 8 - Bloco Início

As funções apresentadas são sequenciais, primeiramente é realizada a configuração do display e a
chamada  tela de inicialização. Como podemos ver na
figura 9.

Figura 11 - Menu Principal

O tratamento das teclas neste bloco é feito através de uma máquina de estados estruturada numa
cláusula switchcase conforme apresentado no código 1. Optou-se por esta estrutura por permitir uma
fácil expansão posterior além de simplificar a leitura
do código. A variável index indica qual é o bloco ativo no momento. Já a variável atual representa a opção
selecionada.

Figura 9 - Inicialização Smartbox
Código 1  Menu de escolha de opções

O próximo passo é a conexão com a rede WiFi
previamente configurada. Por fim é realizada a autenticação com o servidor da Smartapps. Os detalhes
dessa autenticação são apresentados no item 3.3.
O Bloco 1 é responsável pelo menu inicial, é dele
que parte qualquer operação realizada no Smartbox.
Neste protótipo as teclas A e B foram escolhidas para
as funções de incrementodecremento. Para a função
de confirmação optou-se pela tecla  (hash) ao passo
que a tecla * (asterisco) representa o cancelamento de
uma atividade. Nota-se portanto na figura 10 que só
se sai deste bloco quando o botão confirmação é
pressionado.

1. void nivel1(char key)
2.
switch(key)
3.
case 
4.
index  4
5.
Qtd de Produto?
6.
break
7.
case B
8.
Atualizar Display, COD +
9.
if(actual<lenght(COD)-1)
10.
actual++
11.

12.
break
13.
case A
14.
Atualizar Display, COD 15.
if(actual>0)
16.
actual--
17.

18.
break
19.
default
20.
if(isdigit(key))
21.
index  2
22.
Atualizar Display Em COD,
Mostrar Digito Apertado
23.
 else 
24.
Tempo para mensagem de erro
25.
delay(200)
26.

27.
break
28.

29. 

Após a seleção de uma opção e o pressionamento de , o sistema é levado ao estado 4, que está dentro do bloco 2, representado pela figura 12.
O Bloco 2 é responsável pela escolha e tratamento da informação de quantidade inserida pelo usuário.
O valor é limitado a 3 dígitos, sendo que a seleção de
cada um deles é feita num estado diferente. Isto per-

Figura 10 - Bloco 1

Existe ainda um caminho pontilhado que é acessado pelas teclas C e D. Este caminho visa exibir informações de configuração e status do sistema, mas
ainda não foi implementado no trabalho.
1619

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

mite a escolha de até 999 unidades para um determinado produto.

O último bloco, também não implementado, é o
Bloco X que será responsável pelo gerenciamento
das configurações, mostrando o status atual do sistema e outras informações que forem relevantes ao
usuário. Atualmente as configurações são estáticas,
como modo de acesso (IP fixo ou DHCP), endereço do
servidor de conexão, senha, entre outros.
A interface homem máquina foi codificada separadamente do sistema para reduzir a complexidade do
código e permitir melhor organização do mesmo.
A cada loop do programa, se uma tecla foi pressionada, a função lcdprint() é chamada.
Código 2  Loop
1. void loop() 
2.
char key  keypad.getKey()
3.
if (key) 
4.
lcdprint(index)
5.

6.


Figura 12 - Bloco 2

Após a escolha da quantidade, de até três algarismos, o botão de confirmação leva o sistema ao Bloco 3, figura 13, mais precisamente ao estado número 8,
responsável pelo envio de informação  rede da Smartapps.

Como podemos ver no código 2, a função lcdprint() utiliza a informação do estado atual (index)
para atualizar o display. Essa metodologia foi utilizada, pois se evita o risco de comprometer outras partes
do programa caso seja necessário modificar alguma
mensagem no display.
3.3 Conexão com a nuvem
A conexão com a Smartapps é feita utilizando-se
o protocolo HTML. A estrutura básica utilizada pelo
software para o envio de informações é apresentada
na figura 14.

Figura 13 - Bloco 3

Nesse estágio o usuário se depara com uma mensagem requerendo a confirmação do tipo e da quantidade selecionados. Caso o usuário esteja de acordo
com os dados exibidos estes são enviados  Smartapps no estado 9.
Se a comunicação for bem sucedida e o sistema
receber a confirmação por parte do servidor o programa retorna ao primeiro estado. Caso haja algum
problema na comunicação o sistema é levado ao bloco Y.
O Bloco Y não foi implementado, mas será o responsável pelo tratamento dos erros na comunicação
com a Smartapps. Caso não seja possível realizar uma
comunicação com o servidor ele deve permitir ao sistema realizar outras tentativas, verificar se o Wifi permanece conectado, armazenar um log de todas as
informações transmitidas no cartão SD e informar
problemas de comunicação entre os dispositivos.

Figura 14 - Processos

O primeiro passo é realizar uma autenticação, figura 14(a). Isto é feito com um comando GET, composto pela senha e número do usuário. O servidor
então retorna uma chave para a sessão atual. Isso é

1620

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

numa variável temporária através da função
getpass().
É necessário para separar o conteúdo do header
do conteúdo da página HTML retornada. Isto é feito
pois o Arduino pode não possuir memória suficiente
para armazenar todos os dados.
A transmissão ocorre através de um método
POST. O código 6 apresenta o modelo de envio dos
dados para a conexão com o servidor da Smartapps.

necessário para identificar cada usuário que acess a a
plataforma, evitando o comprometimento das informações transmitidas.
Em toda comunicação posterior o servidor requisitará essa chave, que, estando válida, autorizará o
acesso ao servidor, figura 14(b). Um exemplo de estrutura de autenticação é apresentado no código 3.

Código 3  Modelo requisição GET
Código 6  Modelo Requisição POST

1. GET directoryaddress HTTP1.1
2. Host IPaddress
3. Authorization Basic authid

1.
2.
3.
4.
5.

POST diretoryname HTTP1.1
Host ipvalue
Authorization Basic authID
Cookie PHPSESSIDcookievalue
Content-Type applicationx-www-formurlencoded
6. Content-Length tamdados
7. Connection close
8. PostData

A linha 1 gera o commando GET no local directoryaddress localizada no endereço IPaddress que
é o IP do servidor. O parâmetro authid é a chave que
define cada usuário único. É uma chave criptografada
em base64 que é formada a partir do número e senha
do usuário. Por exemplo, o usuário Unifei com uma
senha 1913 que deseje acesso ao local apifpfrom do
servidor 127.0.0.1 deverá postar o comando contido
no código 4.

É importante notar que o endereço utilizado no
código 6 é diferente do local do comando GET. Isto
porque a API Smartapps foi construída de uma maneira que os dados extraídos do servidor são identificados como from e os dados a serem enviados ao servidor como to. Na linha 3 é passado o ID do cliente e na
linha 4 a chave da sessão salva anteriormente. Nas
linhas 5 e 6 são definidos o tamanho e o tipo da mensagem que será enviada ao servidor. O cabeçalho é
encerrado na linha 7 indicando que não há mais configurações a serem transmitidas. Os dados e informações são então transmitidos em seguida.
O código 7 apresenta um exemplo de mensagem a
ser enviada que indica que o usuário Unifei quer inserir no banco_de_dados a informação que no estoque
da padaria está entrando uma unidade de Biscoito.

Código 4  Exemplo requisição GET
1. GET apifpfrom HTTP1.1
2. Host 127.0.0.1
3. Authorization Basic VW5pZmVpOjE5MTM

Sem os parâmetros citados o servidor não consegue identificar o usuário e o acesso é negado, proibindo o acesso deste ao servidor.
Se houver uma autenticação com sucesso, o servidor retorna ao cliente a PHPSESSID, que é a identificação da sessão atual. Essa autenticação é renovada
a cada novo acesso e tem um valor temporário, sendo
necessária uma nova autenticação em períodos de
tempo definidos pelo servidor.

Código 7  Exemplo requisição POST
1.
2.
3.
4.

Código 5  Leitura da mensagem de retorno
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
12.
13.
14.

while (client.available()) 
char c  client.read()
datadatainc++  c
if (c  )
break


procura findpassPHPSESSID
char * pch  strstr(data, findpass)
pch + 10 vai ao fim do vetor
Procura próximo delimitador 
for (i0 *pch ! ++pch, ++i)
PHPSESSIDi  *pch


5.
6.
7.
8.

POST apifptoAPLICATIVO HTTP1.1
Host 127.0.0.1
Authorization Basic VW5pZmVpOjE5MTM
Cookie
PHPSESSIDc8nfdeu228g41dxbkaqu8ug5t6
Content-Type applicationx-www-formurlencoded
Content-Length 36
Connection close
tipoentradaprodutoBiscoitoqntd1

O servidor retornará uma mensagem de sucesso,
caso as informações tenham sido corretamente transmitidas, e armazenará os valores recebidos em seu
banco_de_dados. Via interface web é possível então
verificar estas informações conforme pode ser visto
na figura 15.

O código 5 foi desenvolvido para encontrar o
PHPSESSID na mensagem de retorno e armazená-lo

1621

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

Figura 15 - Aplicativo Smartbox

4 Resultados
O case de acrílico projetado foi fabricado em
Campinas. O primeiro protótipo montado já com o
LCD e o teclado podem ser observados nas figuras 16
e 17.
Figura 18 - Conexões no Protótipo

Com o equipamento desenvolvido foi possível
aquisitar e armazenar dados referentes  produção de
modo contínuo na nuvem. Os dados puderam ser
então disponibilizados para análise e tomada de decisão.
Foram realizados testes também sobre o modo de
transmissão e armazenamento de dados. Para a construção de gráficos temporais optou-se por armazenar
também a data e hora de cada transmissão. Estas alterações foram feitas na aplicação responsável pela
recepção dos dados. Visando manter um sistema de
data e hora estáveis, caso sejam utilizados mais de um
ponto de aquisição_de_dados, são utilizadas as informações de data e hora do servidor.

Figura 16 - Foto Smartbox

5 Conclusão
O Smartbox atende as necessidades de pequenos
negócios ou indústrias que precisem aquisitar dados
e enviá-los para serviços de armazenamento remoto.
A plataforma da Smartapps agrega valor ao produto, pois a quantidade de soluções e aplicações que
podem ser implementadas com os dados recebidos é
bastante abrangente tanto para a gestão do negócio
quanto para comunicação com o usuário final ou cliente.
O software foi desenvolvido de uma forma que as
funções podem ser facilmente migradas para outras
aplicações. Porém ainda existem problemas na implementação. As máquinas de estado do Bloco 2 não
permitem uma fácil modificação da quantidade máxima
de produtos. Já foram identificados alguns algoritmos
que resolvem esse problema e serão implementados
em versões futuras.
Os blocos X e Y, de configuração do equipamento e verificação de comunicação também deverão ser
implementados em futuras versões, oferecendo recursos que melhoram a utilização da Smartbox.
O hardware ainda possui disponibilidade, tanto
em termos de processamento quanto em termos de

Figura 17 - Logo Smartapps desenhado a laser

A Figura 18 mostra os detalhes das conexões elétricas entre os componentes do protótipo.
Com a intenção de verificar a velocidade de conexão entre o Smartbox e a Smartapps realizou-se um
teste para medir o tempo necessário para a autenticação.
Para isto utilizou-se a função millis(), que retorna
em milissegundos o tempo desde que o sistema foi
inicializado. Calcula-se portanto o tempo de conexão
como a diferença entre o valor obtido antes e depois
da conexão.
Após dez amostras de tempo obtivemos uma média de 19,8 segundos. O desvio padrão encontrado foi
de 7,4 segundos. Todas as amostras foram realizadas
a uma distância de cerca de 1m do roteador, não sendo examinado o tempo de conexão para maiores distâncias e com objetos interferindo.

1622

Anais do XX Congresso Brasileiro de Automática
Belo Horizonte, MG, 20 a 24 de Setembro de 2014

terminais de entrada_e_saída. Deste modo a adição de
novas formas de comunicação, como GSM ou ZigBee
podem ser exploradas. Além disso, leitores de código
de barras ou RFID podem facilitar o cadastro de movimentações no sistema. Sensores e alarmes são os
próximos passos para integrar de modo mais próximo
o processo de fabricação com a coleta de dados.
Este trabalho permitiu ainda realizar vários testes
com a interface da nuvem. Esta interação inclusive foi
vetor de criação de novas funções na API da Smartapps gerando uma nova versão do aplicativo destinado exclusivamente ao Smartbox, que melhor aproveita
os dados recebidos do produto.
Agradecimento
Agradecemos a equipe da Smartapps José Wilker, Raphael e Mariana, pela cessão dos equipamentos, pelo acesso  estrutura na nuvem e pela colaboração no trabalho.
Referências
Almeida, R. M. A. Ferreira, L. H. D. C. Valerio, C. H.
Microkernel development for embedded_systems.
Journal
of
Software
Engineering
and
Applications, 2013. JSEA, v. 6, n. 1, p. 2028, 2013
Gast, M. S. 802.11 Wireless Networks The Definitive
Guide, 2nd edition. OReilly, 2002
Kaelbling, L. P. Learning in embedded_systems. MIT
Press 1993
Mell, P. Grance, T. The NIST Definition of Cloud
Computing. U.S. Department of Commerce 2011
NXP Semiconductors, UM10204 - I2C-bus
specification and user manual Rev. 5  9
October 2012
Smartapps, Desenvolvimento de soluções integradas
na nuvem, www.smartapps.com.br. Acessado em
dez. 2013.
Solarbotics Arduino Freeduino Enclosure (SAFE)
httpssolarbotics.comproduct60100. Acesso
em jun. 2013

1623