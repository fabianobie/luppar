MODELAGEM UML DE UM SIMULADOR DE TRAFEGO ELEVADORES E SUA
IMPLEMENTAÇÃO POR MEIO DE UM EMULADOR DE CONTROLADOR LÓGICO
PROGRAMAVEL
ALVARO A. PATIO-FORERO* VIVIAN MILEN OREJUELA RUIZ**, GUILHERME CARIBÉ DE CARVALHO*,
CARLOS H. LLANOS*
*

Grupo de Automação e Controle (GRACO), Departamento de Engenharia Mecânica, Universidade de
Brasilia
Campus Universitário Darcy Ribeiro, FT-ENM, Brasília, D.F., 70910-900, Brasil
**

Facultad de Ingenieria de sistemas, Unidad Central del Valle
Tuluá-Valle, Carrera 27 A No. 48-144 Kilómetro 1 Salida Sur Tuluá, Colombia
Emails patino@unb.br, , vorejuela@uceva.edu.co, gccarval@unb.br, llanos@unb.br
Abstract This work presents the application of the Unified Modeling Language (UML) for modeling an elevator group
traffic simulator. The proposed model uses diagrams for describing the operational behavior of the simulator, emphasizing its
application to the analysis of the main parameters in a modern architecture of elevator group control systems (EGCS). The UML
diagrams describe the development of the elevator group traffic simulator as well as its interactions with the main components,
such as the user interfaces and the Programmable Logic Controller (PLC). Additionally, the UML diagrams describe some
communication aspects between the simulator tool and a PLC. The UML model was implemented using two different
approaches the traffic simulator was developed using the JAVA language on a personal computer and the elevator group model
was developed on a CLP emulator (RSlogix Emulate 5000) in which a simplified elevator model was programmed using the
structured text programming language (IEC 1131-3). The data exchange between the Java application and the PLC emulator was
implemented using the OPC (Object Linking and Embedding for Process Control ) protocol, which allows for a bidirectional
data communication and, therefore, an appropriate simulation of the elevator system. The proposed architecture, based on
industrial instrumentation, resulted in a better approximation of the real situation if compared to the simulators traditionally used
by the industry.
Keywords UML, control systems, elevators system, fuzzy logic, PLC.
ResumoEste trabalho apresenta a modelagem UML (Unified Modeling Language) de um simulador de tráfego de grupo de
elevadores e detalha seu o princípio de funcionamento por meio de diagramas, enfatizando a sua aplicação na análise do
comportamento dos principais parâmetros do ambiente real de uma arquitetura moderna de um sistema controle de grupo de
elevadores (EGCS). Estes diagramas descrevem o desenvolvimento do simulador e a interação com os diferentes atores do
sistema, tais como os usuários e o Controlador Lógico Programável (CLP). Além disso, os diagramas apresentam a forma como
ocorre a comunicação entre o simulador e o emulador de CLP. Para efeitos de simulação, o modelo desenvolvido foi
implementado em um computador pessoal em linguagem de programação JAVA e o CLP foi substituído por um emulador
(RSlogix Emulate 5000), por meio do qual se realizou a programação do modelo dos elevadores utilizando a linguagem de
programação texto estruturado (IEC 1131-3). A troca de dados entre o aplicativo JAVA e o CLP emulado foi implementado com
base no protocolo de comunicação OPC (Object Linking and Embedding for Process Control) que permite uma comunicação
bidirecional de dados. A arquitetura proposta, baseada em instrumentação industrial, mostrou-se mais próxima  situação real que
os simuladores tradicionalmente utilizados por empresas do setor.
Palavras-chave.

1 Introdução
A Linguagem de Modelagem Unificada (UML) é
uma linguagem de modelagem voltada para sistemas
orientados a objetos. A UML possibilita a
visualização de todos os passos de desenvolvimento
de um problema de modelagem na forma de
diagramas padronizados, envolvendo elementos
estruturais (classes, objetos, relacionamentos, etc.),
de comportamento (casos de uso, iteração, máquinas
de estado), de agrupamento (pacote, modelo,
subsistema, etc.), de relacionamento (composição,
agregação, generalização). A grande importância da
modelagem é o fato de economizar custos na medida
em que erros podem ser eliminados ainda na fase de
projeto do sistema. No caso de sistemas de
engenharia, a adoção de técnicas modernas de
modelagem provenientes da indústria de software
tem sido acentuadas nos últimos anos.. No caso da

Orientação a Objetos (OO) podemos ver os seguintes
fatos que descrevem o aumento da sua importância e
impacto (a) a denominada crise do software
acontecida no final dos anos sessenta e sua primeira
resposta na indústria e na academia que foi o projeto
estruturado de sistemas e a programação estruturada.
(b) Tanto o projeto estruturado como a programação
estruturada não foram suficientemente apropriadas
para resolver o problema porque as mesmas não
seguiram uma metodologia unificada, levando a
dificuldades para abordar a implementação
diretamente a partir da modelagem do projeto (c) a
proposta de orientação_a_objetos veio a ser uma
solução mais apropriada, pois permitiu unificar os
processos de modelagem de projeto e a sua
implementação em conceitos padronizados e
similares (Pressman, 2005).
No contexto de sistemas orientados objeto, a
metodologia proposta fez possível vislumbrar a

possibilidade
de
gerar
automaticamente
implementações de sistemas (em linguagens de
programação adequadas) a partir da especificação
dos projetos em alto grau de abstração (Projeto
Orientado a Objetos  POO). Adicionalmente, a
descrição dos sistemas em um grau de abstração bem
perto do mudo real (dos objetos) permitiu a criação
de ambientes de simulação que permitem a validação
dos sistemas mesmo antes da sua implementação
real.
Por outro lado, o formalismo por traz da
proposta de modelagem_orientada_a_objetos trouxe a
atenção para os engenheiros de projeto, tomando
vantagem das propostas feitas no âmbito pelos
engenheiros de software. Neste contexto, o POO é
um exemplo que mostra como uma metodologia
desenvolvida pelos engenheiros de software e que foi
inspirada nas técnicas de projetos de manufatura
modernos, vem a ser adotada pelos projetistas de
sistemas (incluindo o projeto de hardware, sistemas
mecatrônicas, entre outros).
Neste contexto, a linguagem UML representa
um padrão para descrever e representar sistemas
diversos, tendo em conta suas características
estruturais e funcionais (Rumbaugh, et al 1999).
No desenvolvimento de sistemas e de aplicações
reais, se realizam constantemente testes com o
objetivo de se verificar o desempenho e identificar
suas falhas, os testes devem ser feitos num cenário
real.
Na área de sistemas de elevadores, por exemplo,
quando os requerimentos no planejamento de um
prédio são muito complexos, com vários elevadores a
serem controlados de modo a minimizar o tempo de
espera dos usuários e o consumo_de_energia, o
desenvolvimento de algoritmos de controle
envolveria o uso exaustivo do sistema real. Isso
implicaria, em um primeiro momento, em problemas
de atendimento da demanda de tráfego, uma vez que
o desenvolvimento do controlador exigiria o
conhecimento dos padrões de tráfego atuantes no
sistema, além da necessidade de realizar muitos
testes até se atingir um algoritmo otimizado.
Diferentemente, o uso de simuladores de tráfego,
baseados em padrões de tráfego já identificados e
publicados na literatura (Peter. et al, 1998), aceleraria
o desenvolvimento dos algoritmos de controle.
É amplamente conhecido que a simulação por
computador é uma técnica particularmente adequada
onde o processo de estudo é difícil, perigoso e,
adicionalmente, de alto custo. Neste contexto, um
sistema elevadores cai dentro desta categoria (Barney
et al, 2003). Isso tanto é verdade que empresas
líderes do setor têm crescentemente desenvolvido e
utilizado ferramentas de simulação para a realização
de novos projetos de instalação e controle de
elevadores (Cortéz, et al, 2006).
Nesse contexto, este trabalho apresenta a
modelagem de um simulador para um sistema de
controle de grupo de elevadores difuso (FEGCS)
usando a metodologia de processo_unificado de
desenvolvimento de software proposta pela

Linguagem Unificada de Modelagem (UML). O
desenvolvimento da modelagem proposta foi feito de
modo a se possibilitar sua realização em uma
arquitetura física de um sistema_de_elevadores
moderno, usando instrumentação industrial baseada
em uma rede DeviceNet e sensores com interfaces
apropriadas para este tipo de rede (Patio A., 2009).
O uso da UML neste trabalho possibilitou a
descrição do sistema em um grau de abstração bem
perto da realidade.
Este trabalho está organizado em seções, cujos
conteúdos são explicitados a seguir. A seção 2
descreve brevemente o sistema_de_controle de grupo
de elevadores e os sistemas modernos utilizados para
este quesito. Adicionalmente, a mesma seção
apresenta como se faz a geração dos padrões de
tráfego do sistema. A seção 3 apresenta uma
comparação com outros simuladores de trafego de
elevadores. A secção quatro descreve a modelagem
UML do simulador e o desenvolvimento do sistema
de simulação proposto. Finalmente, a seção cinco
mostra as conclusões do trabalho.
2 Requisitos funcionais do sistema
2.1 Sistemas de elevadores
O Sistema de Controle de Grupo de Elevadores
(EGCS) é um sistema que consegue dirigir
sistematicamente três ou mais elevadores com o
objetivo de diminuir o tempo de espera dos
passageiros e o consumo_de_energia dos elevadores.
O EGCS é considerado, computacionalmente,
como um problema NP-hard e envolve processos
estocásticos, considerando incertezas sobre cada
instante de tempo quando acontecem novas
chamadas de pavimento, número de passageiros
esperando no andar, entre outros.
Atualmente, existem muitas técnicas avançadas
para controle de grupo de elevadores que podem ser
classificadas no campo da inteligência_artificial (IA).
Por exemplo, no caso de grupos de elevadores que
usam o sistema tradicional de botões de chamada
para acima e para baixo, várias técnicas têm sido
publicadas na literatura especializada, dentre as quais
citam-se sistemas especialistas (Qun et al., 2001),
lógica_difusa (Ho and Robertson, 1994),
programação_dinâmica (Chan and So, 1996),
algoritmos_genéticos (Miravete. et al, 1999.), sistema
baseados em conhecimento (Prowse et al., 1992),
redes_neurais (Barney and Imrak, 2001) e controle
ótimo (Closs. et al, 1970).
Sistemas de elevadores recentes têm uma
estrutura diferente aos sistemas tradicionais, tais
como Sistemas de Controle de Destino (SCD), que
permite conhecer o andar de destino antes que o
usuário entre no carro (Markon, 2008). O
desempenho de sistema_de_elevadores que usam o
sistema SCD é muito melhor porque a estratégia de
controle pode ser desenvolvida usando informação

sobre o número de passageiros esperando pelo carro
no pavimento, como também o andar de destino.
O SCD fornece uma boa aproximação da
demanda para o sistema_de_controle agrupar os
passageiros que irão seguir para um mesmo andar,
diminuindo o tempo de espera e o numero de paradas
enquanto chega ao destino (Sorsa. et al, 2005).
2.2 Arquitetura do sistema_de_elevadores
A Figura 1 apresenta um sistema moderno de
controle de grupo de elevadores usando o sistema de
controle de destino (SCD), o qual usa uma interface
homem-máquina (IHM) (por exemplo um
PanelView) em cada andar e um controlador lógico
programável (CLP) que implementa um sistema de
controle local (LCS) para cada elevador. O LCS
recebe como entradas os comandos enviados pelo
FEGCS e controla a velocidade para cada elevador,
realizando também outras tarefas tais como
verificação da presença de obstáculos antes de fechar
as portas, inspeção do peso da cabina do elevador,
controle de abertura e fechamento das portas, etc. O
LCS é conectado ao FEGS por meio do protocolo de
comunicação OPC (Object Linking and Embedding
for Process Control) (OPC Foundation, 1996). O
OPC permite o intercambio de informação em tempo
real entre aplicações software e processos hardware .
O sistema_de_elevadores também possui uma rede
industrial de campo, DeviceNet, para conectar
vários instrumentos industriais como Drives AC (um
para cada carro), sensores indutivos, módulos de
entrada_e_saída digital e IHM (Patio A., 2009).

Figura 1 Arquitetura do Sistema de Elevadores.
2.3 Gerador de trafego
O fluxo de trafego de elevadores é fundamental
no EGCS. Modelar o fluxo de elevadores é muito
importante para realizar o simulador de trafego de
elevadores. Apresentar a forma como chegam as
pessoas ao sistema_de_elevadores é de extrema
importância para o correto funcionamento do EGCS.
No caso em estudo, o componente que faz essa tarefa
é o gerador de tráfego, o qual gera as chamadas de

andar de origem e as chamadas de destino, de acordo
com o trafego presente. Este tipo processo é
estocástico. A taxa de chegada dos passageiros segue
uma distribuição Poisson (Dos Santos, 1972) e sua
distribuição de probabilidade é mostrada na equação
(1) (Zhifeng et al, 2007)

(T ) n e T
P
n!

, n  0,1,2...

(1)

Em que a probabilidade de chegada, P, é definida em
um tempo T, com taxa de chegada de passageiros, ,
e n é o número de eventos. O intervalo de tempo
transcorrido entre as chegadas de passageiros segue
uma distribuição exponencial. A equação (2) mostra
como calcular os tempos em que se espera chegarem
passageiros com base em intervalos de tempo
distribuídos segundo uma função de densidade de
probabilidade exponencial.

t0  0

t t  t t 1 

ln(r )



, > 0

(2)

Na equação (2), to é o tempo inicial, r é um
numero aleatório com distribuição uniforme entre 0 e
1 e  é a taxa temporal de chegada de passageiros em
porcentagem da população total.
Depois de calcular o tempo de chegada do passageiro
seguinte, a próxima tarefa é estabelecer o andar de
origem e o andar de destino da chamada.
3. Estado da técnica e características
Atualmente, existem poucas referências na
bibliografia que envolvam simulação de transporte
vertical. Dentre essa referências podem-se citar os
trabalhos de Siikonen (1993 e 2001) e o trabalho de
R.D. Peters (1998), fundador de Peters Research Ltd,
que comercializa o simulador Elevate. Além deste
encontraram-se referências a outros simuladores
comercialmente disponíveis no mercado o simulador
OtisPlan da Otis Elevator Co e o sistema Building
Traffic Simulator (BTS) da tradicional KONE
corporation. Observe-se que o desenvolvimento de
simuladores tende a ser feito por empresas privadas
de transporte vertical. Estas empresas desenvolvem
seus próprios simuladores, os quais por razoes
comerciais são protegidos e seus códigos não ficam
abertos. Por conseguinte, o desenvolvimento deste
tipo de ferramenta não tem um modelo único de
elaboração. Cada empresa modela seu próprio
simulador de trafego para sua implantação final. A
modelagem apresentada neste trabalho aspira deixar
uma arquitetura de desenvolvimento aberta de um
sistema moderno de elevadores através da linguagem
de desenvolvimento de software UML. Deste modo,
com a modelagem UML é possível que outros
pesquisadores possam usar este tipo de modelo para
suas pesquisas nesta área.

4. Modelagem UML do simulador de trafego
A modelagem do simulador de controle_difuso
de trafego de elevadores é apresentada a Figura 2
através dos diagramas de casos de uso1. O diagrama
de casos de uso propicia uma visão geral do sistema
(Rumbaugh et al, 1999).
CONFIGURAR
COMUNICAÇÃO

CONFIGURAR
CONTROLE

EMULADOR DE CLP

LERESCREVER DADOS
EM TEMPO REAL

USUARIO

<< INCLUDE >>

SIMULAÇÃO
CHAMADAS

AGRUPAR
PASSAGEIROS

<< INCLUDE >>

A interface_gráfica de simulação permite que o
usuário escolha o arquivo de configuração,
selecionando o botão configurar leitura. O arquivo
de configuração é aquele gerado por meio da
interface de configuração da comunicação e nele são
armazenados os endereços de memória das variáveis
do CLP,. O botão star permite colocar os
elevadores em uma posição inicial. Por outro lado o
botão simulação chamadas permite escolher o
arquivo gerado pelo sistema gerador de trafego. O
sistema funciona quando o tempo do relógio do
computador é igual ao tempo gerado pelo gerador de
trafego. Além disso, o sistema apresenta os cálculos
de prioridades proporcionados pelo sistema de
controle_difuso, de tal modo que o sistema de
controle de grupo escolha o elevador de maior
prioridade.

Usuario

mygraphics tree chooser Myserver server srvList

itemsTableModel

1  Inicia()
<< INCLUDE >>

CALCULAR
PRIORIDADES

2  mostra panel configuração()
3  file, connect()
4  connect()
5  Inicia()

Figura 2. Casos de uso do sistema

6  lista de servidores OPC()
7  envia nome de servidores OPC()

A Figura 2 apresenta um ator usuário que representa
a pessoa que inicia a configuração do sistema.
configurar comunicação é o primeiro caso de uso
do sistema onde o usuário através do servidor OPC
escolhe os parâmetros necessários para o
funcionamento do sistema (ver Figura 4). O caso de
uso configurar controle é onde se configura (a) o
número de andares, (b) número de elevadores e (c)
capacidade do sistema. No caso de uso simulação
chamadas o usuário inicia o controle grupal de
elevadores e a sua simulação. O caso de uso lerescrever dados em tempo_real o sistema lê e
escreve dados no emulador de CLP por meio do
protocolo OPC. No caso de uso agrupar
passageiros o sistema agrupa os passageiros com
um mesmo destino. No caso de uso calcular
prioridade o sistema através, da lógica_difusa,
calcula qual elevador é o mais conveniente para
atender a chamada de pavimento. A Figura 5 mostra
a interface_gráfica onde se apresentam os tempos de
simulação assim como os cálculos do controle de
grupo de elevadores difuso.
Quando o usuário configura a comunicação OPC
tem a opção de testar cada variável do simulador de
CLP programada, para conferir seu correto
funcionamento. Depois pode escolher as variáveis
(endereços de memória de cada variável) a trabalhar
dentro do simulador em uma lista para depois salvar
estas em um arquivo texto.

1
Na engenharia_de_software, o termo caso de uso é um tipo
de classificador representando uma unidade funcional coerente
provida pelo sistema, subsistema, ou classe manifestada por
seqência de mensagens entre os sistemas e um ou mais atores.

8  connect()
9  Envia dados do servidor()
10  envia o tree com os dados()
11  apresenta tree()
12  btn variaveis()
13  apresenta variaveis()
14  btn testar()
15  inicia()
16  envia panel()
17  apresenta info variaveis()
18  btn salvar()
19  salvar()

Figura 3 Diagrama de seqência de configurar
comunicação
Cada caso de uso tem um diagrama de seqência por
meio do qual se faz uma descrição detalhada dos
processos necessários  execução de cada tarefa. Por
exemplo, o caso de uso configurar comunicação
tem seu diagrama de seqência conforme mostrado
na Figura 3. O usuário inicia o sistema para
configurar a comunicação. O software executa o
objeto mygraphics para apresentar a interface_gráfica
para que o usuário possa iniciar sua configuração. A
primeira coisa que o usuário tem que fazer é ir 
barra de menu file e selecionar o botão connect.
Desta maneira, o software executa o objeto myserver
e usa a bioblioteca de OPC em JAVA, ativando o
objeto srvList para que o software encontre todos os
servidores OPC instalados no computador e o usuário
possa escolher um. Assim, o software se conecta ao
servidor com o objeto server e este envia todos os
endereços das variáveis programadas no emulador de
CLP, por meio de um browser com o objeto tree,
para facilitar a escolha das variáveis a trabalhar. O
usuário pode testar o estado de cada variável para

comprovar que é a variável que precisa por meio do
objeto itemsTableModel. Finalmente, o usuário salva
uma lista dos endereços das variáveis a trabalha num

arquivo texto
comunicação).

(arquivo

de

configuração

da

Figura 4 Interface gráfica de configuração da comunicação

Figura 5 Interface gráfica de simulação
Cada caso de uso também tem um diagrama de
classes onde se apresenta a estrutura das relações
entre estas. Por exemplo, para o caso de uso
simulação chamadas (ver figura 6), apresentamse 8 classes. A classe interfacecontrole é onde está a
parte visual e onde se criam os objetos para interagir
com as outras classes, como OPCleitura.
Este último tem vários objetos criados por meio da
biblioteca OPC para estabelecer a comunicação e
executar um thread para que, de forma concorrente,
o software leia as mudanças das variáveis do
emulador de CLP. A classe OPCleitura também
interage com a classe LerHW a qual apresenta uma
janela para que o usuário procure o arquivo das
chamadas feito pelo gerador de trafego e coloque a
informação em vetores. A classe andaratual foi
desenvolvida com o objetivo de calcular o andar
atual de cada elevador por meio do calculo de tempo
de viagem.

interfazControle
+JTextField NumeroPisos
+JTextField Capacidad
+int andarActual
+int andarDestino
+int elevadores
+Vector pasajeros
+andarActual obj7
+andarActual obj8
+andarActual obj9
+OPCLectura obj4
+ControladorSistema cs
+JTextField andardestino1
+JTextField andardestion2
+JTextField andardestiono3
+JTextField andarorigen1
+JTextField andarorigen2
+JTextField andarorigen3
+JButton Simulacion
+JButton start
+JButton escoger
+JButton eliminar
+JButton grabar
+JButton Testar
+JButton Calcularprioridad
+Jtree tree
+ControladorSistema cs
+AndarActual ac
+Priority objpriority
+EnviarControlador()
+Update(Observable, Object)
+main()
+teste(ActionEvent)
+executeStart(ActionEvent)
+interfaceGrafica()
+ActionListener()

Observable

Runnable

IOListener

OPCLeitura
+int cont
+IOItem inItem
+IOServer is
+interfaceControl obj2
+LeeHW lh
+LecturaDatos ld
+OPCLectura(Observer)
+connect()
+createGroup(IOListener)
+opcconfiguratio()
+onValueChange(IOItem)
+run()

AndarAtual
+Timer tiempo
+int andard
+inr div
+double tiempos
+int andaro
+int andarx
+String elevador
+AndarActual(Observer, int String)
+valores()
+run()

LerHW
+String valores
+String nameServer
+int cont
+ler()

LeituraDados
+int andares
+int destinos
+String tiempos
+Vector valores
+int matriz
+int contup
+int contdown
+archivar()
+sumarcolumna()
+sumarfila()
+up()
+down()
+run()

Figura 6 Diagrama de classes de simulação chamada

O diagrama de componentes (ver figura 7) apresenta
de forma geral o sistema como um todo. O cliente é o
simulador de trafego desenvolvido em Java, o qual se
comunica com o servidor por meio do protocolo
OPC. O servidor OPC está em um software que
funciona como uma interface de comunicação, cujo
objetivo é possibilitar a comunicação entre diferentes
aplicativos com instrumentos físicos. O servidor se
encontra nos programas de comunicação de cada
fabricante de CLP (para o desenvolvimento deste
trabalho utilizou-se o software RSLinx da
Rockwell Automation). O Emulador de CLP é uma
ferramenta de software que substitui o CLP, em que
é possível programar como se estivesse utilizando
um controlador real. No caso deste trabalho, utilizouse o emulador RSLogix Emulate 5000, da empresa
Rockwell Automation.

Figura 7 Diagrama de componentes
4 Conclusões
O simulador de controle de trafego proposto foi
projetado para se ter um ambiente controlado que
represente as características mais importantes do
ambiente real de uma arquitetura moderna de
controle de grupo de elevadores. A modelagem UML
permite que a ferramenta possa facilmente ser
adaptada a diferentes ambientes caso necessário, de
modo a possibilitar estudos mais aprofundados nessa
área. O simulador desenvolvido possibilita planejar
um sistema de transporte vertical, determinando o
número de carros a serem utilizados, a arquitetura
física da instalação, os algoritmos de controle de
grupo e de otimização, além de outras opções, de
acordo com as características específicas de cada
prédio.
Agradecimentos
Os autores gostariam de agradecer  empresa
Rockwell Automation do Brasil Ltda, cujo contínuo
apoio, tanto material e financeiro, possibilitou a
execução do projeto em que se insere o assunto
escrito neste artigo.

Referências Bibliográficas
Barney, G.C. and Imrak, E. (2001) applications of
neurak networks to lift traffic control, Elevator
World, May. -11.4.4
Barney G.C, (2003)Elevator Traffic Handbook
Theory And Practice, Spon Press, London and
New York.
Beielstein Thomas, Markon Sandor, Mike Preuss,
MIC (2003) A Parallel Approach to Elevator
Optimization Based on Soft Computing in The
Fifth Metaheuristics International Conference.
Closs, G.D, (1972) The computer control of
passenger traffic in large lift system, Phd thesis,
UMIST.-10.2.3.
Chan, W.L. and So, A.T.P. (1996) Dynamic zoning
for intelligent supervisory control, Int J. Elev.
Eng., 1.-11.4.4
Cortéz P., Delgado M., Ibaez N., Muuzuri J.
(2006), Herramieta de planificacion y
simulacion de sistemas de transporte vertical, X
congreso de Ingenieria de organización, Valencia.
Ho, M. and Robertson, B. (1994) Elevator group
supervisory control using fuzzy logic, Canadian
Conference on Elevator and Computer
Engineering, 2.-11.4.4.
Lin, S.L. and Van Ness J.E (1994). Parallel Solution
of Sparse Algebraic Equations. IEEE
Transactions on Power Systems, Vol.9, No. 2,
pp. 743- 799.
Markon Sandor, Aoki ichi Ken, Masami Nakagawa,
and Takeshi Sudo, (2008 )Recent Trends Group
Control System, Conference System computers
and communication.
Miravete, A. (1999) Genetics and intense vertical
traffic, Elevator World, July- 11.4.4
OPC
Foundation,
(1996)
Dedicated
tointeroperability in automation, 21 August 2009
< httpwww.opcfoundation.org >
Patio Forero Alvaro A., (2009). Modeling of
elevator
group
control
system
using
programmable logic control and destination
control system. 20th International congress of
Mecanichal Engineering. November 15-20 Brazil.
Peters, R.D. (1998). Simulation for control system
design and traffic analysis, Elevator Technology
9, proceedings of ELEVCON98.
Prowse, R.W, Thomson, T. and Howells, D. (1992).
Design and control of lift systems using expert
systems and traffic sensing, Elevator Technology
4, IAEE publications. -11.4.4.
Qun, Z. Ding, S., Yu, C. and Xiaofeng, L. (2001)
Elevator group control system modelling based
on object orientated Petri Net, Elevator world,
August.-11.4.4
Rumbaugh J., G. Booch, I. Jacobson, (1999) "The
Unified Modeling Language Reference Manual",
Addison Wesley.
Siikonen, M-L. (1993). Elevator traffic simution.
Simulation, Vol. 61, No 4, pp. 257-267.

Sorsa J., Hakonen and M. L. Siikonen, (2005)
Elevators selection with Destination Control
System. In Elevators Tecnology.

Zhifeng Pan, Fei Luo, Yuge Xu. (2007) Elevator
Traffic flow model based on dynamic passanger
distribution  IEEE International Conference
Automation Guangzhou, CHINA - May 30.