XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

PLANEJAMENTO DA PRODUCAO BASEADO NO CRITERIO DO MAXIMO
PARALELISMO COM RESTRICOES TEMPORAIS
Lucas V. R. Alves, Patrcia N. Pena, Ricardo H. C. Takahashi


Universidade Federal de Minas Gerais
Colegio Tecnico - Setor de Instrumentacao
Belo Horizonte, MG, Brasil


Universidade Federal de Minas Gerais
Departamento de Engenharia Eletronica
Belo Horizonte, MG, Brasil


Universidade Federal de Minas Gerais
Departamento de Matematica
Belo Horizonte, MG, Brasil

Emails lucasvra@ufmg.br, ppena@ufmg.br, taka@mat.ufmg.br
Abstract This paper deals with the planning problem in manufacturing systems, by proposing a heuristic
method to find a sequence of events in a supervisor that maximizes the parallelism among equipment and also
assures temporal correctness. The supervisor is obtained using the Supervisory Control Theory and implements
the supremal controllable sub-language contained in the desired behavior of the system. The main objective is to
find, among all executions allowed by the supervisor, the one that accumulates more tasks working at the same
time during the whole production process. To do so, a function that defines, for each state of the automaton, the
information of how many tasks are active is established. Them, the problem can be transformed into a problem
of the longest path in a acyclic graph.
Keywords

Discrete Event Systems, Schedulling, Planning.

Resumo Este trabalho lida com o problema de planejamento da producao em sistemas de manufatura,
propondo um metodo heurstico de encontrar uma sequencia de eventos em um Supervisor que maximiza o
paralelismo entre equipamentos, garantindo tambem a corretude temporal. O supervisor e obtido usando a
Teoria de Controle Supervisorio e implementa a suprema sub-linguagem controlavel contida no comportamento
desejado do sistema. O principal objetivo e encontrar, entre todas as execucoes permitidas pelo supervisor, aquela
que acumula mais tarefas sendo executadas ao mesmo tempo durante todo o processo produtivo. Para isso, uma
funcao que define, para cada estado do automato, a informacao sobre quantas tarefas estao ativas e definida.
Dessa forma, o problema pode ser transformado em um problema de maior caminho em um grafo acclico.
Palavras-chave

.

Introducao

A produtividade e um dos aspectos mais importantes no contexto da automacao_industrial
e o tempo e usualmente o recurso mais valioso.
Nesse cenario, a pesquisa em tecnicas de escalonamento e planejamento da producao sao a chave
para responder a demanda por eficiencia (Wang
et al., 2008).
Escalonamento de tarefas e a alocacao, no
tempo, de recursos finitos a tarefas, utilizando
para tal um criterio de otimizacao (Pinedo, 2012).
Quando um problema de escalonamento nao leva
em consideracao restricoes quanto aos recursos
que estao sendo utilizados e apenas usa restricoes
temporais e de precedencia, ele pode ser tratado
como um problema de planejamento (Ghallab
et al., n.d.). A utilizacao de automatos e linguagens para modelar Sistemas a Eventos Discretos
(SEDs) e utilizando a Teoria de Controle Supervisorio (TCS) para obter um supervisor que garante a operacao segura, ja fornece as restricoes
de precedencia de eventos, permitindo que o problema de sequenciamento possa ser tratado como

ISSN 2525-8311

um problema de planejamento da producao.
Dentre os diversos formalismos para tratar
SEDs, pode-se observar, na literatura, diversas
tecnicas que buscam minimizar o tempo de producao (makespan) ou maximizar o throughput na
producao contnua, como no contexto de programacao matematica (Schrijver, 1986), redes de Petri (Lopez-Mellado et al., 2005), Automatos Temporizados (Abdeddam et al., 2006), Verificacao
Formal (Herzig et al., 2014), entre outros.
O problema de minimizacao de tempo de producao e, no caso geral, nao polinomial (Garey and
Johnson, 1979), tornando boa parte dos problemas industriais computacionalmente intrataveis.
Desse modo, usualmente sao aplicadas heursticas e metaheursticas na solucao desses problemas
(Oliveira et al., 2013).
Neste trabalho, da-se continuidade a ideia
apresentada em (Alves et al., 2015), de, ao inves
de minimizar o tempo de producao, maximiza-se
o numero de tarefas executadas em paralelo. Naquela abordagem, o algoritmo leva em consideracao apenas as restricoes logicas, ou seja, as restricoes de precedencia, mas nao garante que a a

1518

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

sequencia obtida possa ser executada no tempo,
devido a posicao dos eventos nao controlaveis.
Dessa maneira, neste trabalho propoe-se uma expansao do algoritmo de (Alves et al., 2015) levando em consideracao o tempo de execucao, apenas para garantir a corretude temporal da mesma.
A adicao dessas restricoes temporais ao algoritmo torna o problema tao difcil quanto a minimizacao de tempo de producao, de forma que
torna-se necessario uma solucao heurstica, que
nao garante a maximizacao do paralelismo, mas
em geral gera boas solucoes.
2

Preliminares

Seja  um conjunto finito nao vazio de eventos,
chamado de alfabeto. O comportamento de um
SED e modelado como cadeias sobre . O Fechamento Kleene  e o conjunto de todas as cadeias
que podem ser construdas utilizando os smbolos do alfabeto , incluindo a cadeia vazia . Um
subconjunto L   e chamado linguagem. A
concatenacao de cadeias s, u   e representada
como su.
Uma cadeia s   e chamada prefixo de t 
 , escrito s  t, se existe u   tal que su  t.
O prefixo fechamento L de uma linguagem L  
e o conjunto de todos os prefixos de cadeias em L,
isto e, L   s    s  t para algum t  L .
Definicao 1 Um automato finito determinstico
e um 5-tupla G  (Q, , , q0 , Qm ) onde Q e um
conjunto finito de estados,  e um conjunto finito
de eventos (alfabeto),   Q    Q e a funcao
de transicao, q0  Q e o estado inicial e Qm  Q
e o conjunto de estados marcados.
A funcao de transicao pode ser estendida para
reconhecer cadeias sobre  como (q, s)  q 0 se
(q, )  x e (x, s)  q 0 .
As linguagens gerada e marcada sao, respectivamente, L(G)  s   (q0 , s)  q 0  q 0  Q
e Lm (G)  s   (q0 , s)  q 0  q 0  Qm .
A funcao de eventos ativos, definida por  
Q  2 , e, dado um estado q, o conjunto de eventos    para os quais (q, ) e definido.
Definicao 2 Seja G1  (Q1 , 1 , 1 , q01 , Qm1 ) e
G2  (Q2 , 2 , 2 , q02 , Qm2 ). O produto sncrono
de G1 e G2 e
G12  (Q1 Q2 , 1 2 , 12 , (q01 , q02 ), Qm1 Qm2 )
onde
((q1 , q2 ), e) 

(1 (q1 , e), 2 (q2 , e)),



( (q , e), q ),
1 1
2

(q
,

(q
,
e)),
1 2 2



indefinido,

ISSN 2525-8311

se e  1 (q1 )  2 (q2 )
se e  1 (q1 )2
se e  2 (q2 )1
caso contrario.

e 12 (q1 , q2 )  1 (q1 )  2 (q2 )  1 (q1 )2  
2 (q2 )1 .

A Teoria de Controle Supervisorio e um metodo formal, baseado na teoria de linguagens e
automatos, para o calculo sistematico de supervisores. O sistema a ser controlado e chamado
planta, o controlador e o agente chamado supervisor e o problema de controle e encontrar um
supervisor que garanta especificacoes de desempenho e seguranca da maneira minimamente restritiva.
A planta e modelada por um automato G 
(Q, , , q0 , Qm ) e   c  nc onde c e o conjunto de eventos controlaveis, que podem ser desabilitados por um agente externo, e nc e o conjunto de eventos nao controlaveis, que nao podem
ser desabilitados por um agente externo, como o
supervisor. A planta representa o modelo logico
de um SED, o comportamento do sistema sem nenhuma acao de controle. O papel de um supervisor S e regular o comportamento da planta e alcancar um comportamento K desabilitando eventos controlaveis.
Seja E um automato que representa especificacoes imposta a planta G. Dizemos que K 
Lm (GE)  Lm (G) e controlavel com respeito a
G se Knc  L(G)  K. Existe um supervisor
nao bloqueante V para G tal que Lm (V G)  K
se, e somente se, K e controlavel com respeito
a G. Se K nao satisfaz a condicao, entao a suprema sub-linguagem controlavel e nao bloqueante supC(K, G) pode ser sintetizada, representando o supervisor nao bloqueante minimamente
restritivo. Para G e K, um supervisor monoltico,
representado por um automato S, pode ser computado para representar supC(K, G) de modo que
Lm (S)  supC(K, G)  K (Ramadge and Wonham, 1989).
As linguagens gerada e marcada de uma
planta G sobre a acao de um supervisor S sao,
respectivamente, L(SG) e Lm (SG)  L(SG).
Um supervisor S e dito nao bloqueante quando
Lm (SG)  L(SG).
A partir daqui, chama-se supervisor um automato S tal que S  SG, ou seja, a dinamica
do supervisor engloba a dinamica da planta sob
controle.
3

Resultados Anteriores

A ideia de tarefa e introduzida como uma propriedade de um estado de um automato finito determinstico. Nesse contexto, um determinado estado pode ter zero ou mais tarefas sendo executadas. Caso o objetivo seja apenas maximizar o
numero de maquinas funcionando, o numero de
tarefas associado a cada estado deve ser 0 se e um
estado onde a maquina esta ociosa ou 1 se a maquina esta trabalhando. Se a maquina possui um

1519

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

paralelismo intrnseco, como um processador com
multiplos nucleos, o numero de tarefas associado
a cada estado pode ser qualquer valor inteiro nao
negativo.
Uma maneira de representar o numero de tarefas ativas em um estado e por meio da definicao
de uma funcao, chamada funcao de tarefas ativas
Definicao 3 Seja G  (Q, , , , ) um
automato. a funcao de tarefas ativas associada
a G, definida como fta  Q  Z , e tal que, para
cada estado q  Q, associa um numero inteiro nao
negativo de tarefas.
Usualmente e mais simples estabelecer o numero de tarefas nos automatos das plantas, ao inves do automato do supervisor, tornando entao
necessario a definicao de uma nova funcao de tarefas ativas para a composicao das plantas.
Definicao 4 Sejam G1  (Q1 , , , , ) e
G2  (Q2 , , , , ) automatos e sejam fta1
e fta2 as funcoes de tarefas ativas associadas, respectivamente, a G1 e G2 . A funcao de tarefas ativas do automato G12  (Q1  Q2 , , , , )
e definida como
fta12 ((q1 , q2 ))  fta1 (q1 ) + fta2 (q2 )
onde q1  Q1 e q2  Q2 .
Especificacoes nao executam tarefas, visto que
sao apenas restricoes de comportamento, e dessa
forma, para todas as especificacoes, a funcao de
tarefas ativas e sempre zero para todos os estados. Esse mesmo procedimento pode ser utilizado
quando determinada planta nao for de interesse
no processo de otimizacao.
Para se avaliar o paralelismo de um sequencia
finita, e necessaria a definicao da funcao acumulativa de tarefas ativas
Definicao 5 Seja S  (Q, , , , ) um supervisor. A funcao acumulativa de tarefas ativas,
Fta  Q    Z , de S e definida como
(
Fta (q, )
 fta (q)
Fta (q, s)  fta (q) + Fta ((q, ), s)
onde s   .
Quanto maior o valor da funcao acumulativa
de tarefas ativas determinada sequencia apresenta,
maior o seu paralelismo. A funcao acumulativa
de tarefas ativas somente deve ser usada para a
comparacao de sequencias de mesmo tamanho.
4

Principais Resultados

Para adicionar informacoes temporais ao maximo
paralelismo, se faz necessario avaliar o tempo ate
que determinado evento ocorra em um supervisor
dada a sequencia ja executada ate entao

ISSN 2525-8311

Definicao 6 Seja S  ( , , , , ) um supervisor. A funcao temporal, fT      R ,
de S e definida como
(
t
se (s, )!
fT (s, ) 
 caso contrario
onde, para um evento    e uma sequencia s 
L(SG), t e o tempo ate que o evento  ocorra,
dado que a sequencia s acabou de ser executada.
Outra informacao temporal importante e
quanto tempo e necessario para executar uma
sequencia de eventos. Para isso, podemos expandir a funcao temporal para retornar o tempo total
de execucao de uma sequencia como
Definicao 7 Seja S  ( , , , , ) um supervisor. A funcao temporal expandida, fT   
R , de S e definida como
(
fT ()
0
fT (s)  fT (s) + fT (s, )
Dessa forma, precisa-se encontrar uma
sequencia da linguagem marcada do supervisor
que maximize o paralelismo, mas tambem apresente um tempo de execucao menor que infinito.
O principal problema dessa proposta e que esse objetivo e tao difcil quanto o de minimizacao de makespan, de forma que a aplicacao do paralelismo
nao traz ganhos significativos em desempenho.
Dessa maneira, o maximo paralelismo com
restricoes temporais e executado de maneira heurstica.
4.1

Definicao do Problema

Seja S o supervisor de um sistema de producao
G  N
k1 Gk , onde Gk e uma planta que compoe
o sistema e seja fta a funcao de tarefas ativas do
sistema sob supervisao SG. Seja n o numero de
eventos necessarios para a producao de um lote
de produtos e seja o universo de busca o conjunto
L  s  Lm (SG)  n  s  fT (s) 6 .
Neste caso, o problema de planejamento da
producao pode ser definido como um problema de
otimizacao na forma
s  argmax Fta (s)
sL

onde s e uma das sequencias que maximizam o
numero de tarefas executando paralelamente no
sistema.
O problema a ser resolvido e similar ao problema do maximo paralelismo, porem a informacao relativa a funcao temporal impede que o problema possa ser tratado, de maneira exata, como
uma problema de maior caminho em um grafo acclico, porque as restricoes temporais fazem com

1520

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

que o caminho utilizado para alcancar certo estado influencie no melhor caminho entre aquele
estado e o objetivo.
Neste artigo, sera utilizado um algoritmo de
maior caminho, desconsiderando que um mesmo
estado, alcancado de maneiras diferentes, possui
diferentes futuros, tomando um passo guloso escolhendo apenas o maior caminho ate aquele estado.
Dessa forma, o algoritmo de maximo paralelismo
com restricoes temporais passa a ser um algoritmo
heurstico, mas que garante a execucao temporal
da sequencia obtida.

Algoritmo 1 Maximo Paralelismo com
Restricoes Temporais
1
2
3
4
5
6
7
8
9
10
11
12
13

foreach q in Q do
for i  0 to n do
if (q, i)  (q0 , 0) then
d(q, i)  0
path(q, i)  
time(q, i)  0
else
d(q, i)  
path(q, i)  
time(q, i)  
end
end
end

14
15

F  (q0 , 0)

16

4.2

Manipulacao do Problema

17
18

O problema de otimizacao definido anteriormente
pode ser resolvido como um problema de maior
caminho em um grafo acclico, onde o peso de um
transicao e o numero de tarefas ativas no estado
de destino. A existencia de ciclos no automato do
supervisor impede uma aplicacao direta de algoritmos de maior caminho, visto que percorrer um
ciclo sempre permite aumentar o caminho, adiando indefinidamente o fim do algoritmo.
Para tornar o automato do supervisor em
um grafo acclico com profundidade n, faz-se necessario compor o supervisor com um automato,
aqui chamado de automato de desenrolamento Gd ,
como mostrado na Figura 1, onde Lm (Gd )  s 
  n  s onde  e o conjunto de eventos de
SG e n e o numero de eventos necessarios para a
producao de um lote.
0



1

...

n1



n

Figura 1 Automato de desenrolamento com um
conjunto de eventos  e profundidade n generico
O automato resultante da operacao de composicao e acclico e permite a execucao de um algoritmo de maior caminho.
As informacoes necessarias para a execucao
do algoritmo sao o conjunto de estados do supervisor (Q), a funcao de transicao de estados (), a
funcao de eventos ativos (), o estado inicial (q0 )
e a profundidade de busca n. Como resultado, o
algoritmo devolve a estrutura path que armazena
o maior caminho entre o estado inicial (q0 , 0) e
qualquer outro estado alcancado na busca.
5

Algoritmo

Conhecendo o estado de destino e a profundidade
desejada, basta usar o mapeamento path (estrutura de dados que associa cada estado ao maximo
caminho que o alcanca, a partir do estado inicial)
para encontrar a sequencia de eventos que maximiza o caminho, ou seja, maximiza o paralelismo
entre tarefas.

ISSN 2525-8311

19

while F  6 0 do
(q, i)  F
if i  n then continue

20

foreach  in (q) do
v  (q, )
t  fT (path(q, i))
if t   then continue

21
22
23
24
25

if (v, i + 1) 
 F then
F  (v, i + 1)
end
w  fta (v)
dq  d(q, i)
dv  d(v, i + 1)
if dq + w > dv or (dq + w  dv and
t < time(v, i + 1)) then
d(v, i + 1)  d(q, i) + w
path(v, i + 1)  path(q, i)  
time(v, i + 1)  t
end

26
27
28
29
30
31
32
33
34
35
36

end

37
38

end

Entre as linhas 1 e 13 as estruturas de dados
d, path e time sao inicializadas. Na linha 15, a fila
F , que armazena os vertices em ordem topologica,
e inicializada.
Entre as linhas 17 e 38, o primeiro elemento
e retirado da fila, e entre as linhas 21 e 37 os vertices adjacentes sao analisados a fim de verificar
se eles aumentam o caminho, e por consequencia
o paralelismo.
5.1

Complexidade do Algoritmo

O algoritmo de busca pelo maximo paralelismo
processa todos os vertices e executa um laco percorrendo os vertices adjacentes. O numero de estados no grafo acclico pode ser estimado como
(n + 1)Q, onde Q e o conjunto de estados do supervisor, e o numero de arestas pode ser estimado
como nA, onde A e o conjunto de todas as transicoes existentes no supervisor. A complexidade da
funcao fT e da ordem de O(k), onde k  0, 1, ..., n
e o numero de eventos ocorridos ate o estado a ser
analisado. Dessa forma, a complexidade do algoritmo, no pior caso, e dada por O(n2 Q + nA).
5.2

Testes de Execucao do Algoritmo

O caso de estudo, onde sera testado o algoritmo, e o Sistema Flexvel de Manufatura (SFM),

1521

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro

11
(0, 0)

21
(1, 1)

(0, 0)

41
(1, 1)

12

22

(a) C1

(b) C2

(0, 0)

(1, 1)
42

(c) Mill
(1, 1)

(1, 1)

51

71
52

72

(0, 0)

(0, 0)

(0, 0)
53

81

73

54

(1, 1)

74
(2, 1)

(2, 1)

82

(d) PD

(e) Lathe

(f) C3

(1, 1)
64
(2, 1)
32

63

Figura 2 Diagrama do Sistema Flexvel de Manufatura

(0, 0)

61

(2, 1)
3133
34
39

(1, 1)
(0, 0)
65
(3, 1)

(3, 1)
30
37

35

66
3638

b  (11, 12), (31, 32), (41, 42), (35, 36), (61)
Para produzir o pino do produto A, os pares executados sao
pa  (21, 22), (33, 34), (51, 52), (37, 38), (63, 64)

ISSN 2525-8311

(5, 1)

(g) MM

(4, 1)

(h) Robo

Figura 3 Plantas do Sistema Flexvel de Manufatura
5

Tarefas Ativas

4
3
2
1
0

21 11 12 31 11 22 32 41 33 21 12 34 53 22 42 35 36 31 61 54 32 41 39 30 33 71 42 34 35 51 72 81 36 82 73 52 37 74 65 38 66 61 63 64

Eventos

(a) Sequencia obtida pelo Algoritmo de Maximo Paralelismo
5
4

Tarefas Ativas

como mostrado na Figura 2, tambem utilizado em
(Oliveira et al., 2013). O SFM produz dois tipos
de produtos a partir de blocos e tarugos, sendo
eles, um bloco com pino conico no topo (produto
A) e um bloco com um pino cilndrico pintado
(produto B).
A planta consiste de oito maquinas, sendo
elas, uma fresadora, um torno, um dispositivo de
pintura, uma maquina de montagem, tres esteiras e um robo. Alem disso, sao considerados oito
buffers que agem como depositos intermediarios.
Na Figura 3 estao representados os automatos que
modelam a dinamica das maquinas que compoem
o SFM. O numero de tarefas ativas em cada estado
esta representado no nome dos estados, de forma
que para um estado (k, i), temos fta ((k, i))  i.
Dado que se faz necessario avaliar o tempo,
e necessario definir a duracao das tarefas executadas pelas maquinas. Neste trabalho, o tempo
de execucao de uma tarefa e definido como o intervalo de tempo entre a ocorrencia de um evento
controlavel e o evento nao controlavel correspondente. Essa abordagem considera que os eventos
nao controlaveis sao respostas da planta a execucao de eventos controlaveis.
Na Tabela 1 estao presentados os intervalos de
tempo entre a execucao de um evento controlavel
e a ocorrencia de seu respectivo evento nao controlavel de resposta. Alem do especificado na tabela,
existe uma especificidade do SFM onde os eventos
controlaveis 63 e 65 somente podem ocorrer, no
mnimo, 15 unidades de tempo apos o evento 61.
A producao da base de ambos os produtos (A
e B) e realizada pela execucao dos seguintes pares
de eventos (com os eventos controlaveis na ordem
apresentada)

3
2
1
0

11 21 12 22 31 11 32 41 33 21 12 34 51 22 42 35 36 31 61 52 32 41 37 38 33 63 42 34 53 35 64 36 61 54 39 30 71 72 81 82 73 74 65 66

Eventos

(b) Sequencia obtida por um algoritmo guloso

Figura 4 Sequencias de eventos para a producao
de um produto A e um produto B
Finalmente, para produzir um pino do produto B
e necessario executar os pares
pb  (21, 22), (33, 34), (53, 54), (39, 30), (71, 72),
(81, 82), (73, 74), (65, 66)
Utilizando o supervisor monoltico para o
SFM, obtido pela Teoria de Controle Supervisorio convencional, composto por 45.504 estados e
200.124 transicoes, em conjunto com as especificacoes temporais, executando o algoritmo para
uma profundidade de 44 eventos (um produto A
e um produto B), a sequencia obtida esta mostrada na Figura 4a. A sequencia obtida pelo algoritmo, chamada so produz um par de produtos
em 286 u.t.. Por motivo de comparacao, foi desenvolvido um algoritmo guloso que, a cada passo,
escolhe o evento que minimiza fT , e para as mes-

1522

XXI Congresso Brasileiro de Automática - CBA2016
UFES, Vitória - ES, 3 a 7 de outubro
Eventos
Controlaveis
11
21
31
33
35
37
39
41
51
53
63
65
71
73
81

Eventos
Nao Controlaveis
12
22
32
34
36
38
30
42
52
54
64
66
72
74
82

Intervalo de
Tempo u.t.
26
26
22
20
17
25
21
31
39
33
27
27
26
26
25

Apesar de nao garantir a otimalidade, ou seja,
o maximo de paralelismo, a solucao apresentada
representa uma evolucao ao trabalho anterior que
nao garante a factibilidade temporal e, ainda assim, gera resultados consistentes e rapidos.
Ainda e possvel melhorar o desempenho computacional do algoritmo adicionando restricoes
quanto ao numero de vezes que cada evento controlavel pode ocorrer, reduzindo o branching factor.
Agradecimentos

Tabela 1 Intervalo de tempo entre pares de eventos
mas condicoes, o algoritmo encontrou a sequencia chamada sg , que produz um par de produtos em 321 u.t. e esta mostrada na Figura 4b.
Comparando o paralelismo entre as sequencias,
Fta (so )  96 e Fta (sg )  79, indicando que so
apresenta uma paralelismo acumulado maior que
sg .
Um detalhe importante e que existem multiplas sequencias com o mesmo paralelismo que
podem ser encontradas pelo algoritmo, gerando
diferentes tempos de producao.
Para avaliar o desempenho do algoritmo para
profundidades de busca maiores, foi realizado um
teste para diferentes tamanhos de lote. Cada lote
foi executado 30 vezes e a media do tempo de execucao esta mostrada na Figura 5. Como pode ser
observado, o algoritmo tem tempo de execucao
quadratico, mas ainda assim e muito rapido, de
modo que um lote de 25 pares de produtos, ou
seja, uma sequencia de 1100 eventos, e otimizada
em menos de 2 segundos.

Tempo de Execução s



1.5



1.0





0.5





0.0

1

5

10

15

20

25

Número de pares de produtos (A e B)

Figura 5 Avaliacao da execucao do algoritmo
para lotes de diferentes tamanhos

6

Conclusao

Neste artigo foi desenvolvido um metodo de obtencao de cadeias que maximizam o paralelismo entre
tarefas. A busca e logica e utiliza o tempo apenas
para garantir que a sequencia obtida e factvel do
ponto de vista temporal.

ISSN 2525-8311

O presente trabalho foi realizado com o apoio financeiro da Fapemig, CAPES - Brasil e CNPq.
Referencias
Abdeddam, Y., Asarin, E. and Maler, O. (2006).
Scheduling with Timed Automata, Theoretical
Computer Science 354(2) 272  300.
Alves, L., Bravo, H., Pena, P. and Takahashi, R.
(2015). Escalonamento da producao baseado no
criterio de maximo paralelismo em sistemas a
eventos_discretos, XII Simposio Brasileiro de Automacao Inteligente (SBAI), pp. 594599.
Garey, M. R. and Johnson, D. S. (1979). Computers
and intractability, W.H. Freeman.
Ghallab, M., Nau, D. and Traverso, P. (n.d.). Automated Planning Theory and Practice, Elsevier.
Herzig, A., de Menezes, M. V., de Barros, L. N. and
Wassermann, R. (2014). On the revision of planning tasks, ECAI 2014 - 21st European Conference on Artificial Intelligence, 18-22 August
2014, Prague, Czech Republic - Including Prestigious Applications of Intelligent Systems (PAIS
2014), pp. 435440.
Lopez-Mellado, E., Villanueva-Paredes, N. and
Almeyda-Canepa, H. (2005). Modelling of batch
production systems using petri nets with dynamic tokens, Mathematics and Computers in Simulation 67(6) 541  558.
Oliveira, A. C., Costa, T. A., Pena, P. N. and Takahashi, R. H. (2013). Clonal selection algorithms for task scheduling in a flexible manufacturing cell with supervisory control, Evolutionary Computation (CEC), 2013 IEEE Congress
on, IEEE, pp. 982988.
Pinedo, M. L. (2012). Scheduling Theory, Algorithms, and Systems, 3rd edn, Springer Publishing Company, Incorporated.
Ramadge, P. J. G. and Wonham, W. M. (1989). The
Control of Discrete Event Systems, Proc. of the
IEEE 77(1) 8198.
Schrijver, A. (1986). Theory of Linear and Integer
Programming, John Wiley  Sons, Inc., New
York, NY, USA.
Wang, W., Yuan, C. and Xiaobing, L. (2008). A fuzzy
approach to multi-product mixed production job
shop scheduling algorithm, Fuzzy Systems and
Knowledge Discovery, 2008. FSKD 08. Fifth International Conference on, Vol. 1, pp. 9599.

1523