SÍNTESE DE CIRCUITOS DIGITAIS UTILIZANDO COMPUTAÇÃO EVOLUTIVA
WILIAN S. LACERDA, BRUNO DE A. SILVA1, CLÁUDIO F. M. TOLEDO
Depto de Ciência da Computação  Universidade Federal de Lavras
Caixa Postal 3037  LavrasMG  CEP 37.200-000 - Brasil
E-mails lacerda@dcc.ufla.br, brunoas@icmc.usp.br, claudio@dcc.ufla.br
Abstract This paper presents a method for automatic digital circuits synthesis using evolutionary computation. Initially, the
proposed method receives a truth table of binary data with input and output values. After that, the method finds the minimized lo gical function of digital circuit using genetic operators applied to Boolean equations in sum of products form. The found Boolean
expression can be implemented in a programmable device for later use as PALs and FPGAs.
Keywords evolvable hardware, evolvable electronic, digital circuits, Boolean function.
Resumo Este trabalho apresenta um método automático para síntese de circuitos_digitais utilizando a técnica de computação
evolutiva. Partindo da tabela-verdade de dados binários com valores de entrada_e_saída digitais, o método proposto encontra a
função lógica minimizada do circuito digital utilizando operadores genéticos aplicados a equações Booleanas na forma de soma
de produtos. A expressão Booleana encontrada pode ser implementada em um dispositivo programável para posterior utilização
como PALs e FPGAs.
Palavras-chave .

1

Introdução

2 Hardware Evolutivo

Cada vez mais, dispositivos de hardware mais complexos têm exigido muito conhecimento dos projetistas e encarecido o custo e o tempo dos projetos. A
partir disso, há a necessidade de automatizar o processo de projeto de circuitos eletrônicos de forma a
torná-los menos dependente dos conhecimentos de
quem os projeta.
Nos últimos anos, abriu-se uma nova possibilidade de aplicação de conceitos biológicos na tecnologia a construção de dispositivos capazes de evoluir,
definidos como Hardware Evolutivo (Evolvable
Hardware - EHW). A implementação de tais dispositivos envolve conceitos e técnicas de Computação
Evolutiva, vida artificial e eletrônica de circuitos reconfiguráveis, voltados para a construção de sistemas
autônomos auto-adaptáveis.
O incremento dos recursos computacionais e,
mais recentemente, a disponibilização de uma nova
geração de dispositivos lógico-programáveis mais robustos a alterações, permitiram um avanço significativo do EHW nos últimos anos. Além de ser utilizado
para projetar o próprio hardware e implementá-lo de
forma automática, o EHW também torna possível o
desenvolvimento de sistemas_tolerantes_a_falhas.
Neste contexto, o objetivo principal deste trabalho é apresentar um método para a síntese automática
de circuitos eletrônicos digitais que pode ser utilizado em sistemas de Hardware Evolutivo. Inicialmente, a seção 2 apresenta conceitos, taxonomias e um
breve estado da arte do Hardware Evolutivo. A seção
3 descreve em detalhes o sistema evolutivo proposto
neste artigo para em seguida apresentar e discutir os
resultados obtidos na seção 4. As conclusões deste
trabalho estão relatadas na seção 5.

1Bolsista

Diferentemente do hardware convencional, EHW
possui a capacidade de se adaptar a mudanças nas tarefas requeridas ou ao ambiente, através de sua habilidade para reconfigurar sua própria estrutura de hardware dinamicamente e automaticamente.
Hardware Evolutivo, conceito introduzido por
De Garis (1991), é o uso da Computação Evolutiva
para síntese e implementação de circuitos eletrônicos
(geralmente em aplicações envolvendo evolução em
chips reconfiguráveis) capazes de resolver problemas
do mundo real. Para De Garis, dispositivos capazes
de evoluir são essenciais no desenvolvimento de sistemas nervosos artificiais para que robôs possam desenvolver algum tipo de aprendizado, a partir de interações com estímulos ambientais.
EHW é fundamentalmente diferente de implementação de Algoritmos Evolutivos em hardware
onde a arquitetura não muda e o hardware é usado
para implementar funções de seleção, recombinação
e mutação. A principal motivação para a implementação de Algoritmos Evolutivos em hardware é aumentar a velocidade de execução de suas funções.
2.1 Taxonomias de Hardware Evolutivo
Segundo Albert (1997), EHW pode ser dividido em
duas categorias
Fine-grained usa-se um Algoritmo Evolutivo
para selecionar componentes ou seus valores num
circuito analógico ou criar circuitos_digitais a partir
de blocos de construção em nível de porta.
Function-level envolve a seleção de topologias e montagem de circuitos a partir de blocos de
construção funcionais de alto nível.

do CNPq - Brasil

2852

Outra taxonomia de EHW encontrada em Haddow P.C. et al (2003), refere-se ao uso de simuladores de circuitos ou chips reconfiguráveis como plataformas para o processo de busca, podendo ser descrita como
 Evolução extrínseca ou indireta evolução realizada por simulação com a melhor solução simulada
sendo implementada em hardware reconfigurável,
isto é, o hardware é configurado apenas uma vez
 Evolução intrínseca ou direta evolução diretamente em hardware e em tempo_real, isto é, todo
indivíduo será usado para reconfigurar o hardware. O
EHW será reconfigurado o mesmo número de vezes
de forma diretamente proporcional ao tamanho da
população em cada geração
 Evolução on-chip o processo evolutivo está
localizado no mesmo chip que o circuito evoluído ou,
em outros casos, existe um processador on-board
executando o algoritmo_evolutivo.

cado em Thompson (1996), impulsionou o EHW e é
um marco histórico na área.
No final da década de 1990, surgiram aplicações
reais para EHW, como tais como uma rede_neural
em chip capaz de reconfiguração autônoma, chip
analógico para celulares, chip para compressão de
dados em uma impressora fotográfica (Higuchi et al,
1999), reconhecimento de dígitos escritos a mão
(Levy et al, 2000) entre outros.
As técnicas do EHW permitem explorar designs
alternativos, ou seja, designs que não seriam possíveis de serem projetados por humanos através do uso
de técnicas convencionais,. Além disso, podem trabalhar com requisitos especiais e variados graus de restrição, bastando incorporar ao fitness e ao cromossomo.
Vários desafios aparecem na implementação
destas técnicas de EHW. Circuitos avaliados em ambientes físicos reais no EHW intrínseco podem causar severos danos ao sistema ou ao ambiente. A evolução simulada (EHW extrínseco) somente manipula
a sintaxe e não a semântica do circuito codificado gerando avaliações imprecisas. Uma função de avaliação correta muitas vezes representa um custo_computacional inviável para os sistemas_de_tempo_real e
aplicações práticas.
Pesquisadores, como Salami e
Hendtlass
(2005), e Stomeo (2006) dedicaram esforços para
desenvolver técnicas para melhorar a escalabilidade
dos EHWs e diminuir seu custo_computacional, principalmente na avaliação dos circuitos.
Muitos pesquisadores passaram a adotar os FPGAs como tecnologia alvo para os EHWs digitais
por fornecerem uma plataforma reconfigurável e serem comercialmente disponíveis. As características
mais desejadas para os FPGAs no EHW digital são
flexibilidade e velocidade, reconfiguração parcial e
auto-reconfiguração.

Ainda, de acordo com o projeto eletrônico, EHW
pode ser classificado em três categorias digital, analógico ou híbrido.
2.2 Estado da Arte
Em meados de 1980, técnicas evolutivas foram usadas para otimização e roteamento de componentes
em placas de circuito impresso. Em Louis e Rawlins
(1991), Algoritmos Evolutivos foram utilizados para
interligar portas digitais que poderiam resolver um
problema específico, tal como função de paridade.
Também no início de 1990, devido ao surgimento dos FPGAs, circuitos mais complexos puderam
ser evoluídos. Mas, devido ao fato das arquiteturas
dos FPGAs serem proprietárias, o avanço do EHW
continuou no nível funcional. Entretanto, um acontecimento importante em meados de 1990 permitiu que
o fine-grained tivesse avanços significativos A empresa Xilinx, fabricante de FPGAs, introduziu a Unidade de Processamento Reconfigurável. Isso viabilizou a capacidade de interconectar células em nível de
porta arbitrariamente com muitas topologias flexíveis. Nessa mesma época, pesquisadores focaram
seus estudos em circuitos fine-grained analógicos.
Circuitos analógicos foram evoluídos em simulação
usando softwares simuladores, como por exemplo o
SPICE. Porém, simuladores de circuitos são lentos e
a avaliação destes circuitos não pode ser feita em
tempo_real.
Em Higuchi et al (1994), foi proposta uma arquitetura de EHW e foi descrita uma série de experimentos realizados como um multiplexador, contador
binário e uma máquina de estados finita. Em Higuchi
et al (1996), foram evoluídos circuitos_digitais para
reconhecimento_de_padrões e foi confirmado através
do Exclusive-or Problem que EHW pode reconhecer
padrões de funções não-linearmente separáveis. Em
1996, Thompson evoluiu intrinsecamente um circuito
em uma FPGA. O experimento de Thompson, publi-

3 O Sistema Evolutivo
Para atender aos requisitos desejados, as seguintes
decisões para o desenvolvimento do sistema evolutivo proposto foram tomadas
1. A entrada do sistema é um arquivo com uma
tabela-verdade que descreve as entradas e saídas binárias de um circuito digital combinacional
2. O módulo otimizador de circuitos recebe a tabela-verdade e evolui, através de um algoritmo_evolutivo (no caso, um algoritmo_genético), para o melhor circuito possível
3. Após a evolução, o módulo envia somente a
melhor solução do circuito encontrado para ser configurado no dispositivo de hardware.
O dispositivo de hardware escolhido para ser reconfigurado foi a PAL. A PAL é um dispositivo capaz
de armazenar qualquer expressão Booleana na forma
de soma de produtos dentro dos seus limites de tamanho. A PAL é poderosa pois é capaz de resolver qual-

2853

quer problema que possa ser modelado como um circuito digital combinacional, inclusive reconhecimento_de_padrões binários (Lacerda, 2006).
Assim o EHW implementado será classificado
como digital, function-level (evolui circuitos lógicos
combinacionais), indireto ou extrínseco e com evolução online, pois o sistema continua funcionando enquanto a evolução ocorre (viável para continuar executando enquanto opera em ambiente físico real).
O ciclo do funcionamento do sistema pode ser
visto no fluxograma da Figura 1.

No exemplo da função XOR, cada linha da matriz possuirá duas posições já que a tabela possui
duas entradas apenas e, o número máximo de linhas
para qualquer indivíduo será o número de linhas que
a tabela possui cuja saída é 1. Sabe-se que o melhor
circuito (o menor circuito possível em número de termos de produto) é sempre menor ou igual ao circuito
no qual os termos de produto representam todas as linhas da tabela em que a saída é um. Assim, a função
Booleana

 AB  B
é representada como
01
-0
e a função Booleana

A B
é representada como
1-0

Geração da População Inicial

Figura 1. Fluxograma do sistema

A população inicial é gerada aleatoriamente mas
baseada nos termos da tabela cuja saída é um. Primeiramente, sorteia-se quantos termos de produto
cada indivíduo terá. Depois, são escolhidos aleatoriamente os termos de produto cuja saída é um para
comporem a base do indivíduo.
Está técnica faz com que os termos gerados para
os indivíduos sejam sempre variações dos implicantes da função que se deseja otimizar descrita na tabela-verdade. Isso faz com que o Algoritmo Genético
não gere termos de produto muito distantes dos implicantes da função.

Arquivo de Entrada
O arquivo referente  tabela-verdade possui uma estrutura semelhante ao arquivo de entrada do minimizador de funções Booleanas ESPRESSO (De Micheli, 1994) como mostra a Figura 2.
.i
.o
.p
00
01
10
11
.e

2
1
4
0
1
1
0

Estrutura da População
A estrutura da população utilizada foi inspirada na
mesma utilizada por (Toledo, 2009). A população é
estruturada em clusters representados em uma árvore
ternária onde os pais sempre possuem fitness melhor
que seus filhos de modo que o melhor indivíduo é
sempre o nó raiz da árvore. Cada subárvore com seu
pai e seus respectivos filhos é um cluster, como pode
ser visto na Figura 3. Nessa figura, tem-se uma população de 13 indivíduos os clusters 1, 2, 3 e 4 são formados pelos seguintes grupos de indivíduos respectivamente (0, 1, 2, 3), (1, 4, 5, 6), (2, 7, 8, 9) e (3, 10,
11, 12). O método de seleção aplicado trabalha com
os clusters como será explicado mais adiante.
Após a execução de uma geração, a população é
reestruturada para manter essas características mencionadas acima, ou seja, o indivíduo com melhor fitness será o nó pai em seu respectivo cluster.

Figura 2. Conteúdo do arquivo de entrada com os valores de entrada_e_saída (tabela-verdade) da função lógica XOR de 2 entradas

Codificação
A codificação de cada indivíduo (ou função Booleana) foi feita utilizando uma matriz onde cada linha
representa um termo de produto e cada posição dessa
linha representa uma entrada da tabela-verdade. Os
valores possíveis para cada entrada são os seguintes
Valor da entrada negada (com operador NOT),
representada pelo valor 0
Valor da entrada sem o operador NOT, representada pelo valor 1
Ausência da variável (dont care), representada
por -.

2854

Função de Avaliação
A função de avaliação possui dois objetivos
Valorizar os indivíduos que acertam mais linhas da tabela-verdade
Valorizar os indivíduos menores (menos termos de produto).
Figura 3. Estrutura da População

Pode-se perceber que esses dois objetivos são
muitas vezes conflitantes. Uma boa função de avaliação deve ser capaz de ponderar esses dois objetivos.
Para atender ao primeiro objetivo, a função utilizada
foi a mesma encontrada em Stomeo (2006), e é a seguinte

Seleção
A seleção define quais são os pares de indivíduos que
irão participar do cruzamento. O primeiro indivíduo
de um par é sempre o pai de algum cluster, escolhido
aleatoriamente. O segundo indivíduo do par é um filho escolhido aleatoriamente pertencente ao cluster
do primeiro indivíduo do par. Dessa forma são escolhidos todos os pares de indivíduos sobre os quais o
cruzamento será aplicado. Se o filho gerado for melhor que um dos pais, ele é inserido no lugar do pai
com pior valor para o fitness. Se o indivíduo gerado
possui valor de fitness pior que os valores dos dois
pais, ele é descartado.

i

2 1

f 11002   1 x j d j  
i

(1)

j 0

onde i é o número de entradas do sistema, cada j representa uma combinação das entradas, x é a saída
obtida pelo indivíduo para a combinação j das entradas e d é a saída desejada para a combinação j das
entradas.
Para atender ao segundo objetivo utilizou-se a
seguinte expressão

Cruzamento
O cruzamento implementado foi o chamado cruzamento uniforme envolvendo dois indivíduos. É feita
uma varredura passando por todos os termos de produto dos dois indivíduos selecionados até que se chegue ao fim do menor indivíduo. Para cada termo de
produto, escolhe-se aleatoriamente se o descendente
receberá o termo do primeiro indivíduo ou do segundo. Para as posições restantes do maior indivíduo, é
feito um sorteio para decidir qual desses termos irão
para o descendente.

f 21 100t a m

(2)

onde tam é o número de termos de produto do indivíduo. A constante somada no denominador foi obtida
através de testes e foi o valor que proporcionou melhores resultados.
O fitness do indivíduo avaliado é

f  f 1 f 2 

Mutação
Foram implementados três tipos de mutações diferentes escolhidos aleatoriamente dentro do método
da mutação
1. Realiza um swap em um valor de uma posição de acordo com a taxa de mutação
2. Insere um novo termo de produto ao indivíduo aleatoriamente da mesma forma como os termos
da população inicial são gerados (baseado nas linhas
da tabela cuja saída é 1)
3. Remove um termo de produto escolhido
aleatoriamente.

(3)

e, portanto, o objetivo do algoritmo_genético implementado é encontrar o indivíduo com o menor valor
de fitness.
Critérios de Parada
Foram utilizados dois critérios de parada em conjunto para o algoritmo_genético
1. Número máximo de gerações
2. Convergência do melhor indivíduo (Soares,
1997) comparando os valores de desempenho do melhor indivíduo das últimas gerações. Se não houver
modificações no seu desempenho por n gerações
consecutivas, o algoritmo_genético para sua execução. n é o produto do número de linhas da tabela-verdade pelo número de entradas da tabela-verdade.

Operador de Epidemia
O operador de epidemia, ao final de cada geração,
mata todos os indivíduos, exceto o melhor (elitismo), e produz novos indivíduos aleatoriamente. A intenção ao se utilizar este operador é evitar a convergência prematura e sempre manter uma população
bem diversificada. Ele é utilizado logo após a mutação somente nas gerações em que não houve a inserção de nenhum novo indivíduo na população.

Após o melhor indivíduo ser encontrado pelo Algoritmo Genético, ele é gravado na PAL. Depois do
processo de gravação, a PAL está pronta para uso. O
sistema evolutivo então reinicia sua execução lendo

2855

novamente os arquivos de entrada, que podem ter
sido modificados.

1. O tempo de execução do algoritmo_genético
aumenta consideravelmente quando o número de entradas da tabela-verdade aumenta
2. A função de avaliação é uma função de alto
custo_computacional, pois para cada indivíduo devese checar em toda a tabela-verdade o número de
acertos
3. Encontrar uma função de avaliação que ponderasse corretamente os dois objetivos conflitantes
se apresentou como uma dificuldade que só pôde ser
resolvida empiricamente.

4 Resultados
Para testar o sistema evolutivo proposto, foi escolhido o problema da função lógica XOR, ou seja, encontrar a melhor função Booleana que representa a
função lógica XOR para uma quantidade arbitrária de
entradas binárias e uma saída digital.
De fato, o algoritmo_genético desenvolvido foi
capaz de encontrar o circuito referente a porta XOR
através de soma de produtos. Outros testes foram realizados para a função lógica OR, AND, NAND e
NOR. Circuitos como o somador binário completo
também foram evoluídos. Tabelas arbitrárias com até
quatro entradas foram testadas e seus resultados foram comparados com os resultados do ESPRESSO e
foram os mesmos para o algoritmo_genético proposto.
Um Algoritmo Genético mais simples foi implementado a princípio, mas não obteve resultados satisfatórios. Esse Algoritmo Genético mais simples possuía as seguintes diferenças em relação ao explicado
anteriormente
 População não é estruturada em árvore, sua
estrutura é simplesmente um vetor de indivíduos
sem hierarquias
 Não utiliza operador de epidemia
 O método de seleção implementado é o Torneio.

Várias soluções existem para minimizar essas
questões apontadas acima e melhorar o sistema
- Pode-se fechar o espaço de busca apenas nos implicantes primos, pois sabe-se que os implicantes primos é que formam a expressão Booleana que representa o circuito mínimo
- Para melhorar o tempo de execução pode-se implementar operadores do algoritmo_genético em hardware
- Implementar técnicas mais eficientes de avaliação
para evitar percorrer a tabela-verdade várias vezes
para efetuar o mesmo cálculo, como por exemplo
Programação Dinâmica
- Paralelizar a execução do algoritmo de evolução em
um sistema multiprocessado
- Implementar um algoritmo_genético_multi-objetivo
para conseguir otimizar de uma forma eficiente os
dois objetivos conflitantes
Futuramente, podem ser acrescentadas melhorias
para que o sistema seja capaz de otimizar circuitos
sequenciais e não só combinacionais e possibilitar a
evolução de circuitos com mais de uma saída digital.

Na Tabela 1 é apresentada uma comparação entre os dois Algoritmos Genéticos, onde AG1 representa o Algoritmo Genético mais simples e AG2 representa o que foi explicado na seção 3. Nessa tabela
são mostradas algumas execuções de tabelas-verdade
de diferentes números de entradas e de linhas e em
seguida é mostrado o número de gerações levadas
para cada algoritmo terminar sua execução. Cabe observar que além de mais lento, o AG1 nem sempre
encontrou o circuito ótimo, ao contrário do AG2, que
encontrou o circuito ótimo em todos os casos.

5 Conclusão
O método apresentado neste trabalho mostra que é
possível criar um sistema de Hardware Evolutivo
com as tecnologias atuais disponíveis. Outros experimentos podem ser realizados com outros tipos de
hardware reconfiguráveis diferentes da PAL, tais
como FPGAs.
FPGA é uma tecnologia extremamente interessante para o desenvolvimento de protótipos, pois facilmente se consegue realizar alterações e testes de
hardware com custo bastante reduzido.
A aplicabilidade do sistema proposto vai além da
minimização de circuitos_digitais. Várias aplicações
podem ser estudadas já que EHW, segundo a literatura, pode ser usado também para reconhecimento de
padrões.
O método apresentado também sugere que o uso
de Algoritmos Genéticos (AG) com populações estruturadas de forma hierárquica pode ser uma alternativa viável em alguns casos para melhoria de desempenho, quando comparada a implementações tradicionais dos AGs.
Através do presente trabalho é possível perceber
que EHW é uma área promissora pois diminui o tem-

Tabela 1 Comparação entre os Algoritmos Genéticos

Para a realização dos testes acima foram utilizados os seguintes parâmetros
Tamanho da população  13 indivíduos
Taxa de cruzamento  100
Taxa de mutação  20.
O sistema proposto possui algumas limitações apesar
de ter funcionado como esperado. São elas
2856

po de projeto do sistema, facilita mudanças no hardware (o que no hardware convencional não ocorre).
EHW de fato aumenta o nível de automatização e pode-se construir sistemas online que sejam capazes de
identificarem mudanças nas necessidades e se auto-ajustarem, eliminando assim parte dos custos de manutenção e assistência técnica.

Toda, K. Salami, M. Kajihara, N. Otsu, N.
(1999). Real-World Applications of Analog and
Digital Evolvable Hardware. IEEE Transactions
on Evolutionary Computation, v. 3, n. 3, Setembro, p. 220-235.
Lacerda, W. S. (2006). Projeto e Implementação de
Circuitos Classificadores Digitais com Controle
da Generalização Baseado na Regra do Vizinhomais-próximo Modificada. 218 p. Tese (Doutorado em Engenharia Elétrica) - Universidade Federal de Minas Gerais, Belo Horizonte.
Levy, R. Lepri, S. Sanchez, E. Ritter, G. Sipper,
M. (2000). Slate of Art An Evolving FPGABased Board for Handwritten-Digit Recognition.
EH 00 Proceedings of the 2nd NASADoD
workshop on Evolvable Hardware, IEEE Computer Society, Washington, DC, USA, July, p.
237.
Louis, S. J. Rawlins, G. J. E. (1991). Designer Genetic Algorithms Genetic Algorithms in Structure
Design. Proceedings of the Fourth International
Conference on Genetic Algorithms, Morgan
Kauffman, San Mateo, CA, p. 53-60.
Salami, M. Hendtlass, T. (2005). The Fast Evaluation Strategy for Evolvable Hardware. Genetic
Programming and Evolvable Machines, Kluwer
Academic Publishers, Hingham, MA, USA, v. 6,
n. 2, p. 139-162.
Soares, G. L. (1997). Algoritmos Genéticos Estudo,
Novas Técnicas e Aplicações. 145 p. Dissertação
(Mestrado em Engenharia Elétrica) - Universidade Federal de Minas Gerais, Belo Horizonte.
Stomeo, E. (2006). A Novel Genetic Algorithm for
Evolvable Hardware. IEEE Congress on Evolutionary Computation, Vancouver, BC, Canada,
Julho, p. 134-141.
Toledo, C. F. M., França, P. M., Morabito, R.,
KIMMS, A. (2009). Multi-population genetic
algorithm to solve the synchronized and integrated two-level lot sizing and scheduling problem. International Journal of Production Research, 4711, p. 3097-3119.
Thompson, A. (1996). Silicon Evolution. GECCO
96 Proceedings of the First Annual Conference
on Genetic Programming, Cambridge, MA
MIT Press, p. 444-452.

Agradecimentos
Os autores agradecem o apoio financeiro da FAPEMIG para desenvolvimento desta pesquisa e sua
publicação.
Referências Bibliográficas
Albert, D (1997). Evolutionary Hardware Overview.
Johns Hopkins University Whiting School of
Engineering, Baltimore, Maryland, v. 1, n. 1, p.
1-20.
De Garis, H. (1991). Genetic Programming Artificial
Nervous Systems Artificial Embryos and Embryological Electronics. PPSN I Proceedings of
the 1st Workshop on Parallel Problem Solving
from Nature, Springer-Verlag, London, UK, p.
117-123.
De Micheli, G. (1994). Synthesis and Optimization
of Digital Circuits. Cingapura McGraw-Hill International. 579 p.
Haddow P.C. Tufte G. Remortel P. Van (2003) Evolvable hardware pumping life into dead silicon.
In Kumar S and Bentley PJ. (eds) On Growth,
Form and Computers, pp. 404-422, 1st ed. Oxford, UK Elsevier Limited, 2003.
Higuchi, T. Iba, H. Manderick, B. (1994). Evolvable Hardware. Massively Parallel Artificial Inteligence, Cambridge, MA MIT Press, p. 398421.
Higuchi, T. Iwata, M. Kajitani, I. Iba, H. Furuya,
T. Manderick, B. (1996). Evolvable Hardware
and its Applications to Pattern Recognition and
Fault-tolerant Systems. Papers from an international workshop on Towards Evolvable Hardware, The Evolutionary Engineering Approach,
London, UK Springer-Verlag, p. 118-135.
Higuchi, T. Iwata, M. Keymeulen, D. Sakanashi,
H. Murakawa, M. Kajitani, I. Takanahashi, E.

2857