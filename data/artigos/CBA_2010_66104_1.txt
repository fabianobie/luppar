ALGORITMO GENÉTICO E OTIMIZAÇÃO POR ENXAME DE PARTÍCULAS APLICADOS AO
PLANEJAMENTO DE TRAJETÓRIA DE UM MANIPULADOR ROBÓTICO
DANIEL C. JERONYMO
Departamento de Engenharia Elétrica, Universidade Federal do Paraná, UFPR
C. P. 19011, Centro Politécnico, CEP 81531-970, Curitiba, Paraná, Brasil
dcavalcanti@bigfoot.com
YURI C. C. BORGES
Departamento de Engenharia de Telecomunicações e Controle, Universidade de São Paulo, USP
Escola Politécnica, CEP 05508-900, São Paulo, São Paulo, Brasil
yuri.campbell@gmail.com
LEANDRO DOS SANTOS COELHO
LASEMPPGEPS, Programa de Pós-Graduação em Engenharia de Produção e Sistemas
Pontifícia Universidade Católica do Paraná, PUC-PR
Rua Imaculada Conceição, 1155, CEP 80215-901, Curitiba, Paraná, Brasil
leandro.coelho@pucpr.br
Abstract
 An extremely hard problem in robotics is the optimum movement between certain physical configurations while minimizing certain criteria. The fundamental objective in movement planning for robot arms is to minimize movement time, distance and joint torque, avoiding obstacles and the robot arm itself as an obstacle. This article presents a study on particle swarm
optimization against genetic algorithms to optimize the 2D point to point movement of a 3-link robot arm. MATLAB simulations
of the problem were implemented with both techniques to minimize an objective function depending on the mentioned criteria.
Results of both methods are presented, showing that the second produced, for this problem, better results than the first.
Keywords
 robot arm, motion planning, genetic algorithms, particle_swarm_optimization
Resumo
 Um problema extremamente difícil na robótica é planejar o movimento ótimo dentre dadas configurações físicas ao
minimizar certos critérios. O objetivo fundamental do planejamento_de_trajetória (movimento) para manipuladores robóticos é
minimizar o tempo e distância do movimento e o torque nas juntas, evitando obstáculos e o manipulador_robótico como um próprio obstáculo. Assim, este artigo apresenta um estudo sobre otimização_por_enxame_de_partículas contra algoritmos_genéticos
para otimizar o movimento 2D ponto-a-ponto de um manipulador_robótico com três graus de liberdade. Simulações em
MATLAB do problema foram implementadas com as duas técnicas para minimizar uma função objetivo dependente dos critérios
mencionados. Resultados dos dois métodos são apresentados, mostrando que o segundo produziu, para este problema, melhores
resultados que o primeiro.
Palavras-chave
 

1

ção da programação_dinâmica devido a sua característica de aproveitar-se da estrutura do espaço de
busca para aumentar sua eficiência, exposto em Amir
e Engelhardt (2003) e Brafman e Domshlak (2006).
Contudo, ainda, somente num melhor caso estes
algoritmos têm tempo de execução polinomial (Choi
e Amir, 2007).
Em um primeiro momento a utilização de algoritmos_genéticos (AGs) mostrou-se promitente através dos trabalhos de Garg e Kumar (2002), que usaram algoritmos_genéticos para otimizar a trajetória do
manipulador ao minimizar requisitos de torque nas
juntas. Pires e Machado (2000) e Pires et al. (2001)
minimizaram a trajetória, as oscilações na evolução
temporal e requisitos de energia e, além disso, evitando colisões com os obstáculos presentes na área
de trabalho do manipulador robô e em um trabalho
posterior, Pires et al. (2003), o fizeram obedecendo a
um torque máximo pré-definido. Yue et al. (2002)
utilizou uma abordagem de minimização baseada em

Introdução

Um manipulador_robótico é um tipo específico
de robô constituído por conectores e juntas entre
estes, figurando seus graus de liberdade (GL). Em
robótica, o planejamento_de_movimento destes manipuladores robóticos, que se atém a encontrar o caminho entre duas distintas configurações do conjunto,
isto obedecendo a certos critérios, que vão desde
requisitos de desempenho, isto é, tempo mínimo,
como de restrições físicas, ou seja, torque máximo.
Contudo, este planejamento é uma tarefa difícil devido ao aumento exponencial da complexidade do
problema devido a um número pouco mais elevado
de GL segundo Kravaki et al. (1996), Brock e Kathib
(2000) e Canny (1987) especialmente quando há
obstáculos na área de atuação do manipulador_robótico.
Para sobrepor tais dificuldades, abordagens alternativas têm sido propostas, assim como a utiliza3308

planejamento ponto-a-ponto de trajetória, ao utilizar
polinômios quadrinomiais e quintinomiais para descrever segmentos que ligavam o ponto inicial, os
intermediários e o final. Conceito aprimorado, com
resultados relevantes, por Kazem et. al. (2008) ao
fazê-lo minimizando o tempo e espaço de viagem da
trajetória, evitando colisões e não excedendo um
torque máximo predefinido.
Assim como nos trabalhos de Abo-Hammour et
al. (2002) e Wang et al. (2008), onde técnicas de
otimização em espaço de busca contínuo foram eficientemente aplicados em problemas análogos. Propõe-se, neste trabalho, a aplicação de outro método
de otimização contínua conhecido como otimização
por enxame_de_partículas, mais conhecida como
particle_swarm_optimization (PSO), visando trazer,
ao planejamento_de_trajetória para o manipulador
robótico, os benefícios atingidos com a utilização de
métodos contínuos em casos análogos. E, então, a
comparação deste método, PSO, com a solução do
problema através de um AG.
Utilizando, para tal, um modelo de planejamento
de movimento de um manipulador_robótico inspirado
no proposto por Yue et al. (2002) e desenvolvido
também por Kazem et al. (2008), ou seja, a otimização do movimento 2D ponto-a-ponto de um manipulador_robótico com três graus de liberdade. E, ainda,
desejando minimizar parâmetros como tempo e distância de movimento e distância para obstáculos no
caminho enquanto respeita os limites de torque.
O restante do artigo está organizado da seguinte
forma. Na seção 2 são apresentados os fundamentos
de algoritmos_genéticos e otimização por enxame de
partículas. A definição do problema de otimização e
a configuração dos algoritmos de otimização são
abordadas nas seções 3 e 4. A análise dos resultados
de otimização e conclusão são apresentados, respectivamente, nas seções 5 e 6.
2

Figura 1. Pseudocódigo de um AG.

Otimização por Enxame de Partículas (Particle
Swarm Optimization, PSO), desenvolvida por Kennedy e Eberhart (1995), é um algoritmo de busca
estocástica que é similar aos algoritmos de Computação Evolucionária, porém a forma como a informação é utilizada para a otimização é inspirada não em
operadores genéticos, mas de dinâmica de enxames.
A técnica foi desenvolvida após a observação de
que grupos de pássaros percorrem o espaço de forma
aparentemente aleatória, em busca de alimento, e
seguindo o pássaro mais próximo do objetivo. Essa
busca coordenada pelo grupo é chamada de inteligência_de_enxame. Cada partícula representa uma
solução no espaço de busca e sua posição é regida
por uma equação que, a cada iteração, e de acordo
com sua melhor posição já encontrada e de acordo
com a melhor posição encontrada pelo enxame, altera a velocidade da partícula em busca de melhores
resultados. Multiplicadores baseados na geração de
números aleatórios também são usados para criar a
aleatoriedade da busca, conforme apresentado no
pseudocódigo da Figura 2.

Metaheurísticas

Os AGs desenvolvidos por Holland (1975), pertencem a área de Computação Evolucionária (ou
Evolutiva). Este algoritmo, como o nome implica,
trabalha com populações de indivíduos cuja representação se dá por cromossomos, na representação
binária adotada neste artigo. Estes cromossomos são
estruturas de dados que codificam uma solução potencial para um problema. Através dos processos
evolutivos, os cromossomos são recombinados, mutados e passam por um processo de seleção natural,
gerando assim novas soluções melhores que as da
geração anterior. A Figura 1 apresenta um pseudocódigo da operação deste algoritmo.

Figura 2. Pseudocódigo do PSO.

3 Planejamento de trajetória
Yue et al. (2002) sugere uma abordagem interessante para o problema de planejamento_de_movimento. Separar a trajetória ponto-a-ponto em diversos
pontos intermediários e resolver estes trajetos intermediários. Para um manipulador_robótico com n
graus de liberdade, atuador final com m graus de
liberdade e usando mp pontos intermediários é possí-

3309

A partir do ponto intermediário, isto é, para os
termos  , a aceleração das juntas é obtida de outro
modo

vel usar um polinômio de quarto grau para reger o
trajeto do ponto inicial ao ponto intermediário e um
polinômio de quinto grau para reger o trajeto do
ponto intermediário ao ponto final. As equações
descritas aqui estão presentes de maneira mais detalhada do que as presentes nos trabalhos de Yue et al.
(2002) e Kazem et al. (2008).
Descreve-se o polinômio de quarto grau, descrito
por Yue et al. (2002), como
   

   
  ,

 

  2

 

 

(1)

(2)

A velocidade_angular  e a aceleração angular 
formam os termos  ,  ,  ,  ,  ,  e
 ,  ,  ,  ,    , os quais são definidos
conforme segue
   ,

(3)

   2,

(5)

   ,

(7)

   2,

(10)

   ,

20  20
8
!  "2 ,
   
12
3    
30  30
14

!  "2 ,
 
16
3  2  
12  12
6
!  "2 .
   
6
    

(14)

(4)

4   
 ,
4  3  
   3
3
   
 ,
2    2
   ,
 

12  .

Para um manipulador_robótico redundante com
três juntas, tem-se um grau de liberdade três e considerando um grau de liberdade redundante para o
atuador final tem-se os seguintes parâmetros para as
equações mp  1, n  3 e m  1. Considerando-se
este caso, tem-se um ponto inicial definido pelos
ângulos de juntas  ( ,  ( ,  ( ) ,
um
ponto
intermediário
definido
por
 *é,- ,  *é,- ,  *é,- ) e um ponto final
definido por  .( ,  .( ,  .( ), onde cada
ponto também é definido pelo seu conjunto respectivo de velocidade_angular  ,  ,  0. Logo, para a
Equação 1 e Equações 3-7, o termo  representa o
ponto ( e o termo  representa o ponto
*é,- . Da mesma maneira, para a Equação 2 e Equações 8-13, o termo  representa o ponto *é,- e
o termo  representa o ponto .( . O termo  é
o tempo de execução do ponto i ao ponto i+1 e o
termo  representa um conjunto de pontos entre 0 e
 .

onde i1,...,m e  é o ângulo da junta. Para completar
o movimento, é utilizado o seguinte polinômio de
quinto grau, que rege o movimento do ponto intermediário ao ponto final, e para este também se considera i1,...,m, tal que
     
 
   .

6 

(6)
Figura 3. Manipulador robótico com três graus de liberdade.
Fonte Kazem et. al. (2008).

(8)

A Figura 3 apresenta a configuração do manipulador_robótico utilizado para a simulação, este atendendo as medidas L1  1, L2  1 e L3  0,5.

(9)

4 Configuração do problema de otimização

(11)

Após obter e compreender as equações que regem o problema, pode-se trabalhar com as mesmas
para criar funções objetivo apropriadas para técnicas
de otimização, a fim de otimizar o processo.
O espaço de busca pode então ser definido por 9
parâmetros

(12)

234ç6 7 839   ,  ,  ,  ,  ,  ,  ,  ,  ),

(13)

onde  é o angulo da i-ésima junta,   a velocidade
da i-ésima junta,  o angulo de última configuração
do atuador final,  o tempo de execução entre o
ponto inicial e o ponto intermediário,  o tempo de
execução entre o ponto intermediário e o ponto final.

3310

tornando-se a função objetivo como segue
ffobj  ff  fob .

A função objetivo usada, a mesma adotada por
Kazem et. al. (2008), constitui-se numa integração
ponderada de fatores que agem como penalidades. A
minimização destas penalidades leva  otimização do
planejamento_de_movimento. Assim
<.   <->

 <?

 <

 @ ,

Todos os elos das configurações não devem cruzar o obstáculo, caso isso ocorra, a função objetivo é
levada para o infinito, tornando-a um ponto de máximo. Nota-se que a função objetivo verifica diversos
pontos que estão nesta situação, de maneira a aumentar o trabalho computacional da tarefa, logo, levando
a função objetivo com detecção de obstáculos a ser
consideravelmente mais pesada, computacionalmente
falando, que a função objetivo para o problema sem
obstáculos.

(15)

onde os fatores  atuam como fatores de prioridade
para os itens da minimização, o conjunto usado para
este fator de prioridade foi 1,7 2 2 1). O fator <->
representa a quantidade de torque excessivo em relação ao torque máximo C*D da i-ésima junta, definese como
H

<  I
F

0

F
KC K



<->  E E <
FG G

F

4 KC K L C*D V
F

 C*D , caso contrário

5 Análise de resultados

(16)

Os procedimentos adotados para a avaliação das
metaheurísticas foram os seguintes. O AG foi executado com os parâmetros tamanho de população de
40, taxa de cruzamento de 80, taxa de mutação de
5, seleção por torneio com 5 candidatos, variáveis
representam cromossomos e critério de parada de
1000 gerações. O algoritmo de PSO foi executado
com os parâmetros tamanho de população (enxame)
de 40 partículas, fator de inércia com decaimento
linear de 0,9 a 0,4, influência do melhor local (lbest,
local best) de 2, influência do melhor global (gbest,
global best) de 2 e critério de parada de 1000 iterações (gerações).
As implementações de AG e PSO foram executadas 30 vezes cada, para a implementação para o
problema sem obstáculo e também a implementação
para o problema com obstáculo. O ponto de início
utilizado foi x  0, y  2,3 e   80, onde  é o
angulo do atuador final. O ponto de destino escolhido
foi x  -2 e y  0. O ponto escolhido da primeira
junta do manipulador_robótico foi x0 e y0. As
iterações do PSO foram maiores que as de AG em
busca de igualar o tempo computacional de ambas.
São apresentadas as médias e melhores valores dos
dados coletados de função objetivo, tempo de deslocamento ponto-a-ponto (s), distância total de juntas
(rad), distância total cartesiana (m) e torque excessivo total (N.m).
A Tabela 1 apresenta os dados referentes aos
dois métodos para o caso para o problema sem obstáculo, e a Tabela 2, para o problema com obstáculo
um círculo posicionado em x-0,5 e y  1,8 com raio
0,35. Pode-se, destes, observar que, em linhas gerais,
o PSO mostrou-se superior ao AG na proposição
assumida para este trabalho. Pois demonstrou, em
ambos os casos, valores inferiores queles obtidos
pelo AG.

,
(17)


onde a é o número de juntas e b é o número de posições de juntas da posição inicial  posição final.
O índice <? é a distância percorrida em angulos
para cada junta e é descrito como


H

<?  E EKF  FW K.

(18)

G FG

O índice < representa a distância cartesiana percorrida, assim
H

<  E 74F , 4FW 
FG

(19)
,

onde 4F é a j-ésima posição cartesiana do manipulador_robótico e d é a função de distância cartesiana.
O índice @ representa o tempo total para que o
movimento do ponto inicial até o ponto final seja
completado, portanto definido como
@  

 .

(20)

Para problemas para o problema com obstáculos, a função objetivo é alterada significativamente
com a introdução de um parâmetro <-H , uma função
para penalização vinculada  presença de obstáculos
<-H

H



1 4 E E YZ6F  63á98Z6  0V
X
,
FG G

0

,

(22)

(21)

caso contrário

3311

Tabela 1. Resultados para o planejamento_de_movimento para o
problema sem obstáculo.

A
G
P
S
O

Melhor

Tempo
para
movimento pontoa-ponto
(s)

Distância
total das
juntas
(rad)

2,18026
2,65873

1,87405
2,03669

0,29414
1,91001

0,20342
1,86684

2,14856

2,01291

0,25604

0,15645

Média
Melhor
Média

Distância
cartesiana
total (m)

Torque
excessivo
total
(N.m)

3,28628

0

3,31828
0,05069

0 0

3,27220

0

3,33354
0,06087

0 0

Figura 5. Manipulador robótico demonstrado pelas linhas retas e
caminho do atuador final pela linha curva (PSO para o problema
sem obstáculo).

Tabela 2. Resultados para o planejamento_de_movimento para o
problema com obstáculo.

Melhor

A
G
P
S
O

Tempo
para
movimento
ponto-aponto (s)

Distância total
das
juntas
(rad)

Distância
cartesiana total
(m)

Torque
excessivo total
(N.m)

2,97914
3,85879

4,47559
7,31301

3,45080
4,34836

0
0,01345

0,48996
2,96135
3,11244

2,01966
4,26595
5,31513

1,55108
3,36974
3,42490

0,07368
0
0,00048

0,39636

1,22618

0,11773

0,00262

Média
Melhor
Média

Figura 6. Manipulador robótico demonstrado pelas linhas pretas e
caminho do atuador final pela linha azul (AG para o problema com
obstáculo).

Ainda, esta diferença pode ser salientada ao
compararem-se os dois métodos em sua convergência quanto  minimização da função objetivo para o
caso para o problema com obstáculo (Figuras 8 e 9).
Nas quais é possível notar que o valor atingido pelo
PSO da função objetivo é, de fato, menor levando,
assim, a resultados mais eficientes quanto aos critérios de minimização.

Dessa forma, pode-se melhor observar a superioridade do algoritmo PSO frente ao AG quando são
mostradas as trajetórias ótimas obtidas pelos dois
métodos tanto para o caso para o problema sem
obstáculo (Figuras 4 e 5). Ou, com uma diferença
bem menos sutil, no caso para o problema com obstáculo, conforme apresentado nas Figuras 6 e 7.

Figura 4. Manipulador robótico demonstrado pelas linhas retas e
caminho do atuador final pela linha curva (AG para o problema
sem obstáculo).

Figura 7. Manipulador robótico demonstrado pelas linhas pretas e
caminho do atuador final pela linha azul (PSO para o problema
com obstáculo).

3312

Figura 8. Análise de convergência (AG para o problema com
obstáculo).

Figura 10. Velocidade das juntas ao longo do tempo (AG para o
problema sem obstáculo).

Figura 11. Velocidade das juntas ao longo do tempo (PSO para o
problema sem obstáculo).

Figura 9. Análise de convergência (PSO para o problema com
obstáculo).

Outro fator de relevante análise é a expressiva
diminuição no tempo de trajetória ponto-a-ponto
proporcionada pela utilização do PSO num ambiente
de trabalho para o problema sem obstáculo frente ao
do AG. Isto pode ser observado através da análise
das Figuras 10 e 11 que demonstram as velocidades
das juntas do manipulador_robótico em ambos os
casos. Nestas, é fácil ver a superioridade do método
de otimização baseado em PSO neste caso, para este
parâmetro.
Ainda, é importante ressaltar que isto fora conseguido obedecendo s limitações de torque, como
pode ser observado nas Figuras 12 e 13. Nota-se que
os limites máximo e mínimo dos torques de ambas as
técnicas são aproximadamente iguais.

Figura 12. Torque das juntas ao longo do tempo (AG para o
problema sem obstáculo).

3313

Joint Conference on Artificial Intelligence
(IJCAI03). Morgan Kaufmann.
Brafman, R. e Domshlak, C. (2006). Factored
Planning How, When and When Not. In
Proceedings of the National Conference on
Artificial Intelligence (AAAI06). MIT Press,
2006.
Brock, O. e Khatib, O. (2000). Real-time Replanning
in High-dimensional Configuration Spaces
Using Sets of Homotopic Paths. In
Proceedings of the IEEE International
Conference on Robotics and Automation
(ICRA2000), pp. 550-555.
Canny, J. (1987). The Complexity of Robot Motion
Planning. Cambridge, MA. The MIT Press.
Choi, J. e Amir, E. (2007). Factor-guided Motion
Planning for a Robot Arm. In Proceedings of
the International Conference on Intelligent
Robots and Systems (IROS07), pp. 27-32.
Garg, P. D. e Kumar, M. (2002). Optimization
Techniques Applied to Multiple Manipulators
for Path Planning and Torque Minimization.
Engineering
Applications
of
Artificial
Intelligence, Vol. 5, No. 3, pp. 241-252.
Holland, J. H. (1975). Adaptation in Natural and
Artificial Systems. University of Michigan
Press, Ann Arbor.
Huang, H. S. e Lu, C. N. (1994). Efficient Storage
Scheme and Algorithms for W-matrix Vector
Multiplication on Vector Computers. IEEE
Transactions on Power Systems, Vol. 9, No. 2,
pp. 1083-1094.
Kavraki, L. E., Svestka, P., Latombe, J.-C. e
Overmars, M. (1996). Probabilistic Roadmaps
for Path Planning in High Dimensional
Configuration Spaces. IEEE Transactions on
Robotics and Automation, Vol. 12, No. 4, pp.
566-580.
Kazem, B. I., Mahdi, A. I. e Oudah, A. T. (2008).
Motion Planning for a Robot Arm by Using
Genetic Algorithm. Jordan Journal of
Mechanical and Industrial Engineering, Vol. 2,
No. 3, pp. 131-136.
Kennedy, J. e Eberhart, R. (1975). Particle Swarm
Optimization. In Proceedings of the IEEE
International Conference on Neural Networks,
Piscataway, NJ, pp. 19421948.
Kostenko, M. e Piotrovsky, L. (1970). Electrical
Machines, Part 2, Mir, Russia.
Lin, S. L. e Van Ness J. E. (1994). Parallel Solution
of Sparse Algebraic Equations. IEEE
Transactions on Power Systems, Vol. 9, No. 2,
pp. 743-799.
Marquadt, D. W (1963). An Algorithm for Leastsquares Estimation of Nonlinear Parameter.
Journal Society for Industry Applied
Mathematics, Vol. 11, No. 2, pp. 431-441.
Monticelli, A (1983). Fluxo de Carga em Redes de
Energia Elétrica. Edgar Blucher, Rio de
Janeiro, RJ.

Figura 13. Torque das juntas ao longo do tempo (PSO para o
problema sem obstáculo).

6 Conclusão
Neste trabalho o problema de planejamento de
movimento para o manipulador_robótico fora tratado,
uma técnica baseada na otimização por exame de
partículas é apresentada. Além disso, sua eficiência
comparada  utilização de algoritmos_genéticos.
Mostrando que, com melhores resultados nos
objetivos traçados, como a minimização de tempo e
distancia de trajetória ao respeitar os limites de torque a técnica apresentada mostrou eficiência melhor
que a dos AGs.
Dessa forma, surge como possibilidades de
enfoque a trabalhos futuros a utilização de novas
metaheurísticas no planejamento_de_movimento de
um manipulador_robótico. Cuja solução, devido ao
seu grau de complexidade com crescimento exponencial, ainda mostrar-se um desafio s técnicas de
otimização, mesmo quelas mais versáteis e robustas,
baseadas em computação_evolutiva e inteligência de
enxames (inteligência_coletiva).

Agradecimentos
Os autores agradecem o apoio financeiro do
Conselho Nacional de Desenvolvimento Científico e
Tecnológico  CNPq (processo 3039632009-3PQ).
Além disso, o primeiro autor deste artigo agradece a
UFPR pela concessão de uma bolsa de mestrado
vinculada ao programa REUNI.

Referências bibliográficas
Abo-Hammour, Z. S., Mirza, N. M., Mirza, S. M. e
Arif, M. (2002). Cartesian Path Generation of
Robot Manipulators Using Continuous Genetic
Algorithms. Robotics and Autononmous
Systems, Vol. 41, No. 1, pp. 179-223.
Amir, E. e Engelhardt, B. (2003). Factored Planning,
In Proceedings of the Eighteenth International

3314

Morelato, A., Amaro, M. e Kokai, Y (1994).
Combining Direct and Inverse Factors for
Solving Sparse Network Equations in Parallel.
IEEE Transactions on Power Systems, Vol. 9,
No. 4, pp. 1942- 1948.
Pires, E. J. S. e Machado, J. A. T (2000). A GA
Perspective of the Energy Requirement for
Manipulators Maneuvering in a Workspace
With Obstacles. In Proceedings of the
Congress on Evolutionary Computation
(CEC2000), pp. 1110-1116.
Pires, E. J. S., Machado, J. A. T. e Oliveira C. R. M.
(2001). An Evolutionary Approach to Robot
Structure and Trajectory Optimization. In
Transactions of the 10th IEEE Conference on
Advanced Robotics (ICAR01), pp. 333-338.
Pires, E. J. S., Machado, J. A. T. e Oliveira P. B. M.
(2003). Fractional Order Dynamic in a Genetic
Algorithm. In Proceedings of the 11th
International
Conference
on
Advanced
Robotics, pp. 264-269.
Rechenberg, I. (1971). Evolutionsstrategie 
Optimierung Technischer Systeme Nach
Prinzipien Der Biologischen Evolution (PhD
thesis), Germany.
Wang, X. -S., Hao, M. -L. e Cheng Y. -H .(2008). On
the Use of Differential Evolution for Forward
Kinematics of Parallel Manipulators. Applied
Mathematics and Computation, Vol. 205, No.
5, pp. 760-769.
Yue, S. G., Henrich, D., Xu, X. L. e Toss, S. K
(2002). Point-to-point Trajectory Planning of
Flexible Redundant Robot Mnipulators Using
Genetic Algorithms. Journal of Robotica, Vol.
20, No. 3, pp. 269-280.

3315