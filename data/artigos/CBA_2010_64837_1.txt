UM MÉTODO INTERATIVO DE RECUPERAÇÃO DE DIAGRAMAS GRAFCET A
PARTIR DE DIAGRAMAS LADDER
Paulo André Sperandio Giacomin, Hans-Jorg Andreas Schneebeli

Universidade Estadual de Santa Cruz
Departamento de Ciências Exatas e Tecnológicas
Ilhéus-BA, Brasil


Universidade Federal do Espírito Santo
Programa de Pós-Graduação em Engenharia Elétrica
Vitória-ES, Brasil
Emails pasgiacomin@uesc.br, hans@ele.ufes.br
Abstract We show a new interactive method of recovery of grafcet diagrams from ladder diagrams. We
highlight the advantages when comparing with the methods that already exists. We show the results that was
achieved building a prototype and the analysis of the efficiency of the method showed it is possible.
Discrete Event Systems, Programmable Controllers, Binary Decision Diagrams, Algorithms

Keywords

Resumo Apresentamos um método interativo de recuperação de diagramas grafcet a partir de diagramas
ladder. Destacamos as vantagens em relação a métodos já existentes, mostramos resultados que foram alcançados
com a construção de um protótipo e a análise da eficiência do método mostrou que ele é possível.
Palavras-chave


1

Sistemas de Eventos Discretos, Controladores Programáveis, Diagramas Binários de Deci-

Introdução

Hoje em dia é comum o uso de Controladores Lógico Programáveis (Programmable Logic Controller - PLC) na automação das mais variadas plantas industriais, sejam elas químicas, metalúrgicas,
mineradoras, refinarias, entre outras, para soluções de problemas de controle seqencial, caracterizados principalmente por sua natureza digital.
Como podemos ver na Figura 1, temos em um
sistema_de_controle seqencial dois sub-sistemas
bem definidos o controlador e a planta. A planta
é o sistema que estamos querendo controlar. Dela
o controlador recebe informações como valores digitais de variáveis medidas, tais como sinais de
sensores de fim de curso, sensores de presença,
chaves liga-desliga, e processando essas informações, o controlador toma decisões e responde apropriadamente injetando energia eou informação
com atuadores adequados. O controlador, por sua
vez, poderá também receber informações que não
venham diretamente da planta, podendo ter outra origem, como um sistema_supervisório ou um
operador. Apesar de termos papéis bem definidos
entre a planta e o controlador, ambos fazem parte
de um mesmo sistema que é formado por dois subsistemas reativos que se comunicam. Exceto em
casos muito simples, não é possível compreendermos o funcionamento de um sem que tenhamos
que compreender o funcionamento do outro.
O controlador pode ser implementado com várias ferramentas diferentes, como relés ou contatores, circuitos microcontrolados construídos sobmedida, software executado em um computador
que faça uso de um sistema operacional em tempo

Figura 1 O Controlador e a planta
real ou PLCs. Assim, podemos dizer que os PLCs
são uma ferramenta de implementação de controladores_digitais, e são, no momento, os mais utilizados.
No ano de 2003, a norma IEC 6113-1 padronizou 5 linguagens a serem utilizadas na programação de PLCs o Diagrama Ladder (LD), Gráfico de
Funções Seqenciais (SFC - cuja especificação vem
do grafcet), Texto Estruturado (ST), Diagrama de
Blocos de Funções (FBD) e a Lista de Instruções
(IL). Além do alcance desta norma, podemos citar outras ferramentas para modelagem_de_sistemas_de_controle seqencial, como o diagrama de
estados, as redes de Petri e a linguagem PLSL.
O diagrama_ladder é basicamente uma adaptação do antigo diagrama de contatos usados na
indústria antes do aparecimento dos PLCs. Esta
adaptação foi feita para facilitar a migração dos
controladores baseados em diagramas de relés
para os baseados em PLCs. Ainda hoje muitos

1749

pois descreve como o controlador seria implementado com relés e não o seu funcionamento, como
é possível com outras representações de funcionamento de controladores sequenciais.
Vários trabalhos na literatura levantaram limitações do uso do diagrama_ladder na programação de PLCs, tais como os de (MengChu Zhou,
1995) e (Kurapati Venkatesh, 1994). Outros
trabalhos, como o de (Albert Falcione, 1993),
(Wareham, 1988), (Denavathan, 1990), confirmaram as deficiências do diagrama_ladder. Dentre
algumas destas limitações, destacam-se a complexidade de projeto. (Kurapati Venkatesh, 1994)
apontaram duas características do diagrama_ladder que influenciam a complexidade de projeto
de um programa a complexidade gráfica e a dificuldade de adaptação ? novas especificações. A
complexidade gráfica de um diagrama_ladder aumenta consideravelmente com o aumento do sistema. Além disso, modificações na especificação
provocam grandes modificações no diagrama_ladder. Além disso, (Kurapati Venkatesh, 1994) constataram que o diagrama_ladder não possui simbologia para representar conceitos como condições,
status, atividades, informação, fluxo e recursos de
forma explícita. O problema fica ainda mais sério quando a complexidade dos sistemas aumenta,
seja por causa do tamanho do sistema ou devido
a outros fatores técnicos como problemas de concorrência, etc. Para sistemas mais complexos, dar
manutenção em um programa escrito usando-se o
diagrama_ladder é algo extremamente difícil, até
mesmo para os profissionais mais bem preparados

Figura 2 Um sistema_de_corte de peças

Figura 3 Exemplo de um diagrama_ladder
controladores industriais complexos são descritos
usando diagramas ladder.
Um exemplo de uma planta que pode ser
controlada por PLC está ilustrado na Figura 2.
Quando uma placa de aço passa sobre x, o pistão
comprime a placa, cortando-a, e a seguir levanta.
Uma linguagem que pode ser utilizada para programar o PLC é o diagrama_ladder. O diagrama
ladder de controle desta planta está ilustrado na
Figura 3. Nela, o símbolo da primeira malha com
endereço x é um exemplo de um contato normalmente aberto, o qual sendo ativado, fecha. O símbolo da primeira malha com endereço sv+ é um
exemplo de um contato normalmente fechado, o
qual sendo ativado, abre. Os círculos presentes em
todas as malhas são os equivalentes as bobinas de
relés que uma vez acionadas fecham os contatos
normalmente abertos (NA) e abrem os contatos
normalmente fechados (NF).
Entretanto, o diagrama_ladder não é a melhor
linguagem para especificarmos a lógica de um sistema_de_controle seqencial. Um dos principais
problemas deste diagrama é a legibilidade. Por
exemplo, olhando apenas para a Figura 3, vemos
que pode ocorrer uma transição da malha 1 para
a malha 2 quando a entrada sv+ for ativada. Porém, também ocorre uma transição da malha 2
para a malha 1 quando a entrada x é acionada,
e não existe nada no diagrama_ladder que possa
nos levar a concluir isso, a menos que conheçamos
a planta.
Assim, compreender um diagrama_ladder de
uma planta complexa é algo extremamente difícil, até mesmo para os profissionais especializados,

Muitas das plantas existentes na indústria são
enormes, e consequentemente a complexidade dos
seus respectivos controladores. Assim, construir
um novo controlador dessas plantas a partir do
zero usando uma nova linguagem seria um grande
desperdício do trabalho de desenvolvimento já realizado, pois estes controladores foram efetivamente testados e com funcionamento correto há
anos.
Caso optássemos por refazer todo o sistema,
levaria algum tempo para o programa ser testado, ou seja, nós perderíamos a confiabilidade
que já está implementada nos antigos diagramas
ladder. Caso seja feita a engenharia reversa, esta
confiabilidade poderia em parte ser aproveitada.
Como confiabilidade é algo extremamente importante em programas de PLCs de plantas industriais, podemos dizer que a engenharia reversa é
uma alternativa atraente. Outro fator motivador
da engenharia reversa é a redução de custos que
ela pode trazer, uma vez que com ela não é necessário refazer todo o sistema. (Pressman, 2002)
faz em seu trabalho uma reflexão da necessidade
da engenharia reversa em sistemas antigos e fala
da necessidade da automatização do processo de
engenharia reversa.

1750

2

Definição do Problema

partir de uma malha de um diagrama_ladder
em uma determinada situação, deveríamos
informar todas as outras malhas do sistema,
para que o mesmo selecionasse apenas as malhas em que pudessem ocorrer as transições
naquele instante. No entanto, após uma análise das malhas de um diagrama_ladder, poderíamos filtrar todas as possíveis transições
que poderão acontecer em um determinado
momento. Assim, uma quantidade muito menor de opções precisaria ser fornecida pelo especialista, uma vez que apenas as malhas que
poderão permitir que ocorra uma transição
na planta serão apresentadas ao especialista.
Além disso, apenas as informações relevantes
ao sub-processo do qual estamos extraindo o
fluxo de controle da planta serão necessárias,
mas não de todo o diagrama_ladder. Isto também reduz ainda mais a quantidade de opções
que serão apresentadas ao especialista. Além
disso, estas informações serão solicitadas utilizando uma interface_gráfica amigável, com
o especialista informando todos os dados necessários ao processo de conversão.

Devido a todos estes motivos, temos agora um
problema dada a implementação de um controlador representada em um diagrama_ladder, como
gerar a partir deste diagrama um diagrama grafcet
que implemente um controlador equivalente. Consideramos que dois controladores são equivalentes
se, para a mesma planta eles possuem o mesmo
funcionamento, ou seja, para um mesmo estado
inicial e para uma mesma seqência de valores de
variáveis de entrada eles respondem com a mesma
seqência de valores de variáveis de saída.
(Albert Falcione, 1993) e (Tadanao Zanma,
1999) propuseram técnicas de conversão de diagramas ladder em diagramas grafcet.
Já ,
(Gi Bum Lee, 1999) propuseram um método de
conversão de diagramas ladder em redes de Petri. No entanto, qualquer que seja o método utilizado, ele requererá algum tipo de informação sobre
a planta para que a conversão possa ser feita. O
algoritmo de (Albert Falcione, 1993) requer esta
informação sob a forma de um grafo de simultaneidade. Já o algoritmo de (Tadanao Zanma, 1999)
requer informações da planta, que deve ser escrita
em lógica temporal. (Gi Bum Lee, 1999) propõem que esta informação da planta seja dada na
forma de uma tabela de estados.
A nossa proposta é usar o conhecimento de
um especialista no processo, e após analise do diagrama descobrirmos as informações relevantes sobre a planta através de um questionamento ao especialista.
3

Desta forma, neste trabalho nós utilizamos o
método interativo para adicionar informações da
planta ao processo de conversão de diagramas ladder em diagramas grafcet, uma vez que ele aparenta requerer do especialista um esforço muito
menor.
4

Solução Proposta

Metodologia

Inicialmente o método não levará em consideração
os temporizadores e os blocos avançados do diagrama_ladder, o que será feito em trabalhos posteriores.
Para representarmos o diagrama_ladder, usamos uma representação em árvore de cada uma de
suas malhas. Podemos fazer cada bobina do diagrama_ladder representar um passo do diagrama
grafcet, após a confirmação do especialista. Associada a cada bobina do diagrama_ladder temos
uma expressão booleana. Uma ligação em paralelo no diagrama_ladder pode ser representada em
sua árvore como um nó do tipo or , enquanto que
uma ligação em série pode ser representada como
um nó and . Utilizando orientação_a_objetos, podemos representar os nós desta árvore como objetos polimórficos. Buscamos então utilizar uma
ferramenta adequada de manipulação de expressões booleanas, que possam ser construídas a partir destes objetos polimórficos. Como pode ser verificado no trabalho de (Bryant, 1986), os BDDs
são uma estrutura de dados eficiente de manipulação de expressões booleanas, a qual utilizamos.
Uma vez construídos os BDDs de cada uma
das malhas, fazendo a manipulação destes, podemos descobrir as expressões de ativação e desativa-

Precisamos de um método adequado para entrada
de grande quantidade de informações, uma vez
que as plantas na indústria são grandes. Também
precisamos evitar repetir o processo de conversão,
dado a tarefa ser trabalhosa. Temos duas alternativas
 Modelagem da planta poderíamos utilizar
algum tipo de diagrama ou linguagem para
descrever previamente o funcionamento da
planta e unirmos estas informações com a
descrição do controlador para que então pudéssemos converter um diagrama_ladder em
um diagrama grafcet. Levando em consideração o tamanho e a complexidade das plantas
existentes na indústria, as quais são o alvo
deste trabalho, entrar com estas informações
em um sistema de conversão pode requerer
um esforço muito grande, consumindo assim
tempo e dinheiro.
 Processo interativo Sem que fosse feita uma
análise preliminar do diagrama_ladder, se solicitássemos ao especialista que ele informasse
que transições poderiam ocorrer na planta a

1751

(a) Direita até a esteira A

(b) Direita até a esteira B

Figura 4 Sistema  de transferência de peças
ção de cada uma delas. Assim, fazendo uma análise destas expressões, podemos detectar as possíveis transições que podem acontecer entre cada
uma das malhas. Para isto, basta verificar se
existe o casamento de uma expressão de desativação de uma malha com a expressão de ativação de uma outra. Com isto, podemos eliminar
uma grande quantidade de possibilidades de casamento, uma vez que se fossem verificadas as
combinações entre todas as malhas, o número de
possibilidades seria muito maior. Assim, algumas
poucas informações precisam ser solicitadas ao especialista. Utilizamos assim um método interativo de obtenção destas informações, fazendo uso
de uma interface_gráfica amigável.
5

(c) Direita

(d) Vez de A

Resultados alcançados

(e) Esquerda

Utilizamos a metodologia proposta para a construção de um protótipo que a seguir foi utilizado
para converter o diagrama_ladder em um diagrama
grafcet de controle de uma planta de relativa complexidade. A planta utilizada é descrita neste
exemplo.
O sistema da Figura 4 possui duas esteiras
de chegada A e B, uma garra de pega G, alojada
em um carro sobre trilhos, dois cilindros pneumáticos P e V de liberação de peças e uma esteira
de evacuação C das mesmas. Seu funcionamento
consiste em verificar a presença de peça em uma
das esteiras de chegada, que será então pega pela
garra e transportada até a bandeja do cilindro V
já previamente na posição alta. A seguir, o cilindro V desce a peça até o nível do cilindro P que,
então, evacua a peça pela esteira C. O diagrama
ladder deve possuir um sistema de prioridade de
forma a não acumular peças em uma esteira.
O funcionamento do controlador da Figura 4
está ilustrado nas Figuras 5 e 6 usando diagramas.
Para o exemplo dado, usando o método interativo, com intervenção humana de um especialista não muito maduro, conseguimos produzir o
diagrama grafcet da Figura 7.

(f) Levantar

(g) Abaixar

(h) Empurrar

(i) Recuar

Figura 5 Movimentação dos carros e dos pistões
do sistema beta
1752

6

Análise da eficiência

O esforço computacional deste método é mais
acentuado durante a descoberta e remoção dos intertravamentos, durante a construção dos BDDs
de ativação e desativação de cada malha, e durante a detecção das possíveis transições entre as
malhas.
Durante a descoberta dos intertravamentos,
para cada uma das n malhas do diagrama_ladder,
verificamos se ela possui intertravamento com as
outras n  1 malhas. Chamemos de k1 a ordem
de complexidade de comparação entre cada par
de malhas. Assim, a complexidade computacional
deste passo será da ordem k1  O(n2 ). k1 é a
ordem do tempo gasto para consultarmos se uma
variável pertence a um BDD, sendo da ordem de
O(n2 ), onde n2 é o número de variáveis do BDD
(Bryant, 1986), mais a ordem do tempo gasto para
eliminarmos o intertravamento, O(G  logG),
onde G é o número de vértices do BDD. Resumindo, temos para a complexidade do passo 3
uma ordem de O(GlogG)+O(n2 )O(n2 ).
Na prática, esta ordem de complexidade não é crítica, uma vez que o tamanho dos BDDs a serem
manipulados é pequeno, fazendo com que a complexidade O(n2 ) se sobressaia sobre as demais,
a qual é satisfatória até mesmo para grandes pla
ntas industriais.
Durante a construção dos BDDs de ativação
de desativação de cada uma das malhas, processaremos todas as n malhas. Assim, o tempo de
resposta deste passo será da ordem de O(n)  k2 ,
onde k2 será a ordem do tempo necessário para o
sistema construir as expressões de ativação e desativação, utilizando operações apply e restrict. A
função apply possui complexidade O(G1   G2 ),
onde G1  e G2  representam o número de nós
dos BDDs 1 e 2, respectivamente (Bryant, 1986).
A função restrict possui complexidade O(G 
logG) (Bryant, 1986), mais uma operação not,
de complexidade O(G). Assim, temos que a
complexidade computacional deste passo possui
ordem de O(n)  O(G  logG + O(G) +
O(G1   G2). Na prática, esta ordem de complexidade também não é crítica.
Durante a detecção dos sequenciamentos entre as malhas, o sistema irá interagir com o especialista para cada uma das n malhas do sistema.
Para cada uma delas, o sistema analisará as outras
n  1 malhas a fim encontrar as possíveis transições a serem confirmadas. Uma vez que o sistema
interage com o especialista n vezes, o tempo de
resposta para cada uma destas n interações será
proporcional a O(n)  k3 , onde k3 é ordem de
complexidade de comparação entre cada par de
malhas. k3 é a ordem do tempo gasto para verificarmos se um cubo ou sub-cubo do BDD de
desativação da malha i é cubo ou sub-cubo do
BDD de ativação da malha j. Para isto, encontra-

(a) Pegar

(b) Soltar

Figura 6 Funcionamento da garra do sistema beta

Figura 7 Diagrama grafcet do sistema beta

1753

Referências

mos as variáveis que são comuns entre estes dois
BDDs, com complexidade O(n2  n3 ), onde n2 e
n3 são o número de variáveis dos BDDs de desativação e ativação, respectivamente, mais a ordem
do tempo de casamento entre cada um destes cubos, O(n4  log(n4 )  Sf1  + Sf2 ), onde n4 é
o número de variáveis comuns e Sf1  e Sf2  são
o número de cubos dos BDDs de desativação e ativação, respectivamente (Bryant, 1986). Utilizamos backtracking neste algoritmo para aumentar
a sua eficiência. Assim, temos que a complexidade computacional deste passo possui ordem de
O(n)  O(n2  n3 ) + O(n4  log(n4 )  Sf1  +
Sf2 ). Na prática, esta complexidade também
não é crítica.

Albert Falcione, B. H. K. (1993). Design recovery
for relay ladder logic, IEEE Control Systems
Magazine 13(2) 9098.
Bryant, R. E. (1986). Graph-based algorithms for
boolean function manipulation., IEEE Transactions on Computers. 35(8) 677691.
Denavathan, R. (1990). Computer aided design
of relay ladder diagram from functional specifications, 16th Annual Conference of IEEE
Industrial Electronics Society .
Gi Bum Lee, J. S. L. (1999). Conversion of ladder diagram into petri nets, Proceedings of
the IASTED International Conference, ROBOTICS and APPLICATIONS.

Com este pré-processamento, o sistema apresenta ao especialista um número reduzido de possíveis transições a serem confirmadas. Além disso,
em um diagrama_ladder de n malhas, no pior caso,
o especialista precisaria interagir com o sistema
n vezes. No entanto, as plantas industriais de
grande porte são formadas por sub-sistemas menores. Na prática, isto faz com que o especialista
interaja com o sistema apenas m vezes, onde m é
o número de malhas do sub-sistema em questão, e
na maior parte dos casos, m é bem menor do que
n.

7

Kurapati Venkatesh, MengChu Zhou, J. R. C.
(1994). Comparing ladder logic diagrams
and petri nets for sequence controller design through a discrete manufacturing system, IEEE Transactions on Industrial Eletronics 41(6) 611619.
MengChu Zhou, E. T. (1995). A comparison
of relay ladder logic programming and petri
net approach for sequential industrial control
systems, Proceedings of the 4th IEEE Conference on Control Applications.

Conclusão

Pressman, R. S. (2002). Engenharia de Software,
quinta edição edn, McGraw-Hill.

Mostramos neste artigo que o método interativo
de recuperação de diagramas grafcet e do fluxo
de controle do processo da planta a partir de um
diagrama_ladder é possível. Com a implementação
de um protótipo usando BDDs foi possível mostrar
que este método pode ser usado com eficiência e
praticidade para extração do fluxo de controle do
processo da planta a partir de diagramas ladder
de relativa complexidade.

Tadanao Zanma, Tatsuya Suzuki, A. I. e. S. O.
(1999). Transformation algorithm from ladder diagram to sfc using temporal logic, Electrial Enginnering in Japan 129(1) 7481.
Wareham, R. (1988). Ladder diagram and sequential function chart Languages in programmable controllers, Fourth Annual Canadian
Programmable Control and Automation Technology Conference and Exhibition Conference Proceedings .

Ao contrário dos outros métodos, a vantagem
deste é a facilidade com que as informações que
faltam no diagrama_ladder são solicitadas ao especialista, podendo trazer benefícios como economia de tempo e dinheiro. Ao especialista não é
necessário grande conhecimento da planta, pois o
método facilita muito o trabalho de converão.
O Diagrama grafcet recuperado a partir do
diagrama_ladder usando o protótipo foi considerado logicamente equivalente ao diagrama_ladder
inicial, pois ambos os diagramas, para um mesmo
estado inicial, e para a mesma seqência esperada
de eventos de entrada, geraram a mesma seqência
esperada de eventos de saída. Como esta é uma
funcionalidade que os controladores_programáveis
ainda não possuem, acreditamos que esta é uma
importante contribuição para a área de sistemas
de automação_industrial.

1754