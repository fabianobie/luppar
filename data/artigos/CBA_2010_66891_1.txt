XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

IMPLEMENTAÇÃO DE UM CONTROLADOR FUZZY-PID EM FPGA DOTADO DE PROCESSADOR NIOS II
LUIS HENRIQUE G. CORBELINO, EDSON A. BATISTA, RAPHAEL C. GOMEZ, CRISTIANO QUEVEDO, LUCIANA C.
LEITE , ALEXANDRE CÉSAR R. DA SILVA

Laboratório , Departamento de Engenharia Elétrica,Universidade Federal de Mato Grosso do Sul Cidade
Universitária,Caixa Postal 549, CEP 79070-900,Campo Grande,MS,Brasil
Laboratório de Controle e Automação, Departamento de Engenharia, Universidade Catolica Dom Bosco
Av.Tamandare 6000,79117-900 Campo Grande,MS,Brasil
Abstract In this paper its developed an embedded system using FPGA technology with a NIOS II processor, to implement
the control technique of Fuzzy-PID. This application has as main objective to generate data to become viable the industrial automation with reconfigurable controllers, besides being a Fuzzy-PID controller platform. It possible to observe that the use of the
NIOS II processor in this paper is an attractive tool to develop control techniques for embedded_systems.
Keywords PID, NIOS II, FPGA, Fuzzy, Embedded device.
Resumo Neste trabalho é proposto o desenvolvimento de um sistema_embarcado utilizando FPGA, o qual é proposto de um
processador NIOS II, para implementação de um controlador Fuzzy PID. Esta aplicação tem como principal objetivo, gerar resultados para viabilizar a automação_industrial utilizando controladores reconfiguráveis, além de ser uma plataforma de controle
FuzzyPID. Observou-se neste trabalho que a utilização do processador NIOS II é uma ferramenta atrativa para desenvolver
técnicas de controle para sistemas embarcado. Por fim é apresentado um exemplo de aplicação para ilustrar a viabilidade e
potencialidade da metodologia proposta.
Palavras chave .

1

te neste segmento são os dispositivos reconfiguráveis, ou popularmente chamado de FPGA (Field
Programmable Gate Arrays).
O FPGA é um dispositivo que proporciona rápida prototipagem e o desenvolvimento do hardware
utilizando sistema padronizado. O hardware pode ser
desenvolvido em VHDL (Very High Speed Integrated Circuits Hardware Description Lan) ou Verilog.
Diversas empresas e centros de pesquisas vem
desenvolvendo projetos para maior aplicabilidade
dos FPGAs, como por exemplo, Altera, National
Instruments, Xilinx, Lattice, QuickLogic e Achronix.
A National Instruments vem desenvolvendo um
módulo denominado PAC (Programmable Automation Controller). O PAC é uma ótima alternativa disponível no mercado, pois possui a arquitetura altamente configurável do FPGA e expansibilidade de
um CLP.
Neste artigo descreve-se um algoritmo para utilização da técnica de Fuzzy-PID implementado em
FPGA com processador NIOS II da Altera Corporation.
O trabalho está organizado da seguinte forma
Na Seção 2 apresenta-se o método de controladores
Fuzzy-PID. Na Seção 3 descreve-se sobre o hardware desenvolvido em FPGA com processador NIOS II
para testar as funções do Fuzzy-PID. Na Seção 4
apresenta-se as simulações do sistema controlado
utilizando MATLAB com o auxilio do SIMULINK.
Na Seção 5 descreve-se a inserção do algoritmo de
controle Fuzzy-PID no processador NIOS II.

Introdução

Com a revolução industrial surgiu a necessidade de
se controlar processos que se tornavam cada vez
mais complexos. Para viabilizar o controle destes
processos, o projetista da área de instrumentação e
engenheiros em automação, utilizam técnicas de
controle_avançado e hardware com bom desempenho
no processamento de informações. Entre as técnicas
de controle mais utilizados na indústria estão os
Proporcionais Integrativo e Derivativos (PID) 3.
Consequentemente o projeto_de_controladores PID
podem ser realizados através de algoritmo de sintonia, como por exemplo, Fuzzy, Ziegler-Nichols, Redes
Neurais, Algoritmo Genético, relé realimentado etc.
A modelagem de plantas nem sempre é possível
e, portanto, dificulta-se o projeto_de_controladores.
Neste caso, utiliza-se métodos heurísticos para projetar algoritmos de controle. O método heurístico é
simples obter informação para o desenvolvimento do
controlador, pois, baseia-se em responder perguntas
como, se estiver assim então faço aquilo. Neste
segmento surgi o controlador Fuzzy, o qual se baseia
em regras geradas a partir de como o operador altera
a entrada de um sistema para obter a resposta desejada 1.
Outro fator a ser analisado em um sistema de
controle são os hardwares utilizados para executar os
métodos controle, como os Controladores Lógicos
Programáveis (CLPs), microcontroladores e os dispositivos reconfiguráveis. Uma tecnologia emergen-

4452

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Tabela 1. Regras de inferência de um controlador
Fuzzy-PID

Figura 1. Funções de pertinência
E

NL
NM
NS
Z
PS
PM
PL

NL
Z
NS
NM
NL
NL
NL
NL

NM
PS
Z
NS
NM
NL
NL
NL


NS
PM
PS
Z
NS
NM
NL
NL

Z
PL
NM
PS
Z
PS
PM
PL

PS
PL
PL
PM
PS
Z
NS
NM

PM
PL
PL
PL
PM
PS
Z
NS

PL
PL
PL
PL
PL
PM
PS
Z

Tabela 2. Regras de inferência de um controlador
Fuzzy-PI
Figura 2. Controlador Fuzzy PI+D

E

NL
NM
NS
Z
PS
PM
PL

NL

NM


NS

NL

NM

NS

Z
NL
NM
NS
Z
PS
PM
PL

PS

PM

PL

PS

PM

PL

n

 e( k )
k 0

Figura 3. Superfície de controle Fuzzy PI.

2

Controlador Fuzzy-PID

Controladores PIDs em definição são compostos de
um termo proporcional, um termo integrativo e outro
derivativo como apresenta-se na equação 1.

GC (t )  K p  e(t )  K i   e(t )  K d 

de(t )
dt

(1)

Como em dispositivos embarcados trabalha-se
de forma discreta obtém-se a equação 2.




T n
Gc(k )  K C  e(k )    e(k )  d  e(k )  e(k  1)
 i k 0
T



(2)

Nos controladores Fuzzy cada regra depende da
combinação das entradas para gerar uma saída. Um
controlador Fuzzy-PID tem como entradas o

. A saída do controlador é
somatória do erro
dado pela defuzzyficação das regras de inferência
que dependem da função de pertinência e estas dependem das entradas. 1 3
As funções de pertinência são parâmetros que
fazem parte do processo de fuzificação e defuzificação. Assim considerando Input como variável de
entrada podemos construir a seguinte regra para
aplicação do controlador Fuzzy Se Input>-0.334 e
Input<0.334 Então Input é Z, assim como pode ser
observado na Figura 1, onde o eixo x é a variável de
entrada e o eixo y é a contribuição da variável Fuzzy.
Em um controlador Fuzzy-PID a quantidade de
funções de pertinência aumentam a precisão do controlador, entretanto isso também aumenta a quantidade de regras, como por exemplo, em um sistema de 7
funções de pertinência com 3 entradas possuirá um
total de 343 regras de inferência, esta grande quantidade de regras aumenta a complexidade e o tamanho
do programa a ser desenvolvido.1 Para evitar este
fator existem alguns meios, como fazer um PD Fuzzy
+ I ou PI Fuzzy + D, onde a quantidade de regras é
menor 2.
Na Tabela 1 mostra-se quantidade de regras de
um controlador Fuzzy-PID e na Tabela 2 demonstrase as regras responsáveis por um controlador FuzzyPI.

e(k )
2.1 Controlador Fuzzy PI+D

(e(k )  e(k  1))
Ts
erro, a variação do erro
e a

Neste trabalho utilizou-se o método de controle do
tipo Fuzzy PI+D. O desenvolvimento de um controlador Fuzzy PI+D, é realizado com a modelagem de

4453

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Figura 6. Resposta do sistema
Figura 4. Arquitetura de hardware

Figura 5. Planta para simulação
Tabela 3. Recursos utilizado no hardware prototipado.
Figura 7. Elementos presentes no hardware
Total
Logic

Dedicated

Memory

Total de

Logic

Bit

Pins

Register
Elements
13

7

14

13

um controlador Fuzzy-PI com as regras da Tabela 3 e
depois acrescentado um controlador derivativo como
pode se observar na Figura 2, e na Equação 32.

u(k )  uPI (k )  uD (k )

(3)
Na Figura 3 está representado a superfície gerada em função das regras de controle do controlador
Fuzzy-PI, sendo que no eixo E observa-se a variação
do erro na entrada do controlador, em dE tem-se a
variação da derivada do erro que também é uma
entrada desse controlador , e a variação da saída do
controlador é mostrada no eixo output.
3 Hardware de Controle - FPGA
Para testar a técnica de controle proposta neste trabalho utilizou-se a placa DE2 da fabricante Altera. Esta
placa contém um EP2C35F672C6, da série
CYCLONE II, que são FGPAs de baixo_custo.
Como o hardware desenvolvido neste trabalho
possui um processador NIOS II, faz se necessário
utilizar a ferramenta SOPC Builder. Para gerar um
hardware utilizando o SOPC Builder, é necessário
iniciar um projeto no Quartus II pelo modo gráfico e
em seguida solicitar o auxílio do SOPC. No SOPC
Builder pode-se gerar um módulo em VHDL ou
Verilog, que pode ser instanciado como as MegaFunctions da Altera.
No SOPC Builder o projetista pode gerar um
hardware em alto nível de abstração, porém é neces4454

sário ter conhecimento das conexões existentes entre
sistemas_de_controle, barramento Avalon e periféricos e as configurações de todos os dispositivos utilizados no projeto.
O hardware utilizado neste projeto é composto
basicamente por
 cpu - um processador NIOS II de 50 MHz
(Frequência default do processador)
 sdram - SDRAM de 8 Mbytes (para a alocação do programa do cpu)
 sysid - um sistema de identificação de periféricos.
 jtaguart - uma porta de saída para utilização de USB.(utilizada para a configuração
do FPGA)
 gpio - uma porta de 8 pinos de entrada. (
porta por onde recebe os dados, de um converdor AD)
 gpio - porta de saída de 8 pinos(porta pela
qual o controle é enviado para a planta).
Os principais componentes são selecionados e
configurados no SOPC Builder e posteriormente são
acoplados aos periféricos no QUARTUS II. Com a
geração do hardware no SOPC Builder e a compilação no Quartus II, o módulo embarcado está pronto
para receber a lógica de operação. A lógica de operação é programada em linguagem CC++ no ambiente
NIOS II IDE. Na Figura 4 pode-se observar a arquitetura de hardware do FPGA, com respectivos IO.
Os recursos utilizados para desenvolver o hardware (dispositivo embarcado) apresentado na Figura
4, são apresentados na Tabela 3.

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Figura 10. Código da função principal

Figura 8. Descrição da biblioteca fuzzypid.h.

Figura 9. Biblioteca e Variáveis

4 Simulação do Fuzzy-PID
Para comparar os controladores tanto no período
transitório quanto em regime e para ajustar os ganhos
para o melhor desempenho do Fuzzy-PID, simulações dos métodos de controle PID e Fuzzy-PID foram realizadas utilizando a planta ilustrada na Figura
5.
Na Figura 6 está representada a resposta da função_de_transferência da equação da Figura 5 a entrada
randômica, este tipo de entrada foi escolhida para
que o desempenho dos controladores seja melhor
observado.

Figura 11. Função do Controlador
fuzzypid.h, foi devidamente gerada e disponibilizada no Select Project Template, permitindo que projetistas façam as modificações conforme a necessidade.
Na Figura 8 pode-se observar a descrição da biblioteca Fuzzy-PID desenvolvida neste trabalho.
Levando em consideração que as funções de pertinências podem ser interpretadas como duas retas,
uma crescente e outra decrescente. Algumas matrizes
foram criadas como pode ser observado na Figura 9,
essas matrizes contém os pontos que as retas, que
compõem cada função de pertinência, interceptam o
eixo x e em que a função é máxima, ou seja, em 1.
Valores esse que são vistos na Figura 1.
Na função principal do programa, como pode ser
visto na Figura 10 os dados são recebidos através da
variável DATAIN, e chamada a função fuzzyc, que
é responsável por todo o processo de controle.
Como a obtenção de dados do FPGA utilizado é
digital, conversores AD e DA foram necessários
para a conversão de volts em bits e vice versa. Conversão do dado recebido, e também do enviado, é
necessário para que o controlador possa funcionar,
ou seja, o erro sendo 0xFF hexa para o FPGA significa 369 volts e 0x00 é 0 volts.
No Figura 11 está parte da função que realiza o
trabalho do controlador_fuzzy, que é chamada do
programa principal, e uma das regras do controlador,
neste trecho também já é feito o cálculo da área da

5 Fuzzy-PID - FPGA
A implementação do controlador Fuzzy-PID no
FPGA, se da através da programação do processador
NIOS II, dos seguintes elementos entrada, derivador,
fuzzificador, funções de pertinência, regras de inferência, defuzzificador e somador, como pode ser
observado na Figura 7.
A configuração do processador NIOS II, presente no FPGA é feita através do software NIOSII IDE.
O NIOS II IDE permite realizar a programação utilizando a linguagem CC++, facilitando a geração de
algoritmos complexos neste tipo de SoC (Systems
only Chip).
Com intuito de facilitar o projeto_de_controladores do tipo Fuzzy-PID, neste trabalho desenvolveu-se
uma biblioteca específica para a programação do
processador NIOS II. Está biblioteca, denominada de
4455

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

4 Jingyi, W. and Yinhai, F.A Fuzzy PID Controller for Ship Course Based on Engineering Tuning Methods.
5 Zeng,J. , Xie,Y. , Cheng,L. (2008). Design of
Main Steam Temperature Cascade Control System Based on Fuzzy Self-tuning PID Controller.

Figura 12. Defuzificação pelo COA

6 Guili, Y. , Jizhen, L. , Wen,T., Xiangjie
L.(2007). Research and Applications of fuzzy
immune PID control in the load-control of tube
mill.
7 Weiguo, L. , Shounjun, S. (2006). Application
of Fuzzy Control in Switched Reluctance Motor
Speed Regulating System.
8 Zeng, J., Xie Y., Chen, L.(2008). Design of Main
Steam Temperature Cascade Control System
Based on Fuzzy Self-tuning PID Controller.
9 Xiao, L., Zhenhuan, C.(2008). Fuzzy Immune
Control for Shields Earth-Pressure-Balance
Simulation System.
10 Página da web <www.altera.comliteraturelitindex.html> acessada em 06 de abril de 2009.

função de pertinência, para posteriormente fazer
defuzzificação.
O processo de defuzzificação adotado é o do
centro da área (COA), que é calculado a partir da
Equação 4 e pode ser observado no código da Figura
12, onde pode ser observado também o somatório das
saídas do controlador, anteriores e a atual, com a
derivada do erro, caracterizando o controlador Fuzzy
PI+D.
N

u

X
i 0

cg

.areai 

N

 areai

(4)

i 0

Conclusão
A utilização de FPGA para a implementação de controladores Fuzzy-PID é um método rápido, e de fácil
alteração, uma vez que ambos os processos, tanto o
de programação do processador como na prototipagem em FPGA. A utilização de FPGA na automação
industrial ainda é emergente, desta forma, os resultados apresentados neste trabalho podem servir como
base para aplicabilidade real. Neste aspecto a biblioteca fuzzypid.h desenvolvida neste trabalho possui
funções que permitem aos engenheiros de controle e
automação, a implementação do algoritmo
FuzzyPID, em FPGA. Como os recursos utilizados
do FPGA e na programação do processador foram
baixo, comparado com a capacidade do Cyclone II,
pode-se inserir outra técnicas de controle e aumentar
a quantidade de IO.
Desta forma, o presente trabalho pode ser utilizado em diversas plantas sem alterações significativas.

Referências Bibliográficas
1 Shaw, I. S. and Simões M. G. (1999). Controle e
Modelagem Fuzzy, Edgarrd Blcher.
2 Petrov, M. , Ganchev, I.,Dragotnov, I.. Design
Aspects of Fuzzy PID Control.

3 Economakos, G. and Economakos C. A RunTime Reconfigurable Fuzzy PID Controller Based on Modern FPGA Devices.

4456