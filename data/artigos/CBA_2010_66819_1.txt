XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

A TASK ALLOCATION PROTOCOL BASED ON CONSTRAINT FUNCTIONS
Pedro Mitsuo Shiroma, Mario F. M. Campos


Departamento de Ciencia da Computacao
Universidade Federal de Minas Gerais
Belo Horizonte, MG, Brasil

Emails pshiroma@dcc.ufmg.br, mario@dcc.ufmg.br
Abstract Mobile robots are acquiring an active role in human society. However, in order to achieve a
deeper impact several problems must be properly solved. Among them, the multi-robot task allocation (MRTA)
problem has received a growing interest. This papers proposes a new protocol for the MRTA problem based
on constraint functions. Robot capabilities are modelled as actions, and coalition of actions are automatically
formed to perform each task. Each action defines a set of constraint functions which are used to evaluate if an
action can allocate the required resources to be executed as expected. Experimental results validate the proposed
protocol and shows its capacity to allocate multiple tasks to the same robot.
Keywords

Multi-robot task allocation, robot coordination, mobile robots.

Resumo Robos moveis estao adquirindo um papel cada vez mais ativo dentro da sociedade humana. Entretanto, para que este papel torne-se significativo diversos problemas devem ser resolvidos adequadamente. Dentre
eles, destaca-se o problema de alocacao de tarefas a multiplos robos. Este artigo propoe um novo protocolo para
alocacao de tarefas baseado no conceito de funcoes de restricao. As capacidades de cada robo sao modelados
como acoes, e uma coalizacao de acoes e formada automaticamente para executar cada tarefa. Cada acao define
um conjunto de funcoes de restricao que sao utilizadas para determinar se os agentes envolvidos possuem os recursos necessarios para que a acao execute conforme esperado. Resultados experimentais comprovam a validade
do protocolo proposto bem como a capacidade de alocar multiplas tarefas para um mesmo robo.
Palavras-chave

.

INTRODUCTION

single-task robots (ST)  robots able to execute at
most one task at a time, and multi-task robots
(MT)  robots capable of executing more than
one task concurrently single-robot tasks (SR) and
multi-robot tasks (MR) and instantaneous
assignment (IA) or time-extended assignment
(TA). This work can be classified as a MT-MR-IA
approach.
Behaviour-based approaches uses intentional
cooperation and were the predecessors of most of
current works in MRTA. In ALLIANCE (Parker,
1998) a set of behaviors is manually selected to
perform a task, and impatience and acquiescence
attributes are used to trigger the process of taking over tasks from other robots or giving up ones
own current task. In Chaimowicz et al. (2002) the
task allocation problem is modelled as a hybrid
automaton. Task assignment is treated as discrete
events and controllers are represented as continuous states. Therefore, it can potentially share the
benefits of formal analytical machinery developed
for hybrid automata.
Schema theory is an organized way to aggregate several concepts present on behaviour-based
architectures using the object-oriented programming paradigm. They are the basic unit from
which complex actions can be constructed and
can be classified as perceptual, motor, and communication schemas. (Shehory and Kraus, 1998)
conducted theoretical studies in coalition formation of software schemas and were the basis of current works like ASyMTRe (Parker and
Tang, 2006), where robot capabilities are mod-

Mobile robots are gradually becoming ubiquitous
in modern society, and currently can be found
executing tasks like elderly caring, environment
cleaning, transportation, among others. As robots
become more common, they will frequently be
found executing their tasks in the same environment. Therefore, in a scenario with multiple heterogeneous robots, the ability to share resources
will be crucial to increase aspects like robustness,
fault tolerance, performance and others. Additionally, complex tasks can require the coordination of multiple robots to be accomplished, like
capture a target, transport a large object or move
an object through a door.
The full potential of multi-robot systems can
be achieved if, among others, we properly solve
the multi-robot task allocation (MRTA) problem.
However, in a realistic scenario, new robots can
be dynamically inserted while other robots can
exit or fail. Moreover, their capabilities are not
know a priori, and therefore the task allocator
must be able to handle the dynamical insertion
and removal of heterogeneous robots when forming the teams.
The complex design of modern robots with
several sensors and actuators allow the robots to
potentially execute multiple tasks simultaneously.
However, in order to achieve this ability the conflicting resources must be properly shared. In
(Gerkey and Mataric, 2004) a taxonomy to characterize the MRTA architectures classified them as

4998

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

elled as schemas, and coalitions of schemas are automatically formed to tackle a given task Timeextended assignments were include in Tang and
Saha (2008), where the problem is reduced to the
Set Partitioning Problem, although robots are allowed to participate at most on one partition.
RACHNA (Vig and Adams, 2007) uses a market based approach where robot capabilities are
modelled as vector of real numbers which are
matched against a vector of task requirements.
According to Vig and Adams (2006), a large number of works developed in MAS cannot be directly transferred to multi-robot scenarios, because they do not consider restrictions arising
with real robots, like losses communication, device
failure, situated agents, dynamical environments,
and non-transferability of resources. Jones et al.
(2007) presents another marked based approach
for oversubscribed domains, i.e., scenarios where
the number of robots is greater than the number
of tasks. A support vector is used to predict when
a new task is more likely to be inserted. A distributed polynomial time algorithm for task allocation were proposed by (Michael et al., 2008) assuming, however, a team of homogeneous robots.
In this paper we details the constraint function concept presented in the CoMutaR framework (Shiroma and Campos, 2009).
The multi-robot task allocation problem can
be defined as Given R  r1 , r2 , ..., rm , a
set of m heterogeneous mobile robots, T 
t1 , t2 , ..., tp , a set of p tasks to be executed,
which can be randomly inserted. Let i  R be a
team of robots, and R  2R be the set of all teams
of robots that can be formed. The MRTA problem can be stated as to find a function A  T 7 R
such that A(tk ) is a team of robots capable of performing the task tk .
2

determine the amount of resources required to be
executed properly.
The definition of robot capabilities as a set
of independent actions or schemas, similarly to
(Parker and Tang, 2006 Vig and Adams, 2006),
make it possible to transparently handle failures.
When an action fails, only actions depending on
its outputs are affected. Therefore, if another action, which could be at any other robot, is able to
provide the same information of the fault action,
then we can automatically switch the connection
after proper reconfiguration.
The main different between action and
schemas is the ability to determine the amount
of resources required to execute as expected. This
means that, even if all inputs are available, an
action will only be allowed to start if it can also
allocate the required resources. Schema-based approaches only checks for the inputs to determine
if they can be activated.
We name those resources having a maximum
available amount as share-restricted resources.
For instance, processor intensive algorithms like
visual-based pattern recognition and 3D SLAM,
or a trajectory controller for a highly dynamic and
complex robot cannot be executed simultaneously,
because their execution rates will decrease causing
a degradation on their expected behaviour. We
define these resources as
Definition 2 A share-restricted resource k,l  is
any property in the environment (if k  0) or in a
robot (if k > 0) that cannot be freely shared among
the actions.
Examples of share-restricted resources are
robot allowed configuration space, robot power
supply, communication channel, and processor.
For each share-restricted resource k,l , we associate a codomain k,l C which measures the availability of shared-resource k,l . Moreover, the
maximum capacity that each share-restricted resource has is denoted as k,l max . For instance,
k,l
max for communication channel is the maximum bandwidth allowed by the communication
device and therefore the codomain is the set of
real numbers (C  ). Another important resource is the allowed c-space. Similarly to what
is done in the obstacle c-space, we classify each
configuration in the allowed c-space relative to its
impact in the action progress. The allowed c-space
is also used to chose the next configuration, and
consequently the robot velocities, in the next time
frame. Thus, the codomain is the Special Euclidean space (SE(2) for planar robots or SE(3)
for non-planar robots). This approach differs from
related works where the output of all active motor
schemas are summed, normalized, and the resulting value is expected to satisfy all schemas.

METHODOLOGY

In this section we describe the main modules of
the CoMutaR framework (Shiroma and Campos,
2009), a solution to the MRTA problem.
2.1

Action

Robot capabilities or skills, such as read laser, detect obstacles, avoid obstacles, push box are modelled as actions which are, to some extent, similar
to the schema concept (Arkin, 1987). An action
can produce data by directly reading from a sensor or transforming one information into another,
like a range-data to a list of obstacles. Notice that
a robot can possess actions requiring inputs that
are not produced by the robot. More formally
Definition 1 An action ai,j is any computational
module in ri that can either produce data, consume data, or accomplish a task and is able to

4999

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

The linkage between actions and sharerestricted resource is captured by the constraint
function concept

are summed in the evaluation of the constraint
function. An action which is capturing images
from an area and sending it to an user will define the constraint function as the data rate multiplied by the image size. Operator     7
true, f alse is defined as less or equal and the
     7  operator is defined simply as the
algebraic sum.
For example, if an action ai,1 requires data
size of 100 Kbits at a rate of 100 samplessec
(totalizing 10Mbs), action ai,2 requires 40 Mbs,
and action ai,3 demands 30Mbs, and the maximum bandwidth, max , is 100M bs, then actions
ai,1 , ai,2 and ai,3 can share the communication
resource since 10M bs + 40M bs + 30M bs 
100M bs.

Definition 3 A constraint function k,l i,j (t) 
 7 k,l C is a function of time representing an
amount of share-restricted resource k,l  that must
be allocated in order to allow action ai,j to be executed as expected.
In order to work with the constraint functions,
two operators are added to the space k,l C
A compound operator
  k,l C  k,l C 7 k,l C,

(1)

which is used to sum the constraints imposed by
two constraint functions. Therefore, the amount
of share-restricted resource k,l  required by actions ai,1 and ai,2 to run simultaneously is evaluated by k,l i,1  k,l i,2 .
A comparison operator
 k,l C  k,l C 7 true, f alse,

2.1.2

The dynamical aspect of real world coupled with
complexity of data analysis of data sources like
cameras, turn the robot into a voracious processor
consumer. In contrast, the more powerful a processor is, the more energy it consumes, decreasing
the energetic autonomy of a robot. Therefore an
efficient use of the processor is essential for any
architecture that will handle task allocation in actions imposing real-time constraints like low-level
controllers or target tracking algorithms.
Thus, the maximum processing power allocated to the MRTA (discounting the time allocated to other processes, e.g. operating system)
defines the max , and the constraint function i,j
for an action ai,j is the required processing power
for that action. The operator      7  for
the processor is defined as the algebraic sum, and
the operator     7 true, f alse is defined
as the less or equal operator.

(2)

is used to check if the sum of constraint functions
exceed the maximum capacity, k,l max , of k,l .
Thus, if k,l i,1  k,l i,2  k,l max is true them
the maximum capacity of k,l  is not reached and
the actions will execute as expected. Additionally,
if an action ai,j is not running, we define k,l i,j 
k,l
r,s  k,l r,s . Lets define
ni
X
 k,l i,j , k,l i,1  k,l i,2  ...  k,l i,ni , (3)
j1

as the constraint imposed by all running actions in
robot ri over share-restricted resource k,l . Similarly, define
m
X
 k,l i,j , k,l 1,j  k,l 2,j  ...  k,l m,j , (4)

2.1.3

i1

(5)

i1 j1

can be interpreted as Does the sum of the constraints imposed by all active actions exceed the
maximum capacity of share-restricted resource
k,l
 ? Next we define operators  and  for
the most common share-restricted resources in
robotics.
2.1.1

Allowed c-space

In robotics, one of the most important sharerestricted resources is the robot configuration
space. Regardless to an action, the commands
sent to the actuators may cause one of three effects (i) make the robot advance toward its goal
(ii) be irrelevant to the execution of that action
or (iii) be harmful and provide a negative impact
to the completion of the action. For instance, an
algorithm following the negative flow of an artificial potential field classifies all configurations with
value less than the current potential as admissible
(first case), the equipotential curve as irrelevant
(second case) and the remaining area as harmful
(last case).
Since the constraint function is a function of
time, the allowed c-space is evaluated only to the
next time frame. If, moreover, we assume that
the robot will not change its velocity between two
interval of time, than each velocity that the robot
assume will lead to a unique configuration in the

as the composition of the constraint functions imposed by all robots over share-restricted resource
k,l
. Therefore,
ni
m X
X
  k,l i,j  k,l max

Processor

Communication link

The constraint function i,j is the bandwidth required by ai,j to execute properly. For instance,
data inputs of ai,j received from a different robot

5000

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

next frame. Thus, we can easily adjust the output
of a controller and include a disturbance around
the optimal output, producing a set of allowed velocities, and map those velocities into the allowed
c-space.
The constraints of all actions can then be
joined into the configuration space (Fig. 1) and, if
their intersections is not the empty set, it means
that there exist a set of motor commands satisfying both actions. Therefore, we have that  , ,
,6 and max , .

(a)

1,1 

1,1

(b)

1,1 

1,2

(c)

1,1 

1,1 

1,1 

We assume that all robots are truthful and their
bids reflect the real payback. The main different between our approach and the others is reflected in the right side of the figure. This part
addresses the application of the constraint functions and acts as a secondary requirement used
to determine if an action is allowed to start. Also,
when a winner coalition is defined, its constituting
actions allocate the required amount described by
its constraint functions.
It is assumed that two tasks cannot be consecutively inserted and a minimum interval of t is
obeyed. All actions able to accomplish the task
goal checks if it can be activated (action a1,1 .
First, a1,1 applies its constraint function for all
required share-restricted resources in the system.
If all constraint functions can allocate the required
resources, the action tries to connect all its inputs.
If an input is not connected, it sends a query and
all actions able to produce the required information checks to see if they can be activated. If they
can, they send a cost message (actions a1,2 and
am,nm )
Each different team of actions that can be
formed to accomplish the given task sends a bid
to the auctioneer, which is responsible to chose a
winner and announce it.
The bidding algorithm which is running in every action is described in Alg. 1 Notice that, since
all robots are running the same algorithm, if a
message fails to reach its desired destination, the
only impact is that a possible coalition will not
participate in the bidding process.

1,2

Figure 1 In light gray the constraints imposed
by a survey action. In dark gray the constraints
of a controller. The intersection of the areas (in
white) indicates the admissible velocities for both
actions.
In order to check if actions ai,1 , ai,2 and ai,3
can be executed concurrently, we test if i,1 i,2 
i,3 6  is true.
An important aspect is that not only actions
producing velocity commands, like an obstacle
avoider, can impose constraints over the allowed cspace, but actions reading data from sensors can
also restrict it. Suppose an action querying the
obstacles in a given region (Fig. 2). In order to
properly keep the data connection, the robot must
stay at a maximum distance from the region (assuming an omnidirectional sensor). Therefore, the
sensor reader action will constraints the robot position and keep it inside the region queried by the
consumer action.

3

EXPERIMENTAL RESULTS

The experiments were conducted on a Intel Core i7
processor running at 2.67Ghz and 12Gb of RAM
memory. All programs were run in a Ubuntu
version 9.04 and written in C++ language. The
playerstage framework (Collett et al., 2005) was
used to simulate an environment with several
robots and validate the proposed protocol. Each
robot is controlled by an independent client, which
is responsible for listening for new tasks, bid for
new auctions, query for new data, and execute the
assigned tasks. All communication among clients
(i.e. robots) is implemented using the TCP protocol.
The allowed c-space is limited to a window
of 0.1  0.1 meter in both x and y directions,
with the current robot position at the center of
the window.
The surveillance task was defined as a set of
waypoints around a 2  2 meters region that a
robot must visit at least once. The constraint
function for the survey action uses a greedy algorithm, trying to visit the nearest waypoint at
each instant. It will visit a list of waypoints as described in Algorithm 2, which does not mark any

(a) An omnidirec- (b) A path follow- (c) Sum of both
tional sensor.
ing action.
constraints.

Figure 2 A sensor can also constraint the allowed
c-space of a robot.
The coalition formation protocol starts when
a new task is inserted in the system by an external
agent (Figure 3). A bidding process based on the
Contract Net Protocol (Smith, 1980) is triggered
and a new auction is broadcasted to all actions.

5001

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

Figure 3 Coalition formation protocol based on constraint functions. Typically, MRTA protocols only
consider the left side of the figure (fulfillment of the inputs) and do not address other requisites to start
an action.
configuration as not allowed, but assign a different
weight to each one, used to determine where the
robot will be driven in the next time frame.

Algorithm 1 Bidding algorithm in robot
ri
Input a task tk
C
foreach ai,j  ri that can accomplish the
task tk do
for l  1 to m do
for k  1 to sl do
if
np
m X
X
k,l
i,j    k,l p,q  k,l max

Algorithm 2 Constraint function for survey action
Input waypoint
Output Constrained configuration space
dist0  distance from current origin to
nearest waypoint
forall poses in the configuration space do
dist  distance from pose to nearest
waypoint
set pose with height k(1  distdist0 )

p1 q1

then
deallocate all pre-allocated
resources
exit
else
pre-allocate k,l  by the
amount k,l i,j

We tested this constraint function for three
different scenarios, each one varying the number
of robots from 1 to 16. In scenario A, all robots
are equally spread around the surveyed area. In
scenario B all robots are groupped in the bottom
corner at right, and in scenario C the robots are
randonly placed. For each scenario we run 10 simulations, an evaluate the performance by multiplying the mean execution time by the number of
robots participating in the experiment.
The task state is shared by all robots, and
thus, when a waypoint is visited by a robot this
information is broadcasted to all robots, which updates its internal task state. If two or more robots
try to visit the same waypoint, it is allocated to
the robot that tried to visit it first.
Three sample trajectories are shown in Figure 4, for 4 robots in scenario A, 8 robots in scenario B and 16 robots in scenario C.
The performance for scenarios A (Figure 5(a)
and C (Figure 5(c)) lean to stabilize, while the
performance for scenario B (Figure 5(c)) decreases
systematically.

if inputs of ai,j are disconnected then
send a new query
wait for the query answer
forall query answers do
c  coalitions in the query
answer
CCc
else
C  current coalition
forall coalitions in C do
evaluate a bid for the coalition
send it to the auctioneer
wait for the auction timeout
if is not the winner then
deallocate all pre-allocated resources

5002

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

8

1

robot 1
robot 2
robot 3
robot 4

0.8
performance

6
4

Y m

2

performance

0.6
0.4
0.2

0

0
1 2 3

2

4 5 6

4

(a) Scenario A.

6
8
8

6

4

2

0

2

4

6

1

8

performance

X m

performance

0.8

(a) 4 robots in scenario A. Minimum
collisions.
8

robot 1
robot 2
robot 3
robot 4
robot 5
robot 6
robot 7
robot 8

6
4
2

Y m

7 8 9 10 11 12 13 14 15 16
robots

0.6
0.4
0.2
0
1 2 3

4 5 6

7 8 9 10 11 12 13 14 15 16
robots

(b) Scenario B.

0

1
2

performance

0.8
4
6
8

5

0

5

10

0
1 2 3

(b) 8 robots in scenario B. Robots have
to travel a long distance to get to left
side.

4

Y m

2
0
2
4
6
8

5

0

5

4 5 6

7 8 9 10 11 12 13 14 15 16
robots

(c) Scenario C.

robot 1
robot 2
robot 3
robot 4
robot 5
robot 6
robot 7
robot 8
robot 9
robot 10
robot 11
robot 12
robot 13
robot 14
robot 15
robot 16

6

performance

0.4
0.2

X m

8

0.6

Figure 5 Performance for the cooperative transportation task. Depending of the scenario, the
performance can decrease systematically or stabilizes.
constraint function can be applied to any sensor
having a conical field of view, like cameras, sonar,
among others.
Finally, the list of obstacles is collected by the
obstacle avoider action which constraint function
tries to prevent the robot to move closer to the obstacles. Notice that the function tries to prioritize
poses close to the current position, i.e. minimize
the robot movements.

10

X m

(c) 16 robots in scenario C. Random distribution favors the probability to find a
robot near each waypoint.

Figure 4 Trajectories performed by the robots for
the surveillance task.
Sensor sharing is transparently handled by
CoMutaR system, which automatically configure
what data will be shared among the robots. The
scenario used to test such situation is composed
by two robots, the first possessing no obstacle sensor but having the capability to visit several waypoints. A second robot is equipped with a laser
range-finder and will help the first robot by detecting the obstacles and sending this information
to it.
The first robot periodically update the region
to be queried, which is used by the second robot
to calculate its constraint function, based on Algorithm 3.
The idea is to make the robot move clockwise
when the queried region approaches the left border
of the sensor field of view, counterclockwise if it
approaches the right border, and move forward if
the region is too distant. Notice that the same

Figure 6 The coalitions formed during the experiments. One coalition is assigned to the surveillance task, and another to the obstacle avoidance
task, which uses the sensor in the other robot.
Although obstacle avoidance is normally defined as a sub-part of a tasks solution, we choose
to consider it as another task that must be accomplished concurrently with the remaining tasks.
An obstacle avoider action, which is responsible to
constraint the pose share-restricted resource, was
created to execute this task. The obstacle avoider
action requires a list of obstacles as input, that can
be produced by a obstacle detector action, which,
in turn, requires range-data produced by a laser

5003

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

6

4

Y m

2

0

2

4
robot 1

Algorithm 3 Constraint function for sensor reader action
Input queried region
Output Constrained configuration space
forall poses in the configuration space do
if region is close to right border of the
sensor fov then
set poses making a clockwise
movement as not allowed
if region is close to left border of the
sensor fov then
set poses making a counterclockwise
movement as not allowed
if region is too far away then
set poses moving backward as not
allowed

6
6

robot 2
4

2

0

2

4

6

X m

(a) Scenario for testing (b) Trajectories described
the constraint function im- by the robots during the senposed by sensor actions. sor sharing experiment.
There are two robot and
four circular obstacles.

Figure 7 Experiment used to test the sharing
mechanism of data produced by sensors. A sensorless robot must visit several waypoints without
colliding with the obstacles. The obstacles are
sensed by a second robot, which sends the data
to the first robot.
reader action.
4

CONCLUSION

This paper presented the constraint function concept used to allow the buiding of multi-tasking
robots. Additionally, it is able to provide sensor sharing across different robots. The sharerestricted resources and constraint function concepts enabled us to clearly define when two tasks
can be concurrently executed or when a robot
can form a new coalition. The absence of a
central planner make it particullary well suited
for dynamical environments. Although similar
to schema-based approaches (Parker and Tang,
2006 Vig and Adams, 2006), in our approach, the
sum of motor outputs is replaced by the allowed
c-space share-restricted resource. Moreover, not
only motor schemas are able to interfere in the
next position of the robot but sensors also can.
As part of the ongoing work, we plan to study
the CoMutaR framework in more complex scenarios with real robot validation.

Algorithm 4 Constraint function for obstacle avoider action
Input list of obstacles
Output Constrained configuration space
forall poses in the configuration space do
if pose is inside an obstacle then
set pose as not allowed
if pose is near an obstacle then
dist  distance to the obstacle
set pose with the height
k  distdistmax
else
dist2  distance to the origin
set pose with height
2k(1  dist2dist2max )

Acknowledgments
The authors would like to thank CAPES, CNPq,
and FAPEMIG for their support.
References
Arkin, R. C. (1987). Motor schema based navigation for a mobile robot An approach
to programming by behaviour, Proc. of the
IEEE Intl. Conf. on Robotics and Automation (ICRA), Vol. 4, pp. 264  271.
Chaimowicz, L., Campos, M. F. M. and Kumar,
V. (2002). Dynamic role assignment for coop-

5004

XVIII Congresso Brasileiro de Automática  12 a 16 Setembro 2010, Bonito-MS.

erative robots, Proc. of the IEEE Intl. Conf.
on Robotics and Automation (ICRA), Washington - DC, pp. 292298.

Vig, L. and Adams, J. A. (2007). Coalition formation From software agents to robots, Journal
of Intelligent and Robotic Systems 50 85
118.

Collett, T. H., MacDonald, B. A. and Gerkey,
B. P. (2005). Player 2.0 Toward a practical robot programming framework, Australasian Conference on Robotics and Automation, Sydney, Australia.
Gerkey, B. P. and Mataric, M. J. (2004). A formal analysis and taxonomy of task allocation
in multi-robot systems, The Intl. Journal of
Robotics Research 23(9) 939954.
Jones, E. G., Dias, M. B. and Stentz, A. (2007).
Learning-enhanced market-based task allocation for oversubscribed domains, Proc. of
the IEEE Intl. Conf. on Intelligent Robots
and Systems (IROS), San Diego, CA, USA,
pp. 2308  2313.
Michael, N., Zavlanos, M. M., Kumar, V. and
Pappas, G. J. (2008). Distributed multirobot task assignment and formation control,
Proc. of the IEEE Intl. Conf. on Robotics and
Automation (ICRA), Pasadena, CA, USA,
pp. 128133.
Parker, L. E. (1998). Alliance An architecture for fault tolerant multi-robot cooperation, IEEE Trans. on Robotics and Automation 14(2) 220240.
Parker, L. E. and Tang, F. (2006). Building multirobot coalitions through automated
task solution synthesis, Proc. of the IEEE
94(7) 12891305.
Shehory, O. and Kraus, S. (1998). Methods for
task allocation via agent coalition formation,
Artificial Intelligence 101(1-2) 165200.
Shiroma, P. M. and Campos, M. F. M. (2009).
CoMutaR A framework for multi-robot coordination and task allocation, Proc. of the
IEEE Intl. Conf. on Intelligent Robots and
Systems (IROS). accepted.
Smith, R. G. (1980). The contract net protocol high-level communication and control in
a distributed problem solver, IEEE Transactions on Computers C-29(12) 11041113.
Tang, F. and Saha, S. (2008). An anytime
winner determination algorithm for timeextended multi-robot task allocation, Proceedings of International Conference on Automation, Robotics and Control Systems, Orlando, FL, USA, pp. 123130.
Vig, L. and Adams, J. A. (2006). Multi-robot
coalition formation, IEEE Trans. on Robotics
22(4) 637649.

5005