Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

ALGORITMO PARA VISUALIZAÇÃO DE PROCESSOS DE MANUFATURA BASEADOS NA PNRD
FELIPE S. MOLINA, WESLEY P. MARCOS, ALEXANDRE R. SOUSA, JOSÉ J. P. Z. S. TAVARES
MAPL,Universidade Federal de Uberlândia
Av. João Naves de Ávila 2121 - Campus Santa Mônica - CX 593 - Uberlândia - MG - CEP 38408-100
E-mails felipe16sm@msn.com, wesleypmarcos@gmail.com, alexandresousa@meca.ufu.br,
jean.tavares@mecanica.ufu.br

Abstract The manufacturing processes have become increasingly complex, requiring ever more accurate and real-time
information. The Radio Frequency Identification or RFID has been one of the technologies widely used for this purpose allowing
the storage and retrieval of data on radio frequency identification tags. The Petri Net Inside RFID Database or PNRD is a formal
data structure to identify and update product state in real-time process execution, allowing automatic discovery of unexpected
events during tag data capture. The PNRD approach was implemented in a software in Java called DEMIS  Distributed
Environment Manufacturing Information System. This paper presents a new algorithm to graphically present product state
during PNRD data capture to reach Real Time Item Monitoring or ReTIM.
Keywords Radio frequency,, Petri net, ReTIM, DEMIS. RFID.
Resumo Os processos de manufatura tem se tornado cada vez mais complexos, necessitando cada dia mais de uma
informação mais apurada e em tempo_real. A identificação_por_radiofrequência tem sido um dos métodos amplamente utilizados
para esse objetivo, pois permite o armazenamento e obtenção de dados através das etiquetas de identificação por
radiofrequência. A Rede de Petri Inserida em Base de Dados RFID ou PNRD é uma estrutura de dados formal para identificar e
atualizar o estado do produto em tempo_real, propiciando a descoberta de eventos não desejados durante a captura dos dados da
etiqueta. A abordagem PNRD foi implementada num software em Java chamado DEMIS  Sistema de Informação da
Manufatura em Ambiente Distribuído. Este artigo apresenta um novo algoritmo para representar graficamente o estado do
produto durante a captura dos dados PNRD de forma a alcançar o monitoramento de item em tempo_real ou ReTIM.
Palavras-chave . ReTIM, DEMIS, RFID.

1

Introdução

Sistemas de manufatura têm se tornado cada vez
mais complexos, necessitando obter informação de
forma apurada e em tempo_real.
Dentro deste contexto, modelos baseados em
Redes de Petri têm sido desenvolvidos (Murata,
1995 Smata, 2011). Estes modelos envolvem desde
estudo de comportamento de sistemas e uma
proposição de modelagem_matemática (Murata,
1995)  detecção de conflitos presentes nos sistemas
para melhorar seu desempenho (Blackhurst, 2008).
Esse trabalho é uma continuidade dos trabalhos
anteriores para desenvolver um software de
monitoramento de itens em tempo_real  Real Time
Item Monitoring  ReTIM, baseado em PNRD 
Petri Net Inside RFID Database, ou Rede de Petri
Inserida em um banco_de_dados de identificação por
radiofrequência (Tavares e Pereira, 2011). Este
software
visa
ser
capaz
de
apresentar
automaticamente o estado do processo de manufatura
uma planta através da visualização da rede de Petri e
atualização
das
marcações,
permitindo
o
monitoramento em tempo_real que possibilita a
realização de análises como detecção de gargalos,
levantamento de indicadores de processo e falhas de
maneira remota e transparente. O ReTIM se baseia
em dados originados do software DEMIS  Sistema
de Informação da Manufatura em Ambiente
Distribuído (Tavares e Silva, 2008).
A estrutura deste trabalho consiste em sete
seções. Na Seção 2 será feita uma discussão rápida

ISBN 978-85-8001-069-5

sobre
tecnologias
de
identificação
por
radiofrequência. Em seguida, na Seção 3, será feita
uma breve revisão sobre redes de Petri. Na Seção 4,
então, os conceitos de PNRD serão expostos. Na
Seção 5 o software DEMIS será apresentado. Na
Seção 6 será abordado o ReTIM, detalhando o
algoritmo para visualização de processos de
manufatura baseado na PNRD. A conclusão será
consolidada na seção 7.
2 Identificação por radiofrequência (RFID)
A identificação_por_radiofrequência, ou RFID, se
baseia na leitura de objetos chamados tags. Estes
objetos possuem certa quantidade de dados
armazenados que servem para a identificação do
objeto ao qual estão associados. A aquisição_de_dados
é realizada por um leitor, em conjunto com uma ou
mais antenas, e as informações adquiridas são
processadas posteriormente por uma aplicação
externa (Mehrjerdi, 2009). Atualmente, esta
tecnologia é amplamente aplicada em produtos,
animais ou até pessoas com a finalidade de
identificação e rastreio utilizando ondas de rádio
(Zhang, 2010). Chips inteligentes, com uma memória
de leitura e escrita que pode impedir o acesso não
autorizado, têm sido utilizados em muitos recipientes,
embalagens, cartões de identificação, livros ou DVD.
Com o progresso da tecnologia RFID e a
redução nos custos de fabricação, a sua aplicação
está se tornando cada vez mais popular em muitos

2987

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

campos. A RFID pode ser usada na manufatura para
reduzir os custos operacionais através da redução dos
custos de trabalho, reclamações e retornos de
mercadorias (Yahia, 2009).

conforme está mostrado na figuras 4 e na tabela 1 a
seguir. A Tabela 1 representa a matriz incidência
correspondente  Figura 4.

3 Redes de Petri
Rede de Petri foi desenvolvida por Carl Adam
Petri em 1962. É uma técnica de modelagem que
permite a representação de sistemas, utilizando como
alicerce uma forte base matemática (Maciel, 1996).
Essa técnica possui a particularidade de permitir a
modelagem_de_sistemas paralelos, concorrentes,
assíncronos e não determinísticos.
A representação gráfica de uma rede de Petri
básica é formada por dois componentes um ativo
chamado de transição (barra) e outro passivo
denominado lugar (círculo). Os lugares equivalem s
variáveis de estado e as transições correspondem s
ações realizadas pelo sistema (Maciel, 1996). Esses
dois componentes são ligados entre si através de
arcos orientados. Os arcos podem ser únicos ou
múltiplos. A figura 1 mostra os elementos básicos de
um grafo associado s redes de Petri.

Figura 2. Rede Marcada
(Maciel, 1996).



1
1
1
A T 0
0
0
0

0
1
0
1
0
0
0

0
0
1
0
1
0
0

0
0
1
0
0
1
0

0
0
0
0
1
1
1



Figura 3. Representação gráfica e matemática de um processo em
uma rede de Petri (Tavares e Pereira, 2011).

Figura 1. Grafo e elementos básicos da rede de Petri
(Maciel, 1996).

Marcações (tokens) são informações atribuídas
aos lugares, para representar a situação (estado) da
rede em um determinado momento. Define-se uma
rede de Petri marcada pela dupla RM  (R, M0), onde
R é a estrutura da rede e M0 a marcação inicial
(Maciel, 1996). Uma rede de Petri é considerada
elementar quando apenas uma marcação por estado é
permitido.
Assim, para simular o comportamento dinâmico
dos sistemas, a marcação da rede de Petri é
modificada a cada ação realizada (transição
disparada). A figura 2 (Maciel, 1996) ilustra uma
rede marcada.
Para aplicações computacionais, uma rede de
Petri pode ser representada matematicamente por
uma matriz incidente AT, conforme exemplificado na
figura 3 (Tavares e Pereira, 2011). Este formalismo
matemático permite a transformação de processos de
um sistema modelado em rotinas computacionais que
auxiliam a análise do processo produtivo.
Na matriz incidência cada linha está associada a
um estado e cada coluna, a uma transição. Um campo
da matriz preenchido por 0 significa que não há
ligação entre o estado associado  linha e a transição
associada  coluna. Se o campo estiver preenchido
por -1 significa que há um arco indo do estado para a
transição. E, caso esteja preenchido por 1, significa
que há um arco indo da transição para o estado,

ISBN 978-85-8001-069-5

Tabela 1. Representação de uma matriz incidência como uma
tabela referente a estados e transições

Estados
P1
P2
P3
P4

Transição T1
-1
1
1
-1

Transição T2
0
-1
-1
1

Figura 4. Representação da rede de Petri relativa  matriz
incidência da Tabela 1

Com a matriz incidência AT, de dimensões n x m,
em mãos, pode-se então calcular o vetor_de_estados
MK, de n estados, cujo elemento na posição j denota o
2988

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

número de marcações no estado j após ko disparo em
uma determinada sequencia. Para tal também é
necessário um vetor de disparos uK, que é um vetor
coluna binário de m elementos, onde todos os
elementos são iguais a 0, exceto na posição
correspondente  transição a ser disparada (para
Redes de Petri Elementares). A equação matricial
resultante é dada pela Equação (1).
Mk  Mk-1 + AT uk, k 1, 2,

(1)

buscas em bancos de dados externos. As Figuras 5 e
6 mostram, respectivamente, os diagramas de
sequência de uma abordagem RFID e de uma
abordagem PNRD. Fica evidente que, enquanto o
RFID requer uma busca em banco_de_dados para
verificar uma lista de tags, o PNRD utiliza uma etapa
adicional de captura de dados relativos  matriz
incidente e o vetor de controle, porém não requer uso
de redes externas para avaliação dos estados
esperados dos objetos vinculados s tags lidas
apenas uma lista de vetor de disparos armazenada
previamente (Tavares et Saraiva, 2010).

4 Conceitos de PNRD
A PNRD  Petri Net Inside RFID Database,
Rede de Petri Inserida em Base de Dados RFID,
aplica o uso da leitura de tags s redes de Petri
elementares. Isto se dá graças  capacidade de tais
tags transportarem dados que podem ser
interpretados como a matriz incidência e o vetor de
estados de uma rede de Petri elementar para permitir
o monitoramento de um processo. Desta forma, até
processos flexíveis podem ser armazenados, dando
ao objeto capacidade de seguir diferentes sequências
de processos, de acordo com uma rede de Petri
correspondente.
Conforme Tavares e Saraiva (2011) o
funcionamento
da
PNRD
se
baseia
no
armazenamento da matriz de incidência AT e o vetor
de estados MK na memória da tag. O software
responsável pelo processamento dos dados recebe
antecipadamente o vetor de controle uK
correspondente as antenas e leitores existentes. Com
todas as informações disponibilizadas, a abordagem
PNRD é capaz de calcular o próximo vetor de
estados MK+1 através da Equação (1).
O vetor_de_estados obtido então é avaliado. Se o
resultado for um vetor contendo apenas valores nulos
e unitários, a rede de Petri continua elementar, de
acordo com fluxo esperado do processo, e MK+1 pode
ser gravado na memória da tag como o novo vetor de
estados, e então o processo segue para o próximo
passo. Caso contrário a rede de Petri não é mais
elementar, indicando uma anormalidade no
seguimento esperado do processo, o que pode gerar
um sinal de alerta em tempo_real.
Um dos possíveis problemas no decorrer da
execução é o aparecimento de conflitos. Conflitos
ocorrem quando uma mesma antena leitor está
associada a mais de uma transição relativa a um vetor
de estados. A resolução de tais cenários deve ser feita
por um algoritmo de decisão para escolher a
transição a ser disparada através de dados adicionais
e uma análise de caso específica.
Como cada tag possui dados do processo próprio
do objeto a qual está associada e o seu vetor de
estados contém informações sobre as marcações, é
possível utilizar tais dados como embasamento de
uma visualização gráfica do andamento do processo.
Fazendo uma comparação entre uma abordagem
baseada em PNRD e uma abordagem mais
tradicional baseada em RFID, podemos destacar que
a primeira constitui um sistema já ciente dos
processos de baixo nível, reduzindo a necessidade de

ISBN 978-85-8001-069-5

Figura 5. Diagrama de sequência de uma abordagem RFID
(Tavares e Pereira, 2011).

Figura 6. Diagrama de sequência de uma abordagem PNRD
(Tavares e Pereira, 2011).

5 DEMIS
O DEMIS  Distributed Environment
Manufacturing Information System ou Sistema de
Informações de Manufatura em Ambientes
Distribuidos  é uma implementação de PNRD em
software baseado na tecnologia Java como prova
conceitual da aplicabilidade desta em sistemas reais.
O DEMIS utiliza conceitos de TEPN  Tag Extended
Petri Nets ou Redes de Petri Estendidas para Tags 
para a associação entre transições da rede de Petri
com as antenas de leitura de radiofrequência
(Tavares e SanPedro, 2009).
O software foi arquitetado com dois grandes
módulos o módulo de núcleo e o de interface.
Resumidamente, o módulo de interface é responsável
pela comunicação com os dispositivos relevantes,
como os leitores de radiofrequência e outros

2989

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

equipamentos como CLPs, e a interpretação direta
dos dados recebidos já o módulo de núcleo é
responsável pelos cálculos, resolução de conflitos, e
configuração e contextualização de PNRD. A figura 7
representa, de maneira simplificada, a arquitetura do
DEMIS.
Há dois arquivos de configuração, denominados
config.xml e context.xml. O primeiro armazena os ips
e portas dos leitores, em conjunto com a quantidade
de antenas de cada um, no context.xml contém a lista
de vetores de disparos por tagid, estado da tag e
antenaid.

Figura 8. Exemplo de monitoramento de um item pelo ReTIM.

Sendo assim, a visualização da rede de Petri se
inicia com os valores de uma matriz incidência e
vetor_de_estados. A matriz armazenada na tag é uma
cadeia de caracteres representando os dados como
binários, codificada de forma a permitir a
reconstituição da estrutura de linhas e colunas
original.
6.1 Visão geral do código
O código atual do ReTIM está centrado em duas
tarefas a criação e posicionamento automático dos
elementos para uma boa visualização e a
interpretação dos dados recebidos para decodificar a
matriz incidência e o vetor_de_estados. Esta
arquitetura pode ser representada pelo diagrama de
classes da Figura 9.
Figura 7. Arquitetura simplificada do DEMIS
(Tavares e Pereira, 2011).

6 ReTIM
Figura 9. Diagrama de classes do ReTIM

O ReTIM integra o conceito de RFID e rede de
Petri para monitorar os processos de um determinado
sistema. Assim sendo, cada antena é associada s
respectivas transições da rede de Petri, e cada estado
a uma etapa do processo. Para fazer a identificação
do estado atual do processo foi utilizado um símbolo
para representar uma marcação, como é mostrado na
Figura 8, na qual a marcação está no estado P4.
Originalmente o ReTIM estava integrado como
parte do DEMIS (Tavares e Pereira, 2011). Embora
tal estrutura permitisse acesso mais direto aos dados
modelados e s informações dos vetores de disparo, o
monitoramento só poderia ser realizado de maneira
centralizada. Com uma arquitetura modular, em que o
ReTIM é construído como um aplicativo separado, é
possível monitorar diversos processos de uma única
vez, todavia é necessário gerar uma representação
gráfica diretamente da matriz de incidência
armazenada nas tags.

ISBN 978-85-8001-069-5

6.2 Algoritmo de visualização
O processo de visualização utilizou como base a
biblioteca JGraphX, capaz de exibir grafos e
diagramas. Para a utilização correta da biblioteca, se
fez
necessário
implementar
os
elementos
separadamente (transições e estados). Com este
intuito foi criada uma classe generalizada chamada
Elemento, responsável pelos aspectos básicos de
representação comuns a todos os elementos da rede
de Petri, e a partir desta foram criadas duas
especializações as classes Estado e Transição,
contendo as rotinas específicas de cada tipo de
elemento. A classe Estado também é responsável pela
representação das marcações da rede.
No ReTIM foi utilizado um algoritmo para fazer
o posicionamento dos elementos da rede de Petri a
partir da matriz incidência recebida. O algoritmo
começa com o estabelecimento de um estado inicial

2990

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

P1, que age como ponto de partida. Então um valor é
atribuído a uma variável interna para identificar que
o elemento P1 já foi colocado na tela.
O algoritmo então continua de maneira radial. As
transições que estão em torno de P1 são então
posicionadas ao redor deste e, assim que todas as
transições a que P1 está ligado são processadas, são
colocadas dentro da variável que identifica os
elementos já apresentados. O processamento continua
nessa linha, agora com os estados conectados a cada
transição sendo processados, e assim continuamente
até o término da montagem da rede de Petri.
Foi utilizado um Buffer para guardar as
informações de quais elementos precisam ser
posicionados e a quais elementos eles se conectam. O
Buffer foi definido como uma matriz de n linhas e 3
colunas. A primeira coluna identifica se o elemento
do Buffer é um estado ou uma transição, sendo que o
número 0 representa um Estado e o número 1 uma
Transição. A segunda coluna identifica qual transição
ou estado está no Buffer identificando por um número
inteiro relativo  posição. A terceira coluna identifica
a orientação do próximo elemento a ser desenhado
(se ele será desenhado na horizontal ou vertical),
sendo que o número 0 representa desenho na
horizontal e o número 1 representa desenho na
vertical.
Um Buffer vazio será representado por uma linha
preenchida por -1. A princípio o Buffer é inicializado
com a primeira linha preenchida por 0 em todas as
colunas, representando o estado P1. O primeiro
elemento de transição ligado a P1 será, então,
posicionado na horizontal, conforme está exposto na
figura 10.

Figura 10. Representação esquemática do Buffer

A atual interface do ReTIM dá a liberdade de
movimentar cada elemento mostrado na figura de
forma a melhorar a visualização caso o algoritmo de
posicionamento não apresente resultados satisfatórios
para uma rede de Petri específica. Uma combinação
mista entre realimentação e ramificação também é
possível como pode ser verificado na figura 7,
mostrada anteriormente.

6.3 Decodificação dos dados recebidos
O ReTIM é capaz de interpretar a matriz
incidência codificada como uma cadeia de caracteres
tanto em binário quanto em hexadecimal (caso lido
em hexadecimal, o ReTIM transforma para binário
antes da análise). Realizada a leitura, ele exibe a rede
de Petri informando também a posição da marcação.
É permitida a representação de uma rede de Petri
tanto com ramificações, como uma rede circular com
realimentação. Abaixo segue descrição do algoritmo
desenvolvido.
Variáveis
String Matrizinc String Relativa a matriz incidência
Int M Matriz incidência
Estado ListaEstado Lista onde serão guardados os dados de
todos os estados desenhados. (Ex. Localização no quadro)
Transicao ListaTransicao Lista onde serão guardados os
dados de todas as transições desenhadas
Int Buffer Matriz onde serão guardados os elementos
(Estados ou Transições) onde devem ser verificadas as ligações
a serem feitas com eles.
Int LigacaoEncontrada Variável que marcará o próximo
elemento do Buffer a ser analisado
Int ElementoDesenhado Guarda as informações de quais
elementos que já foram desenhados no quadro
Início do algorítmo
Recebe string da matriz incidencia e coloca na variável de string
Matrizinc
Monta a matriz incidencia e guarda na variável M que é uma
matriz de inteiros
Desenha o Estado Inical P1 e marca esse estado como
desanhado em ListaEstado0
Marca o Estado P1 em ElementoDesenhado
Enquanto LigacaoEncontrada00 ! -1
Procura no Buffer o próximo Elemento a ser
desenhado
e
marca
na
variável
LigacaoEncontrada, se não for encontrado
elemento no Buffer será retornado -1 em todas 3
posições
Verifica na matriz todos os elementos ligados ao
elemento encontrado em LigacaoEncontrada
Desenha todos os elementos ligados a
LigacaoEncontrada e marca em ListaEstado ou
ListaTransicao as informações do elemento
desenhado no quadro
Marca os elementos desenhados na variável
ElementoDesenhado
Marca no Buffer esses elementos desenhados, pra
serem analisadas as ligações feitas a eles
FimEnquanto
FimAlgorítmo

É importante entender a relação entre a cadeia de
caracteres da matriz e a própria matriz incidência.
Primeiramente, é lido cada par binário da cadeia até
que seja lido a identificação do fim da primeira linha.
Com isso sabendo também o número de colunas da
matriz. Quanto é identificado o fim da matriz é
possível definir o número de linhas da matriz.
No caso do ReTIM há ainda outra informação
que é lida após esta, que é a informação da posição
da marcação. Na cadeia de caracteres a marcação lida
é indicada pelo número 1 na respectiva posição
relativa ao seu estado, enquanto na posição dos
outros estados está escrito 0, conforme é verificado
na figura 13 a seguir que representa a matriz da
Tabela 1 com o campo da informação da marcação
em amarelo.

Figura 13. Representação da string da matriz com a informação da
marcação

ISBN 978-85-8001-069-5

2991

Anais do XIX Congresso Brasileiro de Automática, CBA 2012.

No caso ilustrado na Figura 13 a marcação está
posicionada no estado P2. A Figura 14 apresenta o
resultado gráfico dessa matriz e identifica o estado
atual.

Figura 14. Representação gráfica automática da rede de Petri pelo
RETIM

7 Conclusão
Através do desenvolvimento deste trabalho,
chegamos em um software que possui a vantagem de
permitir o monitoramento de um processo de um
produto através da leitura da etiqueta com dados
baseados na abordagem PNRD. A separação deste em
um aplicativo distinto permite maior independência
em relação ao DEMIS, abrindo um novo leque de
possibilidades. A interface, preliminarmente, está
satisfatória, permitindo a reorganização manual dos
elementos da rede de Petri quando o algoritmo de
posicionamento automático não apresenta resultados
satisfatórios.
Dentre os avanços a serem feitos podem ser
citados a utilização de várias marcações com
representação numérica (tagid) para casos de
montagem e desmontagem de itens homogêneos e
também fazer uma interface onde cada estado é
identificado por um nome ou desenho específico.
Ainda será elaborada uma interface de comunicação
TCPIP direta com o DEMIS de forma a visualizar os
dados diretamente coletados das tags.
No RETIM trabalha apenas com a visualização
gráfica de uma etiqueta por vez. Logo poderá ser
feito um avanço com a finalidade de monitorar
diversas etiquetas de processos e itens distintos.
Agradecimentos

precursoras a esta, e sem as quais não teria sido
possível realizar esta publicação.
Referências Bibliográficas
Maciel, P.R.M. Lins, R.D. Cunha, P.R.F. (1996).
Introdução s Redes de Petri e Aplicações, 10
Escola de Computação, Campinas.
Mehrjerdi , Y.Z. (2009). "RFID-enabled supply chain
systems with computer simulation", Assembly
Automation, Vol. 29 Iss 2 pp. 174  183.
Murata, T. Jaegeol, Y. (1995). Petri net methods for
reasoning in real-time control systems, 1995
IEEE International Symposium on Circuits and
Systems (ISCAS 95), vol.1, pp.517  520.
Qin, L. Feng, H.  Gang, L. (2010). Supply chain
network optimization of deadlock A model
based on petri net, International Conference on
Logistics Systems and Intelligent Management,
vol.3, pp.1396-1399.
Smata, N. Boudebous, D. Boukachour, J.
Benmansour, S. Tolba, C. (2011). "Production,
supply, and traffic systems A unified modelling
using Petri Nets", 4th International Conference
on Logistics (LOGISTIQUA), pp.405-411
Tavares, J.J.P.Z.S. and Pereira, T.S. (2011). Real
Time Item Monitoring with PNRD, 21st
International
Conference
on
Production
Research Mir, Russia.
Tavares, J.J.P.Z.S and San Pedro, J.A.M. (2009).
Tag Extended Petri Nets, in Proceedings of
20th International Conference on Production
Research,
Shanghai CD ROM.
Tavares, J.J.P.Z.S. and Saraiva, T.A. (2010).
Elementary
Petri Nets inside RFID Database  PNRD,
International Journal of Production Research, 48(9),
pp. 2563  2582.
Tavares, J.J.P.Z.S. and Silva, J.R. (2008). DEMIS
Distributed
Environment
Manufacturing
Information System, In Proceedings of 1st
Simpósio de Pós Doutorandos da USP, São
Paulo.
Zimerman,
M.
(2011).
Radio
frequency
identification (RFID) time to take another look,
OCLC Systems  Services, vol. 27 Iss 2 pp.
146  154.
Zhang, Y.H. (2010) RFID Integration Reengineering
of
Supply
Chain,
Third
International Symposium on Information Science
and Engineering.

Os autores agradecem a Rodrigo Nogueira
Cardoso, João Paulo da Silva Fonseca, Heitor Cunha
Carvalho, William Henrique Pereira Guimarães e
Guilherme Pacheco e Silva pela colaboração
oferecida durante o desenvolvimento deste trabalho.
Também agradecem ao Prof. Dr. Marcus Antônio
Duarte  FEMEC UFU  pelo apoio e ao prof. Dr.
José Reinaldo Silva EPUSP, cujas pesquisas foram

ISBN 978-85-8001-069-5

2992